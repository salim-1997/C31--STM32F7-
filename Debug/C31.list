
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e3c  08017bd4  08017bd4  00027bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa10  0801aa10  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa10  0801aa10  0002aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa18  0801aa18  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa18  0801aa18  0002aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa1c  0801aa1c  0002aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0801aa20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fc48  200000e8  0801ab08  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001fd30  0801ab08  0003fd30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a22b  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000084ff  00000000  00000000  0007a343  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000033c8  00000000  00000000  00082848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003028  00000000  00000000  00085c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036e55  00000000  00000000  00088c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032841  00000000  00000000  000bfa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012b5bb  00000000  00000000  000f22ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021d889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e4bc  00000000  00000000  0021d904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017bbc 	.word	0x08017bbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08017bbc 	.word	0x08017bbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <TimeDoctor_START>:




void TimeDoctor_START()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009ce:	f3ef 8310 	mrs	r3, PRIMASK
 80009d2:	607b      	str	r3, [r7, #4]
  return(result);
 80009d4:	687b      	ldr	r3, [r7, #4]
	PROLOG();
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f383 8810 	msr	PRIMASK, r3
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d845      	bhi.n	8000a7c <TimeDoctor_START+0xb4>

	buffer_used += sprintf( buffer+buffer_used, "SPEED %lu\r\n", TD_GET_TICK_FREQ() );
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <TimeDoctor_START+0xcc>)
 80009f8:	18d0      	adds	r0, r2, r3
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <TimeDoctor_START+0xd0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4926      	ldr	r1, [pc, #152]	; (8000a9c <TimeDoctor_START+0xd4>)
 8000a02:	f015 ff47 	bl	8016894 <siprintf>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a10:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "MEMSPEED %lu\r\n", TD_GET_TICK_FREQ() );
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a1a:	18d0      	adds	r0, r2, r3
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <TimeDoctor_START+0xd8>)
 8000a24:	f015 ff36 	bl	8016894 <siprintf>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a32:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "TIME %lu\r\n", TD_GET_TICK_FREQ() );
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a3c:	18d0      	adds	r0, r2, r3
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <TimeDoctor_START+0xdc>)
 8000a46:	f015 ff25 	bl	8016894 <siprintf>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a54:	6013      	str	r3, [r2, #0]

	TD_INIT_TICK();
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	60d3      	str	r3, [r2, #12]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <TimeDoctor_START+0xe8>)
 8000a66:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20009e40 	.word	0x20009e40
 8000a94:	20009e44 	.word	0x20009e44
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08017bd4 	.word	0x08017bd4
 8000aa0:	08017be0 	.word	0x08017be0
 8000aa4:	08017bf0 	.word	0x08017bf0
 8000aa8:	e000edf0 	.word	0xe000edf0
 8000aac:	e0001000 	.word	0xe0001000
 8000ab0:	c5acce55 	.word	0xc5acce55

08000ab4 <TimeDoctor_STOP>:

void TimeDoctor_STOP()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aba:	f3ef 8310 	mrs	r3, PRIMASK
 8000abe:	603b      	str	r3, [r7, #0]
  return(result);
 8000ac0:	683b      	ldr	r3, [r7, #0]
	PROLOG0();
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f383 8810 	msr	PRIMASK, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TimeDoctor_SAVE>:

void TimeDoctor_SAVE( int(*putchar_function)(int) )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	for( int i=0; i<buffer_used; ++i ) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00a      	b.n	8000b08 <TimeDoctor_SAVE+0x24>
		putchar_function(buffer[i]);
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <TimeDoctor_SAVE+0x50>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4610      	mov	r0, r2
 8000b00:	4798      	blx	r3
	for( int i=0; i<buffer_used; ++i ) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <TimeDoctor_SAVE+0x54>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbef      	blt.n	8000af2 <TimeDoctor_SAVE+0xe>
	}
	putchar_function('E');
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2045      	movs	r0, #69	; 0x45
 8000b16:	4798      	blx	r3
	putchar_function('N');
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	204e      	movs	r0, #78	; 0x4e
 8000b1c:	4798      	blx	r3
	putchar_function('D');
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2044      	movs	r0, #68	; 0x44
 8000b22:	4798      	blx	r3
	putchar_function('\n');
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	200a      	movs	r0, #10
 8000b28:	4798      	blx	r3
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20009e44 	.word	0x20009e44
 8000b38:	20009e40 	.word	0x20009e40

08000b3c <TimeDoctor_CREATE>:


/////////////////////// trace functions for task //////////////////////////////////////

void TimeDoctor_CREATE(  uint32_t uxTaskNumber, char* taskName )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b46:	f3ef 8211 	mrs	r2, BASEPRI
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	b672      	cpsid	i
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	b662      	cpsie	i
 8000b5e:	613a      	str	r2, [r7, #16]
 8000b60:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b62:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d820      	bhi.n	8000bb6 <TimeDoctor_CREATE+0x7a>

	buffer_used += sprintf( buffer+buffer_used, "CRE 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK());
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b7c:	18d0      	adds	r0, r2, r3
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <TimeDoctor_CREATE+0x94>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <TimeDoctor_CREATE+0x98>)
 8000b86:	f015 fe85 	bl	8016894 <siprintf>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 0 %lu %s\r\n", uxTaskNumber, taskName );
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b9e:	18d0      	adds	r0, r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <TimeDoctor_CREATE+0x9c>)
 8000ba6:	f015 fe75 	bl	8016894 <siprintf>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bb4:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f383 8811 	msr	BASEPRI, r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20009e40 	.word	0x20009e40
 8000bcc:	20009e44 	.word	0x20009e44
 8000bd0:	e0001000 	.word	0xe0001000
 8000bd4:	08017c7c 	.word	0x08017c7c
 8000bd8:	08017c8c 	.word	0x08017c8c

08000bdc <TimeDoctor_TASK_SWITCHED_IN>:

void TimeDoctor_TASK_SWITCHED_IN( uint32_t uxTaskNumber )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000be4:	f3ef 8211 	mrs	r2, BASEPRI
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	b672      	cpsid	i
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	b662      	cpsie	i
 8000bfc:	613a      	str	r2, [r7, #16]
 8000bfe:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c00:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d810      	bhi.n	8000c34 <TimeDoctor_TASK_SWITCHED_IN+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STA 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <TimeDoctor_TASK_SWITCHED_IN+0x70>)
 8000c1a:	18d0      	adds	r0, r2, r3
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <TimeDoctor_TASK_SWITCHED_IN+0x74>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <TimeDoctor_TASK_SWITCHED_IN+0x78>)
 8000c24:	f015 fe36 	bl	8016894 <siprintf>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c32:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20009e40 	.word	0x20009e40
 8000c4c:	20009e44 	.word	0x20009e44
 8000c50:	e0001000 	.word	0xe0001000
 8000c54:	08017c9c 	.word	0x08017c9c

08000c58 <TimeDoctor_TASK_SWITCHED_OUT>:

void TimeDoctor_TASK_SWITCHED_OUT(uint32_t uxTaskNumber )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000c60:	f3ef 8211 	mrs	r2, BASEPRI
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	b672      	cpsid	i
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	b662      	cpsie	i
 8000c78:	613a      	str	r2, [r7, #16]
 8000c7a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c7c:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d810      	bhi.n	8000cb0 <TimeDoctor_TASK_SWITCHED_OUT+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <TimeDoctor_TASK_SWITCHED_OUT+0x70>)
 8000c96:	18d0      	adds	r0, r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <TimeDoctor_TASK_SWITCHED_OUT+0x74>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <TimeDoctor_TASK_SWITCHED_OUT+0x78>)
 8000ca0:	f015 fdf8 	bl	8016894 <siprintf>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000cae:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f383 8811 	msr	BASEPRI, r3
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20009e40 	.word	0x20009e40
 8000cc8:	20009e44 	.word	0x20009e44
 8000ccc:	e0001000 	.word	0xe0001000
 8000cd0:	08017cac 	.word	0x08017cac

08000cd4 <TimeDoctor_TASK_SUSPEND>:

	EPILOG();
}

void TimeDoctor_TASK_SUSPEND ( uint32_t uxTaskNumber)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	b672      	cpsid	i
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	b662      	cpsie	i
 8000cf4:	613a      	str	r2, [r7, #16]
 8000cf6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000cf8:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d810      	bhi.n	8000d2c <TimeDoctor_TASK_SUSPEND+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <TimeDoctor_TASK_SUSPEND+0x70>)
 8000d12:	18d0      	adds	r0, r2, r3
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <TimeDoctor_TASK_SUSPEND+0x74>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <TimeDoctor_TASK_SUSPEND+0x78>)
 8000d1c:	f015 fdba 	bl	8016894 <siprintf>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d2a:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f383 8811 	msr	BASEPRI, r3
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20009e40 	.word	0x20009e40
 8000d44:	20009e44 	.word	0x20009e44
 8000d48:	e0001000 	.word	0xe0001000
 8000d4c:	08017cac 	.word	0x08017cac

08000d50 <TimeDoctor_QUEUE_CREATE>:


/////////////////////// trace functions for queue //////////////////////////////////////

void TimeDoctor_QUEUE_CREATE( uint32_t *uxQueueNumber )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000d58:	f3ef 8211 	mrs	r2, BASEPRI
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	b672      	cpsid	i
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	b662      	cpsie	i
 8000d70:	613a      	str	r2, [r7, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000d74:	693b      	ldr	r3, [r7, #16]
	static uint32_t nextQueueNumber = 0;

	PROLOG();
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d818      	bhi.n	8000db8 <TimeDoctor_QUEUE_CREATE+0x68>

	*uxQueueNumber = nextQueueNumber++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d8e:	600a      	str	r2, [r1, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
 	buffer_used += sprintf( buffer+buffer_used, "CRE 3 %lu %lu\r\n", *uxQueueNumber, TD_GET_TICK() );
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <TimeDoctor_QUEUE_CREATE+0x84>)
 8000d9c:	18d0      	adds	r0, r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <TimeDoctor_QUEUE_CREATE+0x88>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <TimeDoctor_QUEUE_CREATE+0x8c>)
 8000da8:	f015 fd74 	bl	8016894 <siprintf>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db6:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f383 8811 	msr	BASEPRI, r3
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20009e40 	.word	0x20009e40
 8000dd0:	20000104 	.word	0x20000104
 8000dd4:	20009e44 	.word	0x20009e44
 8000dd8:	e0001000 	.word	0xe0001000
 8000ddc:	08017ccc 	.word	0x08017ccc

08000de0 <Timedoctor_QUEUE_REGISTRY_ADD>:

void Timedoctor_QUEUE_REGISTRY_ADD( uint32_t uxQueueNumber, const char *pcQueueName )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 3 %lu %s\r\n", uxQueueNumber, pcQueueName );
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <Timedoctor_QUEUE_REGISTRY_ADD+0x38>)
 8000df2:	18d0      	adds	r0, r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <Timedoctor_QUEUE_REGISTRY_ADD+0x3c>)
 8000dfa:	f015 fd4b 	bl	8016894 <siprintf>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20009e40 	.word	0x20009e40
 8000e18:	20009e44 	.word	0x20009e44
 8000e1c:	08017cdc 	.word	0x08017cdc

08000e20 <TimeDoctor_QUEUE_SEND>:

void TimeDoctor_QUEUE_SEND(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	b672      	cpsid	i
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	b662      	cpsie	i
 8000e42:	613a      	str	r2, [r7, #16]
 8000e44:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000e46:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d813      	bhi.n	8000e80 <TimeDoctor_QUEUE_SEND+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <TimeDoctor_QUEUE_SEND+0x78>)
 8000e60:	18d0      	adds	r0, r2, r3
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <TimeDoctor_QUEUE_SEND+0x7c>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2301      	movs	r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <TimeDoctor_QUEUE_SEND+0x80>)
 8000e70:	f015 fd10 	bl	8016894 <siprintf>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e7e:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f383 8811 	msr	BASEPRI, r3
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20009e40 	.word	0x20009e40
 8000e98:	20009e44 	.word	0x20009e44
 8000e9c:	e0001000 	.word	0xe0001000
 8000ea0:	08017cec 	.word	0x08017cec

08000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>:

void TimeDoctor_QUEUE_SEND_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000eae:	f3ef 8211 	mrs	r2, BASEPRI
 8000eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb6:	b672      	cpsid	i
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	b662      	cpsie	i
 8000ec6:	613a      	str	r2, [r7, #16]
 8000ec8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000eca:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d813      	bhi.n	8000f04 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <TimeDoctor_QUEUE_SEND_FROM_ISR+0x78>)
 8000ee4:	18d0      	adds	r0, r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x7c>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x80>)
 8000ef4:	f015 fcce 	bl	8016894 <siprintf>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000f02:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20009e40 	.word	0x20009e40
 8000f1c:	20009e44 	.word	0x20009e44
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	08017cec 	.word	0x08017cec

08000f28 <TimeDoctor_QUEUE_RECEIVE>:

void TimeDoctor_QUEUE_RECEIVE(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting) /*The number of items currently in the queue. */
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000f32:	f3ef 8211 	mrs	r2, BASEPRI
 8000f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3a:	b672      	cpsid	i
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	b662      	cpsie	i
 8000f4a:	613a      	str	r2, [r7, #16]
 8000f4c:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000f4e:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d813      	bhi.n	8000f88 <TimeDoctor_QUEUE_RECEIVE+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <TimeDoctor_QUEUE_RECEIVE+0x78>)
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <TimeDoctor_QUEUE_RECEIVE+0x7c>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <TimeDoctor_QUEUE_RECEIVE+0x80>)
 8000f78:	f015 fc8c 	bl	8016894 <siprintf>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f86:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f383 8811 	msr	BASEPRI, r3
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20009e40 	.word	0x20009e40
 8000fa0:	20009e44 	.word	0x20009e44
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	08017d00 	.word	0x08017d00

08000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>:

void TimeDoctor_QUEUE_RECEIVE_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	b672      	cpsid	i
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	b662      	cpsie	i
 8000fce:	613a      	str	r2, [r7, #16]
 8000fd0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000fd2:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d813      	bhi.n	800100c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x78>)
 8000fec:	18d0      	adds	r0, r2, r3
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x7c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	490c      	ldr	r1, [pc, #48]	; (800102c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x80>)
 8000ffc:	f015 fc4a 	bl	8016894 <siprintf>
 8001000:	4602      	mov	r2, r0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 800100a:	6013      	str	r3, [r2, #0]

	EPILOG();
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f383 8811 	msr	BASEPRI, r3
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20009e40 	.word	0x20009e40
 8001024:	20009e44 	.word	0x20009e44
 8001028:	e0001000 	.word	0xe0001000
 800102c:	08017d00 	.word	0x08017d00

08001030 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
#define AUDIO_IN_SAMPLES_RATE 16000
#define AUDIO_IN_SAMPLES (AUDIO_IN_SAMPLES_RATE/10)
int16_t audio_in_buffer[AUDIO_IN_SAMPLES*2]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[0] , 0 , 0);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>)
 8001074:	f011 fe98 	bl	8012da8 <osMessageQueuePut>
 8001078:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f113 0f03 	cmn.w	r3, #3
 8001080:	d004      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		Error_Handler();
 8001088:	f001 fbaa 	bl	80027e0 <Error_Handler>
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20019b20 	.word	0x20019b20
 8001098:	20019d44 	.word	0x20019d44

0800109c <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[AUDIO_IN_SAMPLES/2] , 0 , 0);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x30>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>)
 80010ac:	f011 fe7c 	bl	8012da8 <osMessageQueuePut>
 80010b0:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f113 0f03 	cmn.w	r3, #3
 80010b8:	d004      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		Error_Handler();
 80010c0:	f001 fb8e 	bl	80027e0 <Error_Handler>
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20019b20 	.word	0x20019b20
 80010d0:	2001a384 	.word	0x2001a384

080010d4 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <AudioRecordingFunction>:
void AudioRecordingFunction(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t ok;
	  ok = BSP_AUDIO_IN_Init(AUDIO_IN_SAMPLES_RATE, 16, 2);
 80010ec:	2202      	movs	r2, #2
 80010ee:	2110      	movs	r1, #16
 80010f0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010f4:	f004 fa43 	bl	800557e <BSP_AUDIO_IN_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <AudioRecordingFunction+0x22>
		  Error_Handler();
 8001102:	f001 fb6d 	bl	80027e0 <Error_Handler>
	  }
	  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 8001106:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <AudioRecordingFunction+0x4c>)
 800110c:	f004 fab6 	bl	800567c <BSP_AUDIO_IN_Record>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <AudioRecordingFunction+0x3a>
	  	  Error_Handler();
 800111a:	f001 fb61 	bl	80027e0 <Error_Handler>
	    }
	  osThreadSuspend(audioRecordingHandle);
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <AudioRecordingFunction+0x50>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f011 fcbe 	bl	8012aa4 <osThreadSuspend>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20019d44 	.word	0x20019d44
 8001134:	2001b6c4 	.word	0x2001b6c4

08001138 <AudioProcessingFunction>:
void AudioProcessingFunction(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	for (;;){
		static int16_t buffer[AUDIO_IN_SAMPLES*2/2];
		osStatus_t status = osMessageQueueGet(audioQueue, &buffer[0], NULL, 1000);
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <AudioProcessingFunction+0xd8>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	2200      	movs	r2, #0
 800114a:	4932      	ldr	r1, [pc, #200]	; (8001214 <AudioProcessingFunction+0xdc>)
 800114c:	f011 fea0 	bl	8012e90 <osMessageQueueGet>
 8001150:	61f8      	str	r0, [r7, #28]
		if(status != osOK){
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <AudioProcessingFunction+0x24>
			Error_Handler();
 8001158:	f001 fb42 	bl	80027e0 <Error_Handler>
		}
		float sum = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i=0 ; i < AUDIO_IN_SAMPLES*2/2 ; ++i){
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	e017      	b.n	8001198 <AudioProcessingFunction+0x60>
			sum += buffer[i]*buffer[i];
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <AudioProcessingFunction+0xdc>)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001170:	4619      	mov	r1, r3
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <AudioProcessingFunction+0xdc>)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800117a:	fb03 f301 	mul.w	r3, r3, r1
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (int i=0 ; i < AUDIO_IN_SAMPLES*2/2 ; ++i){
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	3301      	adds	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800119e:	dbe3      	blt.n	8001168 <AudioProcessingFunction+0x30>
		}
		float moyenne = sum / AUDIO_IN_SAMPLES*2/2;
 80011a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011a4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001218 <AudioProcessingFunction+0xe0>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	edc7 7a06 	vstr	s15, [r7, #24]

		float maxSignal = (1<<15)-1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <AudioProcessingFunction+0xe4>)
 80011be:	617b      	str	r3, [r7, #20]
		float maxMoyenne = maxSignal*maxSignal;
 80011c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	edc7 7a04 	vstr	s15, [r7, #16]

		float dBFS = 10 * log10f(moyenne/maxMoyenne);
 80011d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80011d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011dc:	eeb0 0a66 	vmov.f32	s0, s13
 80011e0:	f016 fb26 	bl	8017830 <log10f>
 80011e4:	eeb0 7a40 	vmov.f32	s14, s0
 80011e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f0:	edc7 7a03 	vstr	s15, [r7, #12]
		printf("dBFS= %4d\n", (int)dBFS);
 80011f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	ee17 1a90 	vmov	r1, s15
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <AudioProcessingFunction+0xe8>)
 8001202:	f015 fb1f 	bl	8016844 <iprintf>
		BSP_LED_Toggle(LED1);
 8001206:	2000      	movs	r0, #0
 8001208:	f003 fe92 	bl	8004f30 <BSP_LED_Toggle>
	for (;;){
 800120c:	e798      	b.n	8001140 <AudioProcessingFunction+0x8>
 800120e:	bf00      	nop
 8001210:	20019b20 	.word	0x20019b20
 8001214:	20000108 	.word	0x20000108
 8001218:	44c80000 	.word	0x44c80000
 800121c:	46fffe00 	.word	0x46fffe00
 8001220:	08017d5c 	.word	0x08017d5c

08001224 <myPutchar>:
	}
}
int myPutchar(int ch)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800122c:	1d39      	adds	r1, r7, #4
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2201      	movs	r2, #1
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <myPutchar+0x20>)
 8001236:	f00d fce7 	bl	800ec08 <HAL_UART_Transmit>
	return ch;
 800123a:	687b      	ldr	r3, [r7, #4]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20019c64 	.word	0x20019c64

08001248 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	TimeDoctor_STOP();
 8001252:	f7ff fc2f 	bl	8000ab4 <TimeDoctor_STOP>
	// save output to UART1
	TimeDoctor_SAVE(&myPutchar);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001258:	f7ff fc44 	bl	8000ae4 <TimeDoctor_SAVE>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08001225 	.word	0x08001225

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <main+0x144>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <main+0x144>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f005 fabe 	bl	80067f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f8ba 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f001 f894 	bl	80023ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8001284:	f000 f974 	bl	8001570 <MX_ADC3_Init>
  MX_CRC_Init();
 8001288:	f000 f9c4 	bl	8001614 <MX_CRC_Init>
  MX_DCMI_Init();
 800128c:	f000 f9e4 	bl	8001658 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001290:	f000 fa16 	bl	80016c0 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001294:	f000 fa46 	bl	8001724 <MX_ETH_Init>
  MX_FMC_Init();
 8001298:	f001 f838 	bl	800230c <MX_FMC_Init>
  MX_I2C1_Init();
 800129c:	f000 fa4a 	bl	8001734 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012a0:	f000 fa88 	bl	80017b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012a4:	f000 fac6 	bl	8001834 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80012a8:	f000 fb7a 	bl	80019a0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80012ac:	f000 fba4 	bl	80019f8 <MX_RTC_Init>
  MX_SAI2_Init();
 80012b0:	f000 fc48 	bl	8001b44 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 80012b4:	f000 fcee 	bl	8001c94 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80012b8:	f000 fd1c 	bl	8001cf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012bc:	f000 fdc6 	bl	8001e4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c0:	f000 fe3a 	bl	8001f38 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012c4:	f000 feb0 	bl	8002028 <MX_TIM5_Init>
  MX_TIM8_Init();
 80012c8:	f000 ff26 	bl	8002118 <MX_TIM8_Init>
  MX_TIM12_Init();
 80012cc:	f000 ff78 	bl	80021c0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80012d0:	f000 ffbc 	bl	800224c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80012d4:	f000 ffea 	bl	80022ac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80012d8:	f004 fb7a 	bl	80059d0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80012dc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80012e0:	2000      	movs	r0, #0
 80012e2:	f004 fc0d 	bl	8005b00 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80012e6:	4832      	ldr	r0, [pc, #200]	; (80013b0 <main+0x148>)
 80012e8:	f004 fccc 	bl	8005c84 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80012ec:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80012f0:	f004 fc66 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80012f4:	482e      	ldr	r0, [pc, #184]	; (80013b0 <main+0x148>)
 80012f6:	f004 fc7b 	bl	8005bf0 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80012fa:	f004 fbed 	bl	8005ad8 <BSP_LCD_GetYSize>
 80012fe:	4603      	mov	r3, r0
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	b299      	uxth	r1, r3
 8001304:	2301      	movs	r3, #1
 8001306:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <main+0x14c>)
 8001308:	2000      	movs	r0, #0
 800130a:	f004 fd27 	bl	8005d5c <BSP_LCD_DisplayStringAt>


  LCD_LOG_Init();
 800130e:	f014 ff6f 	bl	80161f0 <LCD_LOG_Init>
  LCD_LOG_SetHeader("Header");
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <main+0x150>)
 8001314:	f014 ffb6 	bl	8016284 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter("Footer");
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <main+0x154>)
 800131a:	f014 ffef 	bl	80162fc <LCD_LOG_SetFooter>


  TimeDoctor_START();
 800131e:	f7ff fb53 	bl	80009c8 <TimeDoctor_START>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001322:	f011 faaf 	bl	8012884 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 8001326:	4826      	ldr	r0, [pc, #152]	; (80013c0 <main+0x158>)
 8001328:	f011 fc1e 	bl	8012b68 <osMutexNew>
 800132c:	4602      	mov	r2, r0
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x15c>)
 8001330:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <main+0x15c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <main+0xd6>
	  Error_Handler();
 800133a:	f001 fa51 	bl	80027e0 <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  audioQueue = osMessageQueueNew(2, sizeof(audio_in_buffer)/2 , &audioQueue_attributes);
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <main+0x160>)
 8001340:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001344:	2002      	movs	r0, #2
 8001346:	f011 fca9 	bl	8012c9c <osMessageQueueNew>
 800134a:	4602      	mov	r2, r0
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <main+0x164>)
 800134e:	601a      	str	r2, [r3, #0]
  if (audioQueue == NULL){
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <main+0x164>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <main+0xf4>
	  Error_Handler();
 8001358:	f001 fa42 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <main+0x168>)
 800135e:	2100      	movs	r1, #0
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <main+0x16c>)
 8001362:	f011 faf9 	bl	8012958 <osThreadNew>
 8001366:	4602      	mov	r2, r0
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <main+0x170>)
 800136a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  audioRecordingHandle = osThreadNew(&AudioRecordingFunction, NULL, &audioRecording_attributes);
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <main+0x174>)
 800136e:	2100      	movs	r1, #0
 8001370:	481b      	ldr	r0, [pc, #108]	; (80013e0 <main+0x178>)
 8001372:	f011 faf1 	bl	8012958 <osThreadNew>
 8001376:	4602      	mov	r2, r0
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <main+0x17c>)
 800137a:	601a      	str	r2, [r3, #0]
  if (audioRecordingHandle == NULL){
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <main+0x17c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <main+0x120>
	  Error_Handler();
 8001384:	f001 fa2c 	bl	80027e0 <Error_Handler>
  }
  audioProcessingHandle = osThreadNew(&AudioProcessingFunction, NULL, &audioProcessing_attributes);
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <main+0x180>)
 800138a:	2100      	movs	r1, #0
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <main+0x184>)
 800138e:	f011 fae3 	bl	8012958 <osThreadNew>
 8001392:	4602      	mov	r2, r0
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <main+0x188>)
 8001396:	601a      	str	r2, [r3, #0]
  if (audioProcessingHandle == NULL){
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <main+0x188>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <main+0x13c>
	  Error_Handler();
 80013a0:	f001 fa1e 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013a4:	f011 faa2 	bl	80128ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x140>
 80013aa:	bf00      	nop
 80013ac:	e0042000 	.word	0xe0042000
 80013b0:	ff0000ff 	.word	0xff0000ff
 80013b4:	08017d68 	.word	0x08017d68
 80013b8:	08017d78 	.word	0x08017d78
 80013bc:	08017d80 	.word	0x08017d80
 80013c0:	08017e1c 	.word	0x08017e1c
 80013c4:	20019a98 	.word	0x20019a98
 80013c8:	08017e2c 	.word	0x08017e2c
 80013cc:	20019b20 	.word	0x20019b20
 80013d0:	08017db0 	.word	0x08017db0
 80013d4:	080027a9 	.word	0x080027a9
 80013d8:	200198c8 	.word	0x200198c8
 80013dc:	08017dd4 	.word	0x08017dd4
 80013e0:	080010e5 	.word	0x080010e5
 80013e4:	2001b6c4 	.word	0x2001b6c4
 80013e8:	08017df8 	.word	0x08017df8
 80013ec:	08001139 	.word	0x08001139
 80013f0:	20019a9c 	.word	0x20019a9c

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0b4      	sub	sp, #208	; 0xd0
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f015 f96d 	bl	80166e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2284      	movs	r2, #132	; 0x84
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f015 f95e 	bl	80166e2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001426:	f009 ff8f 	bl	800b348 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <SystemClock_Config+0x170>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <SystemClock_Config+0x170>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <SystemClock_Config+0x170>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <SystemClock_Config+0x174>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <SystemClock_Config+0x174>)
 8001448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b46      	ldr	r3, [pc, #280]	; (8001568 <SystemClock_Config+0x174>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800145a:	2309      	movs	r3, #9
 800145c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001474:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800147c:	2319      	movs	r3, #25
 800147e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001482:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001490:	2309      	movs	r3, #9
 8001492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800149a:	4618      	mov	r0, r3
 800149c:	f00a f876 	bl	800b58c <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014a6:	f001 f99b 	bl	80027e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014aa:	f009 ff5d 	bl	800b368 <HAL_PWREx_EnableOverDrive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014b4:	f001 f994 	bl	80027e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80014da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014de:	2106      	movs	r1, #6
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00a faf7 	bl	800bad4 <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80014ec:	f001 f978 	bl	80027e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <SystemClock_Config+0x178>)
 80014f2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001504:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001508:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800150a:	2305      	movs	r3, #5
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001512:	2303      	movs	r3, #3
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001516:	2301      	movs	r3, #1
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800152a:	2300      	movs	r3, #0
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001532:	2300      	movs	r3, #0
 8001534:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001536:	2300      	movs	r3, #0
 8001538:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800153a:	2300      	movs	r3, #0
 800153c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800153e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f00a fcc6 	bl	800bedc <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x166>
  {
    Error_Handler();
 8001556:	f001 f943 	bl	80027e0 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	37d0      	adds	r7, #208	; 0xd0
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000
 800156c:	01314868 	.word	0x01314868

08001570 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_ADC3_Init+0x98>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <MX_ADC3_Init+0x9c>)
 8001586:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_ADC3_Init+0x98>)
 800158a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800158e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_ADC3_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_ADC3_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_ADC3_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_ADC3_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_ADC3_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_ADC3_Init+0x98>)
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <MX_ADC3_Init+0xa0>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_ADC3_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_ADC3_Init+0x98>)
 80015be:	2201      	movs	r2, #1
 80015c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_ADC3_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_ADC3_Init+0x98>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_ADC3_Init+0x98>)
 80015d2:	f005 f961 	bl	8006898 <HAL_ADC_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80015dc:	f001 f900 	bl	80027e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015e0:	2304      	movs	r3, #4
 80015e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_ADC3_Init+0x98>)
 80015f2:	f005 f995 	bl	8006920 <HAL_ADC_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80015fc:	f001 f8f0 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20019bcc 	.word	0x20019bcc
 800160c:	40012200 	.word	0x40012200
 8001610:	0f000001 	.word	0x0f000001

08001614 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_CRC_Init+0x3c>)
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <MX_CRC_Init+0x40>)
 800161c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_CRC_Init+0x3c>)
 8001620:	2200      	movs	r2, #0
 8001622:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_CRC_Init+0x3c>)
 8001626:	2200      	movs	r2, #0
 8001628:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_CRC_Init+0x3c>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_CRC_Init+0x3c>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_CRC_Init+0x3c>)
 8001638:	2201      	movs	r2, #1
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_CRC_Init+0x3c>)
 800163e:	f005 fc95 	bl	8006f6c <HAL_CRC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001648:	f001 f8ca 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20019a74 	.word	0x20019a74
 8001654:	40023000 	.word	0x40023000

08001658 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_DCMI_Init+0x60>)
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <MX_DCMI_Init+0x64>)
 8001660:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_DCMI_Init+0x60>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_DCMI_Init+0x60>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_DCMI_Init+0x60>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_DCMI_Init+0x60>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_DCMI_Init+0x60>)
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_DCMI_Init+0x60>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_DCMI_Init+0x60>)
 80016a6:	f005 fd4b 	bl	8007140 <HAL_DCMI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80016b0:	f001 f896 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20019c14 	.word	0x20019c14
 80016bc:	50050000 	.word	0x50050000

080016c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <MX_DMA2D_Init+0x60>)
 80016c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <MX_DMA2D_Init+0x5c>)
 80016f6:	f006 f971 	bl	80079dc <HAL_DMA2D_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001700:	f001 f86e 	bl	80027e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001704:	2101      	movs	r1, #1
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_DMA2D_Init+0x5c>)
 8001708:	f006 fbd6 	bl	8007eb8 <HAL_DMA2D_ConfigLayer>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001712:	f001 f865 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2001b6c8 	.word	0x2001b6c8
 8001720:	4002b000 	.word	0x4002b000

08001724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */
return;
 8001728:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_I2C1_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <MX_I2C1_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <MX_I2C1_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_I2C1_Init+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C1_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176e:	480e      	ldr	r0, [pc, #56]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001770:	f008 fcc2 	bl	800a0f8 <HAL_I2C_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800177a:	f001 f831 	bl	80027e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177e:	2100      	movs	r1, #0
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001782:	f009 f9d1 	bl	800ab28 <HAL_I2CEx_ConfigAnalogFilter>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800178c:	f001 f828 	bl	80027e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_I2C1_Init+0x74>)
 8001794:	f009 fa13 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179e:	f001 f81f 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20019a28 	.word	0x20019a28
 80017ac:	40005400 	.word	0x40005400
 80017b0:	00c0eaff 	.word	0x00c0eaff

080017b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_I2C3_Init+0x74>)
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <MX_I2C3_Init+0x78>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_I2C3_Init+0x74>)
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <MX_I2C3_Init+0x7c>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_I2C3_Init+0x74>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_I2C3_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_I2C3_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C3_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C3_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_I2C3_Init+0x74>)
 80017f0:	f008 fc82 	bl	800a0f8 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017fa:	f000 fff1 	bl	80027e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <MX_I2C3_Init+0x74>)
 8001802:	f009 f991 	bl	800ab28 <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800180c:	f000 ffe8 	bl	80027e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_I2C3_Init+0x74>)
 8001814:	f009 f9d3 	bl	800abbe <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800181e:	f000 ffdf 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200198cc 	.word	0x200198cc
 800182c:	40005c00 	.word	0x40005c00
 8001830:	00c0eaff 	.word	0x00c0eaff

08001834 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b09a      	sub	sp, #104	; 0x68
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800183a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f014 ff4d 	bl	80166e2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2234      	movs	r2, #52	; 0x34
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f014 ff47 	bl	80166e2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <MX_LTDC_Init+0x164>)
 8001856:	4a51      	ldr	r2, [pc, #324]	; (800199c <MX_LTDC_Init+0x168>)
 8001858:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800185a:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <MX_LTDC_Init+0x164>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <MX_LTDC_Init+0x164>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <MX_LTDC_Init+0x164>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <MX_LTDC_Init+0x164>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <MX_LTDC_Init+0x164>)
 8001874:	2228      	movs	r2, #40	; 0x28
 8001876:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <MX_LTDC_Init+0x164>)
 800187a:	2209      	movs	r2, #9
 800187c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800187e:	4b46      	ldr	r3, [pc, #280]	; (8001998 <MX_LTDC_Init+0x164>)
 8001880:	2235      	movs	r2, #53	; 0x35
 8001882:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <MX_LTDC_Init+0x164>)
 8001886:	220b      	movs	r2, #11
 8001888:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800188a:	4b43      	ldr	r3, [pc, #268]	; (8001998 <MX_LTDC_Init+0x164>)
 800188c:	f240 2215 	movw	r2, #533	; 0x215
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <MX_LTDC_Init+0x164>)
 8001894:	f240 121b 	movw	r2, #283	; 0x11b
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <MX_LTDC_Init+0x164>)
 800189c:	f240 2235 	movw	r2, #565	; 0x235
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <MX_LTDC_Init+0x164>)
 80018a4:	f240 121d 	movw	r2, #285	; 0x11d
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <MX_LTDC_Init+0x164>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <MX_LTDC_Init+0x164>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <MX_LTDC_Init+0x164>)
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018c2:	4835      	ldr	r0, [pc, #212]	; (8001998 <MX_LTDC_Init+0x164>)
 80018c4:	f009 f9c8 	bl	800ac58 <HAL_LTDC_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80018ce:	f000 ff87 	bl	80027e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80018d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80018e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80018e6:	2302      	movs	r3, #2
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80018ea:	23ff      	movs	r3, #255	; 0xff
 80018ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80018f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018f8:	2307      	movs	r3, #7
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80018fc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001900:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001902:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001906:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001908:	f44f 7388 	mov.w	r3, #272	; 0x110
 800190c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001920:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	481b      	ldr	r0, [pc, #108]	; (8001998 <MX_LTDC_Init+0x164>)
 800192a:	f009 fb27 	bl	800af7c <HAL_LTDC_ConfigLayer>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001934:	f000 ff54 	bl	80027e0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001954:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001956:	2305      	movs	r3, #5
 8001958:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	2201      	movs	r2, #1
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_LTDC_Init+0x164>)
 8001980:	f009 fafc 	bl	800af7c <HAL_LTDC_ConfigLayer>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800198a:	f000 ff29 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3768      	adds	r7, #104	; 0x68
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20019b24 	.word	0x20019b24
 800199c:	40016800 	.word	0x40016800

080019a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <MX_QUADSPI_Init+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019be:	2201      	movs	r2, #1
 80019c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_QUADSPI_Init+0x50>)
 80019dc:	f009 fd14 	bl	800b408 <HAL_QSPI_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80019e6:	f000 fefb 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2001b804 	.word	0x2001b804
 80019f4:	a0001000 	.word	0xa0001000

080019f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b092      	sub	sp, #72	; 0x48
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	222c      	movs	r2, #44	; 0x2c
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f014 fe61 	bl	80166e2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a22:	4a47      	ldr	r2, [pc, #284]	; (8001b40 <MX_RTC_Init+0x148>)
 8001a24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a26:	4b45      	ldr	r3, [pc, #276]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a2e:	227f      	movs	r2, #127	; 0x7f
 8001a30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a4a:	483c      	ldr	r0, [pc, #240]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a4c:	f00b f874 	bl	800cb38 <HAL_RTC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a56:	f000 fec3 	bl	80027e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482f      	ldr	r0, [pc, #188]	; (8001b3c <MX_RTC_Init+0x144>)
 8001a7e:	f00b f8d7 	bl	800cc30 <HAL_RTC_SetTime>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a88:	f000 feaa 	bl	80027e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4823      	ldr	r0, [pc, #140]	; (8001b3c <MX_RTC_Init+0x144>)
 8001aae:	f00b f97d 	bl	800cdac <HAL_RTC_SetDate>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001ab8:	f000 fe92 	bl	80027e0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	2201      	movs	r2, #1
 8001af0:	4619      	mov	r1, r3
 8001af2:	4812      	ldr	r0, [pc, #72]	; (8001b3c <MX_RTC_Init+0x144>)
 8001af4:	f00b fa02 	bl	800cefc <HAL_RTC_SetAlarm>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001afe:	f000 fe6f 	bl	80027e0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <MX_RTC_Init+0x144>)
 8001b10:	f00b f9f4 	bl	800cefc <HAL_RTC_SetAlarm>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001b1a:	f000 fe61 	bl	80027e0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	2100      	movs	r1, #0
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_RTC_Init+0x144>)
 8001b24:	f00b fb74 	bl	800d210 <HAL_RTCEx_SetTimeStamp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001b2e:	f000 fe57 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3748      	adds	r7, #72	; 0x48
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20019ce4 	.word	0x20019ce4
 8001b40:	40002800 	.word	0x40002800

08001b44 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b48:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b4a:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <MX_SAI2_Init+0x140>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b6c:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b84:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b86:	4a40      	ldr	r2, [pc, #256]	; (8001c88 <MX_SAI2_Init+0x144>)
 8001b88:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b96:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bd8:	4829      	ldr	r0, [pc, #164]	; (8001c80 <MX_SAI2_Init+0x13c>)
 8001bda:	f00b fb6f 	bl	800d2bc <HAL_SAI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001be4:	f000 fdfc 	bl	80027e0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <MX_SAI2_Init+0x14c>)
 8001bec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c38:	2208      	movs	r2, #8
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_SAI2_Init+0x148>)
 8001c6e:	f00b fb25 	bl	800d2bc <HAL_SAI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c78:	f000 fdb2 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200199a4 	.word	0x200199a4
 8001c84:	40015c04 	.word	0x40015c04
 8001c88:	0002ee00 	.word	0x0002ee00
 8001c8c:	20019844 	.word	0x20019844
 8001c90:	40015c24 	.word	0x40015c24

08001c94 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001c9a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c9e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cde:	f00b fe8d 	bl	800d9fc <HAL_SPDIFRX_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f000 fd7a 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20019958 	.word	0x20019958

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b09a      	sub	sp, #104	; 0x68
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	222c      	movs	r2, #44	; 0x2c
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f014 fcd7 	bl	80166e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d36:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <MX_TIM1_Init+0x154>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d46:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d60:	4838      	ldr	r0, [pc, #224]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d62:	f00b fea7 	bl	800dab4 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f000 fd38 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4831      	ldr	r0, [pc, #196]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d7e:	f00c f951 	bl	800e024 <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d88:	f000 fd2a 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d8c:	482d      	ldr	r0, [pc, #180]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001d8e:	f00b fee7 	bl	800db60 <HAL_TIM_PWM_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d98:	f000 fd22 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dac:	4619      	mov	r1, r3
 8001dae:	4825      	ldr	r0, [pc, #148]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001db0:	f00c fdb2 	bl	800e918 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001dba:	f000 fd11 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbe:	2360      	movs	r3, #96	; 0x60
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001de4:	f00c f806 	bl	800ddf4 <HAL_TIM_PWM_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001dee:	f000 fcf7 	bl	80027e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001e28:	f00c fe04 	bl	800ea34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001e32:	f000 fcd5 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM1_Init+0x150>)
 8001e38:	f001 f952 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3768      	adds	r7, #104	; 0x68
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20019d04 	.word	0x20019d04
 8001e48:	40010000 	.word	0x40010000

08001e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e92:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea6:	4823      	ldr	r0, [pc, #140]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001ea8:	f00b fe04 	bl	800dab4 <HAL_TIM_Base_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001eb2:	f000 fc95 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481c      	ldr	r0, [pc, #112]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001ec4:	f00c f8ae 	bl	800e024 <HAL_TIM_ConfigClockSource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ece:	f000 fc87 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed2:	4818      	ldr	r0, [pc, #96]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001ed4:	f00b fe44 	bl	800db60 <HAL_TIM_PWM_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ede:	f000 fc7f 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4810      	ldr	r0, [pc, #64]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001ef2:	f00c fd11 	bl	800e918 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001efc:	f000 fc70 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001f18:	f00b ff6c 	bl	800ddf4 <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f22:	f000 fc5d 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <MX_TIM2_Init+0xe8>)
 8001f28:	f001 f8da 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8001f2c:	bf00      	nop
 8001f2e:	3738      	adds	r7, #56	; 0x38
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2001b708 	.word	0x2001b708

08001f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
 8001f66:	615a      	str	r2, [r3, #20]
 8001f68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <MX_TIM3_Init+0xec>)
 8001f6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f90:	4823      	ldr	r0, [pc, #140]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001f92:	f00b fd8f 	bl	800dab4 <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f9c:	f000 fc20 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001faa:	4619      	mov	r1, r3
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001fae:	f00c f839 	bl	800e024 <HAL_TIM_ConfigClockSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fb8:	f000 fc12 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fbc:	4818      	ldr	r0, [pc, #96]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001fbe:	f00b fdcf 	bl	800db60 <HAL_TIM_PWM_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fc8:	f000 fc0a 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <MX_TIM3_Init+0xe8>)
 8001fdc:	f00c fc9c 	bl	800e918 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fe6:	f000 fbfb 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fea:	2360      	movs	r3, #96	; 0x60
 8001fec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <MX_TIM3_Init+0xe8>)
 8002002:	f00b fef7 	bl	800ddf4 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800200c:	f000 fbe8 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <MX_TIM3_Init+0xe8>)
 8002012:	f001 f865 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8002016:	bf00      	nop
 8002018:	3738      	adds	r7, #56	; 0x38
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20019ae0 	.word	0x20019ae0
 8002024:	40000400 	.word	0x40000400

08002028 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	; 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	615a      	str	r2, [r3, #20]
 8002058:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800205a:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <MX_TIM5_Init+0xe8>)
 800205c:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <MX_TIM5_Init+0xec>)
 800205e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <MX_TIM5_Init+0xe8>)
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <MX_TIM5_Init+0xe8>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <MX_TIM5_Init+0xe8>)
 800206e:	f04f 32ff 	mov.w	r2, #4294967295
 8002072:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <MX_TIM5_Init+0xe8>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <MX_TIM5_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002080:	4823      	ldr	r0, [pc, #140]	; (8002110 <MX_TIM5_Init+0xe8>)
 8002082:	f00b fd17 	bl	800dab4 <HAL_TIM_Base_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800208c:	f000 fba8 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	4619      	mov	r1, r3
 800209c:	481c      	ldr	r0, [pc, #112]	; (8002110 <MX_TIM5_Init+0xe8>)
 800209e:	f00b ffc1 	bl	800e024 <HAL_TIM_ConfigClockSource>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80020a8:	f000 fb9a 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020ac:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM5_Init+0xe8>)
 80020ae:	f00b fd57 	bl	800db60 <HAL_TIM_PWM_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80020b8:	f000 fb92 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_TIM5_Init+0xe8>)
 80020cc:	f00c fc24 	bl	800e918 <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80020d6:	f000 fb83 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	; 0x60
 80020dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	220c      	movs	r2, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM5_Init+0xe8>)
 80020f2:	f00b fe7f 	bl	800ddf4 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80020fc:	f000 fb70 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM5_Init+0xe8>)
 8002102:	f000 ffed 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3738      	adds	r7, #56	; 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20019aa0 	.word	0x20019aa0
 8002114:	40000c00 	.word	0x40000c00

08002118 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <MX_TIM8_Init+0xa4>)
 800213a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <MX_TIM8_Init+0xa0>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <MX_TIM8_Init+0xa0>)
 800214a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <MX_TIM8_Init+0xa0>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002162:	4815      	ldr	r0, [pc, #84]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002164:	f00b fca6 	bl	800dab4 <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800216e:	f000 fb37 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <MX_TIM8_Init+0xa0>)
 8002180:	f00b ff50 	bl	800e024 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800218a:	f000 fb29 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4806      	ldr	r0, [pc, #24]	; (80021b8 <MX_TIM8_Init+0xa0>)
 80021a0:	f00c fbba 	bl	800e918 <HAL_TIMEx_MasterConfigSynchronization>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80021aa:	f000 fb19 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20019918 	.word	0x20019918
 80021bc:	40010400 	.word	0x40010400

080021c0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
 80021d4:	615a      	str	r2, [r3, #20]
 80021d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_TIM12_Init+0x84>)
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <MX_TIM12_Init+0x88>)
 80021dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_TIM12_Init+0x84>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_TIM12_Init+0x84>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_TIM12_Init+0x84>)
 80021ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_TIM12_Init+0x84>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_TIM12_Init+0x84>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_TIM12_Init+0x84>)
 8002200:	f00b fcae 	bl	800db60 <HAL_TIM_PWM_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800220a:	f000 fae9 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM12_Init+0x84>)
 8002226:	f00b fde5 	bl	800ddf4 <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002230:	f000 fad6 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM12_Init+0x84>)
 8002236:	f000 ff53 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2001b748 	.word	0x2001b748
 8002248:	40001800 	.word	0x40001800

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_USART1_UART_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002290:	f00c fc6c 	bl	800eb6c <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800229a:	f000 faa1 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20019c64 	.word	0x20019c64
 80022a8:	40011000 	.word	0x40011000

080022ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <MX_USART6_UART_Init+0x5c>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_USART6_UART_Init+0x58>)
 80022f0:	f00c fc3c 	bl	800eb6c <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80022fa:	f000 fa71 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2001b644 	.word	0x2001b644
 8002308:	40011400 	.word	0x40011400

0800230c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <MX_FMC_Init+0x98>)
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <MX_FMC_Init+0x9c>)
 8002328:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <MX_FMC_Init+0x98>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_FMC_Init+0x98>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <MX_FMC_Init+0x98>)
 8002338:	2204      	movs	r2, #4
 800233a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_FMC_Init+0x98>)
 800233e:	2210      	movs	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_FMC_Init+0x98>)
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_FMC_Init+0x98>)
 800234a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800234e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_FMC_Init+0x98>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_FMC_Init+0x98>)
 8002358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800235c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_FMC_Init+0x98>)
 8002360:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_FMC_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800236c:	2302      	movs	r3, #2
 800236e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002370:	2307      	movs	r3, #7
 8002372:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002374:	2304      	movs	r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002378:	2307      	movs	r3, #7
 800237a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800237c:	2303      	movs	r3, #3
 800237e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002384:	2302      	movs	r3, #2
 8002386:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_FMC_Init+0x98>)
 800238e:	f00b fab6 	bl	800d8fe <HAL_SDRAM_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002398:	f000 fa22 	bl	80027e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2001b788 	.word	0x2001b788
 80023a8:	a0000140 	.word	0xa0000140

080023ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b090      	sub	sp, #64	; 0x40
 80023b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c2:	4baf      	ldr	r3, [pc, #700]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4aae      	ldr	r2, [pc, #696]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4bac      	ldr	r3, [pc, #688]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023da:	4ba9      	ldr	r3, [pc, #676]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4aa8      	ldr	r2, [pc, #672]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4ba6      	ldr	r3, [pc, #664]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4aa2      	ldr	r2, [pc, #648]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4ba0      	ldr	r3, [pc, #640]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <MX_GPIO_Init+0x2d4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a9c      	ldr	r2, [pc, #624]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b9a      	ldr	r3, [pc, #616]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	4b97      	ldr	r3, [pc, #604]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a96      	ldr	r2, [pc, #600]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b94      	ldr	r3, [pc, #592]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	4b91      	ldr	r3, [pc, #580]	; (8002680 <MX_GPIO_Init+0x2d4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <MX_GPIO_Init+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a84      	ldr	r2, [pc, #528]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <MX_GPIO_Init+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800249a:	4b79      	ldr	r3, [pc, #484]	; (8002680 <MX_GPIO_Init+0x2d4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a78      	ldr	r2, [pc, #480]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80024a0:	f043 0320 	orr.w	r3, r3, #32
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <MX_GPIO_Init+0x2d4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2120      	movs	r1, #32
 80024ce:	486d      	ldr	r0, [pc, #436]	; (8002684 <MX_GPIO_Init+0x2d8>)
 80024d0:	f006 f8d4 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	210e      	movs	r1, #14
 80024d8:	486b      	ldr	r0, [pc, #428]	; (8002688 <MX_GPIO_Init+0x2dc>)
 80024da:	f006 f8cf 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2108      	movs	r1, #8
 80024e2:	486a      	ldr	r0, [pc, #424]	; (800268c <MX_GPIO_Init+0x2e0>)
 80024e4:	f006 f8ca 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ee:	4866      	ldr	r0, [pc, #408]	; (8002688 <MX_GPIO_Init+0x2dc>)
 80024f0:	f006 f8c4 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024fa:	4865      	ldr	r0, [pc, #404]	; (8002690 <MX_GPIO_Init+0x2e4>)
 80024fc:	f006 f8be 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	21c8      	movs	r1, #200	; 0xc8
 8002504:	4863      	ldr	r0, [pc, #396]	; (8002694 <MX_GPIO_Init+0x2e8>)
 8002506:	f006 f8b9 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800250a:	2308      	movs	r3, #8
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250e:	2300      	movs	r3, #0
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251a:	4619      	mov	r1, r3
 800251c:	485e      	ldr	r0, [pc, #376]	; (8002698 <MX_GPIO_Init+0x2ec>)
 800251e:	f005 fdf9 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002522:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002534:	230a      	movs	r3, #10
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253c:	4619      	mov	r1, r3
 800253e:	4857      	ldr	r0, [pc, #348]	; (800269c <MX_GPIO_Init+0x2f0>)
 8002540:	f005 fde8 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002544:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002556:	230c      	movs	r3, #12
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255e:	4619      	mov	r1, r3
 8002560:	484f      	ldr	r0, [pc, #316]	; (80026a0 <MX_GPIO_Init+0x2f4>)
 8002562:	f005 fdd7 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002578:	4619      	mov	r1, r3
 800257a:	484a      	ldr	r0, [pc, #296]	; (80026a4 <MX_GPIO_Init+0x2f8>)
 800257c:	f005 fdca 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002580:	2340      	movs	r3, #64	; 0x40
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002584:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <MX_GPIO_Init+0x2fc>)
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002590:	4619      	mov	r1, r3
 8002592:	483c      	ldr	r0, [pc, #240]	; (8002684 <MX_GPIO_Init+0x2d8>)
 8002594:	f005 fdbe 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002598:	2320      	movs	r3, #32
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	2301      	movs	r3, #1
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	4835      	ldr	r0, [pc, #212]	; (8002684 <MX_GPIO_Init+0x2d8>)
 80025b0:	f005 fdb0 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80025b4:	f241 030e 	movw	r3, #4110	; 0x100e
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	482e      	ldr	r0, [pc, #184]	; (8002688 <MX_GPIO_Init+0x2dc>)
 80025ce:	f005 fda1 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80025d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	482e      	ldr	r0, [pc, #184]	; (80026a0 <MX_GPIO_Init+0x2f4>)
 80025e8:	f005 fd94 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80025ec:	2308      	movs	r3, #8
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002600:	4619      	mov	r1, r3
 8002602:	4822      	ldr	r0, [pc, #136]	; (800268c <MX_GPIO_Init+0x2e0>)
 8002604:	f005 fd86 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002608:	2310      	movs	r3, #16
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002618:	4619      	mov	r1, r3
 800261a:	481a      	ldr	r0, [pc, #104]	; (8002684 <MX_GPIO_Init+0x2d8>)
 800261c:	f005 fd7a 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002620:	f248 0304 	movw	r3, #32772	; 0x8004
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800262e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002632:	4619      	mov	r1, r3
 8002634:	4816      	ldr	r0, [pc, #88]	; (8002690 <MX_GPIO_Init+0x2e4>)
 8002636:	f005 fd6d 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800263a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	2301      	movs	r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	480f      	ldr	r0, [pc, #60]	; (8002690 <MX_GPIO_Init+0x2e4>)
 8002654:	f005 fd5e 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_GPIO_Init+0x300>)
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266a:	4619      	mov	r1, r3
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <MX_GPIO_Init+0x2dc>)
 800266e:	f005 fd51 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_GPIO_Init+0x2fc>)
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
 800267c:	e018      	b.n	80026b0 <MX_GPIO_Init+0x304>
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40022000 	.word	0x40022000
 800268c:	40022800 	.word	0x40022800
 8002690:	40021c00 	.word	0x40021c00
 8002694:	40021800 	.word	0x40021800
 8002698:	40021000 	.word	0x40021000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40022400 	.word	0x40022400
 80026a8:	10120000 	.word	0x10120000
 80026ac:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	4835      	ldr	r0, [pc, #212]	; (8002790 <MX_GPIO_Init+0x3e4>)
 80026bc:	f005 fd2a 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80026c0:	2310      	movs	r3, #16
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026d0:	230a      	movs	r3, #10
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d8:	4619      	mov	r1, r3
 80026da:	482e      	ldr	r0, [pc, #184]	; (8002794 <MX_GPIO_Init+0x3e8>)
 80026dc:	f005 fd1a 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80026e0:	23c8      	movs	r3, #200	; 0xc8
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f4:	4619      	mov	r1, r3
 80026f6:	4828      	ldr	r0, [pc, #160]	; (8002798 <MX_GPIO_Init+0x3ec>)
 80026f8:	f005 fd0c 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80026fc:	2305      	movs	r3, #5
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800270c:	230a      	movs	r3, #10
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002714:	4619      	mov	r1, r3
 8002716:	4821      	ldr	r0, [pc, #132]	; (800279c <MX_GPIO_Init+0x3f0>)
 8002718:	f005 fcfc 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800271c:	2304      	movs	r3, #4
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002720:	2300      	movs	r3, #0
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272c:	4619      	mov	r1, r3
 800272e:	481a      	ldr	r0, [pc, #104]	; (8002798 <MX_GPIO_Init+0x3ec>)
 8002730:	f005 fcf0 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002734:	2328      	movs	r3, #40	; 0x28
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002744:	230a      	movs	r3, #10
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274c:	4619      	mov	r1, r3
 800274e:	4814      	ldr	r0, [pc, #80]	; (80027a0 <MX_GPIO_Init+0x3f4>)
 8002750:	f005 fce0 	bl	8008114 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002754:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002766:	2305      	movs	r3, #5
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <MX_GPIO_Init+0x3f8>)
 8002772:	f005 fccf 	bl	8008114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2028      	movs	r0, #40	; 0x28
 800277c:	f004 fbcc 	bl	8006f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002780:	2028      	movs	r0, #40	; 0x28
 8002782:	f004 fbe5 	bl	8006f50 <HAL_NVIC_EnableIRQ>

}
 8002786:	bf00      	nop
 8002788:	3740      	adds	r7, #64	; 0x40
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40021800 	.word	0x40021800
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400

080027a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80027b0:	f013 fa28 	bl	8015c04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f010 f9a9 	bl	8012b0c <osDelay>
 80027ba:	e7fb      	b.n	80027b4 <StartDefaultTask+0xc>

080027bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027ce:	f004 f821 	bl	8006814 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40001000 	.word	0x40001000

080027e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1);
 80027e4:	e7fe      	b.n	80027e4 <Error_Handler+0x4>
	...

080027e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_MspInit+0x4c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_MspInit+0x4c>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_MspInit+0x4c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	210f      	movs	r1, #15
 8002822:	f06f 0001 	mvn.w	r0, #1
 8002826:	f004 fb77 	bl	8006f18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_ADC_MspInit+0xa4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d13c      	bne.n	80028d4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_ADC_MspInit+0xa8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80028a2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80028a6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028a8:	2303      	movs	r3, #3
 80028aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	480b      	ldr	r0, [pc, #44]	; (80028e4 <HAL_ADC_MspInit+0xac>)
 80028b8:	f005 fc2c 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c0:	2303      	movs	r3, #3
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <HAL_ADC_MspInit+0xb0>)
 80028d0:	f005 fc20 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40012200 	.word	0x40012200
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40020000 	.word	0x40020000

080028ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_CRC_MspInit+0x38>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10b      	bne.n	8002916 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_CRC_MspInit+0x3c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_CRC_MspInit+0x3c>)
 8002904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_CRC_MspInit+0x3c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023000 	.word	0x40023000
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	; 0x38
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_DCMI_MspInit+0x160>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f040 809a 	bne.w	8002a84 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002950:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	4a4e      	ldr	r2, [pc, #312]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6353      	str	r3, [r2, #52]	; 0x34
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 800299e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b0:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_DCMI_MspInit+0x164>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80029e0:	2360      	movs	r3, #96	; 0x60
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029f0:	230d      	movs	r3, #13
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f8:	4619      	mov	r1, r3
 80029fa:	4826      	ldr	r0, [pc, #152]	; (8002a94 <HAL_DCMI_MspInit+0x168>)
 80029fc:	f005 fb8a 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002a00:	2308      	movs	r3, #8
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a10:	230d      	movs	r3, #13
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	481f      	ldr	r0, [pc, #124]	; (8002a98 <HAL_DCMI_MspInit+0x16c>)
 8002a1c:	f005 fb7a 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a32:	230d      	movs	r3, #13
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4817      	ldr	r0, [pc, #92]	; (8002a9c <HAL_DCMI_MspInit+0x170>)
 8002a3e:	f005 fb69 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002a42:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a54:	230d      	movs	r3, #13
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <HAL_DCMI_MspInit+0x174>)
 8002a60:	f005 fb58 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a64:	2350      	movs	r3, #80	; 0x50
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a74:	230d      	movs	r3, #13
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_DCMI_MspInit+0x178>)
 8002a80:	f005 fb48 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a84:	bf00      	nop
 8002a86:	3738      	adds	r7, #56	; 0x38
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	50050000 	.word	0x50050000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_DMA2D_MspInit+0x44>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d113      	bne.n	8002ae2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_DMA2D_MspInit+0x48>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_DMA2D_MspInit+0x48>)
 8002ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_DMA2D_MspInit+0x48>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	205a      	movs	r0, #90	; 0x5a
 8002ad8:	f004 fa1e 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002adc:	205a      	movs	r0, #90	; 0x5a
 8002ade:	f004 fa37 	bl	8006f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	4002b000 	.word	0x4002b000
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <HAL_I2C_MspInit+0xdc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d129      	bne.n	8002b6a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b34:	2312      	movs	r3, #18
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b40:	2304      	movs	r3, #4
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4823      	ldr	r0, [pc, #140]	; (8002bd8 <HAL_I2C_MspInit+0xe4>)
 8002b4c:	f005 fae2 	bl	8008114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b68:	e02d      	b.n	8002bc6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_I2C_MspInit+0xe8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d128      	bne.n	8002bc6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b92:	2312      	movs	r3, #18
 8002b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <HAL_I2C_MspInit+0xec>)
 8002baa:	f005 fab3 	bl	8008114 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_I2C_MspInit+0xe0>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	bf00      	nop
 8002bc8:	3730      	adds	r7, #48	; 0x30
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40005400 	.word	0x40005400
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	40005c00 	.word	0x40005c00
 8002be0:	40021c00 	.word	0x40021c00

08002be4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_I2C_MspDeInit+0x64>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d110      	bne.n	8002c18 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_I2C_MspDeInit+0x68>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_I2C_MspDeInit+0x68>)
 8002bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c06:	4812      	ldr	r0, [pc, #72]	; (8002c50 <HAL_I2C_MspDeInit+0x6c>)
 8002c08:	f005 fc2e 	bl	8008468 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c10:	480f      	ldr	r0, [pc, #60]	; (8002c50 <HAL_I2C_MspDeInit+0x6c>)
 8002c12:	f005 fc29 	bl	8008468 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002c16:	e013      	b.n	8002c40 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_I2C_MspDeInit+0x70>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10e      	bne.n	8002c40 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_I2C_MspDeInit+0x68>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_I2C_MspDeInit+0x68>)
 8002c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	4809      	ldr	r0, [pc, #36]	; (8002c58 <HAL_I2C_MspDeInit+0x74>)
 8002c32:	f005 fc19 	bl	8008468 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <HAL_I2C_MspDeInit+0x74>)
 8002c3c:	f005 fc14 	bl	8008468 <HAL_GPIO_DeInit>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40005c00 	.word	0x40005c00
 8002c58:	40021c00 	.word	0x40021c00

08002c5c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a55      	ldr	r2, [pc, #340]	; (8002dd0 <HAL_LTDC_MspInit+0x174>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	f040 80a3 	bne.w	8002dc6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c80:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8c:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cea:	6313      	str	r3, [r2, #48]	; 0x30
 8002cec:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6313      	str	r3, [r2, #48]	; 0x30
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_LTDC_MspInit+0x178>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002d10:	2310      	movs	r3, #16
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d20:	230e      	movs	r3, #14
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d28:	4619      	mov	r1, r3
 8002d2a:	482b      	ldr	r0, [pc, #172]	; (8002dd8 <HAL_LTDC_MspInit+0x17c>)
 8002d2c:	f005 f9f2 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002d30:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d42:	230e      	movs	r3, #14
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4823      	ldr	r0, [pc, #140]	; (8002ddc <HAL_LTDC_MspInit+0x180>)
 8002d4e:	f005 f9e1 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002d52:	23f7      	movs	r3, #247	; 0xf7
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d62:	230e      	movs	r3, #14
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	481c      	ldr	r0, [pc, #112]	; (8002de0 <HAL_LTDC_MspInit+0x184>)
 8002d6e:	f005 f9d1 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d84:	2309      	movs	r3, #9
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4815      	ldr	r0, [pc, #84]	; (8002de4 <HAL_LTDC_MspInit+0x188>)
 8002d90:	f005 f9c0 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002d94:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002da6:	230e      	movs	r3, #14
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dae:	4619      	mov	r1, r3
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <HAL_LTDC_MspInit+0x18c>)
 8002db2:	f005 f9af 	bl	8008114 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2058      	movs	r0, #88	; 0x58
 8002dbc:	f004 f8ac 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002dc0:	2058      	movs	r0, #88	; 0x58
 8002dc2:	f004 f8c5 	bl	8006f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002dc6:	bf00      	nop
 8002dc8:	3738      	adds	r7, #56	; 0x38
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40016800 	.word	0x40016800
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40022400 	.word	0x40022400
 8002de0:	40022800 	.word	0x40022800
 8002de4:	40021800 	.word	0x40021800
 8002de8:	40022000 	.word	0x40022000

08002dec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <HAL_QSPI_MspInit+0x10c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d170      	bne.n	8002ef0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6393      	str	r3, [r2, #56]	; 0x38
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a34      	ldr	r2, [pc, #208]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e2c:	f043 0310 	orr.w	r3, r3, #16
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_QSPI_MspInit+0x110>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 031c 	add.w	r3, r7, #28
 8002e86:	4619      	mov	r1, r3
 8002e88:	481d      	ldr	r0, [pc, #116]	; (8002f00 <HAL_QSPI_MspInit+0x114>)
 8002e8a:	f005 f943 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4816      	ldr	r0, [pc, #88]	; (8002f04 <HAL_QSPI_MspInit+0x118>)
 8002eaa:	f005 f933 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ebe:	2309      	movs	r3, #9
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480e      	ldr	r0, [pc, #56]	; (8002f04 <HAL_QSPI_MspInit+0x118>)
 8002eca:	f005 f923 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002ece:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	2303      	movs	r3, #3
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ee0:	2309      	movs	r3, #9
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4807      	ldr	r0, [pc, #28]	; (8002f08 <HAL_QSPI_MspInit+0x11c>)
 8002eec:	f005 f912 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3730      	adds	r7, #48	; 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	a0001000 	.word	0xa0001000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020c00 	.word	0x40020c00

08002f0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <HAL_RTC_MspInit+0x2c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d105      	bne.n	8002f2a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <HAL_RTC_MspInit+0x30>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <HAL_RTC_MspInit+0x30>)
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40002800 	.word	0x40002800
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f60:	d127      	bne.n	8002fb2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_SPDIFRX_MspInit+0x7c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <HAL_SPDIFRX_MspInit+0x80>)
 8002fae:	f005 f8b1 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020c00 	.word	0x40020c00

08002fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_TIM_Base_MspInit+0xc8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002fee:	e046      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]
}
 8003012:	e034      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_TIM_Base_MspInit+0xd0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10c      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
}
 8003036:	e022      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_Base_MspInit+0xd4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
}
 800305a:	e010      	b.n	800307e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_TIM_Base_MspInit+0xd8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10b      	bne.n	800307e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_Base_MspInit+0xcc>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	40023800 	.word	0x40023800
 8003094:	40000400 	.word	0x40000400
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40010400 	.word	0x40010400

080030a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_TIM_PWM_MspInit+0x38>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10b      	bne.n	80030ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_TIM_PWM_MspInit+0x3c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40001800 	.word	0x40001800
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 031c 	add.w	r3, r7, #28
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a56      	ldr	r2, [pc, #344]	; (8003258 <HAL_TIM_MspPostInit+0x178>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11d      	bne.n	800313e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a55      	ldr	r2, [pc, #340]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800311a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	484a      	ldr	r0, [pc, #296]	; (8003260 <HAL_TIM_MspPostInit+0x180>)
 8003138:	f004 ffec 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800313c:	e087      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d11d      	bne.n	8003184 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a43      	ldr	r2, [pc, #268]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4619      	mov	r1, r3
 800317c:	4838      	ldr	r0, [pc, #224]	; (8003260 <HAL_TIM_MspPostInit+0x180>)
 800317e:	f004 ffc9 	bl	8008114 <HAL_GPIO_Init>
}
 8003182:	e064      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_TIM_MspPostInit+0x184>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d11c      	bne.n	80031c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	4b33      	ldr	r3, [pc, #204]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a32      	ldr	r2, [pc, #200]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031a6:	2310      	movs	r3, #16
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031b6:	2302      	movs	r3, #2
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4829      	ldr	r0, [pc, #164]	; (8003268 <HAL_TIM_MspPostInit+0x188>)
 80031c2:	f004 ffa7 	bl	8008114 <HAL_GPIO_Init>
}
 80031c6:	e042      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_TIM_MspPostInit+0x18c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11c      	bne.n	800320c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031fa:	2302      	movs	r3, #2
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	481a      	ldr	r0, [pc, #104]	; (8003270 <HAL_TIM_MspPostInit+0x190>)
 8003206:	f004 ff85 	bl	8008114 <HAL_GPIO_Init>
}
 800320a:	e020      	b.n	800324e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_TIM_MspPostInit+0x194>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11b      	bne.n	800324e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_TIM_MspPostInit+0x17c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800323e:	2309      	movs	r3, #9
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	480b      	ldr	r0, [pc, #44]	; (8003278 <HAL_TIM_MspPostInit+0x198>)
 800324a:	f004 ff63 	bl	8008114 <HAL_GPIO_Init>
}
 800324e:	bf00      	nop
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40023800 	.word	0x40023800
 8003260:	40020000 	.word	0x40020000
 8003264:	40000400 	.word	0x40000400
 8003268:	40020400 	.word	0x40020400
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40022000 	.word	0x40022000
 8003274:	40001800 	.word	0x40001800
 8003278:	40021c00 	.word	0x40021c00

0800327c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_UART_MspInit+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d145      	bne.n	800332a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800329e:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032a4:	f043 0310 	orr.w	r3, r3, #16
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a35      	ldr	r2, [pc, #212]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_UART_MspInit+0x114>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f6:	2307      	movs	r3, #7
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4619      	mov	r1, r3
 8003300:	4824      	ldr	r0, [pc, #144]	; (8003394 <HAL_UART_MspInit+0x118>)
 8003302:	f004 ff07 	bl	8008114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800330a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003318:	2307      	movs	r3, #7
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4619      	mov	r1, r3
 8003322:	481d      	ldr	r0, [pc, #116]	; (8003398 <HAL_UART_MspInit+0x11c>)
 8003324:	f004 fef6 	bl	8008114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003328:	e02c      	b.n	8003384 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_UART_MspInit+0x120>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d127      	bne.n	8003384 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_UART_MspInit+0x114>)
 800333a:	f043 0320 	orr.w	r3, r3, #32
 800333e:	6453      	str	r3, [r2, #68]	; 0x44
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_UART_MspInit+0x114>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_UART_MspInit+0x114>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_UART_MspInit+0x114>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003374:	2308      	movs	r3, #8
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	4619      	mov	r1, r3
 800337e:	4808      	ldr	r0, [pc, #32]	; (80033a0 <HAL_UART_MspInit+0x124>)
 8003380:	f004 fec8 	bl	8008114 <HAL_GPIO_Init>
}
 8003384:	bf00      	nop
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40011000 	.word	0x40011000
 8003390:	40023800 	.word	0x40023800
 8003394:	40020400 	.word	0x40020400
 8003398:	40020000 	.word	0x40020000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40020800 	.word	0x40020800

080033a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80033b8:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_FMC_MspInit+0x100>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d16d      	bne.n	800349c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80033c0:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_FMC_MspInit+0x100>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_FMC_MspInit+0x104>)
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_FMC_MspInit+0x104>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6393      	str	r3, [r2, #56]	; 0x38
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <HAL_FMC_MspInit+0x104>)
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80033de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033e2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f0:	230c      	movs	r3, #12
 80033f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	482c      	ldr	r0, [pc, #176]	; (80034ac <HAL_FMC_MspInit+0x108>)
 80033fa:	f004 fe8b 	bl	8008114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80033fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8003402:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003410:	230c      	movs	r3, #12
 8003412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4825      	ldr	r0, [pc, #148]	; (80034b0 <HAL_FMC_MspInit+0x10c>)
 800341a:	f004 fe7b 	bl	8008114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800341e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003422:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342c:	2303      	movs	r3, #3
 800342e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003430:	230c      	movs	r3, #12
 8003432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	4619      	mov	r1, r3
 8003438:	481e      	ldr	r0, [pc, #120]	; (80034b4 <HAL_FMC_MspInit+0x110>)
 800343a:	f004 fe6b 	bl	8008114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800343e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003442:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003450:	230c      	movs	r3, #12
 8003452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	4619      	mov	r1, r3
 8003458:	4817      	ldr	r0, [pc, #92]	; (80034b8 <HAL_FMC_MspInit+0x114>)
 800345a:	f004 fe5b 	bl	8008114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800345e:	2328      	movs	r3, #40	; 0x28
 8003460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800346e:	230c      	movs	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4811      	ldr	r0, [pc, #68]	; (80034bc <HAL_FMC_MspInit+0x118>)
 8003478:	f004 fe4c 	bl	8008114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800347c:	2308      	movs	r3, #8
 800347e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800348c:	230c      	movs	r3, #12
 800348e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	4619      	mov	r1, r3
 8003494:	480a      	ldr	r0, [pc, #40]	; (80034c0 <HAL_FMC_MspInit+0x11c>)
 8003496:	f004 fe3d 	bl	8008114 <HAL_GPIO_Init>
 800349a:	e000      	b.n	800349e <HAL_FMC_MspInit+0xfa>
    return;
 800349c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000d88 	.word	0x20000d88
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40021800 	.word	0x40021800
 80034b4:	40020c00 	.word	0x40020c00
 80034b8:	40021400 	.word	0x40021400
 80034bc:	40021c00 	.word	0x40021c00
 80034c0:	40020800 	.word	0x40020800

080034c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80034cc:	f7ff ff6a 	bl	80033a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_SAI_MspInit+0xbc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d124      	bne.n	8003534 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_SAI_MspInit+0xc4>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a29      	ldr	r2, [pc, #164]	; (800359c <HAL_SAI_MspInit+0xc4>)
 80034f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_SAI_MspInit+0xc4>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 8003512:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003514:	23f0      	movs	r3, #240	; 0xf0
 8003516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2300      	movs	r3, #0
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003524:	230a      	movs	r3, #10
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	481c      	ldr	r0, [pc, #112]	; (80035a0 <HAL_SAI_MspInit+0xc8>)
 8003530:	f004 fdf0 	bl	8008114 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_SAI_MspInit+0xcc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d125      	bne.n	800358a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_SAI_MspInit+0xc4>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_SAI_MspInit+0xc4>)
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_SAI_MspInit+0xc4>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_SAI_MspInit+0xc0>)
 8003566:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800357a:	230a      	movs	r3, #10
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	4808      	ldr	r0, [pc, #32]	; (80035a8 <HAL_SAI_MspInit+0xd0>)
 8003586:	f004 fdc5 	bl	8008114 <HAL_GPIO_Init>

    }
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40015c04 	.word	0x40015c04
 8003598:	20000d8c 	.word	0x20000d8c
 800359c:	40023800 	.word	0x40023800
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40015c24 	.word	0x40015c24
 80035a8:	40021800 	.word	0x40021800

080035ac <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_SAI_MspDeInit+0x74>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d112      	bne.n	80035e4 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035c6:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80035d0:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_SAI_MspDeInit+0x7c>)
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_SAI_MspDeInit+0x7c>)
 80035d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035da:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80035dc:	21f0      	movs	r1, #240	; 0xf0
 80035de:	4813      	ldr	r0, [pc, #76]	; (800362c <HAL_SAI_MspDeInit+0x80>)
 80035e0:	f004 ff42 	bl	8008468 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_SAI_MspDeInit+0x84>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d113      	bne.n	8003616 <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035f6:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_SAI_MspDeInit+0x78>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_SAI_MspDeInit+0x7c>)
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	4a08      	ldr	r2, [pc, #32]	; (8003628 <HAL_SAI_MspDeInit+0x7c>)
 8003606:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800360a:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800360c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003610:	4808      	ldr	r0, [pc, #32]	; (8003634 <HAL_SAI_MspDeInit+0x88>)
 8003612:	f004 ff29 	bl	8008468 <HAL_GPIO_DeInit>

    }
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40015c04 	.word	0x40015c04
 8003624:	20000d8c 	.word	0x20000d8c
 8003628:	40023800 	.word	0x40023800
 800362c:	40022000 	.word	0x40022000
 8003630:	40015c24 	.word	0x40015c24
 8003634:	40021800 	.word	0x40021800

08003638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08c      	sub	sp, #48	; 0x30
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003648:	2200      	movs	r2, #0
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	2036      	movs	r0, #54	; 0x36
 800364e:	f003 fc63 	bl	8006f18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003652:	2036      	movs	r0, #54	; 0x36
 8003654:	f003 fc7c 	bl	8006f50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_InitTick+0xa0>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <HAL_InitTick+0xa0>)
 800365e:	f043 0310 	orr.w	r3, r3, #16
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_InitTick+0xa0>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003670:	f107 0210 	add.w	r2, r7, #16
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f008 fbfc 	bl	800be78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003680:	f008 fbd2 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 8003684:	4603      	mov	r3, r0
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <HAL_InitTick+0xa4>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9b      	lsrs	r3, r3, #18
 8003694:	3b01      	subs	r3, #1
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_InitTick+0xa8>)
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_InitTick+0xac>)
 800369c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_InitTick+0xa8>)
 80036a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036a6:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_InitTick+0xa8>)
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_InitTick+0xa8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_InitTick+0xa8>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <HAL_InitTick+0xa8>)
 80036ba:	f00a f9fb 	bl	800dab4 <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80036c4:	4806      	ldr	r0, [pc, #24]	; (80036e0 <HAL_InitTick+0xa8>)
 80036c6:	f00a fa21 	bl	800db0c <HAL_TIM_Base_Start_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e000      	b.n	80036d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3730      	adds	r7, #48	; 0x30
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	2001b850 	.word	0x2001b850
 80036e4:	40001000 	.word	0x40001000

080036e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <MemManage_Handler+0x4>

08003702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003706:	e7fe      	b.n	8003706 <BusFault_Handler+0x4>

08003708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800370c:	e7fe      	b.n	800370c <UsageFault_Handler+0x4>

0800370e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003724:	f004 ffde 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}

0800372c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003730:	4802      	ldr	r0, [pc, #8]	; (800373c <TIM6_DAC_IRQHandler+0x10>)
 8003732:	f00a fa40 	bl	800dbb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2001b850 	.word	0x2001b850

08003740 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <OTG_FS_IRQHandler+0x10>)
 8003746:	f005 fa75 	bl	8008c34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2001bdfc 	.word	0x2001bdfc

08003754 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <LTDC_IRQHandler+0x10>)
 800375a:	f007 fb4d 	bl	800adf8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20019b24 	.word	0x20019b24

08003768 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <DMA2D_IRQHandler+0x10>)
 800376e:	f004 fa93 	bl	8007c98 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2001b6c8 	.word	0x2001b6c8

0800377c <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <DMA2_Stream7_IRQHandler+0x14>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fec1 	bl	800750c <HAL_DMA_IRQHandler>
 }
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000e6c 	.word	0x20000e6c

08003794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e00a      	b.n	80037bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037a6:	f3af 8000 	nop.w
 80037aa:	4601      	mov	r1, r0
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	60ba      	str	r2, [r7, #8]
 80037b2:	b2ca      	uxtb	r2, r1
 80037b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dbf0      	blt.n	80037a6 <_read+0x12>
	}

return len;
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e009      	b.n	80037f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	60ba      	str	r2, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f012 fdcf 	bl	801638c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3301      	adds	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	dbf1      	blt.n	80037e0 <_write+0x12>
	}
	return len;
 80037fc:	687b      	ldr	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <_close>:

int _close(int file)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
	return -1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800382e:	605a      	str	r2, [r3, #4]
	return 0;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_isatty>:

int _isatty(int file)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	return 1;
 8003846:	2301      	movs	r3, #1
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	return 0;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <_sbrk+0x5c>)
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <_sbrk+0x60>)
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <_sbrk+0x64>)
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <_sbrk+0x68>)
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <_sbrk+0x64>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	429a      	cmp	r2, r3
 800389e:	d207      	bcs.n	80038b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038a0:	f012 feda 	bl	8016658 <__errno>
 80038a4:	4602      	mov	r2, r0
 80038a6:	230c      	movs	r3, #12
 80038a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	e009      	b.n	80038c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <_sbrk+0x64>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <_sbrk+0x64>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <_sbrk+0x64>)
 80038c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038c2:	68fb      	ldr	r3, [r7, #12]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20050000 	.word	0x20050000
 80038d0:	00000400 	.word	0x00000400
 80038d4:	20000d90 	.word	0x20000d90
 80038d8:	2001fd30 	.word	0x2001fd30

080038dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <SystemInit+0x28>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	4a07      	ldr	r2, [pc, #28]	; (8003904 <SystemInit+0x28>)
 80038e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <SystemInit+0x28>)
 80038f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038f6:	609a      	str	r2, [r3, #8]
#endif
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003940 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800390c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800390e:	e003      	b.n	8003918 <LoopCopyDataInit>

08003910 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003912:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003914:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003916:	3104      	adds	r1, #4

08003918 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800391c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800391e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003920:	d3f6      	bcc.n	8003910 <CopyDataInit>
  ldr  r2, =_sbss
 8003922:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003924:	e002      	b.n	800392c <LoopFillZerobss>

08003926 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003926:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003928:	f842 3b04 	str.w	r3, [r2], #4

0800392c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800392e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003930:	d3f9      	bcc.n	8003926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003932:	f7ff ffd3 	bl	80038dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003936:	f012 fe95 	bl	8016664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800393a:	f7fd fc95 	bl	8001268 <main>
  bx  lr    
 800393e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003940:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003944:	0801aa20 	.word	0x0801aa20
  ldr  r0, =_sdata
 8003948:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800394c:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 8003950:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8003954:	2001fd30 	.word	0x2001fd30

08003958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003958:	e7fe      	b.n	8003958 <ADC_IRQHandler>
	...

0800395c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	4603      	mov	r3, r0
 8003966:	81fb      	strh	r3, [r7, #14]
 8003968:	460b      	mov	r3, r1
 800396a:	81bb      	strh	r3, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003974:	89bb      	ldrh	r3, [r7, #12]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800397a:	89bb      	ldrh	r3, [r7, #12]
 800397c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003980:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003986:	f001 fc3f 	bl	8005208 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2203      	movs	r2, #3
 8003990:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fab3 	bl	8004f00 <CODEC_IO_Write>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	f640 0117 	movw	r1, #2071	; 0x817
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 faa6 	bl	8004f00 <CODEC_IO_Write>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fa99 	bl	8004f00 <CODEC_IO_Write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80039d8:	89fb      	ldrh	r3, [r7, #14]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	226c      	movs	r2, #108	; 0x6c
 80039de:	2139      	movs	r1, #57	; 0x39
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fa8d 	bl	8004f00 <CODEC_IO_Write>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80039f0:	8afb      	ldrh	r3, [r7, #22]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2213      	movs	r2, #19
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fa7e 	bl	8004f00 <CODEC_IO_Write>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e00b      	b.n	8003a28 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2203      	movs	r2, #3
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fa71 	bl	8004f00 <CODEC_IO_Write>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8003a28:	2032      	movs	r0, #50	; 0x32
 8003a2a:	f001 fc55 	bl	80052d8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8003a2e:	8b3b      	ldrh	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 815b 	beq.w	8003cec <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8003a36:	4bbc      	ldr	r3, [pc, #752]	; (8003d28 <wm8994_Init+0x3cc>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8003a3c:	8b3b      	ldrh	r3, [r7, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d047      	beq.n	8003ad2 <wm8994_Init+0x176>
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	f000 8087 	beq.w	8003b56 <wm8994_Init+0x1fa>
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 810c 	bne.w	8003c66 <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003a4e:	89fb      	ldrh	r3, [r7, #14]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003a56:	2105      	movs	r1, #5
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fa51 	bl	8004f00 <CODEC_IO_Write>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003a68:	89fb      	ldrh	r3, [r7, #14]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f240 6101 	movw	r1, #1537	; 0x601
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 fa44 	bl	8004f00 <CODEC_IO_Write>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003a82:	89fb      	ldrh	r3, [r7, #14]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2200      	movs	r2, #0
 8003a88:	f240 6102 	movw	r1, #1538	; 0x602
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fa37 	bl	8004f00 <CODEC_IO_Write>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f240 6104 	movw	r1, #1540	; 0x604
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 fa2a 	bl	8004f00 <CODEC_IO_Write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2202      	movs	r2, #2
 8003abc:	f240 6105 	movw	r1, #1541	; 0x605
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 fa1d 	bl	8004f00 <CODEC_IO_Write>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
      break;
 8003ad0:	e10f      	b.n	8003cf2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003ad2:	89fb      	ldrh	r3, [r7, #14]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f240 3203 	movw	r2, #771	; 0x303
 8003ada:	2105      	movs	r1, #5
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fa0f 	bl	8004f00 <CODEC_IO_Write>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003aec:	89fb      	ldrh	r3, [r7, #14]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2201      	movs	r2, #1
 8003af2:	f240 6101 	movw	r1, #1537	; 0x601
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fa02 	bl	8004f00 <CODEC_IO_Write>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003b06:	89fb      	ldrh	r3, [r7, #14]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f240 6102 	movw	r1, #1538	; 0x602
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f9f5 	bl	8004f00 <CODEC_IO_Write>
 8003b16:	4603      	mov	r3, r0
 8003b18:	461a      	mov	r2, r3
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	f240 6104 	movw	r1, #1540	; 0x604
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9e8 	bl	8004f00 <CODEC_IO_Write>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f240 6105 	movw	r1, #1541	; 0x605
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f9db 	bl	8004f00 <CODEC_IO_Write>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
      break;
 8003b54:	e0cd      	b.n	8003cf2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003b56:	8afb      	ldrh	r3, [r7, #22]
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d141      	bne.n	8003be2 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003b66:	2105      	movs	r1, #5
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 f9c9 	bl	8004f00 <CODEC_IO_Write>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f240 6101 	movw	r1, #1537	; 0x601
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 f9bc 	bl	8004f00 <CODEC_IO_Write>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8003b92:	89fb      	ldrh	r3, [r7, #14]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2203      	movs	r2, #3
 8003b98:	f240 6102 	movw	r1, #1538	; 0x602
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f9af 	bl	8004f00 <CODEC_IO_Write>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003bac:	89fb      	ldrh	r3, [r7, #14]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f240 6104 	movw	r1, #1540	; 0x604
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 f9a2 	bl	8004f00 <CODEC_IO_Write>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f240 6105 	movw	r1, #1541	; 0x605
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f995 	bl	8004f00 <CODEC_IO_Write>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	461a      	mov	r2, r3
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8003be0:	e087      	b.n	8003cf2 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003be2:	89fb      	ldrh	r3, [r7, #14]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003bea:	2105      	movs	r1, #5
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f987 	bl	8004f00 <CODEC_IO_Write>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	f240 6101 	movw	r1, #1537	; 0x601
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f97a 	bl	8004f00 <CODEC_IO_Write>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003c16:	89fb      	ldrh	r3, [r7, #14]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f240 6102 	movw	r1, #1538	; 0x602
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f96d 	bl	8004f00 <CODEC_IO_Write>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2202      	movs	r2, #2
 8003c36:	f240 6104 	movw	r1, #1540	; 0x604
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 f960 	bl	8004f00 <CODEC_IO_Write>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f240 6105 	movw	r1, #1541	; 0x605
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f953 	bl	8004f00 <CODEC_IO_Write>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
      break;
 8003c64:	e045      	b.n	8003cf2 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f240 3203 	movw	r2, #771	; 0x303
 8003c6e:	2105      	movs	r1, #5
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f945 	bl	8004f00 <CODEC_IO_Write>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2201      	movs	r2, #1
 8003c86:	f240 6101 	movw	r1, #1537	; 0x601
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 f938 	bl	8004f00 <CODEC_IO_Write>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f240 6102 	movw	r1, #1538	; 0x602
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f92b 	bl	8004f00 <CODEC_IO_Write>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003cb4:	89fb      	ldrh	r3, [r7, #14]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f240 6104 	movw	r1, #1540	; 0x604
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f91e 	bl	8004f00 <CODEC_IO_Write>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f240 6105 	movw	r1, #1541	; 0x605
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f911 	bl	8004f00 <CODEC_IO_Write>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61fb      	str	r3, [r7, #28]
      break;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <wm8994_Init+0x3cc>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8003cf2:	8afb      	ldrh	r3, [r7, #22]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 81a7 	beq.w	8004048 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <wm8994_Init+0x3d0>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8003d00:	8afb      	ldrh	r3, [r7, #22]
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d06:	d013      	beq.n	8003d30 <wm8994_Init+0x3d4>
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	dc04      	bgt.n	8003d18 <wm8994_Init+0x3bc>
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	f000 80cf 	beq.w	8003eb4 <wm8994_Init+0x558>
 8003d16:	e192      	b.n	800403e <wm8994_Init+0x6e2>
 8003d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1c:	d057      	beq.n	8003dce <wm8994_Init+0x472>
 8003d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d22:	f000 8116 	beq.w	8003f52 <wm8994_Init+0x5f6>
 8003d26:	e18a      	b.n	800403e <wm8994_Init+0x6e2>
 8003d28:	20000d94 	.word	0x20000d94
 8003d2c:	20000d98 	.word	0x20000d98
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8003d38:	2104      	movs	r1, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 f8e0 	bl	8004f00 <CODEC_IO_Write>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	22db      	movs	r2, #219	; 0xdb
 8003d50:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 f8d3 	bl	8004f00 <CODEC_IO_Write>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f8c6 	bl	8004f00 <CODEC_IO_Write>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003d7e:	89fb      	ldrh	r3, [r7, #14]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2202      	movs	r2, #2
 8003d84:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 f8b9 	bl	8004f00 <CODEC_IO_Write>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003d98:	89fb      	ldrh	r3, [r7, #14]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f240 6109 	movw	r1, #1545	; 0x609
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f8ac 	bl	8004f00 <CODEC_IO_Write>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	220e      	movs	r2, #14
 8003db8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 f89f 	bl	8004f00 <CODEC_IO_Write>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
      break;
 8003dcc:	e13f      	b.n	800404e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2211      	movs	r2, #17
 8003dd4:	2128      	movs	r1, #40	; 0x28
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f892 	bl	8004f00 <CODEC_IO_Write>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8003de6:	89fb      	ldrh	r3, [r7, #14]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2235      	movs	r2, #53	; 0x35
 8003dec:	2129      	movs	r1, #41	; 0x29
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 f886 	bl	8004f00 <CODEC_IO_Write>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8003dfe:	89fb      	ldrh	r3, [r7, #14]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2235      	movs	r2, #53	; 0x35
 8003e04:	212a      	movs	r1, #42	; 0x2a
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f87a 	bl	8004f00 <CODEC_IO_Write>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f240 3203 	movw	r2, #771	; 0x303
 8003e1e:	2104      	movs	r1, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f86d 	bl	8004f00 <CODEC_IO_Write>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003e30:	89fb      	ldrh	r3, [r7, #14]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	22db      	movs	r2, #219	; 0xdb
 8003e36:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f860 	bl	8004f00 <CODEC_IO_Write>
 8003e40:	4603      	mov	r3, r0
 8003e42:	461a      	mov	r2, r3
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003e4a:	89fb      	ldrh	r3, [r7, #14]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f246 3250 	movw	r2, #25424	; 0x6350
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 f853 	bl	8004f00 <CODEC_IO_Write>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003e64:	89fb      	ldrh	r3, [r7, #14]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f240 6106 	movw	r1, #1542	; 0x606
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f846 	bl	8004f00 <CODEC_IO_Write>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2202      	movs	r2, #2
 8003e84:	f240 6107 	movw	r1, #1543	; 0x607
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f839 	bl	8004f00 <CODEC_IO_Write>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	220d      	movs	r2, #13
 8003e9e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f82c 	bl	8004f00 <CODEC_IO_Write>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	61fb      	str	r3, [r7, #28]
      break;
 8003eb2:	e0cc      	b.n	800404e <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f81e 	bl	8004f00 <CODEC_IO_Write>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	22db      	movs	r2, #219	; 0xdb
 8003ed4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 f811 	bl	8004f00 <CODEC_IO_Write>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f246 3250 	movw	r2, #25424	; 0x6350
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f804 	bl	8004f00 <CODEC_IO_Write>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4413      	add	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2202      	movs	r2, #2
 8003f08:	f240 6106 	movw	r1, #1542	; 0x606
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fff7 	bl	8004f00 <CODEC_IO_Write>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003f1c:	89fb      	ldrh	r3, [r7, #14]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2202      	movs	r2, #2
 8003f22:	f240 6107 	movw	r1, #1543	; 0x607
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ffea 	bl	8004f00 <CODEC_IO_Write>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003f36:	89fb      	ldrh	r3, [r7, #14]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	220d      	movs	r2, #13
 8003f3c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 ffdd 	bl	8004f00 <CODEC_IO_Write>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61fb      	str	r3, [r7, #28]
      break; 
 8003f50:	e07d      	b.n	800404e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ffcf 	bl	8004f00 <CODEC_IO_Write>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	22db      	movs	r2, #219	; 0xdb
 8003f72:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 ffc2 	bl	8004f00 <CODEC_IO_Write>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	22db      	movs	r2, #219	; 0xdb
 8003f8c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 ffb5 	bl	8004f00 <CODEC_IO_Write>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8003fa8:	2102      	movs	r1, #2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 ffa8 	bl	8004f00 <CODEC_IO_Write>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f240 6106 	movw	r1, #1542	; 0x606
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 ff9b 	bl	8004f00 <CODEC_IO_Write>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003fd4:	89fb      	ldrh	r3, [r7, #14]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f240 6107 	movw	r1, #1543	; 0x607
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ff8e 	bl	8004f00 <CODEC_IO_Write>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ff81 	bl	8004f00 <CODEC_IO_Write>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2202      	movs	r2, #2
 800400e:	f240 6109 	movw	r1, #1545	; 0x609
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ff74 	bl	8004f00 <CODEC_IO_Write>
 8004018:	4603      	mov	r3, r0
 800401a:	461a      	mov	r2, r3
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	220d      	movs	r2, #13
 8004028:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ff67 	bl	8004f00 <CODEC_IO_Write>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	61fb      	str	r3, [r7, #28]
      break;    
 800403c:	e007      	b.n	800404e <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3301      	adds	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
      break;
 8004044:	bf00      	nop
 8004046:	e002      	b.n	800404e <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8004048:	4b95      	ldr	r3, [pc, #596]	; (80042a0 <wm8994_Init+0x944>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f245 6222 	movw	r2, #22050	; 0x5622
 8004054:	4293      	cmp	r3, r2
 8004056:	d076      	beq.n	8004146 <wm8994_Init+0x7ea>
 8004058:	f245 6222 	movw	r2, #22050	; 0x5622
 800405c:	4293      	cmp	r3, r2
 800405e:	d80a      	bhi.n	8004076 <wm8994_Init+0x71a>
 8004060:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004064:	4293      	cmp	r3, r2
 8004066:	d060      	beq.n	800412a <wm8994_Init+0x7ce>
 8004068:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800406c:	d025      	beq.n	80040ba <wm8994_Init+0x75e>
 800406e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004072:	d014      	beq.n	800409e <wm8994_Init+0x742>
 8004074:	e083      	b.n	800417e <wm8994_Init+0x822>
 8004076:	f64a 4244 	movw	r2, #44100	; 0xac44
 800407a:	4293      	cmp	r3, r2
 800407c:	d071      	beq.n	8004162 <wm8994_Init+0x806>
 800407e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004082:	4293      	cmp	r3, r2
 8004084:	d803      	bhi.n	800408e <wm8994_Init+0x732>
 8004086:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800408a:	d024      	beq.n	80040d6 <wm8994_Init+0x77a>
 800408c:	e077      	b.n	800417e <wm8994_Init+0x822>
 800408e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004092:	4293      	cmp	r3, r2
 8004094:	d02d      	beq.n	80040f2 <wm8994_Init+0x796>
 8004096:	4a83      	ldr	r2, [pc, #524]	; (80042a4 <wm8994_Init+0x948>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d038      	beq.n	800410e <wm8994_Init+0x7b2>
 800409c:	e06f      	b.n	800417e <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2203      	movs	r2, #3
 80040a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff29 	bl	8004f00 <CODEC_IO_Write>
 80040ae:	4603      	mov	r3, r0
 80040b0:	461a      	mov	r2, r3
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	61fb      	str	r3, [r7, #28]
    break;
 80040b8:	e06f      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80040ba:	89fb      	ldrh	r3, [r7, #14]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2233      	movs	r2, #51	; 0x33
 80040c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 ff1b 	bl	8004f00 <CODEC_IO_Write>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	61fb      	str	r3, [r7, #28]
    break;
 80040d4:	e061      	b.n	800419a <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80040d6:	89fb      	ldrh	r3, [r7, #14]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2263      	movs	r2, #99	; 0x63
 80040dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ff0d 	bl	8004f00 <CODEC_IO_Write>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
    break;
 80040f0:	e053      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2283      	movs	r2, #131	; 0x83
 80040f8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 feff 	bl	8004f00 <CODEC_IO_Write>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]
    break;
 800410c:	e045      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800410e:	89fb      	ldrh	r3, [r7, #14]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	22a3      	movs	r2, #163	; 0xa3
 8004114:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fef1 	bl	8004f00 <CODEC_IO_Write>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
    break;
 8004128:	e037      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800412a:	89fb      	ldrh	r3, [r7, #14]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2213      	movs	r2, #19
 8004130:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fee3 	bl	8004f00 <CODEC_IO_Write>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
    break;
 8004144:	e029      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004146:	89fb      	ldrh	r3, [r7, #14]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2243      	movs	r2, #67	; 0x43
 800414c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fed5 	bl	8004f00 <CODEC_IO_Write>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]
    break;
 8004160:	e01b      	b.n	800419a <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004162:	89fb      	ldrh	r3, [r7, #14]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2273      	movs	r2, #115	; 0x73
 8004168:	f44f 7104 	mov.w	r1, #528	; 0x210
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fec7 	bl	8004f00 <CODEC_IO_Write>
 8004172:	4603      	mov	r3, r0
 8004174:	461a      	mov	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	61fb      	str	r3, [r7, #28]
    break; 
 800417c:	e00d      	b.n	800419a <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2283      	movs	r2, #131	; 0x83
 8004184:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004188:	4618      	mov	r0, r3
 800418a:	f000 feb9 	bl	8004f00 <CODEC_IO_Write>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	61fb      	str	r3, [r7, #28]
    break; 
 8004198:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800419a:	8afb      	ldrh	r3, [r7, #22]
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	d10e      	bne.n	80041c0 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f244 0218 	movw	r2, #16408	; 0x4018
 80041aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fea6 	bl	8004f00 <CODEC_IO_Write>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e00d      	b.n	80041dc <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f244 0210 	movw	r2, #16400	; 0x4010
 80041c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fe97 	bl	8004f00 <CODEC_IO_Write>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461a      	mov	r2, r3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80041dc:	89fb      	ldrh	r3, [r7, #14]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2200      	movs	r2, #0
 80041e2:	f240 3102 	movw	r1, #770	; 0x302
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fe8a 	bl	8004f00 <CODEC_IO_Write>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	220a      	movs	r2, #10
 80041fc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fe7d 	bl	8004f00 <CODEC_IO_Write>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004210:	89fb      	ldrh	r3, [r7, #14]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2201      	movs	r2, #1
 8004216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fe70 	bl	8004f00 <CODEC_IO_Write>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800422a:	8b3b      	ldrh	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 817b 	beq.w	8004528 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004232:	8b3b      	ldrh	r3, [r7, #24]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d157      	bne.n	80042e8 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004240:	212d      	movs	r1, #45	; 0x2d
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fe5c 	bl	8004f00 <CODEC_IO_Write>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800425a:	212e      	movs	r1, #46	; 0x2e
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe4f 	bl	8004f00 <CODEC_IO_Write>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <wm8994_Init+0x94c>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800427c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fe3d 	bl	8004f00 <CODEC_IO_Write>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <wm8994_Init+0x94c>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8004296:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800429a:	f001 f81d 	bl	80052d8 <AUDIO_IO_Delay>
 800429e:	e016      	b.n	80042ce <wm8994_Init+0x972>
 80042a0:	20000d98 	.word	0x20000d98
 80042a4:	00017700 	.word	0x00017700
 80042a8:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80042ac:	89fb      	ldrh	r3, [r7, #14]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f248 1208 	movw	r2, #33032	; 0x8108
 80042b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fe21 	bl	8004f00 <CODEC_IO_Write>
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80042c8:	2032      	movs	r0, #50	; 0x32
 80042ca:	f001 f805 	bl	80052d8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80042ce:	89fb      	ldrh	r3, [r7, #14]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2200      	movs	r2, #0
 80042d4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fe11 	bl	8004f00 <CODEC_IO_Write>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80042f0:	2103      	movs	r1, #3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe04 	bl	8004f00 <CODEC_IO_Write>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004302:	89fb      	ldrh	r3, [r7, #14]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2200      	movs	r2, #0
 8004308:	2122      	movs	r1, #34	; 0x22
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fdf8 	bl	8004f00 <CODEC_IO_Write>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2200      	movs	r2, #0
 8004320:	2123      	movs	r1, #35	; 0x23
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fdec 	bl	8004f00 <CODEC_IO_Write>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f44f 7240 	mov.w	r2, #768	; 0x300
 800433a:	2136      	movs	r1, #54	; 0x36
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fddf 	bl	8004f00 <CODEC_IO_Write>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800434c:	89fb      	ldrh	r3, [r7, #14]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f243 0203 	movw	r2, #12291	; 0x3003
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fdd2 	bl	8004f00 <CODEC_IO_Write>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004366:	8afb      	ldrh	r3, [r7, #22]
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	d10d      	bne.n	800438a <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800436e:	89fb      	ldrh	r3, [r7, #14]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f240 2205 	movw	r2, #517	; 0x205
 8004376:	2151      	movs	r1, #81	; 0x51
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fdc1 	bl	8004f00 <CODEC_IO_Write>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e00b      	b.n	80043a2 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2205      	movs	r2, #5
 8004390:	2151      	movs	r1, #81	; 0x51
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fdb4 	bl	8004f00 <CODEC_IO_Write>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80043a2:	8b7b      	ldrh	r3, [r7, #26]
 80043a4:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80043a8:	f043 0303 	orr.w	r3, r3, #3
 80043ac:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	8b7a      	ldrh	r2, [r7, #26]
 80043b4:	2101      	movs	r1, #1
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fda2 	bl	8004f00 <CODEC_IO_Write>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80043c6:	89fb      	ldrh	r3, [r7, #14]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2222      	movs	r2, #34	; 0x22
 80043cc:	2160      	movs	r1, #96	; 0x60
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd96 	bl	8004f00 <CODEC_IO_Write>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80043de:	89fb      	ldrh	r3, [r7, #14]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f649 7225 	movw	r2, #40741	; 0x9f25
 80043e6:	214c      	movs	r1, #76	; 0x4c
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fd89 	bl	8004f00 <CODEC_IO_Write>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80043f8:	200f      	movs	r0, #15
 80043fa:	f000 ff6d 	bl	80052d8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2201      	movs	r2, #1
 8004404:	212d      	movs	r1, #45	; 0x2d
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fd7a 	bl	8004f00 <CODEC_IO_Write>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2201      	movs	r2, #1
 800441c:	212e      	movs	r1, #46	; 0x2e
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fd6e 	bl	8004f00 <CODEC_IO_Write>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800442e:	89fb      	ldrh	r3, [r7, #14]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004436:	2103      	movs	r1, #3
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fd61 	bl	8004f00 <CODEC_IO_Write>
 800443e:	4603      	mov	r3, r0
 8004440:	461a      	mov	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004448:	89fb      	ldrh	r3, [r7, #14]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2233      	movs	r2, #51	; 0x33
 800444e:	2154      	movs	r1, #84	; 0x54
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fd55 	bl	8004f00 <CODEC_IO_Write>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004460:	f240 1001 	movw	r0, #257	; 0x101
 8004464:	f000 ff38 	bl	80052d8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004468:	89fb      	ldrh	r3, [r7, #14]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	22ee      	movs	r2, #238	; 0xee
 800446e:	2160      	movs	r1, #96	; 0x60
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd45 	bl	8004f00 <CODEC_IO_Write>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	22c0      	movs	r2, #192	; 0xc0
 8004486:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fd38 	bl	8004f00 <CODEC_IO_Write>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800449a:	89fb      	ldrh	r3, [r7, #14]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	22c0      	movs	r2, #192	; 0xc0
 80044a0:	f240 6111 	movw	r1, #1553	; 0x611
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fd2b 	bl	8004f00 <CODEC_IO_Write>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2210      	movs	r2, #16
 80044ba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fd1e 	bl	8004f00 <CODEC_IO_Write>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80044ce:	89fb      	ldrh	r3, [r7, #14]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	22c0      	movs	r2, #192	; 0xc0
 80044d4:	f240 6112 	movw	r1, #1554	; 0x612
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd11 	bl	8004f00 <CODEC_IO_Write>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	22c0      	movs	r2, #192	; 0xc0
 80044ee:	f240 6113 	movw	r1, #1555	; 0x613
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd04 	bl	8004f00 <CODEC_IO_Write>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004502:	89fb      	ldrh	r3, [r7, #14]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2210      	movs	r2, #16
 8004508:	f240 4122 	movw	r1, #1058	; 0x422
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fcf7 	bl	8004f00 <CODEC_IO_Write>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800451c:	7afa      	ldrb	r2, [r7, #11]
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f984 	bl	8004830 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004528:	8afb      	ldrh	r3, [r7, #22]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a6 	beq.w	800467c <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d003      	beq.n	8004540 <wm8994_Init+0xbe4>
 8004538:	8afb      	ldrh	r3, [r7, #22]
 800453a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453e:	d12b      	bne.n	8004598 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004540:	8b7b      	ldrh	r3, [r7, #26]
 8004542:	f043 0313 	orr.w	r3, r3, #19
 8004546:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	8b7a      	ldrh	r2, [r7, #26]
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fcd5 	bl	8004f00 <CODEC_IO_Write>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2202      	movs	r2, #2
 8004566:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fcc8 	bl	8004f00 <CODEC_IO_Write>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004582:	f240 4111 	movw	r1, #1041	; 0x411
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fcba 	bl	8004f00 <CODEC_IO_Write>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e06b      	b.n	8004670 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004598:	8afb      	ldrh	r3, [r7, #22]
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d139      	bne.n	8004614 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80045a0:	8b7b      	ldrh	r3, [r7, #26]
 80045a2:	f043 0313 	orr.w	r3, r3, #19
 80045a6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80045a8:	89fb      	ldrh	r3, [r7, #14]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	8b7a      	ldrh	r2, [r7, #26]
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fca5 	bl	8004f00 <CODEC_IO_Write>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2202      	movs	r2, #2
 80045c6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fc98 	bl	8004f00 <CODEC_IO_Write>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	4413      	add	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80045e2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fc8a 	bl	8004f00 <CODEC_IO_Write>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80045f6:	89fb      	ldrh	r3, [r7, #14]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80045fe:	f240 4111 	movw	r1, #1041	; 0x411
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fc7c 	bl	8004f00 <CODEC_IO_Write>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	e02d      	b.n	8004670 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004614:	8afb      	ldrh	r3, [r7, #22]
 8004616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461a:	d003      	beq.n	8004624 <wm8994_Init+0xcc8>
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d125      	bne.n	8004670 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004624:	89fb      	ldrh	r3, [r7, #14]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	220b      	movs	r2, #11
 800462a:	2118      	movs	r1, #24
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fc67 	bl	8004f00 <CODEC_IO_Write>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800463c:	89fb      	ldrh	r3, [r7, #14]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	220b      	movs	r2, #11
 8004642:	211a      	movs	r1, #26
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fc5b 	bl	8004f00 <CODEC_IO_Write>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800465c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fc4d 	bl	8004f00 <CODEC_IO_Write>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004670:	7afa      	ldrb	r2, [r7, #11]
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f8da 	bl	8004830 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800467c:	69fb      	ldr	r3, [r7, #28]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop

08004688 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800468c:	f000 fdc6 	bl	800521c <AUDIO_IO_DeInit>
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800469e:	f000 fdb3 	bl	8005208 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fde9 	bl	8005280 <AUDIO_IO_Read>
 80046ae:	4603      	mov	r3, r0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	80fb      	strh	r3, [r7, #6]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f9d1 	bl	8004a78 <wm8994_SetMute>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f9bc 	bl	8004a78 <wm8994_SetMute>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2201      	movs	r2, #1
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fbf5 	bl	8004f00 <CODEC_IO_Write>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f99b 	bl	8004a78 <wm8994_SetMute>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004764:	4b31      	ldr	r3, [pc, #196]	; (800482c <wm8994_Stop+0xd8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05a      	beq.n	8004822 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2101      	movs	r1, #1
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f981 	bl	8004a78 <wm8994_SetMute>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d04e      	beq.n	8004822 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fbb5 	bl	8004f00 <CODEC_IO_Write>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a8:	f240 4122 	movw	r1, #1058	; 0x422
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fba7 	bl	8004f00 <CODEC_IO_Write>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2200      	movs	r2, #0
 80047c2:	212d      	movs	r1, #45	; 0x2d
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fb9b 	bl	8004f00 <CODEC_IO_Write>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	212e      	movs	r1, #46	; 0x2e
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fb8f 	bl	8004f00 <CODEC_IO_Write>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2200      	movs	r2, #0
 80047f2:	2105      	movs	r1, #5
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fb83 	bl	8004f00 <CODEC_IO_Write>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2200      	movs	r2, #0
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb77 	bl	8004f00 <CODEC_IO_Write>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <wm8994_Stop+0xd8>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000d94 	.word	0x20000d94

08004830 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	460a      	mov	r2, r1
 800483a:	80fb      	strh	r3, [r7, #6]
 800483c:	4613      	mov	r3, r2
 800483e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004844:	797b      	ldrb	r3, [r7, #5]
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d80b      	bhi.n	8004862 <wm8994_SetVolume+0x32>
 800484a:	797a      	ldrb	r2, [r7, #5]
 800484c:	4613      	mov	r3, r2
 800484e:	019b      	lsls	r3, r3, #6
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	4a86      	ldr	r2, [pc, #536]	; (8004a6c <wm8994_SetVolume+0x23c>)
 8004854:	fb82 1203 	smull	r1, r2, r2, r3
 8004858:	1152      	asrs	r2, r2, #5
 800485a:	17db      	asrs	r3, r3, #31
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e000      	b.n	8004864 <wm8994_SetVolume+0x34>
 8004862:	2364      	movs	r3, #100	; 0x64
 8004864:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004866:	4b82      	ldr	r3, [pc, #520]	; (8004a70 <wm8994_SetVolume+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 809b 	beq.w	80049a6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004870:	7afb      	ldrb	r3, [r7, #11]
 8004872:	2b3e      	cmp	r3, #62	; 0x3e
 8004874:	d93d      	bls.n	80048f2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f8fc 	bl	8004a78 <wm8994_SetMute>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f240 127f 	movw	r2, #383	; 0x17f
 8004890:	211c      	movs	r1, #28
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fb34 	bl	8004f00 <CODEC_IO_Write>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f240 127f 	movw	r2, #383	; 0x17f
 80048aa:	211d      	movs	r1, #29
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fb27 	bl	8004f00 <CODEC_IO_Write>
 80048b2:	4603      	mov	r3, r0
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f240 127f 	movw	r2, #383	; 0x17f
 80048c4:	2126      	movs	r1, #38	; 0x26
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb1a 	bl	8004f00 <CODEC_IO_Write>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f240 127f 	movw	r2, #383	; 0x17f
 80048de:	2127      	movs	r1, #39	; 0x27
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fb0d 	bl	8004f00 <CODEC_IO_Write>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e059      	b.n	80049a6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80048f2:	797b      	ldrb	r3, [r7, #5]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	2101      	movs	r1, #1
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f8bb 	bl	8004a78 <wm8994_SetMute>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e04c      	b.n	80049a6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f8b1 	bl	8004a78 <wm8994_SetMute>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	b2d8      	uxtb	r0, r3
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	b21b      	sxth	r3, r3
 8004926:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800492a:	b21b      	sxth	r3, r3
 800492c:	b29b      	uxth	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	211c      	movs	r1, #28
 8004932:	f000 fae5 	bl	8004f00 <CODEC_IO_Write>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	b2d8      	uxtb	r0, r3
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	b21b      	sxth	r3, r3
 8004948:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800494c:	b21b      	sxth	r3, r3
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	211d      	movs	r1, #29
 8004954:	f000 fad4 	bl	8004f00 <CODEC_IO_Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	b2d8      	uxtb	r0, r3
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	b21b      	sxth	r3, r3
 800496a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800496e:	b21b      	sxth	r3, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	2126      	movs	r1, #38	; 0x26
 8004976:	f000 fac3 	bl	8004f00 <CODEC_IO_Write>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	b2d8      	uxtb	r0, r3
 8004988:	7afb      	ldrb	r3, [r7, #11]
 800498a:	b21b      	sxth	r3, r3
 800498c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004990:	b21b      	sxth	r3, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	2127      	movs	r1, #39	; 0x27
 8004998:	f000 fab2 	bl	8004f00 <CODEC_IO_Write>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80049a6:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <wm8994_SetVolume+0x244>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d059      	beq.n	8004a62 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80049ae:	797b      	ldrb	r3, [r7, #5]
 80049b0:	2b63      	cmp	r3, #99	; 0x63
 80049b2:	d80c      	bhi.n	80049ce <wm8994_SetVolume+0x19e>
 80049b4:	797a      	ldrb	r2, [r7, #5]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <wm8994_SetVolume+0x23c>)
 80049c0:	fb82 1203 	smull	r1, r2, r2, r3
 80049c4:	1152      	asrs	r2, r2, #5
 80049c6:	17db      	asrs	r3, r3, #31
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e000      	b.n	80049d0 <wm8994_SetVolume+0x1a0>
 80049ce:	23ef      	movs	r3, #239	; 0xef
 80049d0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	b2d8      	uxtb	r0, r3
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	b21b      	sxth	r3, r3
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	b21b      	sxth	r3, r3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049e8:	f000 fa8a 	bl	8004f00 <CODEC_IO_Write>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	b2d8      	uxtb	r0, r3
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a02:	b21b      	sxth	r3, r3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	f240 4101 	movw	r1, #1025	; 0x401
 8004a0c:	f000 fa78 	bl	8004f00 <CODEC_IO_Write>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461a      	mov	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	b2d8      	uxtb	r0, r3
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	b21b      	sxth	r3, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f240 4104 	movw	r1, #1028	; 0x404
 8004a30:	f000 fa66 	bl	8004f00 <CODEC_IO_Write>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	b2d8      	uxtb	r0, r3
 8004a42:	7afb      	ldrb	r3, [r7, #11]
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f240 4105 	movw	r1, #1029	; 0x405
 8004a54:	f000 fa54 	bl	8004f00 <CODEC_IO_Write>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	51eb851f 	.word	0x51eb851f
 8004a70:	20000d94 	.word	0x20000d94
 8004a74:	20000d98 	.word	0x20000d98

08004a78 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004a88:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <wm8994_SetMute+0x98>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d039      	beq.n	8004b04 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d11c      	bne.n	8004ad0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa2c 	bl	8004f00 <CODEC_IO_Write>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aba:	f240 4122 	movw	r1, #1058	; 0x422
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa1e 	bl	8004f00 <CODEC_IO_Write>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e019      	b.n	8004b04 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa10 	bl	8004f00 <CODEC_IO_Write>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2210      	movs	r2, #16
 8004af0:	f240 4122 	movw	r1, #1058	; 0x422
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fa03 	bl	8004f00 <CODEC_IO_Write>
 8004afa:	4603      	mov	r3, r0
 8004afc:	461a      	mov	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000d94 	.word	0x20000d94

08004b14 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	80fb      	strh	r3, [r7, #6]
 8004b20:	4613      	mov	r3, r2
 8004b22:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004b28:	797b      	ldrb	r3, [r7, #5]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d047      	beq.n	8004bbe <wm8994_SetOutputMode+0xaa>
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f000 8087 	beq.w	8004c42 <wm8994_SetOutputMode+0x12e>
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	f040 80c6 	bne.w	8004cc6 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004b42:	2105      	movs	r1, #5
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f9db 	bl	8004f00 <CODEC_IO_Write>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f240 6101 	movw	r1, #1537	; 0x601
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f9ce 	bl	8004f00 <CODEC_IO_Write>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2200      	movs	r2, #0
 8004b74:	f240 6102 	movw	r1, #1538	; 0x602
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f9c1 	bl	8004f00 <CODEC_IO_Write>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4413      	add	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f240 6104 	movw	r1, #1540	; 0x604
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f9b4 	bl	8004f00 <CODEC_IO_Write>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f240 6105 	movw	r1, #1541	; 0x605
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f9a7 	bl	8004f00 <CODEC_IO_Write>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    break;
 8004bbc:	e0c5      	b.n	8004d4a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f240 3203 	movw	r2, #771	; 0x303
 8004bc6:	2105      	movs	r1, #5
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f999 	bl	8004f00 <CODEC_IO_Write>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f240 6101 	movw	r1, #1537	; 0x601
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f98c 	bl	8004f00 <CODEC_IO_Write>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f240 6102 	movw	r1, #1538	; 0x602
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f97f 	bl	8004f00 <CODEC_IO_Write>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	f240 6104 	movw	r1, #1540	; 0x604
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f972 	bl	8004f00 <CODEC_IO_Write>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f240 6105 	movw	r1, #1541	; 0x605
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f965 	bl	8004f00 <CODEC_IO_Write>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
    break;
 8004c40:	e083      	b.n	8004d4a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004c4a:	2105      	movs	r1, #5
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f957 	bl	8004f00 <CODEC_IO_Write>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2201      	movs	r2, #1
 8004c62:	f240 6101 	movw	r1, #1537	; 0x601
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f94a 	bl	8004f00 <CODEC_IO_Write>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f240 6102 	movw	r1, #1538	; 0x602
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f93d 	bl	8004f00 <CODEC_IO_Write>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2202      	movs	r2, #2
 8004c96:	f240 6104 	movw	r1, #1540	; 0x604
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f930 	bl	8004f00 <CODEC_IO_Write>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f240 6105 	movw	r1, #1541	; 0x605
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f923 	bl	8004f00 <CODEC_IO_Write>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    break;
 8004cc4:	e041      	b.n	8004d4a <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f240 3203 	movw	r2, #771	; 0x303
 8004cce:	2105      	movs	r1, #5
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f915 	bl	8004f00 <CODEC_IO_Write>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f240 6101 	movw	r1, #1537	; 0x601
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f908 	bl	8004f00 <CODEC_IO_Write>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f240 6102 	movw	r1, #1538	; 0x602
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f8fb 	bl	8004f00 <CODEC_IO_Write>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f240 6104 	movw	r1, #1540	; 0x604
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f8ee 	bl	8004f00 <CODEC_IO_Write>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2200      	movs	r2, #0
 8004d34:	f240 6105 	movw	r1, #1541	; 0x605
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f8e1 	bl	8004f00 <CODEC_IO_Write>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461a      	mov	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
    break;    
 8004d48:	bf00      	nop
  }  
  return counter;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d076      	beq.n	8004e5c <wm8994_SetFrequency+0x108>
 8004d6e:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d80a      	bhi.n	8004d8c <wm8994_SetFrequency+0x38>
 8004d76:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d060      	beq.n	8004e40 <wm8994_SetFrequency+0xec>
 8004d7e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004d82:	d025      	beq.n	8004dd0 <wm8994_SetFrequency+0x7c>
 8004d84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004d88:	d014      	beq.n	8004db4 <wm8994_SetFrequency+0x60>
 8004d8a:	e083      	b.n	8004e94 <wm8994_SetFrequency+0x140>
 8004d8c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d071      	beq.n	8004e78 <wm8994_SetFrequency+0x124>
 8004d94:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d803      	bhi.n	8004da4 <wm8994_SetFrequency+0x50>
 8004d9c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004da0:	d024      	beq.n	8004dec <wm8994_SetFrequency+0x98>
 8004da2:	e077      	b.n	8004e94 <wm8994_SetFrequency+0x140>
 8004da4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d02d      	beq.n	8004e08 <wm8994_SetFrequency+0xb4>
 8004dac:	4a43      	ldr	r2, [pc, #268]	; (8004ebc <wm8994_SetFrequency+0x168>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d038      	beq.n	8004e24 <wm8994_SetFrequency+0xd0>
 8004db2:	e06f      	b.n	8004e94 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2203      	movs	r2, #3
 8004dba:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f89e 	bl	8004f00 <CODEC_IO_Write>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
    break;
 8004dce:	e06f      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2233      	movs	r2, #51	; 0x33
 8004dd6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f890 	bl	8004f00 <CODEC_IO_Write>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
    break;
 8004dea:	e061      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2263      	movs	r2, #99	; 0x63
 8004df2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f882 	bl	8004f00 <CODEC_IO_Write>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
    break;
 8004e06:	e053      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2283      	movs	r2, #131	; 0x83
 8004e0e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f874 	bl	8004f00 <CODEC_IO_Write>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
    break;
 8004e22:	e045      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	22a3      	movs	r2, #163	; 0xa3
 8004e2a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f866 	bl	8004f00 <CODEC_IO_Write>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
    break;
 8004e3e:	e037      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2213      	movs	r2, #19
 8004e46:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f858 	bl	8004f00 <CODEC_IO_Write>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    break;
 8004e5a:	e029      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2243      	movs	r2, #67	; 0x43
 8004e62:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f84a 	bl	8004f00 <CODEC_IO_Write>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
    break;
 8004e76:	e01b      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2273      	movs	r2, #115	; 0x73
 8004e7e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f83c 	bl	8004f00 <CODEC_IO_Write>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
    break; 
 8004e92:	e00d      	b.n	8004eb0 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2283      	movs	r2, #131	; 0x83
 8004e9a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f82e 	bl	8004f00 <CODEC_IO_Write>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
    break; 
 8004eae:	bf00      	nop
  }
  return counter;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00017700 	.word	0x00017700

08004ec0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f812 	bl	8004f00 <CODEC_IO_Write>
 8004edc:	4603      	mov	r3, r0
 8004ede:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <wm8994_Reset+0x38>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <wm8994_Reset+0x3c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

  return counter;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000d94 	.word	0x20000d94
 8004efc:	20000d98 	.word	0x20000d98

08004f00 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	80bb      	strh	r3, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	88b9      	ldrh	r1, [r7, #4]
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f985 	bl	800522c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	b2db      	uxtb	r3, r3
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <BSP_LED_Toggle>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <BSP_LED_Toggle+0x20>
  {
    gpio_led = LED1_GPIO_PORT;
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <BSP_LED_Toggle+0x28>)
 8004f42:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8004f44:	2302      	movs	r3, #2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4619      	mov	r1, r3
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f003 fbaf 	bl	80086ae <HAL_GPIO_TogglePin>
  }
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40022000 	.word	0x40022000

08004f5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a51      	ldr	r2, [pc, #324]	; (80050ac <I2Cx_MspInit+0x150>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d14d      	bne.n	8005008 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f6c:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	4a4f      	ldr	r2, [pc, #316]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	6313      	str	r3, [r2, #48]	; 0x30
 8004f78:	4b4d      	ldr	r3, [pc, #308]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f88:	2312      	movs	r3, #18
 8004f8a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004f90:	2302      	movs	r3, #2
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004f94:	2304      	movs	r3, #4
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f98:	f107 031c 	add.w	r3, r7, #28
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4845      	ldr	r0, [pc, #276]	; (80050b4 <I2Cx_MspInit+0x158>)
 8004fa0:	f003 f8b8 	bl	8008114 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004faa:	f107 031c 	add.w	r3, r7, #28
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4840      	ldr	r0, [pc, #256]	; (80050b4 <I2Cx_MspInit+0x158>)
 8004fb2:	f003 f8af 	bl	8008114 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004fb6:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	4a3d      	ldr	r2, [pc, #244]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004fce:	4b38      	ldr	r3, [pc, #224]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a37      	ldr	r2, [pc, #220]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fd8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a34      	ldr	r2, [pc, #208]	; (80050b0 <I2Cx_MspInit+0x154>)
 8004fe0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fe4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	210f      	movs	r1, #15
 8004fea:	2048      	movs	r0, #72	; 0x48
 8004fec:	f001 ff94 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004ff0:	2048      	movs	r0, #72	; 0x48
 8004ff2:	f001 ffad 	bl	8006f50 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	210f      	movs	r1, #15
 8004ffa:	2049      	movs	r0, #73	; 0x49
 8004ffc:	f001 ff8c 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005000:	2049      	movs	r0, #73	; 0x49
 8005002:	f001 ffa5 	bl	8006f50 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005006:	e04d      	b.n	80050a4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <I2Cx_MspInit+0x154>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <I2Cx_MspInit+0x154>)
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	6313      	str	r3, [r2, #48]	; 0x30
 8005014:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <I2Cx_MspInit+0x154>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005024:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005026:	2312      	movs	r3, #18
 8005028:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800502e:	2302      	movs	r3, #2
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005032:	2304      	movs	r3, #4
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005036:	f107 031c 	add.w	r3, r7, #28
 800503a:	4619      	mov	r1, r3
 800503c:	481e      	ldr	r0, [pc, #120]	; (80050b8 <I2Cx_MspInit+0x15c>)
 800503e:	f003 f869 	bl	8008114 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005048:	f107 031c 	add.w	r3, r7, #28
 800504c:	4619      	mov	r1, r3
 800504e:	481a      	ldr	r0, [pc, #104]	; (80050b8 <I2Cx_MspInit+0x15c>)
 8005050:	f003 f860 	bl	8008114 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <I2Cx_MspInit+0x154>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <I2Cx_MspInit+0x154>)
 800505a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800505e:	6413      	str	r3, [r2, #64]	; 0x40
 8005060:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <I2Cx_MspInit+0x154>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <I2Cx_MspInit+0x154>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <I2Cx_MspInit+0x154>)
 8005072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005076:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <I2Cx_MspInit+0x154>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <I2Cx_MspInit+0x154>)
 800507e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005082:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005084:	2200      	movs	r2, #0
 8005086:	210f      	movs	r1, #15
 8005088:	201f      	movs	r0, #31
 800508a:	f001 ff45 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800508e:	201f      	movs	r0, #31
 8005090:	f001 ff5e 	bl	8006f50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005094:	2200      	movs	r2, #0
 8005096:	210f      	movs	r1, #15
 8005098:	2020      	movs	r0, #32
 800509a:	f001 ff3d 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800509e:	2020      	movs	r0, #32
 80050a0:	f001 ff56 	bl	8006f50 <HAL_NVIC_EnableIRQ>
}
 80050a4:	bf00      	nop
 80050a6:	3730      	adds	r7, #48	; 0x30
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000d9c 	.word	0x20000d9c
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40021c00 	.word	0x40021c00
 80050b8:	40020400 	.word	0x40020400

080050bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f005 fb05 	bl	800a6d4 <HAL_I2C_GetState>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d125      	bne.n	800511c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a14      	ldr	r2, [pc, #80]	; (8005124 <I2Cx_Init+0x68>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a13      	ldr	r2, [pc, #76]	; (8005128 <I2Cx_Init+0x6c>)
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e002      	b.n	80050e6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a12      	ldr	r2, [pc, #72]	; (800512c <I2Cx_Init+0x70>)
 80050e4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <I2Cx_Init+0x74>)
 80050ea:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff23 	bl	8004f5c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f004 ffee 	bl	800a0f8 <HAL_I2C_Init>
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000d9c 	.word	0x20000d9c
 8005128:	40005c00 	.word	0x40005c00
 800512c:	40005400 	.word	0x40005400
 8005130:	40912732 	.word	0x40912732

08005134 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af04      	add	r7, sp, #16
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4603      	mov	r3, r0
 8005144:	72fb      	strb	r3, [r7, #11]
 8005146:	460b      	mov	r3, r1
 8005148:	813b      	strh	r3, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	b299      	uxth	r1, r3
 8005156:	88f8      	ldrh	r0, [r7, #6]
 8005158:	893a      	ldrh	r2, [r7, #8]
 800515a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f005 f998 	bl	800a4a0 <HAL_I2C_Mem_Read>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800517a:	7afb      	ldrb	r3, [r7, #11]
 800517c:	4619      	mov	r1, r3
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f832 	bl	80051e8 <I2Cx_Error>
  }
  return status;    
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b08a      	sub	sp, #40	; 0x28
 8005192:	af04      	add	r7, sp, #16
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	461a      	mov	r2, r3
 800519c:	4603      	mov	r3, r0
 800519e:	72fb      	strb	r3, [r7, #11]
 80051a0:	460b      	mov	r3, r1
 80051a2:	813b      	strh	r3, [r7, #8]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	b299      	uxth	r1, r3
 80051b0:	88f8      	ldrh	r0, [r7, #6]
 80051b2:	893a      	ldrh	r2, [r7, #8]
 80051b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4603      	mov	r3, r0
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f005 f857 	bl	800a278 <HAL_I2C_Mem_Write>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80051d4:	7afb      	ldrb	r3, [r7, #11]
 80051d6:	4619      	mov	r1, r3
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f805 	bl	80051e8 <I2Cx_Error>
  }
  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f005 f80f 	bl	800a218 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ff5e 	bl	80050bc <I2Cx_Init>
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <AUDIO_IO_Init+0x10>)
 800520e:	f7ff ff55 	bl	80050bc <I2Cx_Init>
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000d9c 	.word	0x20000d9c

0800521c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
 8005236:	460b      	mov	r3, r1
 8005238:	80bb      	strh	r3, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8005242:	89fb      	ldrh	r3, [r7, #14]
 8005244:	0a1b      	lsrs	r3, r3, #8
 8005246:	b29b      	uxth	r3, r3
 8005248:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800524a:	89fb      	ldrh	r3, [r7, #14]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	b29b      	uxth	r3, r3
 8005250:	b21a      	sxth	r2, r3
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	b21b      	sxth	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	b21b      	sxth	r3, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800525e:	88ba      	ldrh	r2, [r7, #4]
 8005260:	79f9      	ldrb	r1, [r7, #7]
 8005262:	2302      	movs	r3, #2
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	2302      	movs	r3, #2
 800526c:	4803      	ldr	r0, [pc, #12]	; (800527c <AUDIO_IO_Write+0x50>)
 800526e:	f7ff ff8e 	bl	800518e <I2Cx_WriteMultiple>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000d9c 	.word	0x20000d9c

08005280 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	4603      	mov	r3, r0
 8005288:	460a      	mov	r2, r1
 800528a:	71fb      	strb	r3, [r7, #7]
 800528c:	4613      	mov	r3, r2
 800528e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	81bb      	strh	r3, [r7, #12]
 8005294:	2300      	movs	r3, #0
 8005296:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8005298:	88ba      	ldrh	r2, [r7, #4]
 800529a:	79f9      	ldrb	r1, [r7, #7]
 800529c:	2302      	movs	r3, #2
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2302      	movs	r3, #2
 80052a8:	480a      	ldr	r0, [pc, #40]	; (80052d4 <AUDIO_IO_Read+0x54>)
 80052aa:	f7ff ff43 	bl	8005134 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80052ae:	89bb      	ldrh	r3, [r7, #12]
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80052b4:	89bb      	ldrh	r3, [r7, #12]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	b21a      	sxth	r2, r3
 80052bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80052c6:	89fb      	ldrh	r3, [r7, #14]
 80052c8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80052ca:	89bb      	ldrh	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000d9c 	.word	0x20000d9c

080052d8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fab7 	bl	8006854 <HAL_Delay>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80052f8:	480e      	ldr	r0, [pc, #56]	; (8005334 <HAL_SAI_ErrorCallback+0x44>)
 80052fa:	f008 fa15 	bl	800d728 <HAL_SAI_GetState>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8005302:	480d      	ldr	r0, [pc, #52]	; (8005338 <HAL_SAI_ErrorCallback+0x48>)
 8005304:	f008 fa10 	bl	800d728 <HAL_SAI_GetState>
 8005308:	4603      	mov	r3, r0
 800530a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d002      	beq.n	8005318 <HAL_SAI_ErrorCallback+0x28>
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b12      	cmp	r3, #18
 8005316:	d101      	bne.n	800531c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8005318:	f000 f810 	bl	800533c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d002      	beq.n	8005328 <HAL_SAI_ErrorCallback+0x38>
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	2b22      	cmp	r3, #34	; 0x22
 8005326:	d101      	bne.n	800532c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8005328:	f7fb fed4 	bl	80010d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000de8 	.word	0x20000de8
 8005338:	20000e6c 	.word	0x20000e6c

0800533c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	; 0x30
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005356:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	4a62      	ldr	r2, [pc, #392]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800535c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005360:	6453      	str	r3, [r2, #68]	; 0x44
 8005362:	4b60      	ldr	r3, [pc, #384]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800536e:	4b5d      	ldr	r3, [pc, #372]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	4a5c      	ldr	r2, [pc, #368]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	6313      	str	r3, [r2, #48]	; 0x30
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8005386:	4b57      	ldr	r3, [pc, #348]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	4a56      	ldr	r2, [pc, #344]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005390:	6313      	str	r3, [r2, #48]	; 0x30
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800539e:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a50      	ldr	r2, [pc, #320]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80053a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80053c6:	230a      	movs	r3, #10
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	4619      	mov	r1, r3
 80053d0:	4845      	ldr	r0, [pc, #276]	; (80054e8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80053d2:	f002 fe9f 	bl	8008114 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80053d6:	2320      	movs	r3, #32
 80053d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053da:	2302      	movs	r3, #2
 80053dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053e2:	2303      	movs	r3, #3
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80053e6:	230a      	movs	r3, #10
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80053ea:	f107 031c 	add.w	r3, r7, #28
 80053ee:	4619      	mov	r1, r3
 80053f0:	483d      	ldr	r0, [pc, #244]	; (80054e8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80053f2:	f002 fe8f 	bl	8008114 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053fa:	2302      	movs	r3, #2
 80053fc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005402:	2303      	movs	r3, #3
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005406:	230a      	movs	r3, #10
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800540a:	f107 031c 	add.w	r3, r7, #28
 800540e:	4619      	mov	r1, r3
 8005410:	4835      	ldr	r0, [pc, #212]	; (80054e8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005412:	f002 fe7f 	bl	8008114 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005416:	2310      	movs	r3, #16
 8005418:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800541a:	2302      	movs	r3, #2
 800541c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005422:	2303      	movs	r3, #3
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005426:	230a      	movs	r3, #10
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800542a:	f107 031c 	add.w	r3, r7, #28
 800542e:	4619      	mov	r1, r3
 8005430:	482d      	ldr	r0, [pc, #180]	; (80054e8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005432:	f002 fe6f 	bl	8008114 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800543c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d138      	bne.n	80054ca <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800545a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800545e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005460:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005468:	2200      	movs	r2, #0
 800546a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800546c:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800546e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005472:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005474:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800547c:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800547e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005482:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005484:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800548a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800548c:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800548e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005492:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005494:	4b16      	ldr	r3, [pc, #88]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005496:	2204      	movs	r2, #4
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800549c:	2203      	movs	r2, #3
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054ae:	4a11      	ldr	r2, [pc, #68]	; (80054f4 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80054b0:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80054be:	480c      	ldr	r0, [pc, #48]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054c0:	f001 ff66 	bl	8007390 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80054c4:	480a      	ldr	r0, [pc, #40]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054c6:	f001 feb5 	bl	8007234 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	210e      	movs	r1, #14
 80054ce:	203c      	movs	r0, #60	; 0x3c
 80054d0:	f001 fd22 	bl	8006f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80054d4:	203c      	movs	r0, #60	; 0x3c
 80054d6:	f001 fd3b 	bl	8006f50 <HAL_NVIC_EnableIRQ>
}
 80054da:	bf00      	nop
 80054dc:	3730      	adds	r7, #48	; 0x30
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40015c04 	.word	0x40015c04
 80054f0:	20000ef0 	.word	0x20000ef0
 80054f4:	40026470 	.word	0x40026470

080054f8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b0a6      	sub	sp, #152	; 0x98
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	4618      	mov	r0, r3
 800550a:	f007 f8d5 	bl	800c6b8 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f245 6222 	movw	r2, #22050	; 0x5622
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005528:	4293      	cmp	r3, r2
 800552a:	d112      	bne.n	8005552 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800552c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005530:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005536:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005538:	f240 13ad 	movw	r3, #429	; 0x1ad
 800553c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800553e:	2302      	movs	r3, #2
 8005540:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005542:	2313      	movs	r3, #19
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005546:	f107 0314 	add.w	r3, r7, #20
 800554a:	4618      	mov	r0, r3
 800554c:	f006 fcc6 	bl	800bedc <HAL_RCCEx_PeriphCLKConfig>
 8005550:	e011      	b.n	8005576 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005552:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005556:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800555c:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800555e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005562:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8005564:	2307      	movs	r3, #7
 8005566:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8005568:	2301      	movs	r3, #1
 800556a:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4618      	mov	r0, r3
 8005572:	f006 fcb3 	bl	800bedc <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005576:	bf00      	nop
 8005578:	3798      	adds	r7, #152	; 0x98
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005594:	f000 f806 	bl	80055a4 <BSP_AUDIO_IN_InitEx>
 8005598:	4603      	mov	r3, r0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4603      	mov	r3, r0
 80055b2:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c2:	d006      	beq.n	80055d2 <BSP_AUDIO_IN_InitEx+0x2e>
 80055c4:	89fb      	ldrh	r3, [r7, #14]
 80055c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ca:	d002      	beq.n	80055d2 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e046      	b.n	8005660 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80055d2:	f000 f9e7 	bl	80059a4 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80055d6:	2200      	movs	r2, #0
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4824      	ldr	r0, [pc, #144]	; (800566c <BSP_AUDIO_IN_InitEx+0xc8>)
 80055dc:	f7ff ff8c 	bl	80054f8 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80055e0:	4b22      	ldr	r3, [pc, #136]	; (800566c <BSP_AUDIO_IN_InitEx+0xc8>)
 80055e2:	4a23      	ldr	r2, [pc, #140]	; (8005670 <BSP_AUDIO_IN_InitEx+0xcc>)
 80055e4:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80055e6:	4821      	ldr	r0, [pc, #132]	; (800566c <BSP_AUDIO_IN_InitEx+0xc8>)
 80055e8:	f008 f89e 	bl	800d728 <HAL_SAI_GetState>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80055f2:	2100      	movs	r1, #0
 80055f4:	481d      	ldr	r0, [pc, #116]	; (800566c <BSP_AUDIO_IN_InitEx+0xc8>)
 80055f6:	f7ff fea9 	bl	800534c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80055fa:	2100      	movs	r1, #0
 80055fc:	481b      	ldr	r0, [pc, #108]	; (800566c <BSP_AUDIO_IN_InitEx+0xc8>)
 80055fe:	f000 f869 	bl	80056d4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005602:	89fb      	ldrh	r3, [r7, #14]
 8005604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005608:	d102      	bne.n	8005610 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800560a:	230a      	movs	r3, #10
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e001      	b.n	8005614 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8005610:	2305      	movs	r3, #5
 8005612:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	2001      	movs	r0, #1
 800561a:	f000 f90d 	bl	8005838 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2034      	movs	r0, #52	; 0x34
 8005624:	4798      	blx	r3
 8005626:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f648 1294 	movw	r2, #35220	; 0x8994
 800562e:	4293      	cmp	r3, r2
 8005630:	d109      	bne.n	8005646 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	2034      	movs	r0, #52	; 0x34
 8005638:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <BSP_AUDIO_IN_InitEx+0xd4>)
 800563c:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <BSP_AUDIO_IN_InitEx+0xd0>)
 800563e:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e001      	b.n	800564a <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d107      	bne.n	8005660 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681c      	ldr	r4, [r3, #0]
 8005656:	89f9      	ldrh	r1, [r7, #14]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2264      	movs	r2, #100	; 0x64
 800565c:	2034      	movs	r0, #52	; 0x34
 800565e:	47a0      	blx	r4
    }
  }
  return ret;
 8005660:	7ffb      	ldrb	r3, [r7, #31]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3724      	adds	r7, #36	; 0x24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	bf00      	nop
 800566c:	20000e6c 	.word	0x20000e6c
 8005670:	40015c24 	.word	0x40015c24
 8005674:	20000004 	.word	0x20000004
 8005678:	2001b8d0 	.word	0x2001b8d0

0800567c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <BSP_AUDIO_IN_Record+0x2c>)
 8005694:	f007 ffba 	bl	800d60c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	b2db      	uxtb	r3, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000e6c 	.word	0x20000e6c

080056ac <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80056b4:	f7fb fcf2 	bl	800109c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80056c8:	f7fb fccc 	bl	8001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80056de:	4b50      	ldr	r3, [pc, #320]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	4a4f      	ldr	r2, [pc, #316]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 80056e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056e8:	6453      	str	r3, [r2, #68]	; 0x44
 80056ea:	4b4d      	ldr	r3, [pc, #308]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	4a49      	ldr	r2, [pc, #292]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 80056fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005700:	6313      	str	r3, [r2, #48]	; 0x30
 8005702:	4b47      	ldr	r3, [pc, #284]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800570e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005712:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005714:	2302      	movs	r3, #2
 8005716:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800571c:	2302      	movs	r3, #2
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8005720:	230a      	movs	r3, #10
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005724:	f107 031c 	add.w	r3, r7, #28
 8005728:	4619      	mov	r1, r3
 800572a:	483e      	ldr	r0, [pc, #248]	; (8005824 <BSP_AUDIO_IN_MspInit+0x150>)
 800572c:	f002 fcf2 	bl	8008114 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8005730:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	4a3a      	ldr	r2, [pc, #232]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	6313      	str	r3, [r2, #48]	; 0x30
 800573c:	4b38      	ldr	r3, [pc, #224]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800574e:	2300      	movs	r3, #0
 8005750:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005756:	2302      	movs	r3, #2
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800575a:	f107 031c 	add.w	r3, r7, #28
 800575e:	4619      	mov	r1, r3
 8005760:	4831      	ldr	r0, [pc, #196]	; (8005828 <BSP_AUDIO_IN_MspInit+0x154>)
 8005762:	f002 fcd7 	bl	8008114 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 800576c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005770:	6313      	str	r3, [r2, #48]	; 0x30
 8005772:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <BSP_AUDIO_IN_MspInit+0x158>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d137      	bne.n	80057f8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005788:	4b29      	ldr	r3, [pc, #164]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 800578a:	2200      	movs	r2, #0
 800578c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800578e:	4b28      	ldr	r3, [pc, #160]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005790:	2200      	movs	r2, #0
 8005792:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005794:	4b26      	ldr	r3, [pc, #152]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005796:	2200      	movs	r2, #0
 8005798:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800579a:	4b25      	ldr	r3, [pc, #148]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 800579c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057a0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80057aa:	4b21      	ldr	r3, [pc, #132]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057b0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80057b2:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80057ba:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057c0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057ca:	2203      	movs	r2, #3
 80057cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80057ce:	4b18      	ldr	r3, [pc, #96]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <BSP_AUDIO_IN_MspInit+0x160>)
 80057de:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057e4:	671a      	str	r2, [r3, #112]	; 0x70
 80057e6:	4a12      	ldr	r2, [pc, #72]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80057ec:	4810      	ldr	r0, [pc, #64]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057ee:	f001 fdcf 	bl	8007390 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80057f2:	480f      	ldr	r0, [pc, #60]	; (8005830 <BSP_AUDIO_IN_MspInit+0x15c>)
 80057f4:	f001 fd1e 	bl	8007234 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80057f8:	2200      	movs	r2, #0
 80057fa:	210f      	movs	r1, #15
 80057fc:	2046      	movs	r0, #70	; 0x46
 80057fe:	f001 fb8b 	bl	8006f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005802:	2046      	movs	r0, #70	; 0x46
 8005804:	f001 fba4 	bl	8006f50 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005808:	2200      	movs	r2, #0
 800580a:	210f      	movs	r1, #15
 800580c:	2028      	movs	r0, #40	; 0x28
 800580e:	f001 fb83 	bl	8006f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8005812:	2028      	movs	r0, #40	; 0x28
 8005814:	f001 fb9c 	bl	8006f50 <HAL_NVIC_EnableIRQ>
}
 8005818:	bf00      	nop
 800581a:	3730      	adds	r7, #48	; 0x30
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	40021800 	.word	0x40021800
 8005828:	40021c00 	.word	0x40021c00
 800582c:	40015c24 	.word	0x40015c24
 8005830:	20000f50 	.word	0x20000f50
 8005834:	400264b8 	.word	0x400264b8

08005838 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005844:	4b53      	ldr	r3, [pc, #332]	; (8005994 <SAIx_In_Init+0x15c>)
 8005846:	4a54      	ldr	r2, [pc, #336]	; (8005998 <SAIx_In_Init+0x160>)
 8005848:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800584a:	4b52      	ldr	r3, [pc, #328]	; (8005994 <SAIx_In_Init+0x15c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b50      	ldr	r3, [pc, #320]	; (8005994 <SAIx_In_Init+0x15c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005858:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800585a:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <SAIx_In_Init+0x15c>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8005860:	4a4c      	ldr	r2, [pc, #304]	; (8005994 <SAIx_In_Init+0x15c>)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005866:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <SAIx_In_Init+0x15c>)
 8005868:	2200      	movs	r2, #0
 800586a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800586c:	4b49      	ldr	r3, [pc, #292]	; (8005994 <SAIx_In_Init+0x15c>)
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8005872:	4b48      	ldr	r3, [pc, #288]	; (8005994 <SAIx_In_Init+0x15c>)
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005878:	4b46      	ldr	r3, [pc, #280]	; (8005994 <SAIx_In_Init+0x15c>)
 800587a:	2200      	movs	r2, #0
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800587e:	4b45      	ldr	r3, [pc, #276]	; (8005994 <SAIx_In_Init+0x15c>)
 8005880:	2201      	movs	r2, #1
 8005882:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <SAIx_In_Init+0x15c>)
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800588a:	4b42      	ldr	r3, [pc, #264]	; (8005994 <SAIx_In_Init+0x15c>)
 800588c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005890:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005892:	4b40      	ldr	r3, [pc, #256]	; (8005994 <SAIx_In_Init+0x15c>)
 8005894:	2201      	movs	r2, #1
 8005896:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8005898:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <SAIx_In_Init+0x15c>)
 800589a:	2240      	movs	r2, #64	; 0x40
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <SAIx_In_Init+0x15c>)
 80058a0:	2220      	movs	r2, #32
 80058a2:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80058a4:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <SAIx_In_Init+0x15c>)
 80058a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058aa:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80058ac:	4b39      	ldr	r3, [pc, #228]	; (8005994 <SAIx_In_Init+0x15c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80058b2:	4b38      	ldr	r3, [pc, #224]	; (8005994 <SAIx_In_Init+0x15c>)
 80058b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058b8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80058ba:	4b36      	ldr	r3, [pc, #216]	; (8005994 <SAIx_In_Init+0x15c>)
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80058c0:	4b34      	ldr	r3, [pc, #208]	; (8005994 <SAIx_In_Init+0x15c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <SAIx_In_Init+0x15c>)
 80058c8:	2204      	movs	r2, #4
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <SAIx_In_Init+0x15c>)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80058d2:	4830      	ldr	r0, [pc, #192]	; (8005994 <SAIx_In_Init+0x15c>)
 80058d4:	f007 fcf2 	bl	800d2bc <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <SAIx_In_Init+0x164>)
 80058da:	4a31      	ldr	r2, [pc, #196]	; (80059a0 <SAIx_In_Init+0x168>)
 80058dc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80058de:	4b2f      	ldr	r3, [pc, #188]	; (800599c <SAIx_In_Init+0x164>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <SAIx_In_Init+0x164>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058ec:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80058ee:	4a2b      	ldr	r2, [pc, #172]	; (800599c <SAIx_In_Init+0x164>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <SAIx_In_Init+0x164>)
 80058f6:	2203      	movs	r2, #3
 80058f8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <SAIx_In_Init+0x164>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005900:	4b26      	ldr	r3, [pc, #152]	; (800599c <SAIx_In_Init+0x164>)
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005906:	4b25      	ldr	r3, [pc, #148]	; (800599c <SAIx_In_Init+0x164>)
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800590c:	4b23      	ldr	r3, [pc, #140]	; (800599c <SAIx_In_Init+0x164>)
 800590e:	2200      	movs	r2, #0
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <SAIx_In_Init+0x164>)
 8005914:	2201      	movs	r2, #1
 8005916:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <SAIx_In_Init+0x164>)
 800591a:	2201      	movs	r2, #1
 800591c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800591e:	4b1f      	ldr	r3, [pc, #124]	; (800599c <SAIx_In_Init+0x164>)
 8005920:	2200      	movs	r2, #0
 8005922:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005924:	4b1d      	ldr	r3, [pc, #116]	; (800599c <SAIx_In_Init+0x164>)
 8005926:	2201      	movs	r2, #1
 8005928:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800592a:	4b1c      	ldr	r3, [pc, #112]	; (800599c <SAIx_In_Init+0x164>)
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <SAIx_In_Init+0x164>)
 8005932:	2220      	movs	r2, #32
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005936:	4b19      	ldr	r3, [pc, #100]	; (800599c <SAIx_In_Init+0x164>)
 8005938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800593c:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800593e:	4b17      	ldr	r3, [pc, #92]	; (800599c <SAIx_In_Init+0x164>)
 8005940:	2200      	movs	r2, #0
 8005942:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005944:	4b15      	ldr	r3, [pc, #84]	; (800599c <SAIx_In_Init+0x164>)
 8005946:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800594a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <SAIx_In_Init+0x164>)
 800594e:	2200      	movs	r2, #0
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <SAIx_In_Init+0x164>)
 8005954:	2200      	movs	r2, #0
 8005956:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8005958:	4b10      	ldr	r3, [pc, #64]	; (800599c <SAIx_In_Init+0x164>)
 800595a:	2204      	movs	r2, #4
 800595c:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800595e:	4a0f      	ldr	r2, [pc, #60]	; (800599c <SAIx_In_Init+0x164>)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8005964:	480d      	ldr	r0, [pc, #52]	; (800599c <SAIx_In_Init+0x164>)
 8005966:	f007 fca9 	bl	800d2bc <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <SAIx_In_Init+0x15c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <SAIx_In_Init+0x15c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005978:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <SAIx_In_Init+0x164>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <SAIx_In_Init+0x164>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000de8 	.word	0x20000de8
 8005998:	40015c04 	.word	0x40015c04
 800599c:	20000e6c 	.word	0x20000e6c
 80059a0:	40015c24 	.word	0x40015c24

080059a4 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <SAIx_In_DeInit+0x24>)
 80059aa:	4a08      	ldr	r2, [pc, #32]	; (80059cc <SAIx_In_DeInit+0x28>)
 80059ac:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <SAIx_In_DeInit+0x24>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <SAIx_In_DeInit+0x24>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059bc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80059be:	4802      	ldr	r0, [pc, #8]	; (80059c8 <SAIx_In_DeInit+0x24>)
 80059c0:	f007 fdee 	bl	800d5a0 <HAL_SAI_DeInit>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000e6c 	.word	0x20000e6c
 80059cc:	40015c24 	.word	0x40015c24

080059d0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80059d4:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059d6:	2228      	movs	r2, #40	; 0x28
 80059d8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059dc:	2209      	movs	r2, #9
 80059de:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80059e0:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059e2:	2235      	movs	r2, #53	; 0x35
 80059e4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059e8:	220b      	movs	r2, #11
 80059ea:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059ee:	f240 121b 	movw	r2, #283	; 0x11b
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80059f4:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059f6:	f240 2215 	movw	r2, #533	; 0x215
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <BSP_LCD_Init+0xcc>)
 80059fe:	f240 121d 	movw	r2, #285	; 0x11d
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005a04:	4b25      	ldr	r3, [pc, #148]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a06:	f240 2235 	movw	r2, #565	; 0x235
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4823      	ldr	r0, [pc, #140]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a10:	f000 fc1c 	bl	800624c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a1e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8005a42:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a56:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <BSP_LCD_Init+0xd0>)
 8005a58:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005a5a:	4810      	ldr	r0, [pc, #64]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a5c:	f005 facc 	bl	800aff8 <HAL_LTDC_GetState>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8005a66:	2100      	movs	r1, #0
 8005a68:	480c      	ldr	r0, [pc, #48]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a6a:	f000 fb15 	bl	8006098 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8005a6e:	480b      	ldr	r0, [pc, #44]	; (8005a9c <BSP_LCD_Init+0xcc>)
 8005a70:	f005 f8f2 	bl	800ac58 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005a74:	2201      	movs	r2, #1
 8005a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a7a:	480a      	ldr	r0, [pc, #40]	; (8005aa4 <BSP_LCD_Init+0xd4>)
 8005a7c:	f002 fdfe 	bl	800867c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005a80:	2201      	movs	r2, #1
 8005a82:	2108      	movs	r1, #8
 8005a84:	4808      	ldr	r0, [pc, #32]	; (8005aa8 <BSP_LCD_Init+0xd8>)
 8005a86:	f002 fdf9 	bl	800867c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005a8a:	f000 fcff 	bl	800648c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005a8e:	4807      	ldr	r0, [pc, #28]	; (8005aac <BSP_LCD_Init+0xdc>)
 8005a90:	f000 f8c8 	bl	8005c24 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2001b8d4 	.word	0x2001b8d4
 8005aa0:	40016800 	.word	0x40016800
 8005aa4:	40022000 	.word	0x40022000
 8005aa8:	40022800 	.word	0x40022800
 8005aac:	20000038 	.word	0x20000038

08005ab0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <BSP_LCD_GetXSize+0x20>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a06      	ldr	r2, [pc, #24]	; (8005ad4 <BSP_LCD_GetXSize+0x24>)
 8005aba:	2134      	movs	r1, #52	; 0x34
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3360      	adds	r3, #96	; 0x60
 8005ac4:	681b      	ldr	r3, [r3, #0]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000ff0 	.word	0x20000ff0
 8005ad4:	2001b8d4 	.word	0x2001b8d4

08005ad8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <BSP_LCD_GetYSize+0x20>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a06      	ldr	r2, [pc, #24]	; (8005afc <BSP_LCD_GetYSize+0x24>)
 8005ae2:	2134      	movs	r1, #52	; 0x34
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	3364      	adds	r3, #100	; 0x64
 8005aec:	681b      	ldr	r3, [r3, #0]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000ff0 	.word	0x20000ff0
 8005afc:	2001b8d4 	.word	0x2001b8d4

08005b00 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b090      	sub	sp, #64	; 0x40
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8005b10:	f7ff ffce 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005b14:	4603      	mov	r3, r0
 8005b16:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005b1c:	f7ff ffdc 	bl	8005ad8 <BSP_LCD_GetYSize>
 8005b20:	4603      	mov	r3, r0
 8005b22:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8005b2c:	23ff      	movs	r3, #255	; 0xff
 8005b2e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005b46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005b4c:	2307      	movs	r3, #7
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8005b50:	f7ff ffae 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005b54:	4603      	mov	r3, r0
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8005b58:	f7ff ffbe 	bl	8005ad8 <BSP_LCD_GetYSize>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	f107 030c 	add.w	r3, r7, #12
 8005b66:	4619      	mov	r1, r3
 8005b68:	4812      	ldr	r0, [pc, #72]	; (8005bb4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8005b6a:	f005 fa07 	bl	800af7c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	4911      	ldr	r1, [pc, #68]	; (8005bb8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	490c      	ldr	r1, [pc, #48]	; (8005bb8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	3308      	adds	r3, #8
 8005b94:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8005b96:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	4907      	ldr	r1, [pc, #28]	; (8005bb8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8005baa:	601a      	str	r2, [r3, #0]
}
 8005bac:	bf00      	nop
 8005bae:	3740      	adds	r7, #64	; 0x40
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	2001b8d4 	.word	0x2001b8d4
 8005bb8:	20000ff4 	.word	0x20000ff4
 8005bbc:	20000038 	.word	0x20000038

08005bc0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <BSP_LCD_SetTextColor+0x28>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4907      	ldr	r1, [pc, #28]	; (8005bec <BSP_LCD_SetTextColor+0x2c>)
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	601a      	str	r2, [r3, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000ff0 	.word	0x20000ff0
 8005bec:	20000ff4 	.word	0x20000ff4

08005bf0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <BSP_LCD_SetBackColor+0x2c>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4908      	ldr	r1, [pc, #32]	; (8005c20 <BSP_LCD_SetBackColor+0x30>)
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	3304      	adds	r3, #4
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000ff0 	.word	0x20000ff0
 8005c20:	20000ff4 	.word	0x20000ff4

08005c24 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <BSP_LCD_SetFont+0x2c>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4908      	ldr	r1, [pc, #32]	; (8005c54 <BSP_LCD_SetFont+0x30>)
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000ff0 	.word	0x20000ff0
 8005c54:	20000ff4 	.word	0x20000ff4

08005c58 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <BSP_LCD_GetFont+0x24>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4907      	ldr	r1, [pc, #28]	; (8005c80 <BSP_LCD_GetFont+0x28>)
 8005c62:	4613      	mov	r3, r2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000ff0 	.word	0x20000ff0
 8005c80:	20000ff4 	.word	0x20000ff4

08005c84 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <BSP_LCD_Clear+0x48>)
 8005c8e:	681c      	ldr	r4, [r3, #0]
 8005c90:	4b0e      	ldr	r3, [pc, #56]	; (8005ccc <BSP_LCD_Clear+0x48>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <BSP_LCD_Clear+0x4c>)
 8005c96:	2134      	movs	r1, #52	; 0x34
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	335c      	adds	r3, #92	; 0x5c
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	f7ff ff04 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	f7ff ff15 	bl	8005ad8 <BSP_LCD_GetYSize>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	4632      	mov	r2, r6
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 fb98 	bl	80063f4 <LL_FillBuffer>
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ccc:	20000ff0 	.word	0x20000ff0
 8005cd0:	2001b8d4 	.word	0x2001b8d4

08005cd4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	80bb      	strh	r3, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <BSP_LCD_DisplayChar+0x80>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	491b      	ldr	r1, [pc, #108]	; (8005d58 <BSP_LCD_DisplayChar+0x84>)
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6819      	ldr	r1, [r3, #0]
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005d02:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <BSP_LCD_DisplayChar+0x80>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4c14      	ldr	r4, [pc, #80]	; (8005d58 <BSP_LCD_DisplayChar+0x84>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4423      	add	r3, r4
 8005d12:	3308      	adds	r3, #8
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005d18:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <BSP_LCD_DisplayChar+0x80>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4c0d      	ldr	r4, [pc, #52]	; (8005d58 <BSP_LCD_DisplayChar+0x84>)
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4423      	add	r3, r4
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	889b      	ldrh	r3, [r3, #4]
 8005d32:	3307      	adds	r3, #7
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da00      	bge.n	8005d3a <BSP_LCD_DisplayChar+0x66>
 8005d38:	3307      	adds	r3, #7
 8005d3a:	10db      	asrs	r3, r3, #3
 8005d3c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005d40:	18ca      	adds	r2, r1, r3
 8005d42:	88b9      	ldrh	r1, [r7, #4]
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fa9c 	bl	8006284 <DrawChar>
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd90      	pop	{r4, r7, pc}
 8005d54:	20000ff0 	.word	0x20000ff0
 8005d58:	20000ff4 	.word	0x20000ff4

08005d5c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005d5c:	b5b0      	push	{r4, r5, r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60ba      	str	r2, [r7, #8]
 8005d64:	461a      	mov	r2, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	81fb      	strh	r3, [r7, #14]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	81bb      	strh	r3, [r7, #12]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005d72:	2301      	movs	r3, #1
 8005d74:	83fb      	strh	r3, [r7, #30]
 8005d76:	2300      	movs	r3, #0
 8005d78:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005d86:	e002      	b.n	8005d8e <BSP_LCD_DisplayStringAt+0x32>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	617a      	str	r2, [r7, #20]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f6      	bne.n	8005d88 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005d9a:	f7ff fe89 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005d9e:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	494f      	ldr	r1, [pc, #316]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005da4:	4613      	mov	r3, r2
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3308      	adds	r3, #8
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	889b      	ldrh	r3, [r3, #4]
 8005db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db8:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d01c      	beq.n	8005dfa <BSP_LCD_DisplayStringAt+0x9e>
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d017      	beq.n	8005df4 <BSP_LCD_DisplayStringAt+0x98>
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d12e      	bne.n	8005e26 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1ad1      	subs	r1, r2, r3
 8005dce:	4b43      	ldr	r3, [pc, #268]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4843      	ldr	r0, [pc, #268]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4403      	add	r3, r0
 8005dde:	3308      	adds	r3, #8
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	889b      	ldrh	r3, [r3, #4]
 8005de4:	fb03 f301 	mul.w	r3, r3, r1
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	89fb      	ldrh	r3, [r7, #14]
 8005dee:	4413      	add	r3, r2
 8005df0:	83fb      	strh	r3, [r7, #30]
      break;
 8005df2:	e01b      	b.n	8005e2c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005df4:	89fb      	ldrh	r3, [r7, #14]
 8005df6:	83fb      	strh	r3, [r7, #30]
      break;
 8005df8:	e018      	b.n	8005e2c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	b299      	uxth	r1, r3
 8005e02:	4b36      	ldr	r3, [pc, #216]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4836      	ldr	r0, [pc, #216]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e08:	4613      	mov	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4403      	add	r3, r0
 8005e12:	3308      	adds	r3, #8
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	889b      	ldrh	r3, [r3, #4]
 8005e18:	fb11 f303 	smulbb	r3, r1, r3
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	89fb      	ldrh	r3, [r7, #14]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	83fb      	strh	r3, [r7, #30]
      break;
 8005e24:	e002      	b.n	8005e2c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8005e26:	89fb      	ldrh	r3, [r7, #14]
 8005e28:	83fb      	strh	r3, [r7, #30]
      break;
 8005e2a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005e2c:	8bfb      	ldrh	r3, [r7, #30]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <BSP_LCD_DisplayStringAt+0xde>
 8005e32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da1d      	bge.n	8005e76 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005e3e:	e01a      	b.n	8005e76 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	89b9      	ldrh	r1, [r7, #12]
 8005e46:	8bfb      	ldrh	r3, [r7, #30]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ff43 	bl	8005cd4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005e4e:	4b23      	ldr	r3, [pc, #140]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4923      	ldr	r1, [pc, #140]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3308      	adds	r3, #8
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	889a      	ldrh	r2, [r3, #4]
 8005e64:	8bfb      	ldrh	r3, [r7, #30]
 8005e66:	4413      	add	r3, r2
 8005e68:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
    i++;
 8005e70:	8bbb      	ldrh	r3, [r7, #28]
 8005e72:	3301      	adds	r3, #1
 8005e74:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2dc      	uxtb	r4, r3
 8005e84:	f7ff fe14 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	8bb9      	ldrh	r1, [r7, #28]
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4813      	ldr	r0, [pc, #76]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4403      	add	r3, r0
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	889b      	ldrh	r3, [r3, #4]
 8005ea2:	fb03 f301 	mul.w	r3, r3, r1
 8005ea6:	1aeb      	subs	r3, r5, r3
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <BSP_LCD_DisplayStringAt+0x180>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <BSP_LCD_DisplayStringAt+0x184>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4403      	add	r3, r0
 8005eba:	3308      	adds	r3, #8
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	889b      	ldrh	r3, [r3, #4]
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	bf2c      	ite	cs
 8005ec4:	2301      	movcs	r3, #1
 8005ec6:	2300      	movcc	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	4023      	ands	r3, r4
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1b6      	bne.n	8005e40 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8005ed2:	bf00      	nop
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000ff0 	.word	0x20000ff0
 8005ee0:	20000ff4 	.word	0x20000ff4

08005ee4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	6039      	str	r1, [r7, #0]
 8005eee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8005ef0:	f7ff feb2 	bl	8005c58 <BSP_LCD_GetFont>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	fb12 f303 	smulbb	r3, r2, r3
 8005efe:	b299      	uxth	r1, r3
 8005f00:	2303      	movs	r3, #3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	f7ff ff29 	bl	8005d5c <BSP_LCD_DisplayStringAt>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005f14:	b5b0      	push	{r4, r5, r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	603a      	str	r2, [r7, #0]
 8005f1e:	80fb      	strh	r3, [r7, #6]
 8005f20:	460b      	mov	r3, r1
 8005f22:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <BSP_LCD_DrawPixel+0x88>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <BSP_LCD_DrawPixel+0x8c>)
 8005f2a:	2134      	movs	r1, #52	; 0x34
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	4413      	add	r3, r2
 8005f32:	3348      	adds	r3, #72	; 0x48
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d116      	bne.n	8005f68 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <BSP_LCD_DrawPixel+0x88>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <BSP_LCD_DrawPixel+0x8c>)
 8005f40:	2134      	movs	r1, #52	; 0x34
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	335c      	adds	r3, #92	; 0x5c
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	88bd      	ldrh	r5, [r7, #4]
 8005f4e:	f7ff fdaf 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005f52:	4603      	mov	r3, r0
 8005f54:	fb03 f205 	mul.w	r2, r3, r5
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4423      	add	r3, r4
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	b292      	uxth	r2, r2
 8005f64:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005f66:	e015      	b.n	8005f94 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <BSP_LCD_DrawPixel+0x88>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0c      	ldr	r2, [pc, #48]	; (8005fa0 <BSP_LCD_DrawPixel+0x8c>)
 8005f6e:	2134      	movs	r1, #52	; 0x34
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	335c      	adds	r3, #92	; 0x5c
 8005f78:	681c      	ldr	r4, [r3, #0]
 8005f7a:	88bd      	ldrh	r5, [r7, #4]
 8005f7c:	f7ff fd98 	bl	8005ab0 <BSP_LCD_GetXSize>
 8005f80:	4603      	mov	r3, r0
 8005f82:	fb03 f205 	mul.w	r2, r3, r5
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4423      	add	r3, r4
 8005f8e:	461a      	mov	r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f9c:	20000ff0 	.word	0x20000ff0
 8005fa0:	2001b8d4 	.word	0x2001b8d4

08005fa4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af02      	add	r7, sp, #8
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	80fb      	strh	r3, [r7, #6]
 8005fb8:	4603      	mov	r3, r0
 8005fba:	80bb      	strh	r3, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005fc8:	4b30      	ldr	r3, [pc, #192]	; (800608c <BSP_LCD_FillRect+0xe8>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4930      	ldr	r1, [pc, #192]	; (8006090 <BSP_LCD_FillRect+0xec>)
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fdf0 	bl	8005bc0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005fe0:	4b2a      	ldr	r3, [pc, #168]	; (800608c <BSP_LCD_FillRect+0xe8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a2b      	ldr	r2, [pc, #172]	; (8006094 <BSP_LCD_FillRect+0xf0>)
 8005fe6:	2134      	movs	r1, #52	; 0x34
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3348      	adds	r3, #72	; 0x48
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d114      	bne.n	8006020 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <BSP_LCD_FillRect+0xe8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <BSP_LCD_FillRect+0xf0>)
 8005ffc:	2134      	movs	r1, #52	; 0x34
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	335c      	adds	r3, #92	; 0x5c
 8006006:	681c      	ldr	r4, [r3, #0]
 8006008:	f7ff fd52 	bl	8005ab0 <BSP_LCD_GetXSize>
 800600c:	4602      	mov	r2, r0
 800600e:	88bb      	ldrh	r3, [r7, #4]
 8006010:	fb03 f202 	mul.w	r2, r3, r2
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4413      	add	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4423      	add	r3, r4
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e013      	b.n	8006048 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <BSP_LCD_FillRect+0xe8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <BSP_LCD_FillRect+0xf0>)
 8006026:	2134      	movs	r1, #52	; 0x34
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	335c      	adds	r3, #92	; 0x5c
 8006030:	681c      	ldr	r4, [r3, #0]
 8006032:	f7ff fd3d 	bl	8005ab0 <BSP_LCD_GetXSize>
 8006036:	4602      	mov	r2, r0
 8006038:	88bb      	ldrh	r3, [r7, #4]
 800603a:	fb03 f202 	mul.w	r2, r3, r2
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4423      	add	r3, r4
 8006046:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006048:	4b10      	ldr	r3, [pc, #64]	; (800608c <BSP_LCD_FillRect+0xe8>)
 800604a:	681c      	ldr	r4, [r3, #0]
 800604c:	68fd      	ldr	r5, [r7, #12]
 800604e:	887e      	ldrh	r6, [r7, #2]
 8006050:	f8b7 8000 	ldrh.w	r8, [r7]
 8006054:	f7ff fd2c 	bl	8005ab0 <BSP_LCD_GetXSize>
 8006058:	4602      	mov	r2, r0
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	1ad1      	subs	r1, r2, r3
 800605e:	4b0b      	ldr	r3, [pc, #44]	; (800608c <BSP_LCD_FillRect+0xe8>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	480b      	ldr	r0, [pc, #44]	; (8006090 <BSP_LCD_FillRect+0xec>)
 8006064:	4613      	mov	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4403      	add	r3, r0
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	9100      	str	r1, [sp, #0]
 8006074:	4643      	mov	r3, r8
 8006076:	4632      	mov	r2, r6
 8006078:	4629      	mov	r1, r5
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f9ba 	bl	80063f4 <LL_FillBuffer>
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608a:	bf00      	nop
 800608c:	20000ff0 	.word	0x20000ff0
 8006090:	20000ff4 	.word	0x20000ff4
 8006094:	2001b8d4 	.word	0x2001b8d4

08006098 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b090      	sub	sp, #64	; 0x40
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80060a2:	4b64      	ldr	r3, [pc, #400]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	4a63      	ldr	r2, [pc, #396]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ac:	6453      	str	r3, [r2, #68]	; 0x44
 80060ae:	4b61      	ldr	r3, [pc, #388]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80060ba:	4b5e      	ldr	r3, [pc, #376]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a5d      	ldr	r2, [pc, #372]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80060d2:	4b58      	ldr	r3, [pc, #352]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	4a57      	ldr	r2, [pc, #348]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060d8:	f043 0310 	orr.w	r3, r3, #16
 80060dc:	6313      	str	r3, [r2, #48]	; 0x30
 80060de:	4b55      	ldr	r3, [pc, #340]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80060ea:	4b52      	ldr	r3, [pc, #328]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	4a51      	ldr	r2, [pc, #324]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	6313      	str	r3, [r2, #48]	; 0x30
 80060f6:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006102:	4b4c      	ldr	r3, [pc, #304]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	4a4b      	ldr	r2, [pc, #300]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610c:	6313      	str	r3, [r2, #48]	; 0x30
 800610e:	4b49      	ldr	r3, [pc, #292]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800611a:	4b46      	ldr	r3, [pc, #280]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	4a45      	ldr	r2, [pc, #276]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006124:	6313      	str	r3, [r2, #48]	; 0x30
 8006126:	4b43      	ldr	r3, [pc, #268]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006132:	4b40      	ldr	r3, [pc, #256]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4a3f      	ldr	r2, [pc, #252]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006138:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800613c:	6313      	str	r3, [r2, #48]	; 0x30
 800613e:	4b3d      	ldr	r3, [pc, #244]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800614a:	4b3a      	ldr	r3, [pc, #232]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	4a39      	ldr	r2, [pc, #228]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006154:	6313      	str	r3, [r2, #48]	; 0x30
 8006156:	4b37      	ldr	r3, [pc, #220]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006162:	4b34      	ldr	r3, [pc, #208]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	4a33      	ldr	r2, [pc, #204]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800616c:	6313      	str	r3, [r2, #48]	; 0x30
 800616e:	4b31      	ldr	r3, [pc, #196]	; (8006234 <BSP_LCD_MspInit+0x19c>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800617a:	2310      	movs	r3, #16
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800617e:	2302      	movs	r3, #2
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006186:	2302      	movs	r3, #2
 8006188:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800618a:	230e      	movs	r3, #14
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800618e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006192:	4619      	mov	r1, r3
 8006194:	4828      	ldr	r0, [pc, #160]	; (8006238 <BSP_LCD_MspInit+0x1a0>)
 8006196:	f001 ffbd 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800619a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80061a0:	2302      	movs	r3, #2
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80061a4:	2309      	movs	r3, #9
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80061a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061ac:	4619      	mov	r1, r3
 80061ae:	4823      	ldr	r0, [pc, #140]	; (800623c <BSP_LCD_MspInit+0x1a4>)
 80061b0:	f001 ffb0 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80061b4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80061ba:	2302      	movs	r3, #2
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80061be:	230e      	movs	r3, #14
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80061c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061c6:	4619      	mov	r1, r3
 80061c8:	481d      	ldr	r0, [pc, #116]	; (8006240 <BSP_LCD_MspInit+0x1a8>)
 80061ca:	f001 ffa3 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80061ce:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80061d4:	2302      	movs	r3, #2
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80061d8:	230e      	movs	r3, #14
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80061dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061e0:	4619      	mov	r1, r3
 80061e2:	4818      	ldr	r0, [pc, #96]	; (8006244 <BSP_LCD_MspInit+0x1ac>)
 80061e4:	f001 ff96 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80061e8:	23f7      	movs	r3, #247	; 0xf7
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80061f0:	230e      	movs	r3, #14
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80061f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061f8:	4619      	mov	r1, r3
 80061fa:	4813      	ldr	r0, [pc, #76]	; (8006248 <BSP_LCD_MspInit+0x1b0>)
 80061fc:	f001 ff8a 	bl	8008114 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006206:	2301      	movs	r3, #1
 8006208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800620a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800620e:	4619      	mov	r1, r3
 8006210:	480b      	ldr	r0, [pc, #44]	; (8006240 <BSP_LCD_MspInit+0x1a8>)
 8006212:	f001 ff7f 	bl	8008114 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006216:	2308      	movs	r3, #8
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800621a:	2301      	movs	r3, #1
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800621e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006222:	4619      	mov	r1, r3
 8006224:	4808      	ldr	r0, [pc, #32]	; (8006248 <BSP_LCD_MspInit+0x1b0>)
 8006226:	f001 ff75 	bl	8008114 <HAL_GPIO_Init>
}
 800622a:	bf00      	nop
 800622c:	3740      	adds	r7, #64	; 0x40
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	40021000 	.word	0x40021000
 800623c:	40021800 	.word	0x40021800
 8006240:	40022000 	.word	0x40022000
 8006244:	40022400 	.word	0x40022400
 8006248:	40022800 	.word	0x40022800

0800624c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <BSP_LCD_ClockConfig+0x34>)
 8006258:	2208      	movs	r2, #8
 800625a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800625c:	4b08      	ldr	r3, [pc, #32]	; (8006280 <BSP_LCD_ClockConfig+0x34>)
 800625e:	22c0      	movs	r2, #192	; 0xc0
 8006260:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <BSP_LCD_ClockConfig+0x34>)
 8006264:	2205      	movs	r2, #5
 8006266:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <BSP_LCD_ClockConfig+0x34>)
 800626a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800626e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006270:	4803      	ldr	r0, [pc, #12]	; (8006280 <BSP_LCD_ClockConfig+0x34>)
 8006272:	f005 fe33 	bl	800bedc <HAL_RCCEx_PeriphCLKConfig>
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2000100c 	.word	0x2000100c

08006284 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	603a      	str	r2, [r7, #0]
 800628e:	80fb      	strh	r3, [r7, #6]
 8006290:	460b      	mov	r3, r1
 8006292:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800629c:	4b53      	ldr	r3, [pc, #332]	; (80063ec <DrawChar+0x168>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4953      	ldr	r1, [pc, #332]	; (80063f0 <DrawChar+0x16c>)
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3308      	adds	r3, #8
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	88db      	ldrh	r3, [r3, #6]
 80062b2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80062b4:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <DrawChar+0x168>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	494d      	ldr	r1, [pc, #308]	; (80063f0 <DrawChar+0x16c>)
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	3308      	adds	r3, #8
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	889b      	ldrh	r3, [r3, #4]
 80062ca:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80062cc:	8a3b      	ldrh	r3, [r7, #16]
 80062ce:	3307      	adds	r3, #7
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da00      	bge.n	80062d6 <DrawChar+0x52>
 80062d4:	3307      	adds	r3, #7
 80062d6:	10db      	asrs	r3, r3, #3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	8a3b      	ldrh	r3, [r7, #16]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	e076      	b.n	80063da <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80062ec:	8a3b      	ldrh	r3, [r7, #16]
 80062ee:	3307      	adds	r3, #7
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da00      	bge.n	80062f6 <DrawChar+0x72>
 80062f4:	3307      	adds	r3, #7
 80062f6:	10db      	asrs	r3, r3, #3
 80062f8:	461a      	mov	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fb03 f302 	mul.w	r3, r3, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	4413      	add	r3, r2
 8006304:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006306:	8a3b      	ldrh	r3, [r7, #16]
 8006308:	3307      	adds	r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	da00      	bge.n	8006310 <DrawChar+0x8c>
 800630e:	3307      	adds	r3, #7
 8006310:	10db      	asrs	r3, r3, #3
 8006312:	2b01      	cmp	r3, #1
 8006314:	d002      	beq.n	800631c <DrawChar+0x98>
 8006316:	2b02      	cmp	r3, #2
 8006318:	d004      	beq.n	8006324 <DrawChar+0xa0>
 800631a:	e00c      	b.n	8006336 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	617b      	str	r3, [r7, #20]
      break;
 8006322:	e016      	b.n	8006352 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	3201      	adds	r2, #1
 800632e:	7812      	ldrb	r2, [r2, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
      break;
 8006334:	e00d      	b.n	8006352 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	041a      	lsls	r2, r3, #16
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3301      	adds	r3, #1
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	4313      	orrs	r3, r2
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	3202      	adds	r2, #2
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
      break;
 8006350:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e036      	b.n	80063c6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006358:	8a3a      	ldrh	r2, [r7, #16]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	1ad2      	subs	r2, r2, r3
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	4413      	add	r3, r2
 8006362:	3b01      	subs	r3, #1
 8006364:	2201      	movs	r2, #1
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	461a      	mov	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d012      	beq.n	800639a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	b29a      	uxth	r2, r3
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	4413      	add	r3, r2
 800637c:	b298      	uxth	r0, r3
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <DrawChar+0x168>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	491b      	ldr	r1, [pc, #108]	; (80063f0 <DrawChar+0x16c>)
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	88bb      	ldrh	r3, [r7, #4]
 8006392:	4619      	mov	r1, r3
 8006394:	f7ff fdbe 	bl	8005f14 <BSP_LCD_DrawPixel>
 8006398:	e012      	b.n	80063c0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	b29a      	uxth	r2, r3
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	4413      	add	r3, r2
 80063a2:	b298      	uxth	r0, r3
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <DrawChar+0x168>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4911      	ldr	r1, [pc, #68]	; (80063f0 <DrawChar+0x16c>)
 80063aa:	4613      	mov	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	3304      	adds	r3, #4
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	88bb      	ldrh	r3, [r7, #4]
 80063ba:	4619      	mov	r1, r3
 80063bc:	f7ff fdaa 	bl	8005f14 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	8a3b      	ldrh	r3, [r7, #16]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3c4      	bcc.n	8006358 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80063ce:	88bb      	ldrh	r3, [r7, #4]
 80063d0:	3301      	adds	r3, #1
 80063d2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3301      	adds	r3, #1
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	8a7b      	ldrh	r3, [r7, #18]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d384      	bcc.n	80062ec <DrawChar+0x68>
  }
}
 80063e2:	bf00      	nop
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000ff0 	.word	0x20000ff0
 80063f0:	20000ff4 	.word	0x20000ff4

080063f4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <LL_FillBuffer+0x88>)
 8006404:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006408:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800640a:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <LL_FillBuffer+0x8c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <LL_FillBuffer+0x90>)
 8006410:	2134      	movs	r1, #52	; 0x34
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	4413      	add	r3, r2
 8006418:	3348      	adds	r3, #72	; 0x48
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d103      	bne.n	8006428 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <LL_FillBuffer+0x88>)
 8006422:	2202      	movs	r2, #2
 8006424:	609a      	str	r2, [r3, #8]
 8006426:	e002      	b.n	800642e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <LL_FillBuffer+0x88>)
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <LL_FillBuffer+0x88>)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006434:	4b11      	ldr	r3, [pc, #68]	; (800647c <LL_FillBuffer+0x88>)
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <LL_FillBuffer+0x94>)
 8006438:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800643a:	4810      	ldr	r0, [pc, #64]	; (800647c <LL_FillBuffer+0x88>)
 800643c:	f001 face 	bl	80079dc <HAL_DMA2D_Init>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d115      	bne.n	8006472 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	480c      	ldr	r0, [pc, #48]	; (800647c <LL_FillBuffer+0x88>)
 800644a:	f001 fd35 	bl	8007eb8 <HAL_DMA2D_ConfigLayer>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	4807      	ldr	r0, [pc, #28]	; (800647c <LL_FillBuffer+0x88>)
 8006460:	f001 fb06 	bl	8007a70 <HAL_DMA2D_Start>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800646a:	210a      	movs	r1, #10
 800646c:	4803      	ldr	r0, [pc, #12]	; (800647c <LL_FillBuffer+0x88>)
 800646e:	f001 fb2a 	bl	8007ac6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000fb0 	.word	0x20000fb0
 8006480:	20000ff0 	.word	0x20000ff0
 8006484:	2001b8d4 	.word	0x2001b8d4
 8006488:	4002b000 	.word	0x4002b000

0800648c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006490:	4b29      	ldr	r3, [pc, #164]	; (8006538 <BSP_SDRAM_Init+0xac>)
 8006492:	4a2a      	ldr	r2, [pc, #168]	; (800653c <BSP_SDRAM_Init+0xb0>)
 8006494:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006496:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 8006498:	2202      	movs	r2, #2
 800649a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800649c:	4b28      	ldr	r3, [pc, #160]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 800649e:	2207      	movs	r2, #7
 80064a0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80064a2:	4b27      	ldr	r3, [pc, #156]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 80064a4:	2204      	movs	r2, #4
 80064a6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80064a8:	4b25      	ldr	r3, [pc, #148]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 80064aa:	2207      	movs	r2, #7
 80064ac:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 80064b0:	2202      	movs	r2, #2
 80064b2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80064b4:	4b22      	ldr	r3, [pc, #136]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 80064b6:	2202      	movs	r2, #2
 80064b8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 80064bc:	2202      	movs	r2, #2
 80064be:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80064c6:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064ce:	2204      	movs	r2, #4
 80064d0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80064d2:	4b19      	ldr	r3, [pc, #100]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064d4:	2210      	movs	r2, #16
 80064d6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80064d8:	4b17      	ldr	r3, [pc, #92]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064da:	2240      	movs	r2, #64	; 0x40
 80064dc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80064de:	4b16      	ldr	r3, [pc, #88]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <BSP_SDRAM_Init+0xac>)
 80064fe:	2200      	movs	r2, #0
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006502:	2100      	movs	r1, #0
 8006504:	480c      	ldr	r0, [pc, #48]	; (8006538 <BSP_SDRAM_Init+0xac>)
 8006506:	f000 f87f 	bl	8006608 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800650a:	490d      	ldr	r1, [pc, #52]	; (8006540 <BSP_SDRAM_Init+0xb4>)
 800650c:	480a      	ldr	r0, [pc, #40]	; (8006538 <BSP_SDRAM_Init+0xac>)
 800650e:	f007 f9f6 	bl	800d8fe <HAL_SDRAM_Init>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <BSP_SDRAM_Init+0xb8>)
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <BSP_SDRAM_Init+0xb8>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006526:	f240 6003 	movw	r0, #1539	; 0x603
 800652a:	f000 f80d 	bl	8006548 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <BSP_SDRAM_Init+0xb8>)
 8006530:	781b      	ldrb	r3, [r3, #0]
}
 8006532:	4618      	mov	r0, r3
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2001b97c 	.word	0x2001b97c
 800653c:	a0000140 	.word	0xa0000140
 8006540:	20001090 	.word	0x20001090
 8006544:	20000050 	.word	0x20000050

08006548 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006554:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800655a:	4b29      	ldr	r3, [pc, #164]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800655c:	2210      	movs	r2, #16
 800655e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006562:	2201      	movs	r2, #1
 8006564:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006568:	2200      	movs	r2, #0
 800656a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800656c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006570:	4923      	ldr	r1, [pc, #140]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006572:	4824      	ldr	r0, [pc, #144]	; (8006604 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006574:	f007 f9f7 	bl	800d966 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006578:	2001      	movs	r0, #1
 800657a:	f000 f96b 	bl	8006854 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006580:	2202      	movs	r2, #2
 8006582:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006584:	4b1e      	ldr	r3, [pc, #120]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006586:	2210      	movs	r2, #16
 8006588:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800658c:	2201      	movs	r2, #1
 800658e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006592:	2200      	movs	r2, #0
 8006594:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800659a:	4919      	ldr	r1, [pc, #100]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800659c:	4819      	ldr	r0, [pc, #100]	; (8006604 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800659e:	f007 f9e2 	bl	800d966 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065a4:	2203      	movs	r2, #3
 80065a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065aa:	2210      	movs	r2, #16
 80065ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065b0:	2208      	movs	r2, #8
 80065b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80065ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065be:	4910      	ldr	r1, [pc, #64]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065c0:	4810      	ldr	r0, [pc, #64]	; (8006604 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80065c2:	f007 f9d0 	bl	800d966 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80065c6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80065ca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065ce:	2204      	movs	r2, #4
 80065d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065d4:	2210      	movs	r2, #16
 80065d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065da:	2201      	movs	r2, #1
 80065dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a07      	ldr	r2, [pc, #28]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065e2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80065e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065e8:	4905      	ldr	r1, [pc, #20]	; (8006600 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80065ea:	4806      	ldr	r0, [pc, #24]	; (8006604 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80065ec:	f007 f9bb 	bl	800d966 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4804      	ldr	r0, [pc, #16]	; (8006604 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80065f4:	f007 f9e2 	bl	800d9bc <HAL_SDRAM_ProgramRefreshRate>
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	200010ac 	.word	0x200010ac
 8006604:	2001b97c 	.word	0x2001b97c

08006608 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006608:	b580      	push	{r7, lr}
 800660a:	b090      	sub	sp, #64	; 0x40
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	4a6f      	ldr	r2, [pc, #444]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	6393      	str	r3, [r2, #56]	; 0x38
 800661e:	4b6d      	ldr	r3, [pc, #436]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800662a:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	4a69      	ldr	r2, [pc, #420]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006634:	6313      	str	r3, [r2, #48]	; 0x30
 8006636:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006642:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a63      	ldr	r2, [pc, #396]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	623b      	str	r3, [r7, #32]
 8006658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800665a:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	4a5d      	ldr	r2, [pc, #372]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006660:	f043 0308 	orr.w	r3, r3, #8
 8006664:	6313      	str	r3, [r2, #48]	; 0x30
 8006666:	4b5b      	ldr	r3, [pc, #364]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006672:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a57      	ldr	r2, [pc, #348]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006678:	f043 0310 	orr.w	r3, r3, #16
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b55      	ldr	r3, [pc, #340]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800668a:	4b52      	ldr	r3, [pc, #328]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	4a51      	ldr	r2, [pc, #324]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006690:	f043 0320 	orr.w	r3, r3, #32
 8006694:	6313      	str	r3, [r2, #48]	; 0x30
 8006696:	4b4f      	ldr	r3, [pc, #316]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80066a2:	4b4c      	ldr	r3, [pc, #304]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4a4b      	ldr	r2, [pc, #300]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	6313      	str	r3, [r2, #48]	; 0x30
 80066ae:	4b49      	ldr	r3, [pc, #292]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ba:	4b46      	ldr	r3, [pc, #280]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	4a45      	ldr	r2, [pc, #276]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c4:	6313      	str	r3, [r2, #48]	; 0x30
 80066c6:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <BSP_SDRAM_MspInit+0x1cc>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80066d2:	2302      	movs	r3, #2
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80066d6:	2301      	movs	r3, #1
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80066da:	2302      	movs	r3, #2
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80066de:	230c      	movs	r3, #12
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80066e2:	2308      	movs	r3, #8
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80066e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066ea:	4619      	mov	r1, r3
 80066ec:	483a      	ldr	r0, [pc, #232]	; (80067d8 <BSP_SDRAM_MspInit+0x1d0>)
 80066ee:	f001 fd11 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80066f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80066f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066fc:	4619      	mov	r1, r3
 80066fe:	4837      	ldr	r0, [pc, #220]	; (80067dc <BSP_SDRAM_MspInit+0x1d4>)
 8006700:	f001 fd08 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006704:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800670a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800670e:	4619      	mov	r1, r3
 8006710:	4833      	ldr	r0, [pc, #204]	; (80067e0 <BSP_SDRAM_MspInit+0x1d8>)
 8006712:	f001 fcff 	bl	8008114 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006716:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800671c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006720:	4619      	mov	r1, r3
 8006722:	4830      	ldr	r0, [pc, #192]	; (80067e4 <BSP_SDRAM_MspInit+0x1dc>)
 8006724:	f001 fcf6 	bl	8008114 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006728:	f248 1333 	movw	r3, #33075	; 0x8133
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800672e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006732:	4619      	mov	r1, r3
 8006734:	482c      	ldr	r0, [pc, #176]	; (80067e8 <BSP_SDRAM_MspInit+0x1e0>)
 8006736:	f001 fced 	bl	8008114 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800673a:	2328      	movs	r3, #40	; 0x28
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800673e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006742:	4619      	mov	r1, r3
 8006744:	4829      	ldr	r0, [pc, #164]	; (80067ec <BSP_SDRAM_MspInit+0x1e4>)
 8006746:	f001 fce5 	bl	8008114 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800674a:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 800674c:	2200      	movs	r2, #0
 800674e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006764:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006766:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800676c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006774:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006776:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006778:	2200      	movs	r2, #0
 800677a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 800677e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006782:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006786:	2200      	movs	r2, #0
 8006788:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 800678c:	2203      	movs	r2, #3
 800678e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006790:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006792:	2200      	movs	r2, #0
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006796:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800679c:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 800679e:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <BSP_SDRAM_MspInit+0x1ec>)
 80067a0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
 80067a8:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80067ae:	4810      	ldr	r0, [pc, #64]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 80067b0:	f000 fdee 	bl	8007390 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80067b4:	480e      	ldr	r0, [pc, #56]	; (80067f0 <BSP_SDRAM_MspInit+0x1e8>)
 80067b6:	f000 fd3d 	bl	8007234 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	210f      	movs	r1, #15
 80067be:	2038      	movs	r0, #56	; 0x38
 80067c0:	f000 fbaa 	bl	8006f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80067c4:	2038      	movs	r0, #56	; 0x38
 80067c6:	f000 fbc3 	bl	8006f50 <HAL_NVIC_EnableIRQ>
}
 80067ca:	bf00      	nop
 80067cc:	3740      	adds	r7, #64	; 0x40
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40021400 	.word	0x40021400
 80067e8:	40021800 	.word	0x40021800
 80067ec:	40021c00 	.word	0x40021c00
 80067f0:	200010bc 	.word	0x200010bc
 80067f4:	40026410 	.word	0x40026410

080067f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067fc:	2003      	movs	r0, #3
 80067fe:	f000 fb80 	bl	8006f02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006802:	2000      	movs	r0, #0
 8006804:	f7fc ff18 	bl	8003638 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006808:	f7fb ffee 	bl	80027e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_IncTick+0x20>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_IncTick+0x24>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4413      	add	r3, r2
 8006824:	4a04      	ldr	r2, [pc, #16]	; (8006838 <HAL_IncTick+0x24>)
 8006826:	6013      	str	r3, [r2, #0]
}
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000058 	.word	0x20000058
 8006838:	2001b9b0 	.word	0x2001b9b0

0800683c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return uwTick;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <HAL_GetTick+0x14>)
 8006842:	681b      	ldr	r3, [r3, #0]
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	2001b9b0 	.word	0x2001b9b0

08006854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800685c:	f7ff ffee 	bl	800683c <HAL_GetTick>
 8006860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d005      	beq.n	800687a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <HAL_Delay+0x40>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800687a:	bf00      	nop
 800687c:	f7ff ffde 	bl	800683c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	429a      	cmp	r2, r3
 800688a:	d8f7      	bhi.n	800687c <HAL_Delay+0x28>
  {
  }
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000058 	.word	0x20000058

08006898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e031      	b.n	8006912 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fb ffbe 	bl	8002838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d116      	bne.n	8006904 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <HAL_ADC_Init+0x84>)
 80068dc:	4013      	ands	r3, r2
 80068de:	f043 0202 	orr.w	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f964 	bl	8006bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	f043 0201 	orr.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
 8006902:	e001      	b.n	8006908 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	ffffeefd 	.word	0xffffeefd

08006920 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_ADC_ConfigChannel+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e12a      	b.n	8006b92 <HAL_ADC_ConfigChannel+0x272>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b09      	cmp	r3, #9
 800694a:	d93a      	bls.n	80069c2 <HAL_ADC_ConfigChannel+0xa2>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d035      	beq.n	80069c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68d9      	ldr	r1, [r3, #12]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	4613      	mov	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4413      	add	r3, r2
 800696a:	3b1e      	subs	r3, #30
 800696c:	2207      	movs	r2, #7
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43da      	mvns	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	400a      	ands	r2, r1
 800697a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a87      	ldr	r2, [pc, #540]	; (8006ba0 <HAL_ADC_ConfigChannel+0x280>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10a      	bne.n	800699c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68d9      	ldr	r1, [r3, #12]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	061a      	lsls	r2, r3, #24
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800699a:	e035      	b.n	8006a08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68d9      	ldr	r1, [r3, #12]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4618      	mov	r0, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	4403      	add	r3, r0
 80069b4:	3b1e      	subs	r3, #30
 80069b6:	409a      	lsls	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069c0:	e022      	b.n	8006a08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6919      	ldr	r1, [r3, #16]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	2207      	movs	r2, #7
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43da      	mvns	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	400a      	ands	r2, r1
 80069e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6919      	ldr	r1, [r3, #16]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4618      	mov	r0, r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	4403      	add	r3, r0
 80069fe:	409a      	lsls	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d824      	bhi.n	8006a5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	3b05      	subs	r3, #5
 8006a22:	221f      	movs	r2, #31
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	400a      	ands	r2, r1
 8006a30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4618      	mov	r0, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	3b05      	subs	r3, #5
 8006a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	635a      	str	r2, [r3, #52]	; 0x34
 8006a58:	e04c      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d824      	bhi.n	8006aac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	3b23      	subs	r3, #35	; 0x23
 8006a74:	221f      	movs	r2, #31
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	400a      	ands	r2, r1
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4618      	mov	r0, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3b23      	subs	r3, #35	; 0x23
 8006a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8006aaa:	e023      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	3b41      	subs	r3, #65	; 0x41
 8006abe:	221f      	movs	r2, #31
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43da      	mvns	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	400a      	ands	r2, r1
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	4618      	mov	r0, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3b41      	subs	r3, #65	; 0x41
 8006ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <HAL_ADC_ConfigChannel+0x284>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10a      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x1f4>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b06:	d105      	bne.n	8006b14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006b08:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a26      	ldr	r2, [pc, #152]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006b12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <HAL_ADC_ConfigChannel+0x284>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d109      	bne.n	8006b32 <HAL_ADC_ConfigChannel+0x212>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b12      	cmp	r3, #18
 8006b24:	d105      	bne.n	8006b32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_ADC_ConfigChannel+0x284>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d125      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x268>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <HAL_ADC_ConfigChannel+0x280>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <HAL_ADC_ConfigChannel+0x22e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b11      	cmp	r3, #17
 8006b4c:	d11c      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006b4e:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_ADC_ConfigChannel+0x288>)
 8006b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a10      	ldr	r2, [pc, #64]	; (8006ba0 <HAL_ADC_ConfigChannel+0x280>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d111      	bne.n	8006b88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <HAL_ADC_ConfigChannel+0x28c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a11      	ldr	r2, [pc, #68]	; (8006bb0 <HAL_ADC_ConfigChannel+0x290>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	0c9a      	lsrs	r2, r3, #18
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006b7a:	e002      	b.n	8006b82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f9      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	10000012 	.word	0x10000012
 8006ba4:	40012000 	.word	0x40012000
 8006ba8:	40012300 	.word	0x40012300
 8006bac:	20000000 	.word	0x20000000
 8006bb0:	431bde83 	.word	0x431bde83

08006bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006bbc:	4b78      	ldr	r3, [pc, #480]	; (8006da0 <ADC_Init+0x1ec>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a77      	ldr	r2, [pc, #476]	; (8006da0 <ADC_Init+0x1ec>)
 8006bc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006bc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006bc8:	4b75      	ldr	r3, [pc, #468]	; (8006da0 <ADC_Init+0x1ec>)
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4973      	ldr	r1, [pc, #460]	; (8006da0 <ADC_Init+0x1ec>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6859      	ldr	r1, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	021a      	lsls	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6899      	ldr	r1, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	4a58      	ldr	r2, [pc, #352]	; (8006da4 <ADC_Init+0x1f0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d022      	beq.n	8006c8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6899      	ldr	r1, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	e00f      	b.n	8006cae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0202 	bic.w	r2, r2, #2
 8006cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6899      	ldr	r1, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	005a      	lsls	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01b      	beq.n	8006d14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	3b01      	subs	r3, #1
 8006d08:	035a      	lsls	r2, r3, #13
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	e007      	b.n	8006d24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	051a      	lsls	r2, r3, #20
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6899      	ldr	r1, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d66:	025a      	lsls	r2, r3, #9
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6899      	ldr	r1, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	029a      	lsls	r2, r3, #10
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40012300 	.word	0x40012300
 8006da4:	0f000001 	.word	0x0f000001

08006da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <__NVIC_SetPriorityGrouping+0x40>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006dd0:	4b06      	ldr	r3, [pc, #24]	; (8006dec <__NVIC_SetPriorityGrouping+0x44>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dd6:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <__NVIC_SetPriorityGrouping+0x40>)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	60d3      	str	r3, [r2, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	e000ed00 	.word	0xe000ed00
 8006dec:	05fa0000 	.word	0x05fa0000

08006df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006df4:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <__NVIC_GetPriorityGrouping+0x18>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	0a1b      	lsrs	r3, r3, #8
 8006dfa:	f003 0307 	and.w	r3, r3, #7
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	db0b      	blt.n	8006e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
 8006e20:	f003 021f 	and.w	r2, r3, #31
 8006e24:	4907      	ldr	r1, [pc, #28]	; (8006e44 <__NVIC_EnableIRQ+0x38>)
 8006e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	e000e100 	.word	0xe000e100

08006e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db0a      	blt.n	8006e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	490c      	ldr	r1, [pc, #48]	; (8006e94 <__NVIC_SetPriority+0x4c>)
 8006e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e66:	0112      	lsls	r2, r2, #4
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e70:	e00a      	b.n	8006e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	4908      	ldr	r1, [pc, #32]	; (8006e98 <__NVIC_SetPriority+0x50>)
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	3b04      	subs	r3, #4
 8006e80:	0112      	lsls	r2, r2, #4
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	440b      	add	r3, r1
 8006e86:	761a      	strb	r2, [r3, #24]
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	e000e100 	.word	0xe000e100
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f1c3 0307 	rsb	r3, r3, #7
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	bf28      	it	cs
 8006eba:	2304      	movcs	r3, #4
 8006ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	2b06      	cmp	r3, #6
 8006ec4:	d902      	bls.n	8006ecc <NVIC_EncodePriority+0x30>
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3b03      	subs	r3, #3
 8006eca:	e000      	b.n	8006ece <NVIC_EncodePriority+0x32>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	43da      	mvns	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	401a      	ands	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	fa01 f303 	lsl.w	r3, r1, r3
 8006eee:	43d9      	mvns	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef4:	4313      	orrs	r3, r2
         );
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3724      	adds	r7, #36	; 0x24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ff4c 	bl	8006da8 <__NVIC_SetPriorityGrouping>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f2a:	f7ff ff61 	bl	8006df0 <__NVIC_GetPriorityGrouping>
 8006f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	6978      	ldr	r0, [r7, #20]
 8006f36:	f7ff ffb1 	bl	8006e9c <NVIC_EncodePriority>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff ff80 	bl	8006e48 <__NVIC_SetPriority>
}
 8006f48:	bf00      	nop
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff ff54 	bl	8006e0c <__NVIC_EnableIRQ>
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e054      	b.n	8007028 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7f5b      	ldrb	r3, [r3, #29]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fb fcac 	bl	80028ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	791b      	ldrb	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a22      	ldr	r2, [pc, #136]	; (8007030 <HAL_CRC_Init+0xc4>)
 8006fa8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0218 	bic.w	r2, r2, #24
 8006fb8:	609a      	str	r2, [r3, #8]
 8006fba:	e00c      	b.n	8006fd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6899      	ldr	r1, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f834 	bl	8007034 <HAL_CRCEx_Polynomial_Set>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e028      	b.n	8007028 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	795b      	ldrb	r3, [r3, #5]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe6:	611a      	str	r2, [r3, #16]
 8006fe8:	e004      	b.n	8006ff4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6912      	ldr	r2, [r2, #16]
 8006ff2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	04c11db7 	.word	0x04c11db7

08007034 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007044:	231f      	movs	r3, #31
 8007046:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007048:	bf00      	nop
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1e5a      	subs	r2, r3, #1
 800704e:	613a      	str	r2, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_CRCEx_Polynomial_Set+0x34>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b18      	cmp	r3, #24
 800706c:	d846      	bhi.n	80070fc <HAL_CRCEx_Polynomial_Set+0xc8>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007103 	.word	0x08007103
 8007078:	080070fd 	.word	0x080070fd
 800707c:	080070fd 	.word	0x080070fd
 8007080:	080070fd 	.word	0x080070fd
 8007084:	080070fd 	.word	0x080070fd
 8007088:	080070fd 	.word	0x080070fd
 800708c:	080070fd 	.word	0x080070fd
 8007090:	080070fd 	.word	0x080070fd
 8007094:	080070f1 	.word	0x080070f1
 8007098:	080070fd 	.word	0x080070fd
 800709c:	080070fd 	.word	0x080070fd
 80070a0:	080070fd 	.word	0x080070fd
 80070a4:	080070fd 	.word	0x080070fd
 80070a8:	080070fd 	.word	0x080070fd
 80070ac:	080070fd 	.word	0x080070fd
 80070b0:	080070fd 	.word	0x080070fd
 80070b4:	080070e5 	.word	0x080070e5
 80070b8:	080070fd 	.word	0x080070fd
 80070bc:	080070fd 	.word	0x080070fd
 80070c0:	080070fd 	.word	0x080070fd
 80070c4:	080070fd 	.word	0x080070fd
 80070c8:	080070fd 	.word	0x080070fd
 80070cc:	080070fd 	.word	0x080070fd
 80070d0:	080070fd 	.word	0x080070fd
 80070d4:	080070d9 	.word	0x080070d9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b06      	cmp	r3, #6
 80070dc:	d913      	bls.n	8007106 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070e2:	e010      	b.n	8007106 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b07      	cmp	r3, #7
 80070e8:	d90f      	bls.n	800710a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070ee:	e00c      	b.n	800710a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b0f      	cmp	r3, #15
 80070f4:	d90b      	bls.n	800710e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80070fa:	e008      	b.n	800710e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007100:	e006      	b.n	8007110 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007102:	bf00      	nop
 8007104:	e004      	b.n	8007110 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007106:	bf00      	nop
 8007108:	e002      	b.n	8007110 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800710e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f023 0118 	bic.w	r1, r3, #24
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
}
 8007134:	4618      	mov	r0, r3
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e069      	b.n	8007226 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb fbe4 	bl	800292c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4b2a      	ldr	r3, [pc, #168]	; (8007230 <HAL_DCMI_Init+0xf0>)
 8007186:	400b      	ands	r3, r1
 8007188:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800719e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80071aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80071b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80071c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80071ce:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d112      	bne.n	8007206 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7f1b      	ldrb	r3, [r3, #28]
 80071e4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7f5b      	ldrb	r3, [r3, #29]
 80071ea:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071ec:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7f9b      	ldrb	r3, [r3, #30]
 80071f2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80071f4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7fdb      	ldrb	r3, [r3, #31]
 80071fc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007202:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007204:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 021e 	orr.w	r2, r2, #30
 8007214:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	ffe0f007 	.word	0xffe0f007

08007234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007240:	f7ff fafc 	bl	800683c <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e099      	b.n	8007384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007270:	e00f      	b.n	8007292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007272:	f7ff fae3 	bl	800683c <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b05      	cmp	r3, #5
 800727e:	d908      	bls.n	8007292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2203      	movs	r2, #3
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e078      	b.n	8007384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e8      	bne.n	8007272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4b38      	ldr	r3, [pc, #224]	; (800738c <HAL_DMA_Init+0x158>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d107      	bne.n	80072fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	4313      	orrs	r3, r2
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b04      	cmp	r3, #4
 8007324:	d117      	bne.n	8007356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fad5 	bl	80078e8 <DMA_CheckFifoParam>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007352:	2301      	movs	r3, #1
 8007354:	e016      	b.n	8007384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa8c 	bl	800787c <DMA_CalcBaseAndBitshift>
 8007364:	4603      	mov	r3, r0
 8007366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	223f      	movs	r2, #63	; 0x3f
 800736e:	409a      	lsls	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	f010803f 	.word	0xf010803f

08007390 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e050      	b.n	8007444 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d101      	bne.n	80073b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
 80073b0:	e048      	b.n	8007444 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2200      	movs	r2, #0
 80073d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2221      	movs	r2, #33	; 0x21
 80073f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa42 	bl	800787c <DMA_CalcBaseAndBitshift>
 80073f8:	4603      	mov	r3, r0
 80073fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	223f      	movs	r2, #63	; 0x3f
 8007402:	409a      	lsls	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_DMA_Start_IT+0x26>
 800746e:	2302      	movs	r3, #2
 8007470:	e048      	b.n	8007504 <HAL_DMA_Start_IT+0xb8>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b01      	cmp	r3, #1
 8007484:	d137      	bne.n	80074f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f9c0 	bl	8007820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a4:	223f      	movs	r2, #63	; 0x3f
 80074a6:	409a      	lsls	r2, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0216 	orr.w	r2, r2, #22
 80074ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0208 	orr.w	r2, r2, #8
 80074e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e005      	b.n	8007502 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
 8007500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007518:	4b92      	ldr	r3, [pc, #584]	; (8007764 <HAL_DMA_IRQHandler+0x258>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a92      	ldr	r2, [pc, #584]	; (8007768 <HAL_DMA_IRQHandler+0x25c>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	0a9b      	lsrs	r3, r3, #10
 8007524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007536:	2208      	movs	r2, #8
 8007538:	409a      	lsls	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01a      	beq.n	8007578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d013      	beq.n	8007578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0204 	bic.w	r2, r2, #4
 800755e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007564:	2208      	movs	r2, #8
 8007566:	409a      	lsls	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	f043 0201 	orr.w	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800757c:	2201      	movs	r2, #1
 800757e:	409a      	lsls	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759a:	2201      	movs	r2, #1
 800759c:	409a      	lsls	r2, r3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b2:	2204      	movs	r2, #4
 80075b4:	409a      	lsls	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d012      	beq.n	80075e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d0:	2204      	movs	r2, #4
 80075d2:	409a      	lsls	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	f043 0204 	orr.w	r2, r3, #4
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e8:	2210      	movs	r2, #16
 80075ea:	409a      	lsls	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d043      	beq.n	800767c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d03c      	beq.n	800767c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	2210      	movs	r2, #16
 8007608:	409a      	lsls	r2, r3
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d024      	beq.n	800767c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
 800763a:	e01f      	b.n	800767c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01b      	beq.n	800767c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
 800764c:	e016      	b.n	800767c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0208 	bic.w	r2, r2, #8
 800766a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007680:	2220      	movs	r2, #32
 8007682:	409a      	lsls	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 808e 	beq.w	80077aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8086 	beq.w	80077aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	2220      	movs	r2, #32
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d136      	bne.n	8007724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0216 	bic.w	r2, r2, #22
 80076c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_DMA_IRQHandler+0x1da>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0208 	bic.w	r2, r2, #8
 80076f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fa:	223f      	movs	r2, #63	; 0x3f
 80076fc:	409a      	lsls	r2, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	2b00      	cmp	r3, #0
 8007718:	d07d      	beq.n	8007816 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
        }
        return;
 8007722:	e078      	b.n	8007816 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01c      	beq.n	800776c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d108      	bne.n	8007752 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007744:	2b00      	cmp	r3, #0
 8007746:	d030      	beq.n	80077aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
 8007750:	e02b      	b.n	80077aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d027      	beq.n	80077aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	e022      	b.n	80077aa <HAL_DMA_IRQHandler+0x29e>
 8007764:	20000000 	.word	0x20000000
 8007768:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10f      	bne.n	800779a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0210 	bic.w	r2, r2, #16
 8007788:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d032      	beq.n	8007818 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d022      	beq.n	8007804 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2205      	movs	r2, #5
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	3301      	adds	r3, #1
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d307      	bcc.n	80077f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f2      	bne.n	80077d6 <HAL_DMA_IRQHandler+0x2ca>
 80077f0:	e000      	b.n	80077f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80077f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
 8007814:	e000      	b.n	8007818 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007816:	bf00      	nop
    }
  }
}
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop

08007820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800783c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d108      	bne.n	8007860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800785e:	e007      	b.n	8007870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	3b10      	subs	r3, #16
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <DMA_CalcBaseAndBitshift+0x60>)
 800788e:	fba2 2303 	umull	r2, r3, r2, r3
 8007892:	091b      	lsrs	r3, r3, #4
 8007894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007896:	4a12      	ldr	r2, [pc, #72]	; (80078e0 <DMA_CalcBaseAndBitshift+0x64>)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d908      	bls.n	80078bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <DMA_CalcBaseAndBitshift+0x68>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	659a      	str	r2, [r3, #88]	; 0x58
 80078ba:	e006      	b.n	80078ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <DMA_CalcBaseAndBitshift+0x68>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	aaaaaaab 	.word	0xaaaaaaab
 80078e0:	0801a968 	.word	0x0801a968
 80078e4:	fffffc00 	.word	0xfffffc00

080078e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11f      	bne.n	8007942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d855      	bhi.n	80079b4 <DMA_CheckFifoParam+0xcc>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <DMA_CheckFifoParam+0x28>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007921 	.word	0x08007921
 8007914:	08007933 	.word	0x08007933
 8007918:	08007921 	.word	0x08007921
 800791c:	080079b5 	.word	0x080079b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d045      	beq.n	80079b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007930:	e042      	b.n	80079b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800793a:	d13f      	bne.n	80079bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007940:	e03c      	b.n	80079bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794a:	d121      	bne.n	8007990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b03      	cmp	r3, #3
 8007950:	d836      	bhi.n	80079c0 <DMA_CheckFifoParam+0xd8>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <DMA_CheckFifoParam+0x70>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007969 	.word	0x08007969
 800795c:	0800796f 	.word	0x0800796f
 8007960:	08007969 	.word	0x08007969
 8007964:	08007981 	.word	0x08007981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e02f      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d024      	beq.n	80079c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800797e:	e021      	b.n	80079c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007988:	d11e      	bne.n	80079c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800798e:	e01b      	b.n	80079c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d902      	bls.n	800799c <DMA_CheckFifoParam+0xb4>
 8007996:	2b03      	cmp	r3, #3
 8007998:	d003      	beq.n	80079a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800799a:	e018      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
      break;
 80079a0:	e015      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	e00b      	b.n	80079cc <DMA_CheckFifoParam+0xe4>
      break;
 80079b4:	bf00      	nop
 80079b6:	e00a      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;
 80079b8:	bf00      	nop
 80079ba:	e008      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;
 80079bc:	bf00      	nop
 80079be:	e006      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;
 80079c0:	bf00      	nop
 80079c2:	e004      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;
 80079c4:	bf00      	nop
 80079c6:	e002      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;   
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <DMA_CheckFifoParam+0xe6>
      break;
 80079cc:	bf00      	nop
    }
  } 
  
  return status; 
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e039      	b.n	8007a62 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fb f850 	bl	8002aa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	f023 0107 	bic.w	r1, r3, #7
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a42:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <HAL_DMA2D_Init+0x90>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	68d1      	ldr	r1, [r2, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	ffffc000 	.word	0xffffc000

08007a70 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_DMA2D_Start+0x1c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e018      	b.n	8007abe <HAL_DMA2D_Start+0x4e>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fa98 	bl	8007fdc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d056      	beq.n	8007b90 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8007ae2:	f7fe feab 	bl	800683c <HAL_GetTick>
 8007ae6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007ae8:	e04b      	b.n	8007b82 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d023      	beq.n	8007b44 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	f043 0201 	orr.w	r2, r3, #1
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2221      	movs	r2, #33	; 0x21
 8007b2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2204      	movs	r2, #4
 8007b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0a5      	b.n	8007c90 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d01a      	beq.n	8007b82 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007b4c:	f7fe fe76 	bl	800683c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d302      	bcc.n	8007b62 <HAL_DMA2D_PollForTransfer+0x9c>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10f      	bne.n	8007b82 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	f043 0220 	orr.w	r2, r3, #32
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e086      	b.n	8007c90 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0ac      	beq.n	8007aea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d061      	beq.n	8007c76 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bb2:	f7fe fe43 	bl	800683c <HAL_GetTick>
 8007bb6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bb8:	e056      	b.n	8007c68 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d02e      	beq.n	8007c2a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	f043 0204 	orr.w	r2, r3, #4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	f043 0202 	orr.w	r2, r3, #2
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	f043 0201 	orr.w	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2229      	movs	r2, #41	; 0x29
 8007c14:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e032      	b.n	8007c90 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d01a      	beq.n	8007c68 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007c32:	f7fe fe03 	bl	800683c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <HAL_DMA2D_PollForTransfer+0x182>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10f      	bne.n	8007c68 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2203      	movs	r2, #3
 8007c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e013      	b.n	8007c90 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0a1      	beq.n	8007bba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2212      	movs	r2, #18
 8007c7c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d026      	beq.n	8007d08 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d021      	beq.n	8007d08 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd8:	f043 0201 	orr.w	r2, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d026      	beq.n	8007d60 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d021      	beq.n	8007d60 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d2a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2220      	movs	r2, #32
 8007d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d38:	f043 0202 	orr.w	r2, r3, #2
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d026      	beq.n	8007db8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d021      	beq.n	8007db8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d82:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2208      	movs	r2, #8
 8007d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d90:	f043 0204 	orr.w	r2, r3, #4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dda:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2204      	movs	r2, #4
 8007de2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f853 	bl	8007e90 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d024      	beq.n	8007e3e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01f      	beq.n	8007e3e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e0c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2202      	movs	r2, #2
 8007e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01f      	beq.n	8007e88 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01a      	beq.n	8007e88 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e60:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2210      	movs	r2, #16
 8007e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f80e 	bl	8007ea4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_DMA2D_ConfigLayer+0x20>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e079      	b.n	8007fcc <HAL_DMA2D_ConfigLayer+0x114>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	3318      	adds	r3, #24
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007f02:	4b35      	ldr	r3, [pc, #212]	; (8007fd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8007f04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b0a      	cmp	r3, #10
 8007f0c:	d003      	beq.n	8007f16 <HAL_DMA2D_ConfigLayer+0x5e>
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b09      	cmp	r3, #9
 8007f14:	d107      	bne.n	8007f26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e005      	b.n	8007f32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d120      	bne.n	8007f7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	ea02 0103 	and.w	r1, r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b0a      	cmp	r3, #10
 8007f60:	d003      	beq.n	8007f6a <HAL_DMA2D_ConfigLayer+0xb2>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d127      	bne.n	8007fba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007f76:	629a      	str	r2, [r3, #40]	; 0x28
 8007f78:	e01f      	b.n	8007fba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	43db      	mvns	r3, r3
 8007f84:	ea02 0103 	and.w	r1, r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b0a      	cmp	r3, #10
 8007fa2:	d003      	beq.n	8007fac <HAL_DMA2D_ConfigLayer+0xf4>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d106      	bne.n	8007fba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fb8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	ff03000f 	.word	0xff03000f

08007fdc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b08b      	sub	sp, #44	; 0x2c
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	041a      	lsls	r2, r3, #16
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008014:	d174      	bne.n	8008100 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800801c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008024:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800802c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d108      	bne.n	800804e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	431a      	orrs	r2, r3
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	4313      	orrs	r3, r2
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
 800804c:	e053      	b.n	80080f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d106      	bne.n	8008064 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4313      	orrs	r3, r2
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	e048      	b.n	80080f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d111      	bne.n	8008090 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	0cdb      	lsrs	r3, r3, #19
 8008070:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	0a9b      	lsrs	r3, r3, #10
 8008076:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	08db      	lsrs	r3, r3, #3
 800807c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	02db      	lsls	r3, r3, #11
 8008086:	4313      	orrs	r3, r2
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	e032      	b.n	80080f6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d117      	bne.n	80080c8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	0fdb      	lsrs	r3, r3, #31
 800809c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	0cdb      	lsrs	r3, r3, #19
 80080a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	0adb      	lsrs	r3, r3, #11
 80080a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	08db      	lsrs	r3, r3, #3
 80080ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	029b      	lsls	r3, r3, #10
 80080b8:	431a      	orrs	r2, r3
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	03db      	lsls	r3, r3, #15
 80080be:	4313      	orrs	r3, r2
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
 80080c6:	e016      	b.n	80080f6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	0f1b      	lsrs	r3, r3, #28
 80080cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	0b1b      	lsrs	r3, r3, #12
 80080d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	011a      	lsls	r2, r3, #4
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	431a      	orrs	r2, r3
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	031b      	lsls	r3, r3, #12
 80080ee:	4313      	orrs	r3, r2
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80080fe:	e003      	b.n	8008108 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	60da      	str	r2, [r3, #12]
}
 8008108:	bf00      	nop
 800810a:	372c      	adds	r7, #44	; 0x2c
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	; 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	e175      	b.n	8008420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008134:	2201      	movs	r2, #1
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4013      	ands	r3, r2
 8008146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	f040 8164 	bne.w	800841a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00b      	beq.n	8008172 <HAL_GPIO_Init+0x5e>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d007      	beq.n	8008172 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008166:	2b11      	cmp	r3, #17
 8008168:	d003      	beq.n	8008172 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b12      	cmp	r3, #18
 8008170:	d130      	bne.n	80081d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	2203      	movs	r2, #3
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	43db      	mvns	r3, r3
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	4013      	ands	r3, r2
 8008188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4313      	orrs	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081a8:	2201      	movs	r2, #1
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	43db      	mvns	r3, r3
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	4013      	ands	r3, r2
 80081b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	f003 0201 	and.w	r2, r3, #1
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	2203      	movs	r2, #3
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43db      	mvns	r3, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4013      	ands	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d003      	beq.n	8008214 <HAL_GPIO_Init+0x100>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b12      	cmp	r3, #18
 8008212:	d123      	bne.n	800825c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	08da      	lsrs	r2, r3, #3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3208      	adds	r2, #8
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	220f      	movs	r2, #15
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	4013      	ands	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4313      	orrs	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	08da      	lsrs	r2, r3, #3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3208      	adds	r2, #8
 8008256:	69b9      	ldr	r1, [r7, #24]
 8008258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	2203      	movs	r2, #3
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	43db      	mvns	r3, r3
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	4013      	ands	r3, r2
 8008272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 0203 	and.w	r2, r3, #3
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	4313      	orrs	r3, r2
 8008288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80be 	beq.w	800841a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800829e:	4b65      	ldr	r3, [pc, #404]	; (8008434 <HAL_GPIO_Init+0x320>)
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	4a64      	ldr	r2, [pc, #400]	; (8008434 <HAL_GPIO_Init+0x320>)
 80082a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082a8:	6453      	str	r3, [r2, #68]	; 0x44
 80082aa:	4b62      	ldr	r3, [pc, #392]	; (8008434 <HAL_GPIO_Init+0x320>)
 80082ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80082b6:	4a60      	ldr	r2, [pc, #384]	; (8008438 <HAL_GPIO_Init+0x324>)
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	089b      	lsrs	r3, r3, #2
 80082bc:	3302      	adds	r3, #2
 80082be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	220f      	movs	r2, #15
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43db      	mvns	r3, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4013      	ands	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a57      	ldr	r2, [pc, #348]	; (800843c <HAL_GPIO_Init+0x328>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d037      	beq.n	8008352 <HAL_GPIO_Init+0x23e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a56      	ldr	r2, [pc, #344]	; (8008440 <HAL_GPIO_Init+0x32c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d031      	beq.n	800834e <HAL_GPIO_Init+0x23a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a55      	ldr	r2, [pc, #340]	; (8008444 <HAL_GPIO_Init+0x330>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d02b      	beq.n	800834a <HAL_GPIO_Init+0x236>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a54      	ldr	r2, [pc, #336]	; (8008448 <HAL_GPIO_Init+0x334>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d025      	beq.n	8008346 <HAL_GPIO_Init+0x232>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a53      	ldr	r2, [pc, #332]	; (800844c <HAL_GPIO_Init+0x338>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01f      	beq.n	8008342 <HAL_GPIO_Init+0x22e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a52      	ldr	r2, [pc, #328]	; (8008450 <HAL_GPIO_Init+0x33c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d019      	beq.n	800833e <HAL_GPIO_Init+0x22a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a51      	ldr	r2, [pc, #324]	; (8008454 <HAL_GPIO_Init+0x340>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <HAL_GPIO_Init+0x226>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a50      	ldr	r2, [pc, #320]	; (8008458 <HAL_GPIO_Init+0x344>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00d      	beq.n	8008336 <HAL_GPIO_Init+0x222>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a4f      	ldr	r2, [pc, #316]	; (800845c <HAL_GPIO_Init+0x348>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <HAL_GPIO_Init+0x21e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a4e      	ldr	r2, [pc, #312]	; (8008460 <HAL_GPIO_Init+0x34c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d101      	bne.n	800832e <HAL_GPIO_Init+0x21a>
 800832a:	2309      	movs	r3, #9
 800832c:	e012      	b.n	8008354 <HAL_GPIO_Init+0x240>
 800832e:	230a      	movs	r3, #10
 8008330:	e010      	b.n	8008354 <HAL_GPIO_Init+0x240>
 8008332:	2308      	movs	r3, #8
 8008334:	e00e      	b.n	8008354 <HAL_GPIO_Init+0x240>
 8008336:	2307      	movs	r3, #7
 8008338:	e00c      	b.n	8008354 <HAL_GPIO_Init+0x240>
 800833a:	2306      	movs	r3, #6
 800833c:	e00a      	b.n	8008354 <HAL_GPIO_Init+0x240>
 800833e:	2305      	movs	r3, #5
 8008340:	e008      	b.n	8008354 <HAL_GPIO_Init+0x240>
 8008342:	2304      	movs	r3, #4
 8008344:	e006      	b.n	8008354 <HAL_GPIO_Init+0x240>
 8008346:	2303      	movs	r3, #3
 8008348:	e004      	b.n	8008354 <HAL_GPIO_Init+0x240>
 800834a:	2302      	movs	r3, #2
 800834c:	e002      	b.n	8008354 <HAL_GPIO_Init+0x240>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <HAL_GPIO_Init+0x240>
 8008352:	2300      	movs	r3, #0
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	f002 0203 	and.w	r2, r2, #3
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	4093      	lsls	r3, r2
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	4313      	orrs	r3, r2
 8008362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008364:	4934      	ldr	r1, [pc, #208]	; (8008438 <HAL_GPIO_Init+0x324>)
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	089b      	lsrs	r3, r3, #2
 800836a:	3302      	adds	r3, #2
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008372:	4b3c      	ldr	r3, [pc, #240]	; (8008464 <HAL_GPIO_Init+0x350>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008396:	4a33      	ldr	r2, [pc, #204]	; (8008464 <HAL_GPIO_Init+0x350>)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800839c:	4b31      	ldr	r3, [pc, #196]	; (8008464 <HAL_GPIO_Init+0x350>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	43db      	mvns	r3, r3
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	4013      	ands	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80083c0:	4a28      	ldr	r2, [pc, #160]	; (8008464 <HAL_GPIO_Init+0x350>)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083c6:	4b27      	ldr	r3, [pc, #156]	; (8008464 <HAL_GPIO_Init+0x350>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	43db      	mvns	r3, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	4013      	ands	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083ea:	4a1e      	ldr	r2, [pc, #120]	; (8008464 <HAL_GPIO_Init+0x350>)
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083f0:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <HAL_GPIO_Init+0x350>)
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	43db      	mvns	r3, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4013      	ands	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <HAL_GPIO_Init+0x350>)
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3301      	adds	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b0f      	cmp	r3, #15
 8008424:	f67f ae86 	bls.w	8008134 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008428:	bf00      	nop
 800842a:	3724      	adds	r7, #36	; 0x24
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	40023800 	.word	0x40023800
 8008438:	40013800 	.word	0x40013800
 800843c:	40020000 	.word	0x40020000
 8008440:	40020400 	.word	0x40020400
 8008444:	40020800 	.word	0x40020800
 8008448:	40020c00 	.word	0x40020c00
 800844c:	40021000 	.word	0x40021000
 8008450:	40021400 	.word	0x40021400
 8008454:	40021800 	.word	0x40021800
 8008458:	40021c00 	.word	0x40021c00
 800845c:	40022000 	.word	0x40022000
 8008460:	40022400 	.word	0x40022400
 8008464:	40013c00 	.word	0x40013c00

08008468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800847a:	2300      	movs	r3, #0
 800847c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e0d9      	b.n	8008638 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008484:	2201      	movs	r2, #1
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	4013      	ands	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	f040 80c9 	bne.w	8008632 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80084a0:	4a6a      	ldr	r2, [pc, #424]	; (800864c <HAL_GPIO_DeInit+0x1e4>)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	089b      	lsrs	r3, r3, #2
 80084a6:	3302      	adds	r3, #2
 80084a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ac:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	220f      	movs	r2, #15
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	4013      	ands	r3, r2
 80084c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a62      	ldr	r2, [pc, #392]	; (8008650 <HAL_GPIO_DeInit+0x1e8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d037      	beq.n	800853a <HAL_GPIO_DeInit+0xd2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a61      	ldr	r2, [pc, #388]	; (8008654 <HAL_GPIO_DeInit+0x1ec>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d031      	beq.n	8008536 <HAL_GPIO_DeInit+0xce>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a60      	ldr	r2, [pc, #384]	; (8008658 <HAL_GPIO_DeInit+0x1f0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02b      	beq.n	8008532 <HAL_GPIO_DeInit+0xca>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a5f      	ldr	r2, [pc, #380]	; (800865c <HAL_GPIO_DeInit+0x1f4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d025      	beq.n	800852e <HAL_GPIO_DeInit+0xc6>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a5e      	ldr	r2, [pc, #376]	; (8008660 <HAL_GPIO_DeInit+0x1f8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01f      	beq.n	800852a <HAL_GPIO_DeInit+0xc2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a5d      	ldr	r2, [pc, #372]	; (8008664 <HAL_GPIO_DeInit+0x1fc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d019      	beq.n	8008526 <HAL_GPIO_DeInit+0xbe>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a5c      	ldr	r2, [pc, #368]	; (8008668 <HAL_GPIO_DeInit+0x200>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d013      	beq.n	8008522 <HAL_GPIO_DeInit+0xba>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a5b      	ldr	r2, [pc, #364]	; (800866c <HAL_GPIO_DeInit+0x204>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00d      	beq.n	800851e <HAL_GPIO_DeInit+0xb6>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a5a      	ldr	r2, [pc, #360]	; (8008670 <HAL_GPIO_DeInit+0x208>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <HAL_GPIO_DeInit+0xb2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a59      	ldr	r2, [pc, #356]	; (8008674 <HAL_GPIO_DeInit+0x20c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d101      	bne.n	8008516 <HAL_GPIO_DeInit+0xae>
 8008512:	2309      	movs	r3, #9
 8008514:	e012      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 8008516:	230a      	movs	r3, #10
 8008518:	e010      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 800851a:	2308      	movs	r3, #8
 800851c:	e00e      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 800851e:	2307      	movs	r3, #7
 8008520:	e00c      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 8008522:	2306      	movs	r3, #6
 8008524:	e00a      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 8008526:	2305      	movs	r3, #5
 8008528:	e008      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 800852a:	2304      	movs	r3, #4
 800852c:	e006      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 800852e:	2303      	movs	r3, #3
 8008530:	e004      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 8008532:	2302      	movs	r3, #2
 8008534:	e002      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <HAL_GPIO_DeInit+0xd4>
 800853a:	2300      	movs	r3, #0
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	f002 0203 	and.w	r2, r2, #3
 8008542:	0092      	lsls	r2, r2, #2
 8008544:	4093      	lsls	r3, r2
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	429a      	cmp	r2, r3
 800854a:	d132      	bne.n	80085b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800854c:	4b4a      	ldr	r3, [pc, #296]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	43db      	mvns	r3, r3
 8008554:	4948      	ldr	r1, [pc, #288]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 8008556:	4013      	ands	r3, r2
 8008558:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800855a:	4b47      	ldr	r3, [pc, #284]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	43db      	mvns	r3, r3
 8008562:	4945      	ldr	r1, [pc, #276]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 8008564:	4013      	ands	r3, r2
 8008566:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008568:	4b43      	ldr	r3, [pc, #268]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	43db      	mvns	r3, r3
 8008570:	4941      	ldr	r1, [pc, #260]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 8008572:	4013      	ands	r3, r2
 8008574:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008576:	4b40      	ldr	r3, [pc, #256]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	43db      	mvns	r3, r3
 800857e:	493e      	ldr	r1, [pc, #248]	; (8008678 <HAL_GPIO_DeInit+0x210>)
 8008580:	4013      	ands	r3, r2
 8008582:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	220f      	movs	r2, #15
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008594:	4a2d      	ldr	r2, [pc, #180]	; (800864c <HAL_GPIO_DeInit+0x1e4>)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	089b      	lsrs	r3, r3, #2
 800859a:	3302      	adds	r3, #2
 800859c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	43da      	mvns	r2, r3
 80085a4:	4829      	ldr	r0, [pc, #164]	; (800864c <HAL_GPIO_DeInit+0x1e4>)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	089b      	lsrs	r3, r3, #2
 80085aa:	400a      	ands	r2, r1
 80085ac:	3302      	adds	r3, #2
 80085ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	2103      	movs	r1, #3
 80085bc:	fa01 f303 	lsl.w	r3, r1, r3
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	08da      	lsrs	r2, r3, #3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3208      	adds	r2, #8
 80085d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	220f      	movs	r2, #15
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	43db      	mvns	r3, r3
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	08d2      	lsrs	r2, r2, #3
 80085e8:	4019      	ands	r1, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3208      	adds	r2, #8
 80085ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	2103      	movs	r1, #3
 80085fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008600:	43db      	mvns	r3, r3
 8008602:	401a      	ands	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	2101      	movs	r1, #1
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	fa01 f303 	lsl.w	r3, r1, r3
 8008614:	43db      	mvns	r3, r3
 8008616:	401a      	ands	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	2103      	movs	r1, #3
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	43db      	mvns	r3, r3
 800862c:	401a      	ands	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	3301      	adds	r3, #1
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b0f      	cmp	r3, #15
 800863c:	f67f af22 	bls.w	8008484 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	40013800 	.word	0x40013800
 8008650:	40020000 	.word	0x40020000
 8008654:	40020400 	.word	0x40020400
 8008658:	40020800 	.word	0x40020800
 800865c:	40020c00 	.word	0x40020c00
 8008660:	40021000 	.word	0x40021000
 8008664:	40021400 	.word	0x40021400
 8008668:	40021800 	.word	0x40021800
 800866c:	40021c00 	.word	0x40021c00
 8008670:	40022000 	.word	0x40022000
 8008674:	40022400 	.word	0x40022400
 8008678:	40013c00 	.word	0x40013c00

0800867c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
 8008688:	4613      	mov	r3, r2
 800868a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800868c:	787b      	ldrb	r3, [r7, #1]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008692:	887a      	ldrh	r2, [r7, #2]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008698:	e003      	b.n	80086a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800869a:	887b      	ldrh	r3, [r7, #2]
 800869c:	041a      	lsls	r2, r3, #16
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	619a      	str	r2, [r3, #24]
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	887b      	ldrh	r3, [r7, #2]
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086c6:	887b      	ldrh	r3, [r7, #2]
 80086c8:	041a      	lsls	r2, r3, #16
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80086ce:	e002      	b.n	80086d6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086d0:	887a      	ldrh	r2, [r7, #2]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	619a      	str	r2, [r3, #24]
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086f0:	695a      	ldr	r2, [r3, #20]
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086fa:	4a05      	ldr	r2, [pc, #20]	; (8008710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	4618      	mov	r0, r3
 8008704:	f7f8 fda0 	bl	8001248 <HAL_GPIO_EXTI_Callback>
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	40013c00 	.word	0x40013c00

08008714 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008716:	b08f      	sub	sp, #60	; 0x3c
 8008718:	af0a      	add	r7, sp, #40	; 0x28
 800871a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e054      	b.n	80087d0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f00d fab3 	bl	8015cac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2203      	movs	r2, #3
 800874a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4618      	mov	r0, r3
 8008766:	f007 f866 	bl	800f836 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	687e      	ldr	r6, [r7, #4]
 8008772:	466d      	mov	r5, sp
 8008774:	f106 0410 	add.w	r4, r6, #16
 8008778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800877a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800877c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800877e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008784:	e885 0003 	stmia.w	r5, {r0, r1}
 8008788:	1d33      	adds	r3, r6, #4
 800878a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800878c:	6838      	ldr	r0, [r7, #0]
 800878e:	f006 ffe9 	bl	800f764 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f007 f85d 	bl	800f858 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	687e      	ldr	r6, [r7, #4]
 80087a6:	466d      	mov	r5, sp
 80087a8:	f106 0410 	add.w	r4, r6, #16
 80087ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80087bc:	1d33      	adds	r3, r6, #4
 80087be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087c0:	6838      	ldr	r0, [r7, #0]
 80087c2:	f007 f96f 	bl	800faa4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087d8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b089      	sub	sp, #36	; 0x24
 80087dc:	af04      	add	r7, sp, #16
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	4608      	mov	r0, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	461a      	mov	r2, r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	70fb      	strb	r3, [r7, #3]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70bb      	strb	r3, [r7, #2]
 80087ee:	4613      	mov	r3, r2
 80087f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_HCD_HC_Init+0x28>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e07f      	b.n	8008900 <HAL_HCD_HC_Init+0x128>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	440b      	add	r3, r1
 8008816:	333d      	adds	r3, #61	; 0x3d
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	440b      	add	r3, r1
 800882a:	3338      	adds	r3, #56	; 0x38
 800882c:	787a      	ldrb	r2, [r7, #1]
 800882e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	440b      	add	r3, r1
 800883e:	3340      	adds	r3, #64	; 0x40
 8008840:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008842:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	440b      	add	r3, r1
 8008852:	3339      	adds	r3, #57	; 0x39
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	440b      	add	r3, r1
 8008866:	333f      	adds	r3, #63	; 0x3f
 8008868:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800886c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	78bb      	ldrb	r3, [r7, #2]
 8008872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008876:	b2d8      	uxtb	r0, r3
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	440b      	add	r3, r1
 8008884:	333a      	adds	r3, #58	; 0x3a
 8008886:	4602      	mov	r2, r0
 8008888:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800888a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da0a      	bge.n	80088a8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	440b      	add	r3, r1
 80088a0:	333b      	adds	r3, #59	; 0x3b
 80088a2:	2201      	movs	r2, #1
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	e009      	b.n	80088bc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	440b      	add	r3, r1
 80088b6:	333b      	adds	r3, #59	; 0x3b
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	440b      	add	r3, r1
 80088ca:	333c      	adds	r3, #60	; 0x3c
 80088cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80088d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	787c      	ldrb	r4, [r7, #1]
 80088d8:	78ba      	ldrb	r2, [r7, #2]
 80088da:	78f9      	ldrb	r1, [r7, #3]
 80088dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4623      	mov	r3, r4
 80088ee:	f007 fa4f 	bl	800fd90 <USB_HC_Init>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bd90      	pop	{r4, r7, pc}

08008908 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_HCD_HC_Halt+0x1e>
 8008922:	2302      	movs	r3, #2
 8008924:	e00f      	b.n	8008946 <HAL_HCD_HC_Halt+0x3e>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f007 fc89 	bl	801024e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	4608      	mov	r0, r1
 800895a:	4611      	mov	r1, r2
 800895c:	461a      	mov	r2, r3
 800895e:	4603      	mov	r3, r0
 8008960:	70fb      	strb	r3, [r7, #3]
 8008962:	460b      	mov	r3, r1
 8008964:	70bb      	strb	r3, [r7, #2]
 8008966:	4613      	mov	r3, r2
 8008968:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	440b      	add	r3, r1
 8008978:	333b      	adds	r3, #59	; 0x3b
 800897a:	78ba      	ldrb	r2, [r7, #2]
 800897c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	440b      	add	r3, r1
 800898c:	333f      	adds	r3, #63	; 0x3f
 800898e:	787a      	ldrb	r2, [r7, #1]
 8008990:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8008992:	7c3b      	ldrb	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d114      	bne.n	80089c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	440b      	add	r3, r1
 80089a6:	3342      	adds	r3, #66	; 0x42
 80089a8:	2203      	movs	r2, #3
 80089aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	440b      	add	r3, r1
 80089ba:	333d      	adds	r3, #61	; 0x3d
 80089bc:	7f3a      	ldrb	r2, [r7, #28]
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e009      	b.n	80089d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80089c2:	78fa      	ldrb	r2, [r7, #3]
 80089c4:	6879      	ldr	r1, [r7, #4]
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	440b      	add	r3, r1
 80089d0:	3342      	adds	r3, #66	; 0x42
 80089d2:	2202      	movs	r2, #2
 80089d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80089d6:	787b      	ldrb	r3, [r7, #1]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	f200 80d6 	bhi.w	8008b8a <HAL_HCD_HC_SubmitRequest+0x23a>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	08008b75 	.word	0x08008b75
 80089ec:	08008a61 	.word	0x08008a61
 80089f0:	08008aeb 	.word	0x08008aeb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80089f4:	7c3b      	ldrb	r3, [r7, #16]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	f040 80c9 	bne.w	8008b8e <HAL_HCD_HC_SubmitRequest+0x23e>
 80089fc:	78bb      	ldrb	r3, [r7, #2]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 80c5 	bne.w	8008b8e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8008a04:	8b3b      	ldrh	r3, [r7, #24]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	440b      	add	r3, r1
 8008a18:	3351      	adds	r3, #81	; 0x51
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3351      	adds	r3, #81	; 0x51
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	440b      	add	r3, r1
 8008a42:	3342      	adds	r3, #66	; 0x42
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008a48:	e0a1      	b.n	8008b8e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	3342      	adds	r3, #66	; 0x42
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	701a      	strb	r2, [r3, #0]
      break;
 8008a5e:	e096      	b.n	8008b8e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008a60:	78bb      	ldrb	r3, [r7, #2]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d120      	bne.n	8008aa8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	440b      	add	r3, r1
 8008a74:	3351      	adds	r3, #81	; 0x51
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	440b      	add	r3, r1
 8008a8a:	3342      	adds	r3, #66	; 0x42
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008a90:	e07e      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3342      	adds	r3, #66	; 0x42
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
      break;
 8008aa6:	e073      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	00db      	lsls	r3, r3, #3
 8008ab4:	440b      	add	r3, r1
 8008ab6:	3350      	adds	r3, #80	; 0x50
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	440b      	add	r3, r1
 8008acc:	3342      	adds	r3, #66	; 0x42
 8008ace:	2200      	movs	r2, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
      break;
 8008ad2:	e05d      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	440b      	add	r3, r1
 8008ae2:	3342      	adds	r3, #66	; 0x42
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	701a      	strb	r2, [r3, #0]
      break;
 8008ae8:	e052      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008aea:	78bb      	ldrb	r3, [r7, #2]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d120      	bne.n	8008b32 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	440b      	add	r3, r1
 8008afe:	3351      	adds	r3, #81	; 0x51
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	440b      	add	r3, r1
 8008b14:	3342      	adds	r3, #66	; 0x42
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008b1a:	e039      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	440b      	add	r3, r1
 8008b2a:	3342      	adds	r3, #66	; 0x42
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	701a      	strb	r2, [r3, #0]
      break;
 8008b30:	e02e      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	440b      	add	r3, r1
 8008b40:	3350      	adds	r3, #80	; 0x50
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	440b      	add	r3, r1
 8008b56:	3342      	adds	r3, #66	; 0x42
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
      break;
 8008b5c:	e018      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	440b      	add	r3, r1
 8008b6c:	3342      	adds	r3, #66	; 0x42
 8008b6e:	2202      	movs	r2, #2
 8008b70:	701a      	strb	r2, [r3, #0]
      break;
 8008b72:	e00d      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	440b      	add	r3, r1
 8008b82:	3342      	adds	r3, #66	; 0x42
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
      break;
 8008b88:	e002      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8008b8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	440b      	add	r3, r1
 8008b9e:	3344      	adds	r3, #68	; 0x44
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	8b39      	ldrh	r1, [r7, #24]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4403      	add	r3, r0
 8008bb4:	3348      	adds	r3, #72	; 0x48
 8008bb6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	440b      	add	r3, r1
 8008bc6:	335c      	adds	r3, #92	; 0x5c
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	440b      	add	r3, r1
 8008bda:	334c      	adds	r3, #76	; 0x4c
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	440b      	add	r3, r1
 8008bee:	3339      	adds	r3, #57	; 0x39
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	440b      	add	r3, r1
 8008c02:	335d      	adds	r3, #93	; 0x5d
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	3338      	adds	r3, #56	; 0x38
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	18d1      	adds	r1, r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	f007 f9be 	bl	800ffa4 <USB_HC_StartXfer>
 8008c28:	4603      	mov	r3, r0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop

08008c34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f006 fee7 	bl	800fa1e <USB_GetMode>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f040 80ef 	bne.w	8008e36 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f006 fecb 	bl	800f9f8 <USB_ReadInterrupts>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 80e5 	beq.w	8008e34 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f006 fec2 	bl	800f9f8 <USB_ReadInterrupts>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c7e:	d104      	bne.n	8008c8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f006 feb2 	bl	800f9f8 <USB_ReadInterrupts>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c9e:	d104      	bne.n	8008caa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f006 fea2 	bl	800f9f8 <USB_ReadInterrupts>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cbe:	d104      	bne.n	8008cca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f006 fe92 	bl	800f9f8 <USB_ReadInterrupts>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d103      	bne.n	8008ce6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f006 fe84 	bl	800f9f8 <USB_ReadInterrupts>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cfa:	d115      	bne.n	8008d28 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008d04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d108      	bne.n	8008d28 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f00d f83a 	bl	8015d90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2101      	movs	r1, #1
 8008d22:	4618      	mov	r0, r3
 8008d24:	f006 ff6e 	bl	800fc04 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f006 fe63 	bl	800f9f8 <USB_ReadInterrupts>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d3c:	d102      	bne.n	8008d44 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 f966 	bl	800a010 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f006 fe55 	bl	800f9f8 <USB_ReadInterrupts>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d106      	bne.n	8008d66 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f00c fffd 	bl	8015d58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2208      	movs	r2, #8
 8008d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f006 fe44 	bl	800f9f8 <USB_ReadInterrupts>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7a:	d138      	bne.n	8008dee <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f007 fa53 	bl	801022c <USB_HC_ReadInterrupt>
 8008d86:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e025      	b.n	8008dda <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	d106      	bne.n	8008dc8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8cf 	bl	8008f64 <HCD_HC_IN_IRQHandler>
 8008dc6:	e005      	b.n	8008dd4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcfd 	bl	80097ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d3d4      	bcc.n	8008d8e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f006 fe00 	bl	800f9f8 <USB_ReadInterrupts>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d101      	bne.n	8008e06 <HAL_HCD_IRQHandler+0x1d2>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <HAL_HCD_IRQHandler+0x1d4>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d014      	beq.n	8008e36 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0210 	bic.w	r2, r2, #16
 8008e1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f84b 	bl	8009eb8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0210 	orr.w	r2, r2, #16
 8008e30:	619a      	str	r2, [r3, #24]
 8008e32:	e000      	b.n	8008e36 <HAL_HCD_IRQHandler+0x202>
      return;
 8008e34:	bf00      	nop
    }
  }
}
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_HCD_Start+0x16>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e013      	b.n	8008e7a <HAL_HCD_Start+0x3e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f006 fcd8 	bl	800f814 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f006 ff2e 	bl	800fccc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_HCD_Stop+0x16>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e00d      	b.n	8008eb4 <HAL_HCD_Stop+0x32>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f007 fb0d 	bl	80104c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f006 fed5 	bl	800fc78 <USB_ResetPort>
 8008ece:	4603      	mov	r3, r0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	440b      	add	r3, r1
 8008ef2:	335c      	adds	r3, #92	; 0x5c
 8008ef4:	781b      	ldrb	r3, [r3, #0]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	440b      	add	r3, r1
 8008f1c:	334c      	adds	r3, #76	; 0x4c
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f006 ff17 	bl	800fd6c <USB_GetCurrentFrame>
 8008f3e:	4603      	mov	r3, r0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f006 fef2 	bl	800fd3e <USB_GetHostSpeed>
 8008f5a:	4603      	mov	r3, r0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d119      	bne.n	8008fc8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2304      	movs	r3, #4
 8008fa4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fc0:	f043 0302 	orr.w	r3, r3, #2
 8008fc4:	60d3      	str	r3, [r2, #12]
 8008fc6:	e0ce      	b.n	8009166 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fde:	d12c      	bne.n	800903a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fec:	461a      	mov	r2, r3
 8008fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	440b      	add	r3, r1
 8009002:	335d      	adds	r3, #93	; 0x5d
 8009004:	2207      	movs	r2, #7
 8009006:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	440a      	add	r2, r1
 800901e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009022:	f043 0302 	orr.w	r3, r3, #2
 8009026:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f007 f90b 	bl	801024e <USB_HC_Halt>
 8009038:	e095      	b.n	8009166 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b20      	cmp	r3, #32
 800904e:	d109      	bne.n	8009064 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905c:	461a      	mov	r2, r3
 800905e:	2320      	movs	r3, #32
 8009060:	6093      	str	r3, [r2, #8]
 8009062:	e080      	b.n	8009166 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b08      	cmp	r3, #8
 8009078:	d134      	bne.n	80090e4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	4413      	add	r3, r2
 8009082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	440a      	add	r2, r1
 8009090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	440b      	add	r3, r1
 80090a8:	335d      	adds	r3, #93	; 0x5d
 80090aa:	2205      	movs	r2, #5
 80090ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ba:	461a      	mov	r2, r3
 80090bc:	2310      	movs	r3, #16
 80090be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	461a      	mov	r2, r3
 80090ce:	2308      	movs	r3, #8
 80090d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f007 f8b6 	bl	801024e <USB_HC_Halt>
 80090e2:	e040      	b.n	8009166 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fa:	d134      	bne.n	8009166 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4413      	add	r3, r2
 8009104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	0151      	lsls	r1, r2, #5
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	440a      	add	r2, r1
 8009112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009116:	f043 0302 	orr.w	r3, r3, #2
 800911a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f007 f891 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	4413      	add	r3, r2
 8009134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009138:	461a      	mov	r2, r3
 800913a:	2310      	movs	r3, #16
 800913c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	440b      	add	r3, r1
 800914c:	335d      	adds	r3, #93	; 0x5d
 800914e:	2208      	movs	r2, #8
 8009150:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	4413      	add	r3, r2
 800915a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915e:	461a      	mov	r2, r3
 8009160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009164:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	4413      	add	r3, r2
 800916e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800917c:	d122      	bne.n	80091c4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	440a      	add	r2, r1
 8009194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009198:	f043 0302 	orr.w	r3, r3, #2
 800919c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f007 f850 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ba:	461a      	mov	r2, r3
 80091bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091c0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80091c2:	e300      	b.n	80097c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	f040 80fd 	bne.w	80093d6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01b      	beq.n	800921c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	440b      	add	r3, r1
 80091f2:	3348      	adds	r3, #72	; 0x48
 80091f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	0159      	lsls	r1, r3, #5
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	440b      	add	r3, r1
 80091fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8009208:	1ad1      	subs	r1, r2, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	4403      	add	r3, r0
 8009218:	334c      	adds	r3, #76	; 0x4c
 800921a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	440b      	add	r3, r1
 800922a:	335d      	adds	r3, #93	; 0x5d
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	440b      	add	r3, r1
 800923e:	3358      	adds	r3, #88	; 0x58
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	4413      	add	r3, r2
 800924c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009250:	461a      	mov	r2, r3
 8009252:	2301      	movs	r3, #1
 8009254:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	440b      	add	r3, r1
 8009264:	333f      	adds	r3, #63	; 0x3f
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	440b      	add	r3, r1
 800927a:	333f      	adds	r3, #63	; 0x3f
 800927c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800927e:	2b02      	cmp	r3, #2
 8009280:	d121      	bne.n	80092c6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	4413      	add	r3, r2
 800928a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	440a      	add	r2, r1
 8009298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800929c:	f043 0302 	orr.w	r3, r3, #2
 80092a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f006 ffce 	bl	801024e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092be:	461a      	mov	r2, r3
 80092c0:	2310      	movs	r3, #16
 80092c2:	6093      	str	r3, [r2, #8]
 80092c4:	e070      	b.n	80093a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	440b      	add	r3, r1
 80092d4:	333f      	adds	r3, #63	; 0x3f
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d12a      	bne.n	8009332 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	440b      	add	r3, r1
 800930a:	335c      	adds	r3, #92	; 0x5c
 800930c:	2201      	movs	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	b2d8      	uxtb	r0, r3
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	440b      	add	r3, r1
 8009322:	335c      	adds	r3, #92	; 0x5c
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	4601      	mov	r1, r0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f00c fd3e 	bl	8015dac <HAL_HCD_HC_NotifyURBChange_Callback>
 8009330:	e03a      	b.n	80093a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	440b      	add	r3, r1
 8009340:	333f      	adds	r3, #63	; 0x3f
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d12f      	bne.n	80093a8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	440b      	add	r3, r1
 8009356:	335c      	adds	r3, #92	; 0x5c
 8009358:	2201      	movs	r2, #1
 800935a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	440b      	add	r3, r1
 800936a:	3350      	adds	r3, #80	; 0x50
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	f083 0301 	eor.w	r3, r3, #1
 8009372:	b2d8      	uxtb	r0, r3
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	440b      	add	r3, r1
 8009382:	3350      	adds	r3, #80	; 0x50
 8009384:	4602      	mov	r2, r0
 8009386:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	b2d8      	uxtb	r0, r3
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	440b      	add	r3, r1
 800939a:	335c      	adds	r3, #92	; 0x5c
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	4601      	mov	r1, r0
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f00c fd02 	bl	8015dac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	440b      	add	r3, r1
 80093b6:	3350      	adds	r3, #80	; 0x50
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f083 0301 	eor.w	r3, r3, #1
 80093be:	b2d8      	uxtb	r0, r3
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	440b      	add	r3, r1
 80093ce:	3350      	adds	r3, #80	; 0x50
 80093d0:	4602      	mov	r2, r0
 80093d2:	701a      	strb	r2, [r3, #0]
}
 80093d4:	e1f7      	b.n	80097c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	f040 811a 	bne.w	8009622 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	440a      	add	r2, r1
 8009404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009408:	f023 0302 	bic.w	r3, r3, #2
 800940c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	440b      	add	r3, r1
 800941c:	335d      	adds	r3, #93	; 0x5d
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d10a      	bne.n	800943a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	440b      	add	r3, r1
 8009432:	335c      	adds	r3, #92	; 0x5c
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
 8009438:	e0d9      	b.n	80095ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	440b      	add	r3, r1
 8009448:	335d      	adds	r3, #93	; 0x5d
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b05      	cmp	r3, #5
 800944e:	d10a      	bne.n	8009466 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	440b      	add	r3, r1
 800945e:	335c      	adds	r3, #92	; 0x5c
 8009460:	2205      	movs	r2, #5
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	e0c3      	b.n	80095ee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	00db      	lsls	r3, r3, #3
 8009472:	440b      	add	r3, r1
 8009474:	335d      	adds	r3, #93	; 0x5d
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b06      	cmp	r3, #6
 800947a:	d00a      	beq.n	8009492 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	440b      	add	r3, r1
 800948a:	335d      	adds	r3, #93	; 0x5d
 800948c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800948e:	2b08      	cmp	r3, #8
 8009490:	d156      	bne.n	8009540 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	440b      	add	r3, r1
 80094a0:	3358      	adds	r3, #88	; 0x58
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1c59      	adds	r1, r3, #1
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	00db      	lsls	r3, r3, #3
 80094b2:	4403      	add	r3, r0
 80094b4:	3358      	adds	r3, #88	; 0x58
 80094b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4613      	mov	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4413      	add	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	440b      	add	r3, r1
 80094c6:	3358      	adds	r3, #88	; 0x58
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d914      	bls.n	80094f8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	440b      	add	r3, r1
 80094dc:	3358      	adds	r3, #88	; 0x58
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	440b      	add	r3, r1
 80094f0:	335c      	adds	r3, #92	; 0x5c
 80094f2:	2204      	movs	r2, #4
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	e009      	b.n	800950c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	440b      	add	r3, r1
 8009506:	335c      	adds	r3, #92	; 0x5c
 8009508:	2202      	movs	r2, #2
 800950a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4413      	add	r3, r2
 8009514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009522:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800952a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	4413      	add	r3, r2
 8009534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009538:	461a      	mov	r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	e056      	b.n	80095ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	440b      	add	r3, r1
 800954e:	335d      	adds	r3, #93	; 0x5d
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b03      	cmp	r3, #3
 8009554:	d123      	bne.n	800959e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	440b      	add	r3, r1
 8009564:	335c      	adds	r3, #92	; 0x5c
 8009566:	2202      	movs	r2, #2
 8009568:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009580:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009588:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	4413      	add	r3, r2
 8009592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	e027      	b.n	80095ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	335d      	adds	r3, #93	; 0x5d
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	d11c      	bne.n	80095ee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	440b      	add	r3, r1
 80095c2:	3358      	adds	r3, #88	; 0x58
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	1c59      	adds	r1, r3, #1
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4403      	add	r3, r0
 80095d6:	3358      	adds	r3, #88	; 0x58
 80095d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	440b      	add	r3, r1
 80095e8:	335c      	adds	r3, #92	; 0x5c
 80095ea:	2204      	movs	r2, #4
 80095ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095fa:	461a      	mov	r2, r3
 80095fc:	2302      	movs	r3, #2
 80095fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	b2d8      	uxtb	r0, r3
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	440b      	add	r3, r1
 8009612:	335c      	adds	r3, #92	; 0x5c
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	4601      	mov	r1, r0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f00c fbc6 	bl	8015dac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009620:	e0d1      	b.n	80097c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d13e      	bne.n	80096b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	4413      	add	r3, r2
 8009640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	440a      	add	r2, r1
 800964e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009652:	f043 0302 	orr.w	r3, r3, #2
 8009656:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	440b      	add	r3, r1
 8009666:	3358      	adds	r3, #88	; 0x58
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	1c59      	adds	r1, r3, #1
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4403      	add	r3, r0
 800967a:	3358      	adds	r3, #88	; 0x58
 800967c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	335d      	adds	r3, #93	; 0x5d
 800968e:	2206      	movs	r2, #6
 8009690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	b2d2      	uxtb	r2, r2
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f006 fdd6 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	461a      	mov	r2, r3
 80096b0:	2380      	movs	r3, #128	; 0x80
 80096b2:	6093      	str	r3, [r2, #8]
}
 80096b4:	e087      	b.n	80097c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d17c      	bne.n	80097c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	440b      	add	r3, r1
 80096da:	333f      	adds	r3, #63	; 0x3f
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d122      	bne.n	8009728 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	440b      	add	r3, r1
 80096f0:	3358      	adds	r3, #88	; 0x58
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	440a      	add	r2, r1
 800970c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009710:	f043 0302 	orr.w	r3, r3, #2
 8009714:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f006 fd94 	bl	801024e <USB_HC_Halt>
 8009726:	e045      	b.n	80097b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4613      	mov	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	440b      	add	r3, r1
 8009736:	333f      	adds	r3, #63	; 0x3f
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	440b      	add	r3, r1
 800974c:	333f      	adds	r3, #63	; 0x3f
 800974e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009750:	2b02      	cmp	r3, #2
 8009752:	d12f      	bne.n	80097b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	440b      	add	r3, r1
 8009762:	3358      	adds	r3, #88	; 0x58
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d121      	bne.n	80097b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	440b      	add	r3, r1
 800977e:	335d      	adds	r3, #93	; 0x5d
 8009780:	2203      	movs	r2, #3
 8009782:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	440a      	add	r2, r1
 800979a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800979e:	f043 0302 	orr.w	r3, r3, #2
 80097a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f006 fd4d 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c0:	461a      	mov	r2, r3
 80097c2:	2310      	movs	r3, #16
 80097c4:	6093      	str	r3, [r2, #8]
}
 80097c6:	bf00      	nop
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b086      	sub	sp, #24
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d119      	bne.n	8009832 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	4413      	add	r3, r2
 8009806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800980a:	461a      	mov	r2, r3
 800980c:	2304      	movs	r3, #4
 800980e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4413      	add	r3, r2
 8009818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	440a      	add	r2, r1
 8009826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800982a:	f043 0302 	orr.w	r3, r3, #2
 800982e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8009830:	e33e      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	015a      	lsls	r2, r3, #5
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	4413      	add	r3, r2
 800983a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f003 0320 	and.w	r3, r3, #32
 8009844:	2b20      	cmp	r3, #32
 8009846:	d141      	bne.n	80098cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	4413      	add	r3, r2
 8009850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009854:	461a      	mov	r2, r3
 8009856:	2320      	movs	r3, #32
 8009858:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	440b      	add	r3, r1
 8009868:	333d      	adds	r3, #61	; 0x3d
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	f040 831f 	bne.w	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	440b      	add	r3, r1
 8009880:	333d      	adds	r3, #61	; 0x3d
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	440b      	add	r3, r1
 8009894:	335c      	adds	r3, #92	; 0x5c
 8009896:	2202      	movs	r2, #2
 8009898:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b4:	f043 0302 	orr.w	r3, r3, #2
 80098b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f006 fcc2 	bl	801024e <USB_HC_Halt>
}
 80098ca:	e2f1      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098de:	2b40      	cmp	r3, #64	; 0x40
 80098e0:	d13f      	bne.n	8009962 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	335d      	adds	r3, #93	; 0x5d
 80098f2:	2204      	movs	r2, #4
 80098f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	440b      	add	r3, r1
 8009904:	333d      	adds	r3, #61	; 0x3d
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	440b      	add	r3, r1
 8009918:	3358      	adds	r3, #88	; 0x58
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	4413      	add	r3, r2
 8009926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	440a      	add	r2, r1
 8009934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009938:	f043 0302 	orr.w	r3, r3, #2
 800993c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f006 fc80 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	4413      	add	r3, r2
 8009956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800995a:	461a      	mov	r2, r3
 800995c:	2340      	movs	r3, #64	; 0x40
 800995e:	6093      	str	r3, [r2, #8]
}
 8009960:	e2a6      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4413      	add	r3, r2
 800996a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009978:	d122      	bne.n	80099c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	4413      	add	r3, r2
 8009982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	440a      	add	r2, r1
 8009990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f006 fc52 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b6:	461a      	mov	r2, r3
 80099b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099bc:	6093      	str	r3, [r2, #8]
}
 80099be:	e277      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d135      	bne.n	8009a42 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	440b      	add	r3, r1
 80099e4:	3358      	adds	r3, #88	; 0x58
 80099e6:	2200      	movs	r2, #0
 80099e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	0151      	lsls	r1, r2, #5
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	440a      	add	r2, r1
 8009a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a04:	f043 0302 	orr.w	r3, r3, #2
 8009a08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f006 fc1a 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a26:	461a      	mov	r2, r3
 8009a28:	2301      	movs	r3, #1
 8009a2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	440b      	add	r3, r1
 8009a3a:	335d      	adds	r3, #93	; 0x5d
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	701a      	strb	r2, [r3, #0]
}
 8009a40:	e236      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f003 0308 	and.w	r3, r3, #8
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d12b      	bne.n	8009ab0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a64:	461a      	mov	r2, r3
 8009a66:	2308      	movs	r3, #8
 8009a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	0151      	lsls	r1, r2, #5
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	440a      	add	r2, r1
 8009a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f006 fbda 	bl	801024e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	440b      	add	r3, r1
 8009aa8:	335d      	adds	r3, #93	; 0x5d
 8009aaa:	2205      	movs	r2, #5
 8009aac:	701a      	strb	r2, [r3, #0]
}
 8009aae:	e1ff      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b10      	cmp	r3, #16
 8009ac4:	d155      	bne.n	8009b72 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	440b      	add	r3, r1
 8009ad4:	3358      	adds	r3, #88	; 0x58
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	440b      	add	r3, r1
 8009ae8:	335d      	adds	r3, #93	; 0x5d
 8009aea:	2203      	movs	r2, #3
 8009aec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	440b      	add	r3, r1
 8009afc:	333d      	adds	r3, #61	; 0x3d
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d114      	bne.n	8009b2e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	440b      	add	r3, r1
 8009b12:	333c      	adds	r3, #60	; 0x3c
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	440b      	add	r3, r1
 8009b28:	333d      	adds	r3, #61	; 0x3d
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b48:	f043 0302 	orr.w	r3, r3, #2
 8009b4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	b2d2      	uxtb	r2, r2
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f006 fb78 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	6093      	str	r3, [r2, #8]
}
 8009b70:	e19e      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b80      	cmp	r3, #128	; 0x80
 8009b86:	d12b      	bne.n	8009be0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f006 fb4b 	bl	801024e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	440b      	add	r3, r1
 8009bc6:	335d      	adds	r3, #93	; 0x5d
 8009bc8:	2206      	movs	r2, #6
 8009bca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2380      	movs	r3, #128	; 0x80
 8009bdc:	6093      	str	r3, [r2, #8]
}
 8009bde:	e167      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d135      	bne.n	8009c64 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	0151      	lsls	r1, r2, #5
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	440a      	add	r2, r1
 8009c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c12:	f043 0302 	orr.w	r3, r3, #2
 8009c16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f006 fb13 	bl	801024e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c34:	461a      	mov	r2, r3
 8009c36:	2310      	movs	r3, #16
 8009c38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c46:	461a      	mov	r2, r3
 8009c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	440b      	add	r3, r1
 8009c5c:	335d      	adds	r3, #93	; 0x5d
 8009c5e:	2208      	movs	r2, #8
 8009c60:	701a      	strb	r2, [r3, #0]
}
 8009c62:	e125      	b.n	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	f040 811a 	bne.w	8009eb0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	0151      	lsls	r1, r2, #5
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	440a      	add	r2, r1
 8009c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c96:	f023 0302 	bic.w	r3, r3, #2
 8009c9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	440b      	add	r3, r1
 8009caa:	335d      	adds	r3, #93	; 0x5d
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d137      	bne.n	8009d22 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	440b      	add	r3, r1
 8009cc0:	335c      	adds	r3, #92	; 0x5c
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	440b      	add	r3, r1
 8009cd4:	333f      	adds	r3, #63	; 0x3f
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d00b      	beq.n	8009cf4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	333f      	adds	r3, #63	; 0x3f
 8009cec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	f040 80c5 	bne.w	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	440b      	add	r3, r1
 8009d02:	3351      	adds	r3, #81	; 0x51
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f083 0301 	eor.w	r3, r3, #1
 8009d0a:	b2d8      	uxtb	r0, r3
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	440b      	add	r3, r1
 8009d1a:	3351      	adds	r3, #81	; 0x51
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	e0ad      	b.n	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	440b      	add	r3, r1
 8009d30:	335d      	adds	r3, #93	; 0x5d
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d10a      	bne.n	8009d4e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	440b      	add	r3, r1
 8009d46:	335c      	adds	r3, #92	; 0x5c
 8009d48:	2202      	movs	r2, #2
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e097      	b.n	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4613      	mov	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	440b      	add	r3, r1
 8009d5c:	335d      	adds	r3, #93	; 0x5d
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d10a      	bne.n	8009d7a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	440b      	add	r3, r1
 8009d72:	335c      	adds	r3, #92	; 0x5c
 8009d74:	2202      	movs	r2, #2
 8009d76:	701a      	strb	r2, [r3, #0]
 8009d78:	e081      	b.n	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	440b      	add	r3, r1
 8009d88:	335d      	adds	r3, #93	; 0x5d
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b05      	cmp	r3, #5
 8009d8e:	d10a      	bne.n	8009da6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	440b      	add	r3, r1
 8009d9e:	335c      	adds	r3, #92	; 0x5c
 8009da0:	2205      	movs	r2, #5
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e06b      	b.n	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	440b      	add	r3, r1
 8009db4:	335d      	adds	r3, #93	; 0x5d
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b06      	cmp	r3, #6
 8009dba:	d00a      	beq.n	8009dd2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	440b      	add	r3, r1
 8009dca:	335d      	adds	r3, #93	; 0x5d
 8009dcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	d155      	bne.n	8009e7e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	440b      	add	r3, r1
 8009de0:	3358      	adds	r3, #88	; 0x58
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	1c59      	adds	r1, r3, #1
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	4403      	add	r3, r0
 8009df4:	3358      	adds	r3, #88	; 0x58
 8009df6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	440b      	add	r3, r1
 8009e06:	3358      	adds	r3, #88	; 0x58
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d914      	bls.n	8009e38 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3358      	adds	r3, #88	; 0x58
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4613      	mov	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	00db      	lsls	r3, r3, #3
 8009e2e:	440b      	add	r3, r1
 8009e30:	335c      	adds	r3, #92	; 0x5c
 8009e32:	2204      	movs	r2, #4
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	e009      	b.n	8009e4c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	00db      	lsls	r3, r3, #3
 8009e44:	440b      	add	r3, r1
 8009e46:	335c      	adds	r3, #92	; 0x5c
 8009e48:	2202      	movs	r2, #2
 8009e4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e78:	461a      	mov	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	b2d8      	uxtb	r0, r3
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	440b      	add	r3, r1
 8009ea2:	335c      	adds	r3, #92	; 0x5c
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f00b ff7e 	bl	8015dac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009eb0:	bf00      	nop
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08a      	sub	sp, #40	; 0x28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	f003 030f 	and.w	r3, r3, #15
 8009ed8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	0c5b      	lsrs	r3, r3, #17
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	091b      	lsrs	r3, r3, #4
 8009ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d003      	beq.n	8009efc <HCD_RXQLVL_IRQHandler+0x44>
 8009ef4:	2b05      	cmp	r3, #5
 8009ef6:	f000 8082 	beq.w	8009ffe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009efa:	e083      	b.n	800a004 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d07f      	beq.n	800a002 <HCD_RXQLVL_IRQHandler+0x14a>
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	440b      	add	r3, r1
 8009f10:	3344      	adds	r3, #68	; 0x44
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d074      	beq.n	800a002 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	440b      	add	r3, r1
 8009f2a:	3344      	adds	r3, #68	; 0x44
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	b292      	uxth	r2, r2
 8009f32:	4619      	mov	r1, r3
 8009f34:	f005 fd37 	bl	800f9a6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	440b      	add	r3, r1
 8009f46:	3344      	adds	r3, #68	; 0x44
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	18d1      	adds	r1, r2, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4403      	add	r3, r0
 8009f5c:	3344      	adds	r3, #68	; 0x44
 8009f5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	440b      	add	r3, r1
 8009f6e:	334c      	adds	r3, #76	; 0x4c
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	18d1      	adds	r1, r2, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4403      	add	r3, r0
 8009f84:	334c      	adds	r3, #76	; 0x4c
 8009f86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	4b1d      	ldr	r3, [pc, #116]	; (800a00c <HCD_RXQLVL_IRQHandler+0x154>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d031      	beq.n	800a002 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	440b      	add	r3, r1
 8009fde:	3350      	adds	r3, #80	; 0x50
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f083 0301 	eor.w	r3, r3, #1
 8009fe6:	b2d8      	uxtb	r0, r3
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3350      	adds	r3, #80	; 0x50
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	701a      	strb	r2, [r3, #0]
      break;
 8009ffc:	e001      	b.n	800a002 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800a002:	bf00      	nop
  }
}
 800a004:	bf00      	nop
 800a006:	3728      	adds	r7, #40	; 0x28
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	1ff80000 	.word	0x1ff80000

0800a010 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a03c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b02      	cmp	r3, #2
 800a046:	d10b      	bne.n	800a060 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d102      	bne.n	800a058 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f00b fe8e 	bl	8015d74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f043 0302 	orr.w	r3, r3, #2
 800a05e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	2b08      	cmp	r3, #8
 800a068:	d132      	bne.n	800a0d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f043 0308 	orr.w	r3, r3, #8
 800a070:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d126      	bne.n	800a0ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d113      	bne.n	800a0ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800a08a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a08e:	d106      	bne.n	800a09e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2102      	movs	r1, #2
 800a096:	4618      	mov	r0, r3
 800a098:	f005 fdb4 	bl	800fc04 <USB_InitFSLSPClkSel>
 800a09c:	e011      	b.n	800a0c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f005 fdad 	bl	800fc04 <USB_InitFSLSPClkSel>
 800a0aa:	e00a      	b.n	800a0c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d106      	bne.n	800a0c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a0c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f00b fe84 	bl	8015dd0 <HAL_HCD_PortEnabled_Callback>
 800a0c8:	e002      	b.n	800a0d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f00b fe8e 	bl	8015dec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d103      	bne.n	800a0e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f043 0320 	orr.w	r3, r3, #32
 800a0e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6013      	str	r3, [r2, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e07f      	b.n	800a20a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7f8 fce8 	bl	8002af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2224      	movs	r2, #36	; 0x24
 800a128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 0201 	bic.w	r2, r2, #1
 800a13a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d107      	bne.n	800a172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a16e:	609a      	str	r2, [r3, #8]
 800a170:	e006      	b.n	800a180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a17e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d104      	bne.n	800a192 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6859      	ldr	r1, [r3, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	4b1d      	ldr	r3, [pc, #116]	; (800a214 <HAL_I2C_Init+0x11c>)
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	ea42 0103 	orr.w	r1, r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	021a      	lsls	r2, r3, #8
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	69d9      	ldr	r1, [r3, #28]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1a      	ldr	r2, [r3, #32]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	02008000 	.word	0x02008000

0800a218 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e021      	b.n	800a26e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2224      	movs	r2, #36	; 0x24
 800a22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0201 	bic.w	r2, r2, #1
 800a240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f8 fcce 	bl	8002be4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	4608      	mov	r0, r1
 800a282:	4611      	mov	r1, r2
 800a284:	461a      	mov	r2, r3
 800a286:	4603      	mov	r3, r0
 800a288:	817b      	strh	r3, [r7, #10]
 800a28a:	460b      	mov	r3, r1
 800a28c:	813b      	strh	r3, [r7, #8]
 800a28e:	4613      	mov	r3, r2
 800a290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	f040 80f9 	bne.w	800a492 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <HAL_I2C_Mem_Write+0x34>
 800a2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e0ed      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_I2C_Mem_Write+0x4e>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e0e6      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a2ce:	f7fc fab5 	bl	800683c <HAL_GetTick>
 800a2d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	2319      	movs	r3, #25
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 fad1 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e0d1      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2221      	movs	r2, #33	; 0x21
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2240      	movs	r2, #64	; 0x40
 800a2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a3a      	ldr	r2, [r7, #32]
 800a30a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a318:	88f8      	ldrh	r0, [r7, #6]
 800a31a:	893a      	ldrh	r2, [r7, #8]
 800a31c:	8979      	ldrh	r1, [r7, #10]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	4603      	mov	r3, r0
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f9e1 	bl	800a6f0 <I2C_RequestMemoryWrite>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d005      	beq.n	800a340 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e0a9      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a344:	b29b      	uxth	r3, r3
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	d90e      	bls.n	800a368 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a354:	b2da      	uxtb	r2, r3
 800a356:	8979      	ldrh	r1, [r7, #10]
 800a358:	2300      	movs	r3, #0
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fbb3 	bl	800aacc <I2C_TransferConfig>
 800a366:	e00f      	b.n	800a388 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a376:	b2da      	uxtb	r2, r3
 800a378:	8979      	ldrh	r1, [r7, #10]
 800a37a:	2300      	movs	r3, #0
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 fba2 	bl	800aacc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fabb 	bl	800a908 <I2C_WaitOnTXISFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e07b      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d034      	beq.n	800a440 <HAL_I2C_Mem_Write+0x1c8>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d130      	bne.n	800a440 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2180      	movs	r1, #128	; 0x80
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 fa4d 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e04d      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	2bff      	cmp	r3, #255	; 0xff
 800a400:	d90e      	bls.n	800a420 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	22ff      	movs	r2, #255	; 0xff
 800a406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	8979      	ldrh	r1, [r7, #10]
 800a410:	2300      	movs	r3, #0
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 fb57 	bl	800aacc <I2C_TransferConfig>
 800a41e:	e00f      	b.n	800a440 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	8979      	ldrh	r1, [r7, #10]
 800a432:	2300      	movs	r3, #0
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fb46 	bl	800aacc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d19e      	bne.n	800a388 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fa9a 	bl	800a988 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e01a      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2220      	movs	r2, #32
 800a464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6859      	ldr	r1, [r3, #4]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <HAL_I2C_Mem_Write+0x224>)
 800a472:	400b      	ands	r3, r1
 800a474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2220      	movs	r2, #32
 800a47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	fe00e800 	.word	0xfe00e800

0800a4a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	817b      	strh	r3, [r7, #10]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	813b      	strh	r3, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	f040 80fd 	bne.w	800a6c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_I2C_Mem_Read+0x34>
 800a4ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e0f1      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d101      	bne.n	800a4ee <HAL_I2C_Mem_Read+0x4e>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e0ea      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4f6:	f7fc f9a1 	bl	800683c <HAL_GetTick>
 800a4fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2319      	movs	r3, #25
 800a502:	2201      	movs	r2, #1
 800a504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f9bd 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e0d5      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2222      	movs	r2, #34	; 0x22
 800a51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2240      	movs	r2, #64	; 0x40
 800a524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6a3a      	ldr	r2, [r7, #32]
 800a532:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a538:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a540:	88f8      	ldrh	r0, [r7, #6]
 800a542:	893a      	ldrh	r2, [r7, #8]
 800a544:	8979      	ldrh	r1, [r7, #10]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	4603      	mov	r3, r0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f921 	bl	800a798 <I2C_RequestMemoryRead>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e0ad      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	2bff      	cmp	r3, #255	; 0xff
 800a570:	d90e      	bls.n	800a590 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	22ff      	movs	r2, #255	; 0xff
 800a576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	8979      	ldrh	r1, [r7, #10]
 800a580:	4b52      	ldr	r3, [pc, #328]	; (800a6cc <HAL_I2C_Mem_Read+0x22c>)
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fa9f 	bl	800aacc <I2C_TransferConfig>
 800a58e:	e00f      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	8979      	ldrh	r1, [r7, #10]
 800a5a2:	4b4a      	ldr	r3, [pc, #296]	; (800a6cc <HAL_I2C_Mem_Read+0x22c>)
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fa8e 	bl	800aacc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2104      	movs	r1, #4
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f964 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e07c      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d034      	beq.n	800a670 <HAL_I2C_Mem_Read+0x1d0>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d130      	bne.n	800a670 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	2200      	movs	r2, #0
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f935 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e04d      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2bff      	cmp	r3, #255	; 0xff
 800a630:	d90e      	bls.n	800a650 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	22ff      	movs	r2, #255	; 0xff
 800a636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	8979      	ldrh	r1, [r7, #10]
 800a640:	2300      	movs	r3, #0
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa3f 	bl	800aacc <I2C_TransferConfig>
 800a64e:	e00f      	b.n	800a670 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	8979      	ldrh	r1, [r7, #10]
 800a662:	2300      	movs	r3, #0
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 fa2e 	bl	800aacc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a674:	b29b      	uxth	r3, r3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d19a      	bne.n	800a5b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f982 	bl	800a988 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e01a      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2220      	movs	r2, #32
 800a694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6859      	ldr	r1, [r3, #4]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <HAL_I2C_Mem_Read+0x230>)
 800a6a2:	400b      	ands	r3, r1
 800a6a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a6c2:	2302      	movs	r3, #2
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	80002400 	.word	0x80002400
 800a6d0:	fe00e800 	.word	0xfe00e800

0800a6d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6e2:	b2db      	uxtb	r3, r3
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	817b      	strh	r3, [r7, #10]
 800a702:	460b      	mov	r3, r1
 800a704:	813b      	strh	r3, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a70a:	88fb      	ldrh	r3, [r7, #6]
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	8979      	ldrh	r1, [r7, #10]
 800a710:	4b20      	ldr	r3, [pc, #128]	; (800a794 <I2C_RequestMemoryWrite+0xa4>)
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f9d7 	bl	800aacc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	69b9      	ldr	r1, [r7, #24]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 f8f0 	bl	800a908 <I2C_WaitOnTXISFlagUntilTimeout>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e02c      	b.n	800a78c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d105      	bne.n	800a744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a738:	893b      	ldrh	r3, [r7, #8]
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	629a      	str	r2, [r3, #40]	; 0x28
 800a742:	e015      	b.n	800a770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a744:	893b      	ldrh	r3, [r7, #8]
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	b29b      	uxth	r3, r3
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a752:	69fa      	ldr	r2, [r7, #28]
 800a754:	69b9      	ldr	r1, [r7, #24]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f8d6 	bl	800a908 <I2C_WaitOnTXISFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e012      	b.n	800a78c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a766:	893b      	ldrh	r3, [r7, #8]
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2200      	movs	r2, #0
 800a778:	2180      	movs	r1, #128	; 0x80
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 f884 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	80002000 	.word	0x80002000

0800a798 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	817b      	strh	r3, [r7, #10]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	813b      	strh	r3, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a7b2:	88fb      	ldrh	r3, [r7, #6]
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	8979      	ldrh	r1, [r7, #10]
 800a7b8:	4b20      	ldr	r3, [pc, #128]	; (800a83c <I2C_RequestMemoryRead+0xa4>)
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 f984 	bl	800aacc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	69b9      	ldr	r1, [r7, #24]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f89d 	bl	800a908 <I2C_WaitOnTXISFlagUntilTimeout>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e02c      	b.n	800a832 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d105      	bne.n	800a7ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a7de:	893b      	ldrh	r3, [r7, #8]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	629a      	str	r2, [r3, #40]	; 0x28
 800a7e8:	e015      	b.n	800a816 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a7ea:	893b      	ldrh	r3, [r7, #8]
 800a7ec:	0a1b      	lsrs	r3, r3, #8
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	69b9      	ldr	r1, [r7, #24]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 f883 	bl	800a908 <I2C_WaitOnTXISFlagUntilTimeout>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e012      	b.n	800a832 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a80c:	893b      	ldrh	r3, [r7, #8]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2200      	movs	r2, #0
 800a81e:	2140      	movs	r1, #64	; 0x40
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f831 	bl	800a888 <I2C_WaitOnFlagUntilTimeout>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e000      	b.n	800a832 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	80002000 	.word	0x80002000

0800a840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b02      	cmp	r3, #2
 800a854:	d103      	bne.n	800a85e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d007      	beq.n	800a87c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0201 	orr.w	r2, r2, #1
 800a87a:	619a      	str	r2, [r3, #24]
  }
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a898:	e022      	b.n	800a8e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d01e      	beq.n	800a8e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a2:	f7fb ffcb 	bl	800683c <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d302      	bcc.n	800a8b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d113      	bne.n	800a8e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8bc:	f043 0220 	orr.w	r2, r3, #32
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e00f      	b.n	800a900 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2301      	moveq	r3, #1
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d0cd      	beq.n	800a89a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a914:	e02c      	b.n	800a970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f870 	bl	800aa00 <I2C_IsAcknowledgeFailed>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e02a      	b.n	800a980 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a930:	d01e      	beq.n	800a970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a932:	f7fb ff83 	bl	800683c <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d113      	bne.n	800a970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94c:	f043 0220 	orr.w	r2, r3, #32
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2220      	movs	r2, #32
 800a958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e007      	b.n	800a980 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d1cb      	bne.n	800a916 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a994:	e028      	b.n	800a9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 f830 	bl	800aa00 <I2C_IsAcknowledgeFailed>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e026      	b.n	800a9f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9aa:	f7fb ff47 	bl	800683c <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d302      	bcc.n	800a9c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d113      	bne.n	800a9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c4:	f043 0220 	orr.w	r2, r3, #32
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e007      	b.n	800a9f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	d1cf      	bne.n	800a996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	f003 0310 	and.w	r3, r3, #16
 800aa16:	2b10      	cmp	r3, #16
 800aa18:	d151      	bne.n	800aabe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa1a:	e022      	b.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa22:	d01e      	beq.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa24:	f7fb ff0a 	bl	800683c <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d302      	bcc.n	800aa3a <I2C_IsAcknowledgeFailed+0x3a>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d113      	bne.n	800aa62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3e:	f043 0220 	orr.w	r2, r3, #32
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e02e      	b.n	800aac0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d1d5      	bne.n	800aa1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2210      	movs	r2, #16
 800aa76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fedd 	bl	800a840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6859      	ldr	r1, [r3, #4]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa92:	400b      	ands	r3, r1
 800aa94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa9a:	f043 0204 	orr.w	r2, r3, #4
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	fe00e800 	.word	0xfe00e800

0800aacc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	607b      	str	r3, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	817b      	strh	r3, [r7, #10]
 800aada:	4613      	mov	r3, r2
 800aadc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	0d5b      	lsrs	r3, r3, #21
 800aae8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aaec:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <I2C_TransferConfig+0x58>)
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	ea02 0103 	and.w	r1, r2, r3
 800aaf6:	897b      	ldrh	r3, [r7, #10]
 800aaf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aafc:	7a7b      	ldrb	r3, [r7, #9]
 800aafe:	041b      	lsls	r3, r3, #16
 800ab00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	03ff63ff 	.word	0x03ff63ff

0800ab28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d138      	bne.n	800abb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e032      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2224      	movs	r2, #36	; 0x24
 800ab58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0201 	bic.w	r2, r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6819      	ldr	r1, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0201 	orr.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d139      	bne.n	800ac48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800abde:	2302      	movs	r3, #2
 800abe0:	e033      	b.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2224      	movs	r2, #36	; 0x24
 800abee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0201 	orr.w	r2, r2, #1
 800ac32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e000      	b.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac48:	2302      	movs	r3, #2
  }
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
	...

0800ac58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e0bf      	b.n	800adea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7f7 ffec 	bl	8002c5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2202      	movs	r2, #2
 800ac88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	699a      	ldr	r2, [r3, #24]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800ac9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6999      	ldr	r1, [r3, #24]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800acb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	430a      	orrs	r2, r1
 800acbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6899      	ldr	r1, [r3, #8]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b4a      	ldr	r3, [pc, #296]	; (800adf4 <HAL_LTDC_Init+0x19c>)
 800accc:	400b      	ands	r3, r1
 800acce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	041b      	lsls	r3, r3, #16
 800acd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6899      	ldr	r1, [r3, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	431a      	orrs	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68d9      	ldr	r1, [r3, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	4b3e      	ldr	r3, [pc, #248]	; (800adf4 <HAL_LTDC_Init+0x19c>)
 800acfa:	400b      	ands	r3, r1
 800acfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	041b      	lsls	r3, r3, #16
 800ad04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68d9      	ldr	r1, [r3, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a1a      	ldr	r2, [r3, #32]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6919      	ldr	r1, [r3, #16]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	4b33      	ldr	r3, [pc, #204]	; (800adf4 <HAL_LTDC_Init+0x19c>)
 800ad28:	400b      	ands	r3, r1
 800ad2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	041b      	lsls	r3, r3, #16
 800ad32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6919      	ldr	r1, [r3, #16]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	431a      	orrs	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6959      	ldr	r1, [r3, #20]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	4b27      	ldr	r3, [pc, #156]	; (800adf4 <HAL_LTDC_Init+0x19c>)
 800ad56:	400b      	ands	r3, r1
 800ad58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5e:	041b      	lsls	r3, r3, #16
 800ad60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6959      	ldr	r1, [r3, #20]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ad9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800adae:	431a      	orrs	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0206 	orr.w	r2, r2, #6
 800adc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699a      	ldr	r2, [r3, #24]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f042 0201 	orr.w	r2, r2, #1
 800add6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	f000f800 	.word	0xf000f800

0800adf8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d023      	beq.n	800ae62 <HAL_LTDC_IRQHandler+0x6a>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f003 0304 	and.w	r3, r3, #4
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01e      	beq.n	800ae62 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0204 	bic.w	r2, r2, #4
 800ae32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2204      	movs	r2, #4
 800ae3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae42:	f043 0201 	orr.w	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2204      	movs	r2, #4
 800ae50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f86f 	bl	800af40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d023      	beq.n	800aeb4 <HAL_LTDC_IRQHandler+0xbc>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01e      	beq.n	800aeb4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0202 	bic.w	r2, r2, #2
 800ae84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae94:	f043 0202 	orr.w	r2, r3, #2
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2204      	movs	r2, #4
 800aea2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f846 	bl	800af40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01b      	beq.n	800aef6 <HAL_LTDC_IRQHandler+0xfe>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d016      	beq.n	800aef6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0201 	bic.w	r2, r2, #1
 800aed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2201      	movs	r2, #1
 800aede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f82f 	bl	800af54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f003 0308 	and.w	r3, r3, #8
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01b      	beq.n	800af38 <HAL_LTDC_IRQHandler+0x140>
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f003 0308 	and.w	r3, r3, #8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d016      	beq.n	800af38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0208 	bic.w	r2, r2, #8
 800af18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2208      	movs	r2, #8
 800af20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f818 	bl	800af68 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800af7c:	b5b0      	push	{r4, r5, r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_LTDC_ConfigLayer+0x1a>
 800af92:	2302      	movs	r3, #2
 800af94:	e02c      	b.n	800aff0 <HAL_LTDC_ConfigLayer+0x74>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2202      	movs	r2, #2
 800afa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2134      	movs	r1, #52	; 0x34
 800afac:	fb01 f303 	mul.w	r3, r1, r3
 800afb0:	4413      	add	r3, r2
 800afb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4614      	mov	r4, r2
 800afba:	461d      	mov	r5, r3
 800afbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f81f 	bl	800b014 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2201      	movs	r2, #1
 800afdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bdb0      	pop	{r4, r5, r7, pc}

0800aff8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b006:	b2db      	uxtb	r3, r3
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b014:	b480      	push	{r7}
 800b016:	b089      	sub	sp, #36	; 0x24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	0c1b      	lsrs	r3, r3, #16
 800b02c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b030:	4413      	add	r3, r2
 800b032:	041b      	lsls	r3, r3, #16
 800b034:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	01db      	lsls	r3, r3, #7
 800b040:	4413      	add	r3, r2
 800b042:	3384      	adds	r3, #132	; 0x84
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	4611      	mov	r1, r2
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	01d2      	lsls	r2, r2, #7
 800b050:	440a      	add	r2, r1
 800b052:	3284      	adds	r2, #132	; 0x84
 800b054:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b058:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b06a:	4413      	add	r3, r2
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4619      	mov	r1, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	01db      	lsls	r3, r3, #7
 800b078:	440b      	add	r3, r1
 800b07a:	3384      	adds	r3, #132	; 0x84
 800b07c:	4619      	mov	r1, r3
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4313      	orrs	r3, r2
 800b082:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b092:	4413      	add	r3, r2
 800b094:	041b      	lsls	r3, r3, #16
 800b096:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	01db      	lsls	r3, r3, #7
 800b0a2:	4413      	add	r3, r2
 800b0a4:	3384      	adds	r3, #132	; 0x84
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	01d2      	lsls	r2, r2, #7
 800b0b2:	440a      	add	r2, r1
 800b0b4:	3284      	adds	r2, #132	; 0x84
 800b0b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b0ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0ca:	4413      	add	r3, r2
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	01db      	lsls	r3, r3, #7
 800b0d8:	440b      	add	r3, r1
 800b0da:	3384      	adds	r3, #132	; 0x84
 800b0dc:	4619      	mov	r1, r3
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	01db      	lsls	r3, r3, #7
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3384      	adds	r3, #132	; 0x84
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	01d2      	lsls	r2, r2, #7
 800b0fe:	440a      	add	r2, r1
 800b100:	3284      	adds	r2, #132	; 0x84
 800b102:	f023 0307 	bic.w	r3, r3, #7
 800b106:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	01db      	lsls	r3, r3, #7
 800b112:	4413      	add	r3, r2
 800b114:	3384      	adds	r3, #132	; 0x84
 800b116:	461a      	mov	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b124:	021b      	lsls	r3, r3, #8
 800b126:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	061b      	lsls	r3, r3, #24
 800b138:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	01db      	lsls	r3, r3, #7
 800b144:	4413      	add	r3, r2
 800b146:	3384      	adds	r3, #132	; 0x84
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	01db      	lsls	r3, r3, #7
 800b154:	4413      	add	r3, r2
 800b156:	3384      	adds	r3, #132	; 0x84
 800b158:	461a      	mov	r2, r3
 800b15a:	2300      	movs	r3, #0
 800b15c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b164:	461a      	mov	r2, r3
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	431a      	orrs	r2, r3
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	431a      	orrs	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4619      	mov	r1, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	01db      	lsls	r3, r3, #7
 800b178:	440b      	add	r3, r1
 800b17a:	3384      	adds	r3, #132	; 0x84
 800b17c:	4619      	mov	r1, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	01db      	lsls	r3, r3, #7
 800b18e:	4413      	add	r3, r2
 800b190:	3384      	adds	r3, #132	; 0x84
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	6812      	ldr	r2, [r2, #0]
 800b198:	4611      	mov	r1, r2
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	01d2      	lsls	r2, r2, #7
 800b19e:	440a      	add	r2, r1
 800b1a0:	3284      	adds	r2, #132	; 0x84
 800b1a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b1a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	01db      	lsls	r3, r3, #7
 800b1b2:	4413      	add	r3, r2
 800b1b4:	3384      	adds	r3, #132	; 0x84
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	01db      	lsls	r3, r3, #7
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3384      	adds	r3, #132	; 0x84
 800b1cc:	69da      	ldr	r2, [r3, #28]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	01db      	lsls	r3, r3, #7
 800b1d8:	440b      	add	r3, r1
 800b1da:	3384      	adds	r3, #132	; 0x84
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4b58      	ldr	r3, [pc, #352]	; (800b340 <LTDC_SetConfig+0x32c>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	69da      	ldr	r2, [r3, #28]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	68f9      	ldr	r1, [r7, #12]
 800b1ee:	6809      	ldr	r1, [r1, #0]
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	01c9      	lsls	r1, r1, #7
 800b1f6:	4401      	add	r1, r0
 800b1f8:	3184      	adds	r1, #132	; 0x84
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	01db      	lsls	r3, r3, #7
 800b208:	4413      	add	r3, r2
 800b20a:	3384      	adds	r3, #132	; 0x84
 800b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	01db      	lsls	r3, r3, #7
 800b218:	4413      	add	r3, r2
 800b21a:	3384      	adds	r3, #132	; 0x84
 800b21c:	461a      	mov	r2, r3
 800b21e:	2300      	movs	r3, #0
 800b220:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	01db      	lsls	r3, r3, #7
 800b22c:	4413      	add	r3, r2
 800b22e:	3384      	adds	r3, #132	; 0x84
 800b230:	461a      	mov	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d102      	bne.n	800b246 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b240:	2304      	movs	r3, #4
 800b242:	61fb      	str	r3, [r7, #28]
 800b244:	e01b      	b.n	800b27e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d102      	bne.n	800b254 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b24e:	2303      	movs	r3, #3
 800b250:	61fb      	str	r3, [r7, #28]
 800b252:	e014      	b.n	800b27e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d00b      	beq.n	800b274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b260:	2b02      	cmp	r3, #2
 800b262:	d007      	beq.n	800b274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d003      	beq.n	800b274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b270:	2b07      	cmp	r3, #7
 800b272:	d102      	bne.n	800b27a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b274:	2302      	movs	r3, #2
 800b276:	61fb      	str	r3, [r7, #28]
 800b278:	e001      	b.n	800b27e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b27a:	2301      	movs	r3, #1
 800b27c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	01db      	lsls	r3, r3, #7
 800b288:	4413      	add	r3, r2
 800b28a:	3384      	adds	r3, #132	; 0x84
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	4611      	mov	r1, r2
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	01d2      	lsls	r2, r2, #7
 800b298:	440a      	add	r2, r1
 800b29a:	3284      	adds	r2, #132	; 0x84
 800b29c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b2a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	fb02 f303 	mul.w	r3, r2, r3
 800b2ac:	041a      	lsls	r2, r3, #16
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6859      	ldr	r1, [r3, #4]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	1acb      	subs	r3, r1, r3
 800b2b8:	69f9      	ldr	r1, [r7, #28]
 800b2ba:	fb01 f303 	mul.w	r3, r1, r3
 800b2be:	3303      	adds	r3, #3
 800b2c0:	68f9      	ldr	r1, [r7, #12]
 800b2c2:	6809      	ldr	r1, [r1, #0]
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	01c9      	lsls	r1, r1, #7
 800b2ca:	4401      	add	r1, r0
 800b2cc:	3184      	adds	r1, #132	; 0x84
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	01db      	lsls	r3, r3, #7
 800b2dc:	4413      	add	r3, r2
 800b2de:	3384      	adds	r3, #132	; 0x84
 800b2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	01db      	lsls	r3, r3, #7
 800b2ec:	440b      	add	r3, r1
 800b2ee:	3384      	adds	r3, #132	; 0x84
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4b14      	ldr	r3, [pc, #80]	; (800b344 <LTDC_SetConfig+0x330>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	01db      	lsls	r3, r3, #7
 800b302:	4413      	add	r3, r2
 800b304:	3384      	adds	r3, #132	; 0x84
 800b306:	461a      	mov	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	01db      	lsls	r3, r3, #7
 800b318:	4413      	add	r3, r2
 800b31a:	3384      	adds	r3, #132	; 0x84
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	4611      	mov	r1, r2
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	01d2      	lsls	r2, r2, #7
 800b328:	440a      	add	r2, r1
 800b32a:	3284      	adds	r2, #132	; 0x84
 800b32c:	f043 0301 	orr.w	r3, r3, #1
 800b330:	6013      	str	r3, [r2, #0]
}
 800b332:	bf00      	nop
 800b334:	3724      	adds	r7, #36	; 0x24
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	fffff8f8 	.word	0xfffff8f8
 800b344:	fffff800 	.word	0xfffff800

0800b348 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b34c:	4b05      	ldr	r3, [pc, #20]	; (800b364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a04      	ldr	r2, [pc, #16]	; (800b364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b356:	6013      	str	r3, [r2, #0]
}
 800b358:	bf00      	nop
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	40007000 	.word	0x40007000

0800b368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b372:	4b23      	ldr	r3, [pc, #140]	; (800b400 <HAL_PWREx_EnableOverDrive+0x98>)
 800b374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b376:	4a22      	ldr	r2, [pc, #136]	; (800b400 <HAL_PWREx_EnableOverDrive+0x98>)
 800b378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b37c:	6413      	str	r3, [r2, #64]	; 0x40
 800b37e:	4b20      	ldr	r3, [pc, #128]	; (800b400 <HAL_PWREx_EnableOverDrive+0x98>)
 800b380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b38a:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b394:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b396:	f7fb fa51 	bl	800683c <HAL_GetTick>
 800b39a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b39c:	e009      	b.n	800b3b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b39e:	f7fb fa4d 	bl	800683c <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3ac:	d901      	bls.n	800b3b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e022      	b.n	800b3f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b3b2:	4b14      	ldr	r3, [pc, #80]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d1ee      	bne.n	800b39e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a0f      	ldr	r2, [pc, #60]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3cc:	f7fb fa36 	bl	800683c <HAL_GetTick>
 800b3d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b3d2:	e009      	b.n	800b3e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b3d4:	f7fb fa32 	bl	800683c <HAL_GetTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3e2:	d901      	bls.n	800b3e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e007      	b.n	800b3f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f4:	d1ee      	bne.n	800b3d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	40023800 	.word	0x40023800
 800b404:	40007000 	.word	0x40007000

0800b408 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b410:	f7fb fa14 	bl	800683c <HAL_GetTick>
 800b414:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d101      	bne.n	800b420 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e067      	b.n	800b4f0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10b      	bne.n	800b444 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7f7 fcd9 	bl	8002dec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b43a:	f241 3188 	movw	r1, #5000	; 0x1388
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f85e 	bl	800b500 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	3b01      	subs	r3, #1
 800b454:	021a      	lsls	r2, r3, #8
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	2120      	movs	r1, #32
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f856 	bl	800b51c <QSPI_WaitFlagStateUntilTimeout>
 800b470:	4603      	mov	r3, r0
 800b472:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d135      	bne.n	800b4e6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <HAL_QSPI_Init+0xf0>)
 800b482:	4013      	ands	r3, r2
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	6852      	ldr	r2, [r2, #4]
 800b488:	0611      	lsls	r1, r2, #24
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68d2      	ldr	r2, [r2, #12]
 800b48e:	4311      	orrs	r1, r2
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	69d2      	ldr	r2, [r2, #28]
 800b494:	4311      	orrs	r1, r2
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6a12      	ldr	r2, [r2, #32]
 800b49a:	4311      	orrs	r1, r2
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	430b      	orrs	r3, r1
 800b4a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	4b14      	ldr	r3, [pc, #80]	; (800b4fc <HAL_QSPI_Init+0xf4>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6912      	ldr	r2, [r2, #16]
 800b4b2:	0411      	lsls	r1, r2, #16
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	6952      	ldr	r2, [r2, #20]
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6992      	ldr	r2, [r2, #24]
 800b4be:	4311      	orrs	r1, r2
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6812      	ldr	r2, [r2, #0]
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f042 0201 	orr.w	r2, r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b4ee:	7afb      	ldrb	r3, [r7, #11]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	00ffff2f 	.word	0x00ffff2f
 800b4fc:	ffe0f8fe 	.word	0xffe0f8fe

0800b500 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	4613      	mov	r3, r2
 800b52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b52c:	e01a      	b.n	800b564 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b534:	d016      	beq.n	800b564 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b536:	f7fb f981 	bl	800683c <HAL_GetTick>
 800b53a:	4602      	mov	r2, r0
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	429a      	cmp	r2, r3
 800b544:	d302      	bcc.n	800b54c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2204      	movs	r2, #4
 800b550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b558:	f043 0201 	orr.w	r2, r3, #1
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e00e      	b.n	800b582 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2301      	movne	r3, #1
 800b574:	2300      	moveq	r3, #0
 800b576:	b2db      	uxtb	r3, r3
 800b578:	461a      	mov	r2, r3
 800b57a:	79fb      	ldrb	r3, [r7, #7]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d1d6      	bne.n	800b52e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b594:	2300      	movs	r3, #0
 800b596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d101      	bne.n	800b5a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e291      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 8087 	beq.w	800b6be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5b0:	4b96      	ldr	r3, [pc, #600]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f003 030c 	and.w	r3, r3, #12
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d00c      	beq.n	800b5d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5bc:	4b93      	ldr	r3, [pc, #588]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f003 030c 	and.w	r3, r3, #12
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d112      	bne.n	800b5ee <HAL_RCC_OscConfig+0x62>
 800b5c8:	4b90      	ldr	r3, [pc, #576]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5d4:	d10b      	bne.n	800b5ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5d6:	4b8d      	ldr	r3, [pc, #564]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d06c      	beq.n	800b6bc <HAL_RCC_OscConfig+0x130>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d168      	bne.n	800b6bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e26b      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f6:	d106      	bne.n	800b606 <HAL_RCC_OscConfig+0x7a>
 800b5f8:	4b84      	ldr	r3, [pc, #528]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a83      	ldr	r2, [pc, #524]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b5fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	e02e      	b.n	800b664 <HAL_RCC_OscConfig+0xd8>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10c      	bne.n	800b628 <HAL_RCC_OscConfig+0x9c>
 800b60e:	4b7f      	ldr	r3, [pc, #508]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a7e      	ldr	r2, [pc, #504]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	4b7c      	ldr	r3, [pc, #496]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a7b      	ldr	r2, [pc, #492]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	e01d      	b.n	800b664 <HAL_RCC_OscConfig+0xd8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b630:	d10c      	bne.n	800b64c <HAL_RCC_OscConfig+0xc0>
 800b632:	4b76      	ldr	r3, [pc, #472]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a75      	ldr	r2, [pc, #468]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	4b73      	ldr	r3, [pc, #460]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a72      	ldr	r2, [pc, #456]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	e00b      	b.n	800b664 <HAL_RCC_OscConfig+0xd8>
 800b64c:	4b6f      	ldr	r3, [pc, #444]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a6e      	ldr	r2, [pc, #440]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	4b6c      	ldr	r3, [pc, #432]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a6b      	ldr	r2, [pc, #428]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b65e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d013      	beq.n	800b694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b66c:	f7fb f8e6 	bl	800683c <HAL_GetTick>
 800b670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b672:	e008      	b.n	800b686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b674:	f7fb f8e2 	bl	800683c <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	2b64      	cmp	r3, #100	; 0x64
 800b680:	d901      	bls.n	800b686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e21f      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b686:	4b61      	ldr	r3, [pc, #388]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f0      	beq.n	800b674 <HAL_RCC_OscConfig+0xe8>
 800b692:	e014      	b.n	800b6be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b694:	f7fb f8d2 	bl	800683c <HAL_GetTick>
 800b698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b69a:	e008      	b.n	800b6ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b69c:	f7fb f8ce 	bl	800683c <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b64      	cmp	r3, #100	; 0x64
 800b6a8:	d901      	bls.n	800b6ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e20b      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6ae:	4b57      	ldr	r3, [pc, #348]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f0      	bne.n	800b69c <HAL_RCC_OscConfig+0x110>
 800b6ba:	e000      	b.n	800b6be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d069      	beq.n	800b79e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b6ca:	4b50      	ldr	r3, [pc, #320]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f003 030c 	and.w	r3, r3, #12
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6d6:	4b4d      	ldr	r3, [pc, #308]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f003 030c 	and.w	r3, r3, #12
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	d11c      	bne.n	800b71c <HAL_RCC_OscConfig+0x190>
 800b6e2:	4b4a      	ldr	r3, [pc, #296]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d116      	bne.n	800b71c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6ee:	4b47      	ldr	r3, [pc, #284]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d005      	beq.n	800b706 <HAL_RCC_OscConfig+0x17a>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d001      	beq.n	800b706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e1df      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b706:	4b41      	ldr	r3, [pc, #260]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	493d      	ldr	r1, [pc, #244]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b716:	4313      	orrs	r3, r2
 800b718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b71a:	e040      	b.n	800b79e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d023      	beq.n	800b76c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b724:	4b39      	ldr	r3, [pc, #228]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a38      	ldr	r2, [pc, #224]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b72a:	f043 0301 	orr.w	r3, r3, #1
 800b72e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b730:	f7fb f884 	bl	800683c <HAL_GetTick>
 800b734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b736:	e008      	b.n	800b74a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b738:	f7fb f880 	bl	800683c <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b02      	cmp	r3, #2
 800b744:	d901      	bls.n	800b74a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e1bd      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b74a:	4b30      	ldr	r3, [pc, #192]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0f0      	beq.n	800b738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b756:	4b2d      	ldr	r3, [pc, #180]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	4929      	ldr	r1, [pc, #164]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b766:	4313      	orrs	r3, r2
 800b768:	600b      	str	r3, [r1, #0]
 800b76a:	e018      	b.n	800b79e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b76c:	4b27      	ldr	r3, [pc, #156]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a26      	ldr	r2, [pc, #152]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b772:	f023 0301 	bic.w	r3, r3, #1
 800b776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b778:	f7fb f860 	bl	800683c <HAL_GetTick>
 800b77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b77e:	e008      	b.n	800b792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b780:	f7fb f85c 	bl	800683c <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d901      	bls.n	800b792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e199      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b792:	4b1e      	ldr	r3, [pc, #120]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1f0      	bne.n	800b780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0308 	and.w	r3, r3, #8
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d038      	beq.n	800b81c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d019      	beq.n	800b7e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7b2:	4b16      	ldr	r3, [pc, #88]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7b6:	4a15      	ldr	r2, [pc, #84]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b7b8:	f043 0301 	orr.w	r3, r3, #1
 800b7bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7be:	f7fb f83d 	bl	800683c <HAL_GetTick>
 800b7c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7c6:	f7fb f839 	bl	800683c <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e176      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0f0      	beq.n	800b7c6 <HAL_RCC_OscConfig+0x23a>
 800b7e4:	e01a      	b.n	800b81c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ea:	4a08      	ldr	r2, [pc, #32]	; (800b80c <HAL_RCC_OscConfig+0x280>)
 800b7ec:	f023 0301 	bic.w	r3, r3, #1
 800b7f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7f2:	f7fb f823 	bl	800683c <HAL_GetTick>
 800b7f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7f8:	e00a      	b.n	800b810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7fa:	f7fb f81f 	bl	800683c <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d903      	bls.n	800b810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e15c      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
 800b80c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b810:	4b91      	ldr	r3, [pc, #580]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b814:	f003 0302 	and.w	r3, r3, #2
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1ee      	bne.n	800b7fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 80a4 	beq.w	800b972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b82a:	4b8b      	ldr	r3, [pc, #556]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10d      	bne.n	800b852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b836:	4b88      	ldr	r3, [pc, #544]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83a:	4a87      	ldr	r2, [pc, #540]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b840:	6413      	str	r3, [r2, #64]	; 0x40
 800b842:	4b85      	ldr	r3, [pc, #532]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b84a:	60bb      	str	r3, [r7, #8]
 800b84c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b84e:	2301      	movs	r3, #1
 800b850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b852:	4b82      	ldr	r3, [pc, #520]	; (800ba5c <HAL_RCC_OscConfig+0x4d0>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d118      	bne.n	800b890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b85e:	4b7f      	ldr	r3, [pc, #508]	; (800ba5c <HAL_RCC_OscConfig+0x4d0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a7e      	ldr	r2, [pc, #504]	; (800ba5c <HAL_RCC_OscConfig+0x4d0>)
 800b864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b86a:	f7fa ffe7 	bl	800683c <HAL_GetTick>
 800b86e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b870:	e008      	b.n	800b884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b872:	f7fa ffe3 	bl	800683c <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b64      	cmp	r3, #100	; 0x64
 800b87e:	d901      	bls.n	800b884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e120      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b884:	4b75      	ldr	r3, [pc, #468]	; (800ba5c <HAL_RCC_OscConfig+0x4d0>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f0      	beq.n	800b872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d106      	bne.n	800b8a6 <HAL_RCC_OscConfig+0x31a>
 800b898:	4b6f      	ldr	r3, [pc, #444]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b89a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89c:	4a6e      	ldr	r2, [pc, #440]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b89e:	f043 0301 	orr.w	r3, r3, #1
 800b8a2:	6713      	str	r3, [r2, #112]	; 0x70
 800b8a4:	e02d      	b.n	800b902 <HAL_RCC_OscConfig+0x376>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10c      	bne.n	800b8c8 <HAL_RCC_OscConfig+0x33c>
 800b8ae:	4b6a      	ldr	r3, [pc, #424]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b2:	4a69      	ldr	r2, [pc, #420]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8b4:	f023 0301 	bic.w	r3, r3, #1
 800b8b8:	6713      	str	r3, [r2, #112]	; 0x70
 800b8ba:	4b67      	ldr	r3, [pc, #412]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8be:	4a66      	ldr	r2, [pc, #408]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8c0:	f023 0304 	bic.w	r3, r3, #4
 800b8c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b8c6:	e01c      	b.n	800b902 <HAL_RCC_OscConfig+0x376>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	2b05      	cmp	r3, #5
 800b8ce:	d10c      	bne.n	800b8ea <HAL_RCC_OscConfig+0x35e>
 800b8d0:	4b61      	ldr	r3, [pc, #388]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d4:	4a60      	ldr	r2, [pc, #384]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8d6:	f043 0304 	orr.w	r3, r3, #4
 800b8da:	6713      	str	r3, [r2, #112]	; 0x70
 800b8dc:	4b5e      	ldr	r3, [pc, #376]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e0:	4a5d      	ldr	r2, [pc, #372]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8e2:	f043 0301 	orr.w	r3, r3, #1
 800b8e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b8e8:	e00b      	b.n	800b902 <HAL_RCC_OscConfig+0x376>
 800b8ea:	4b5b      	ldr	r3, [pc, #364]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ee:	4a5a      	ldr	r2, [pc, #360]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b8f6:	4b58      	ldr	r3, [pc, #352]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fa:	4a57      	ldr	r2, [pc, #348]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b8fc:	f023 0304 	bic.w	r3, r3, #4
 800b900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d015      	beq.n	800b936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b90a:	f7fa ff97 	bl	800683c <HAL_GetTick>
 800b90e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b910:	e00a      	b.n	800b928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b912:	f7fa ff93 	bl	800683c <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b920:	4293      	cmp	r3, r2
 800b922:	d901      	bls.n	800b928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e0ce      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b928:	4b4b      	ldr	r3, [pc, #300]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0ee      	beq.n	800b912 <HAL_RCC_OscConfig+0x386>
 800b934:	e014      	b.n	800b960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b936:	f7fa ff81 	bl	800683c <HAL_GetTick>
 800b93a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b93c:	e00a      	b.n	800b954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b93e:	f7fa ff7d 	bl	800683c <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d901      	bls.n	800b954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	e0b8      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b954:	4b40      	ldr	r3, [pc, #256]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b958:	f003 0302 	and.w	r3, r3, #2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1ee      	bne.n	800b93e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b960:	7dfb      	ldrb	r3, [r7, #23]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d105      	bne.n	800b972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b966:	4b3c      	ldr	r3, [pc, #240]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	4a3b      	ldr	r2, [pc, #236]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b96c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 80a4 	beq.w	800bac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b97c:	4b36      	ldr	r3, [pc, #216]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f003 030c 	and.w	r3, r3, #12
 800b984:	2b08      	cmp	r3, #8
 800b986:	d06b      	beq.n	800ba60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d149      	bne.n	800ba24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b990:	4b31      	ldr	r3, [pc, #196]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a30      	ldr	r2, [pc, #192]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b99a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b99c:	f7fa ff4e 	bl	800683c <HAL_GetTick>
 800b9a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9a4:	f7fa ff4a 	bl	800683c <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d901      	bls.n	800b9b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e087      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9b6:	4b28      	ldr	r3, [pc, #160]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f0      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	69da      	ldr	r2, [r3, #28]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	019b      	lsls	r3, r3, #6
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d8:	085b      	lsrs	r3, r3, #1
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	041b      	lsls	r3, r3, #16
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	061b      	lsls	r3, r3, #24
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b9ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9f0:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800b9f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9fc:	f7fa ff1e 	bl	800683c <HAL_GetTick>
 800ba00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba02:	e008      	b.n	800ba16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba04:	f7fa ff1a 	bl	800683c <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d901      	bls.n	800ba16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e057      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba16:	4b10      	ldr	r3, [pc, #64]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0f0      	beq.n	800ba04 <HAL_RCC_OscConfig+0x478>
 800ba22:	e04f      	b.n	800bac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a0b      	ldr	r2, [pc, #44]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800ba2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba30:	f7fa ff04 	bl	800683c <HAL_GetTick>
 800ba34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba36:	e008      	b.n	800ba4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba38:	f7fa ff00 	bl	800683c <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d901      	bls.n	800ba4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e03d      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba4a:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <HAL_RCC_OscConfig+0x4cc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1f0      	bne.n	800ba38 <HAL_RCC_OscConfig+0x4ac>
 800ba56:	e035      	b.n	800bac4 <HAL_RCC_OscConfig+0x538>
 800ba58:	40023800 	.word	0x40023800
 800ba5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ba60:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <HAL_RCC_OscConfig+0x544>)
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d028      	beq.n	800bac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d121      	bne.n	800bac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d11a      	bne.n	800bac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ba90:	4013      	ands	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ba96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d111      	bne.n	800bac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa6:	085b      	lsrs	r3, r3, #1
 800baa8:	3b01      	subs	r3, #1
 800baaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800baac:	429a      	cmp	r2, r3
 800baae:	d107      	bne.n	800bac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800babc:	429a      	cmp	r2, r3
 800babe:	d001      	beq.n	800bac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e000      	b.n	800bac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	40023800 	.word	0x40023800

0800bad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	e0d0      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800baec:	4b6a      	ldr	r3, [pc, #424]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 030f 	and.w	r3, r3, #15
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d910      	bls.n	800bb1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bafa:	4b67      	ldr	r3, [pc, #412]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f023 020f 	bic.w	r2, r3, #15
 800bb02:	4965      	ldr	r1, [pc, #404]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb0a:	4b63      	ldr	r3, [pc, #396]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d001      	beq.n	800bb1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e0b8      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d020      	beq.n	800bb6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb34:	4b59      	ldr	r3, [pc, #356]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	4a58      	ldr	r2, [pc, #352]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bb3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d005      	beq.n	800bb58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb4c:	4b53      	ldr	r3, [pc, #332]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	4a52      	ldr	r2, [pc, #328]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bb56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb58:	4b50      	ldr	r3, [pc, #320]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	494d      	ldr	r1, [pc, #308]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb66:	4313      	orrs	r3, r2
 800bb68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d040      	beq.n	800bbf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d107      	bne.n	800bb8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb7e:	4b47      	ldr	r3, [pc, #284]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d115      	bne.n	800bbb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e07f      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d107      	bne.n	800bba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb96:	4b41      	ldr	r3, [pc, #260]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d109      	bne.n	800bbb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e073      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bba6:	4b3d      	ldr	r3, [pc, #244]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e06b      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bbb6:	4b39      	ldr	r3, [pc, #228]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f023 0203 	bic.w	r2, r3, #3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	4936      	ldr	r1, [pc, #216]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbc8:	f7fa fe38 	bl	800683c <HAL_GetTick>
 800bbcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbce:	e00a      	b.n	800bbe6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbd0:	f7fa fe34 	bl	800683c <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d901      	bls.n	800bbe6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e053      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbe6:	4b2d      	ldr	r3, [pc, #180]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f003 020c 	and.w	r2, r3, #12
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d1eb      	bne.n	800bbd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbf8:	4b27      	ldr	r3, [pc, #156]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d210      	bcs.n	800bc28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc06:	4b24      	ldr	r3, [pc, #144]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f023 020f 	bic.w	r2, r3, #15
 800bc0e:	4922      	ldr	r1, [pc, #136]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc16:	4b20      	ldr	r3, [pc, #128]	; (800bc98 <HAL_RCC_ClockConfig+0x1c4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d001      	beq.n	800bc28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e032      	b.n	800bc8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc34:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	4916      	ldr	r1, [pc, #88]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0308 	and.w	r3, r3, #8
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc52:	4b12      	ldr	r3, [pc, #72]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	490e      	ldr	r1, [pc, #56]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bc62:	4313      	orrs	r3, r2
 800bc64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bc66:	f000 f821 	bl	800bcac <HAL_RCC_GetSysClockFreq>
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <HAL_RCC_ClockConfig+0x1c8>)
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	091b      	lsrs	r3, r3, #4
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	4a0a      	ldr	r2, [pc, #40]	; (800bca0 <HAL_RCC_ClockConfig+0x1cc>)
 800bc78:	5cd3      	ldrb	r3, [r2, r3]
 800bc7a:	fa21 f303 	lsr.w	r3, r1, r3
 800bc7e:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <HAL_RCC_ClockConfig+0x1d0>)
 800bc80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bc82:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <HAL_RCC_ClockConfig+0x1d4>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7f7 fcd6 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	40023c00 	.word	0x40023c00
 800bc9c:	40023800 	.word	0x40023800
 800bca0:	08017e44 	.word	0x08017e44
 800bca4:	20000000 	.word	0x20000000
 800bca8:	20000054 	.word	0x20000054

0800bcac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bcc2:	4b50      	ldr	r3, [pc, #320]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f003 030c 	and.w	r3, r3, #12
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	d007      	beq.n	800bcde <HAL_RCC_GetSysClockFreq+0x32>
 800bcce:	2b08      	cmp	r3, #8
 800bcd0:	d008      	beq.n	800bce4 <HAL_RCC_GetSysClockFreq+0x38>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 808d 	bne.w	800bdf2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bcd8:	4b4b      	ldr	r3, [pc, #300]	; (800be08 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bcda:	60bb      	str	r3, [r7, #8]
      break;
 800bcdc:	e08c      	b.n	800bdf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bcde:	4b4b      	ldr	r3, [pc, #300]	; (800be0c <HAL_RCC_GetSysClockFreq+0x160>)
 800bce0:	60bb      	str	r3, [r7, #8]
      break;
 800bce2:	e089      	b.n	800bdf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bce4:	4b47      	ldr	r3, [pc, #284]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bcee:	4b45      	ldr	r3, [pc, #276]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d023      	beq.n	800bd42 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcfa:	4b42      	ldr	r3, [pc, #264]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	099b      	lsrs	r3, r3, #6
 800bd00:	f04f 0400 	mov.w	r4, #0
 800bd04:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bd08:	f04f 0200 	mov.w	r2, #0
 800bd0c:	ea03 0501 	and.w	r5, r3, r1
 800bd10:	ea04 0602 	and.w	r6, r4, r2
 800bd14:	4a3d      	ldr	r2, [pc, #244]	; (800be0c <HAL_RCC_GetSysClockFreq+0x160>)
 800bd16:	fb02 f106 	mul.w	r1, r2, r6
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	fb02 f205 	mul.w	r2, r2, r5
 800bd20:	440a      	add	r2, r1
 800bd22:	493a      	ldr	r1, [pc, #232]	; (800be0c <HAL_RCC_GetSysClockFreq+0x160>)
 800bd24:	fba5 0101 	umull	r0, r1, r5, r1
 800bd28:	1853      	adds	r3, r2, r1
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f04f 0400 	mov.w	r4, #0
 800bd32:	461a      	mov	r2, r3
 800bd34:	4623      	mov	r3, r4
 800bd36:	f7f4 fcc7 	bl	80006c8 <__aeabi_uldivmod>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	e049      	b.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd42:	4b30      	ldr	r3, [pc, #192]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	099b      	lsrs	r3, r3, #6
 800bd48:	f04f 0400 	mov.w	r4, #0
 800bd4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bd50:	f04f 0200 	mov.w	r2, #0
 800bd54:	ea03 0501 	and.w	r5, r3, r1
 800bd58:	ea04 0602 	and.w	r6, r4, r2
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4632      	mov	r2, r6
 800bd60:	f04f 0300 	mov.w	r3, #0
 800bd64:	f04f 0400 	mov.w	r4, #0
 800bd68:	0154      	lsls	r4, r2, #5
 800bd6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bd6e:	014b      	lsls	r3, r1, #5
 800bd70:	4619      	mov	r1, r3
 800bd72:	4622      	mov	r2, r4
 800bd74:	1b49      	subs	r1, r1, r5
 800bd76:	eb62 0206 	sbc.w	r2, r2, r6
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	f04f 0400 	mov.w	r4, #0
 800bd82:	0194      	lsls	r4, r2, #6
 800bd84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bd88:	018b      	lsls	r3, r1, #6
 800bd8a:	1a5b      	subs	r3, r3, r1
 800bd8c:	eb64 0402 	sbc.w	r4, r4, r2
 800bd90:	f04f 0100 	mov.w	r1, #0
 800bd94:	f04f 0200 	mov.w	r2, #0
 800bd98:	00e2      	lsls	r2, r4, #3
 800bd9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bd9e:	00d9      	lsls	r1, r3, #3
 800bda0:	460b      	mov	r3, r1
 800bda2:	4614      	mov	r4, r2
 800bda4:	195b      	adds	r3, r3, r5
 800bda6:	eb44 0406 	adc.w	r4, r4, r6
 800bdaa:	f04f 0100 	mov.w	r1, #0
 800bdae:	f04f 0200 	mov.w	r2, #0
 800bdb2:	02a2      	lsls	r2, r4, #10
 800bdb4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bdb8:	0299      	lsls	r1, r3, #10
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f04f 0400 	mov.w	r4, #0
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4623      	mov	r3, r4
 800bdcc:	f7f4 fc7c 	bl	80006c8 <__aeabi_uldivmod>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <HAL_RCC_GetSysClockFreq+0x158>)
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	0c1b      	lsrs	r3, r3, #16
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	3301      	adds	r3, #1
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdee:	60bb      	str	r3, [r7, #8]
      break;
 800bdf0:	e002      	b.n	800bdf8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bdf4:	60bb      	str	r3, [r7, #8]
      break;
 800bdf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be02:	bf00      	nop
 800be04:	40023800 	.word	0x40023800
 800be08:	00f42400 	.word	0x00f42400
 800be0c:	017d7840 	.word	0x017d7840

0800be10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be14:	4b03      	ldr	r3, [pc, #12]	; (800be24 <HAL_RCC_GetHCLKFreq+0x14>)
 800be16:	681b      	ldr	r3, [r3, #0]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000000 	.word	0x20000000

0800be28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800be2c:	f7ff fff0 	bl	800be10 <HAL_RCC_GetHCLKFreq>
 800be30:	4601      	mov	r1, r0
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	0a9b      	lsrs	r3, r3, #10
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	4a03      	ldr	r2, [pc, #12]	; (800be4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800be3e:	5cd3      	ldrb	r3, [r2, r3]
 800be40:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be44:	4618      	mov	r0, r3
 800be46:	bd80      	pop	{r7, pc}
 800be48:	40023800 	.word	0x40023800
 800be4c:	08017e54 	.word	0x08017e54

0800be50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be54:	f7ff ffdc 	bl	800be10 <HAL_RCC_GetHCLKFreq>
 800be58:	4601      	mov	r1, r0
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	0b5b      	lsrs	r3, r3, #13
 800be60:	f003 0307 	and.w	r3, r3, #7
 800be64:	4a03      	ldr	r2, [pc, #12]	; (800be74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be66:	5cd3      	ldrb	r3, [r2, r3]
 800be68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	40023800 	.word	0x40023800
 800be74:	08017e54 	.word	0x08017e54

0800be78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	220f      	movs	r2, #15
 800be86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800be88:	4b12      	ldr	r3, [pc, #72]	; (800bed4 <HAL_RCC_GetClockConfig+0x5c>)
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f003 0203 	and.w	r2, r3, #3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800be94:	4b0f      	ldr	r3, [pc, #60]	; (800bed4 <HAL_RCC_GetClockConfig+0x5c>)
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bea0:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <HAL_RCC_GetClockConfig+0x5c>)
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800beac:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <HAL_RCC_GetClockConfig+0x5c>)
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	08db      	lsrs	r3, r3, #3
 800beb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800beba:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <HAL_RCC_GetClockConfig+0x60>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 020f 	and.w	r2, r3, #15
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	601a      	str	r2, [r3, #0]
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	40023800 	.word	0x40023800
 800bed8:	40023c00 	.word	0x40023c00

0800bedc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b088      	sub	sp, #32
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d012      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bf04:	4b69      	ldr	r3, [pc, #420]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	4a68      	ldr	r2, [pc, #416]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bf0e:	6093      	str	r3, [r2, #8]
 800bf10:	4b66      	ldr	r3, [pc, #408]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf12:	689a      	ldr	r2, [r3, #8]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf18:	4964      	ldr	r1, [pc, #400]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bf26:	2301      	movs	r3, #1
 800bf28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d017      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf36:	4b5d      	ldr	r3, [pc, #372]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf44:	4959      	ldr	r1, [pc, #356]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf46:	4313      	orrs	r3, r2
 800bf48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf54:	d101      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bf62:	2301      	movs	r3, #1
 800bf64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d017      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bf72:	4b4e      	ldr	r3, [pc, #312]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf80:	494a      	ldr	r1, [pc, #296]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf90:	d101      	bne.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bf92:	2301      	movs	r3, #1
 800bf94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 808b 	beq.w	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bfc0:	4b3a      	ldr	r3, [pc, #232]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc4:	4a39      	ldr	r2, [pc, #228]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfca:	6413      	str	r3, [r2, #64]	; 0x40
 800bfcc:	4b37      	ldr	r3, [pc, #220]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfd4:	60bb      	str	r3, [r7, #8]
 800bfd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bfd8:	4b35      	ldr	r3, [pc, #212]	; (800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a34      	ldr	r2, [pc, #208]	; (800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfe4:	f7fa fc2a 	bl	800683c <HAL_GetTick>
 800bfe8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfea:	e008      	b.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfec:	f7fa fc26 	bl	800683c <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b64      	cmp	r3, #100	; 0x64
 800bff8:	d901      	bls.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e355      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bffe:	4b2c      	ldr	r3, [pc, #176]	; (800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0f0      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c00a:	4b28      	ldr	r3, [pc, #160]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c012:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d035      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	429a      	cmp	r2, r3
 800c026:	d02e      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c028:	4b20      	ldr	r3, [pc, #128]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c030:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c032:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c036:	4a1d      	ldr	r2, [pc, #116]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c03c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c03e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c042:	4a1a      	ldr	r2, [pc, #104]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c048:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c04a:	4a18      	ldr	r2, [pc, #96]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c050:	4b16      	ldr	r3, [pc, #88]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d114      	bne.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c05c:	f7fa fbee 	bl	800683c <HAL_GetTick>
 800c060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c062:	e00a      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c064:	f7fa fbea 	bl	800683c <HAL_GetTick>
 800c068:	4602      	mov	r2, r0
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c072:	4293      	cmp	r3, r2
 800c074:	d901      	bls.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e317      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c07a:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0ee      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c092:	d111      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c0a0:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c0a2:	400b      	ands	r3, r1
 800c0a4:	4901      	ldr	r1, [pc, #4]	; (800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	608b      	str	r3, [r1, #8]
 800c0aa:	e00b      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c0ac:	40023800 	.word	0x40023800
 800c0b0:	40007000 	.word	0x40007000
 800c0b4:	0ffffcff 	.word	0x0ffffcff
 800c0b8:	4bb0      	ldr	r3, [pc, #704]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	4aaf      	ldr	r2, [pc, #700]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c0c2:	6093      	str	r3, [r2, #8]
 800c0c4:	4bad      	ldr	r3, [pc, #692]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0d0:	49aa      	ldr	r1, [pc, #680]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0310 	and.w	r3, r3, #16
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d010      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0e2:	4ba6      	ldr	r3, [pc, #664]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0e8:	4aa4      	ldr	r2, [pc, #656]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c0f2:	4ba2      	ldr	r3, [pc, #648]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fc:	499f      	ldr	r1, [pc, #636]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00a      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c110:	4b9a      	ldr	r3, [pc, #616]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c116:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c11e:	4997      	ldr	r1, [pc, #604]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c120:	4313      	orrs	r3, r2
 800c122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c132:	4b92      	ldr	r3, [pc, #584]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c140:	498e      	ldr	r1, [pc, #568]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c142:	4313      	orrs	r3, r2
 800c144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00a      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c154:	4b89      	ldr	r3, [pc, #548]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c15a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c162:	4986      	ldr	r1, [pc, #536]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c164:	4313      	orrs	r3, r2
 800c166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c176:	4b81      	ldr	r3, [pc, #516]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c184:	497d      	ldr	r1, [pc, #500]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c186:	4313      	orrs	r3, r2
 800c188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00a      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c198:	4b78      	ldr	r3, [pc, #480]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c19e:	f023 0203 	bic.w	r2, r3, #3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a6:	4975      	ldr	r1, [pc, #468]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c1ba:	4b70      	ldr	r3, [pc, #448]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c0:	f023 020c 	bic.w	r2, r3, #12
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1c8:	496c      	ldr	r1, [pc, #432]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c1dc:	4b67      	ldr	r3, [pc, #412]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ea:	4964      	ldr	r1, [pc, #400]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c1fe:	4b5f      	ldr	r3, [pc, #380]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c204:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20c:	495b      	ldr	r1, [pc, #364]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00a      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c220:	4b56      	ldr	r3, [pc, #344]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22e:	4953      	ldr	r1, [pc, #332]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c230:	4313      	orrs	r3, r2
 800c232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c242:	4b4e      	ldr	r3, [pc, #312]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c248:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c250:	494a      	ldr	r1, [pc, #296]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c252:	4313      	orrs	r3, r2
 800c254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c264:	4b45      	ldr	r3, [pc, #276]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c272:	4942      	ldr	r1, [pc, #264]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c274:	4313      	orrs	r3, r2
 800c276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c286:	4b3d      	ldr	r3, [pc, #244]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c294:	4939      	ldr	r1, [pc, #228]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c296:	4313      	orrs	r3, r2
 800c298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00a      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c2a8:	4b34      	ldr	r3, [pc, #208]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b6:	4931      	ldr	r1, [pc, #196]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d011      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c2ca:	4b2c      	ldr	r3, [pc, #176]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d8:	4928      	ldr	r1, [pc, #160]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e8:	d101      	bne.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0308 	and.w	r3, r3, #8
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c310:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c318:	4918      	ldr	r1, [pc, #96]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c32c:	4b13      	ldr	r3, [pc, #76]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c332:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c33c:	490f      	ldr	r1, [pc, #60]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2b01      	cmp	r3, #1
 800c348:	d005      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c352:	f040 80d8 	bne.w	800c506 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c356:	4b09      	ldr	r3, [pc, #36]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a08      	ldr	r2, [pc, #32]	; (800c37c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c35c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c362:	f7fa fa6b 	bl	800683c <HAL_GetTick>
 800c366:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c368:	e00a      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c36a:	f7fa fa67 	bl	800683c <HAL_GetTick>
 800c36e:	4602      	mov	r2, r0
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	2b64      	cmp	r3, #100	; 0x64
 800c376:	d903      	bls.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c378:	2303      	movs	r3, #3
 800c37a:	e196      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800c37c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c380:	4b6c      	ldr	r3, [pc, #432]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1ee      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d021      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11d      	bne.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c3a0:	4b64      	ldr	r3, [pc, #400]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a6:	0c1b      	lsrs	r3, r3, #16
 800c3a8:	f003 0303 	and.w	r3, r3, #3
 800c3ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c3ae:	4b61      	ldr	r3, [pc, #388]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b4:	0e1b      	lsrs	r3, r3, #24
 800c3b6:	f003 030f 	and.w	r3, r3, #15
 800c3ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	019a      	lsls	r2, r3, #6
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	041b      	lsls	r3, r3, #16
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	061b      	lsls	r3, r3, #24
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	071b      	lsls	r3, r3, #28
 800c3d4:	4957      	ldr	r1, [pc, #348]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f0:	d00a      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d02e      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c406:	d129      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c408:	4b4a      	ldr	r3, [pc, #296]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c40e:	0c1b      	lsrs	r3, r3, #16
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c416:	4b47      	ldr	r3, [pc, #284]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c41c:	0f1b      	lsrs	r3, r3, #28
 800c41e:	f003 0307 	and.w	r3, r3, #7
 800c422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	019a      	lsls	r2, r3, #6
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	041b      	lsls	r3, r3, #16
 800c42e:	431a      	orrs	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	061b      	lsls	r3, r3, #24
 800c436:	431a      	orrs	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	071b      	lsls	r3, r3, #28
 800c43c:	493d      	ldr	r1, [pc, #244]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c43e:	4313      	orrs	r3, r2
 800c440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c444:	4b3b      	ldr	r3, [pc, #236]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c44a:	f023 021f 	bic.w	r2, r3, #31
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c452:	3b01      	subs	r3, #1
 800c454:	4937      	ldr	r1, [pc, #220]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c456:	4313      	orrs	r3, r2
 800c458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d01d      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c468:	4b32      	ldr	r3, [pc, #200]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c46e:	0e1b      	lsrs	r3, r3, #24
 800c470:	f003 030f 	and.w	r3, r3, #15
 800c474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c476:	4b2f      	ldr	r3, [pc, #188]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c47c:	0f1b      	lsrs	r3, r3, #28
 800c47e:	f003 0307 	and.w	r3, r3, #7
 800c482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	019a      	lsls	r2, r3, #6
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	041b      	lsls	r3, r3, #16
 800c490:	431a      	orrs	r2, r3
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	061b      	lsls	r3, r3, #24
 800c496:	431a      	orrs	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	071b      	lsls	r3, r3, #28
 800c49c:	4925      	ldr	r1, [pc, #148]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d011      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	019a      	lsls	r2, r3, #6
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	041b      	lsls	r3, r3, #16
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	061b      	lsls	r3, r3, #24
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	071b      	lsls	r3, r3, #28
 800c4cc:	4919      	ldr	r1, [pc, #100]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c4d4:	4b17      	ldr	r3, [pc, #92]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a16      	ldr	r2, [pc, #88]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c4da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4e0:	f7fa f9ac 	bl	800683c <HAL_GetTick>
 800c4e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4e6:	e008      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c4e8:	f7fa f9a8 	bl	800683c <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b64      	cmp	r3, #100	; 0x64
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e0d7      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4fa:	4b0e      	ldr	r3, [pc, #56]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0f0      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	f040 80cd 	bne.w	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c50e:	4b09      	ldr	r3, [pc, #36]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a08      	ldr	r2, [pc, #32]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c51a:	f7fa f98f 	bl	800683c <HAL_GetTick>
 800c51e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c520:	e00a      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c522:	f7fa f98b 	bl	800683c <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2b64      	cmp	r3, #100	; 0x64
 800c52e:	d903      	bls.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e0ba      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800c534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c538:	4b5e      	ldr	r3, [pc, #376]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c544:	d0ed      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c556:	2b00      	cmp	r3, #0
 800c558:	d009      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c562:	2b00      	cmp	r3, #0
 800c564:	d02e      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d12a      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c56e:	4b51      	ldr	r3, [pc, #324]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	f003 0303 	and.w	r3, r3, #3
 800c57a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c57c:	4b4d      	ldr	r3, [pc, #308]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c582:	0f1b      	lsrs	r3, r3, #28
 800c584:	f003 0307 	and.w	r3, r3, #7
 800c588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	019a      	lsls	r2, r3, #6
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	041b      	lsls	r3, r3, #16
 800c594:	431a      	orrs	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	061b      	lsls	r3, r3, #24
 800c59c:	431a      	orrs	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	071b      	lsls	r3, r3, #28
 800c5a2:	4944      	ldr	r1, [pc, #272]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c5aa:	4b42      	ldr	r3, [pc, #264]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	021b      	lsls	r3, r3, #8
 800c5bc:	493d      	ldr	r1, [pc, #244]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d022      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5d8:	d11d      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c5da:	4b36      	ldr	r3, [pc, #216]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e0:	0e1b      	lsrs	r3, r3, #24
 800c5e2:	f003 030f 	and.w	r3, r3, #15
 800c5e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c5e8:	4b32      	ldr	r3, [pc, #200]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ee:	0f1b      	lsrs	r3, r3, #28
 800c5f0:	f003 0307 	and.w	r3, r3, #7
 800c5f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	019a      	lsls	r2, r3, #6
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	041b      	lsls	r3, r3, #16
 800c602:	431a      	orrs	r2, r3
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	061b      	lsls	r3, r3, #24
 800c608:	431a      	orrs	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	071b      	lsls	r3, r3, #28
 800c60e:	4929      	ldr	r1, [pc, #164]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c610:	4313      	orrs	r3, r2
 800c612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f003 0308 	and.w	r3, r3, #8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d028      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c622:	4b24      	ldr	r3, [pc, #144]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c628:	0e1b      	lsrs	r3, r3, #24
 800c62a:	f003 030f 	and.w	r3, r3, #15
 800c62e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c630:	4b20      	ldr	r3, [pc, #128]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c636:	0c1b      	lsrs	r3, r3, #16
 800c638:	f003 0303 	and.w	r3, r3, #3
 800c63c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	019a      	lsls	r2, r3, #6
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	041b      	lsls	r3, r3, #16
 800c648:	431a      	orrs	r2, r3
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	061b      	lsls	r3, r3, #24
 800c64e:	431a      	orrs	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	071b      	lsls	r3, r3, #28
 800c656:	4917      	ldr	r1, [pc, #92]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c65e:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	4911      	ldr	r1, [pc, #68]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c66e:	4313      	orrs	r3, r2
 800c670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c674:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a0e      	ldr	r2, [pc, #56]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c67a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c67e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c680:	f7fa f8dc 	bl	800683c <HAL_GetTick>
 800c684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c686:	e008      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c688:	f7fa f8d8 	bl	800683c <HAL_GetTick>
 800c68c:	4602      	mov	r2, r0
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	2b64      	cmp	r3, #100	; 0x64
 800c694:	d901      	bls.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e007      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c69a:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a6:	d1ef      	bne.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3720      	adds	r7, #32
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	40023800 	.word	0x40023800

0800c6b8 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a80      	ldr	r2, [pc, #512]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800c6c8:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800c6ca:	4b80      	ldr	r3, [pc, #512]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d0:	099b      	lsrs	r3, r3, #6
 800c6d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c6da:	4b7c      	ldr	r3, [pc, #496]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6e0:	0c1b      	lsrs	r3, r3, #16
 800c6e2:	f003 0203 	and.w	r2, r3, #3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c6ea:	4b78      	ldr	r3, [pc, #480]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6f0:	0e1b      	lsrs	r3, r3, #24
 800c6f2:	f003 020f 	and.w	r2, r3, #15
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c6fa:	4b74      	ldr	r3, [pc, #464]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c700:	0f1b      	lsrs	r3, r3, #28
 800c702:	f003 0207 	and.w	r2, r3, #7
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800c70a:	4b70      	ldr	r3, [pc, #448]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c710:	099b      	lsrs	r3, r3, #6
 800c712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c71a:	4b6c      	ldr	r3, [pc, #432]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c720:	0c1b      	lsrs	r3, r3, #16
 800c722:	f003 0203 	and.w	r2, r3, #3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c72a:	4b68      	ldr	r3, [pc, #416]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c730:	0e1b      	lsrs	r3, r3, #24
 800c732:	f003 020f 	and.w	r2, r3, #15
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c73a:	4b64      	ldr	r3, [pc, #400]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c740:	0f1b      	lsrs	r3, r3, #28
 800c742:	f003 0207 	and.w	r2, r3, #7
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800c74a:	4b60      	ldr	r3, [pc, #384]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c750:	f003 021f 	and.w	r2, r3, #31
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800c758:	4b5c      	ldr	r3, [pc, #368]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c75e:	0a1b      	lsrs	r3, r3, #8
 800c760:	f003 021f 	and.w	r2, r3, #31
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800c768:	4b58      	ldr	r3, [pc, #352]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c76e:	0c1b      	lsrs	r3, r3, #16
 800c770:	f003 0203 	and.w	r2, r3, #3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800c778:	4b54      	ldr	r3, [pc, #336]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c77e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800c786:	4b51      	ldr	r3, [pc, #324]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c78c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800c794:	4b4d      	ldr	r3, [pc, #308]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800c7a0:	4b4a      	ldr	r3, [pc, #296]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800c7ae:	4b47      	ldr	r3, [pc, #284]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7b4:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800c7bc:	4b43      	ldr	r3, [pc, #268]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7c2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800c7ca:	4b40      	ldr	r3, [pc, #256]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800c7d8:	4b3c      	ldr	r3, [pc, #240]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7de:	f003 0203 	and.w	r2, r3, #3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800c7e6:	4b39      	ldr	r3, [pc, #228]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7ec:	f003 020c 	and.w	r2, r3, #12
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c7f4:	4b35      	ldr	r3, [pc, #212]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7fa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c802:	4b32      	ldr	r3, [pc, #200]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c808:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c810:	4b2e      	ldr	r3, [pc, #184]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c816:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c81e:	4b2b      	ldr	r3, [pc, #172]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c824:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c82c:	4b27      	ldr	r3, [pc, #156]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c832:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c83a:	4b24      	ldr	r3, [pc, #144]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c840:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c848:	4b20      	ldr	r3, [pc, #128]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c84e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c856:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c85c:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c864:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c86a:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c872:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c878:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c882:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c88a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c890:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	431a      	orrs	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c89c:	4b0b      	ldr	r3, [pc, #44]	; (800c8cc <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d103      	bne.n	800c8b2 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c8b0:	e003      	b.n	800c8ba <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c8b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c8ba:	bf00      	nop
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	00fffff1 	.word	0x00fffff1
 800c8cc:	40023800 	.word	0x40023800

0800c8d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c8ee:	f040 8086 	bne.w	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c8f2:	4b8d      	ldr	r3, [pc, #564]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8f8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c900:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c908:	d03e      	beq.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800c90a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c90e:	d073      	beq.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d000      	beq.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c914:	e074      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c916:	4b84      	ldr	r3, [pc, #528]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d108      	bne.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c922:	4b81      	ldr	r3, [pc, #516]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c92a:	4a80      	ldr	r2, [pc, #512]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c930:	613b      	str	r3, [r7, #16]
 800c932:	e007      	b.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c934:	4b7c      	ldr	r3, [pc, #496]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c93c:	4a7c      	ldr	r2, [pc, #496]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c942:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c944:	4b78      	ldr	r3, [pc, #480]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c94a:	0e1b      	lsrs	r3, r3, #24
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c952:	4b75      	ldr	r3, [pc, #468]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c958:	099b      	lsrs	r3, r3, #6
 800c95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	fb02 f203 	mul.w	r2, r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	fbb2 f3f3 	udiv	r3, r2, r3
 800c96a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c96c:	4b6e      	ldr	r3, [pc, #440]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c96e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c972:	0a1b      	lsrs	r3, r3, #8
 800c974:	f003 031f 	and.w	r3, r3, #31
 800c978:	3301      	adds	r3, #1
 800c97a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	fbb2 f3f3 	udiv	r3, r2, r3
 800c984:	617b      	str	r3, [r7, #20]
        break;
 800c986:	e03b      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c988:	4b67      	ldr	r3, [pc, #412]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d108      	bne.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c994:	4b64      	ldr	r3, [pc, #400]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c99c:	4a63      	ldr	r2, [pc, #396]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a2:	613b      	str	r3, [r7, #16]
 800c9a4:	e007      	b.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c9a6:	4b60      	ldr	r3, [pc, #384]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ae:	4a60      	ldr	r2, [pc, #384]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9b4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c9b6:	4b5c      	ldr	r3, [pc, #368]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9bc:	0e1b      	lsrs	r3, r3, #24
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c9c4:	4b58      	ldr	r3, [pc, #352]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ca:	099b      	lsrs	r3, r3, #6
 800c9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	fb02 f203 	mul.w	r2, r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9dc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c9de:	4b52      	ldr	r3, [pc, #328]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9e4:	f003 031f 	and.w	r3, r3, #31
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f4:	617b      	str	r3, [r7, #20]
        break;
 800c9f6:	e003      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9f8:	4b4e      	ldr	r3, [pc, #312]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c9fa:	617b      	str	r3, [r7, #20]
        break;
 800c9fc:	e000      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800c9fe:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca06:	f040 8086 	bne.w	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ca0a:	4b47      	ldr	r3, [pc, #284]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ca18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca20:	d03e      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ca22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca26:	d073      	beq.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d000      	beq.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ca2c:	e074      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ca2e:	4b3e      	ldr	r3, [pc, #248]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d108      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ca3a:	4b3b      	ldr	r3, [pc, #236]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca42:	4a3a      	ldr	r2, [pc, #232]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	e007      	b.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ca4c:	4b36      	ldr	r3, [pc, #216]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca54:	4a36      	ldr	r2, [pc, #216]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800ca56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca5a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800ca5c:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca62:	0e1b      	lsrs	r3, r3, #24
 800ca64:	f003 030f 	and.w	r3, r3, #15
 800ca68:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800ca6a:	4b2f      	ldr	r3, [pc, #188]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca70:	099b      	lsrs	r3, r3, #6
 800ca72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	fb02 f203 	mul.w	r2, r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca82:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800ca84:	4b28      	ldr	r3, [pc, #160]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca8a:	0a1b      	lsrs	r3, r3, #8
 800ca8c:	f003 031f 	and.w	r3, r3, #31
 800ca90:	3301      	adds	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca9c:	617b      	str	r3, [r7, #20]
        break;
 800ca9e:	e03b      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800caa0:	4b21      	ldr	r3, [pc, #132]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d108      	bne.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800caac:	4b1e      	ldr	r3, [pc, #120]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cab4:	4a1d      	ldr	r2, [pc, #116]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800cab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caba:	613b      	str	r3, [r7, #16]
 800cabc:	e007      	b.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cabe:	4b1a      	ldr	r3, [pc, #104]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac6:	4a1a      	ldr	r2, [pc, #104]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800cac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cacc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800cace:	4b16      	ldr	r3, [pc, #88]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800cad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cad4:	0e1b      	lsrs	r3, r3, #24
 800cad6:	f003 030f 	and.w	r3, r3, #15
 800cada:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800cade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae2:	099b      	lsrs	r3, r3, #6
 800cae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	fb02 f203 	mul.w	r2, r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800caf6:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800caf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cafc:	f003 031f 	and.w	r3, r3, #31
 800cb00:	3301      	adds	r3, #1
 800cb02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cb04:	697a      	ldr	r2, [r7, #20]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0c:	617b      	str	r3, [r7, #20]
        break;
 800cb0e:	e003      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb10:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800cb12:	617b      	str	r3, [r7, #20]
        break;
 800cb14:	e000      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800cb16:	bf00      	nop

  return frequency;
 800cb18:	697b      	ldr	r3, [r7, #20]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	371c      	adds	r7, #28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	40023800 	.word	0x40023800
 800cb2c:	00f42400 	.word	0x00f42400
 800cb30:	017d7840 	.word	0x017d7840
 800cb34:	00bb8000 	.word	0x00bb8000

0800cb38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d101      	bne.n	800cb4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e06b      	b.n	800cc22 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	7f5b      	ldrb	r3, [r3, #29]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d105      	bne.n	800cb60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f6 f9d6 	bl	8002f0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	22ca      	movs	r2, #202	; 0xca
 800cb6c:	625a      	str	r2, [r3, #36]	; 0x24
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2253      	movs	r2, #83	; 0x53
 800cb74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fb00 	bl	800d17c <RTC_EnterInitMode>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d008      	beq.n	800cb94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	22ff      	movs	r2, #255	; 0xff
 800cb88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2204      	movs	r2, #4
 800cb8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e046      	b.n	800cc22 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6899      	ldr	r1, [r3, #8]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	4b23      	ldr	r3, [pc, #140]	; (800cc2c <HAL_RTC_Init+0xf4>)
 800cba0:	400b      	ands	r3, r1
 800cba2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6899      	ldr	r1, [r3, #8]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	68d2      	ldr	r2, [r2, #12]
 800cbca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6919      	ldr	r1, [r3, #16]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	041a      	lsls	r2, r3, #16
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	430a      	orrs	r2, r1
 800cbde:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbee:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f022 0208 	bic.w	r2, r2, #8
 800cbfe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	22ff      	movs	r2, #255	; 0xff
 800cc18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cc20:	2300      	movs	r3, #0
  }
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	ff8fffbf 	.word	0xff8fffbf

0800cc30 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc30:	b590      	push	{r4, r7, lr}
 800cc32:	b087      	sub	sp, #28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	7f1b      	ldrb	r3, [r3, #28]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_RTC_SetTime+0x1c>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e0a8      	b.n	800cd9e <HAL_RTC_SetTime+0x16e>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2202      	movs	r2, #2
 800cc56:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d126      	bne.n	800ccac <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 faac 	bl	800d1d4 <RTC_ByteToBcd2>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 faa5 	bl	800d1d4 <RTC_ByteToBcd2>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cc8e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	789b      	ldrb	r3, [r3, #2]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 fa9d 	bl	800d1d4 <RTC_ByteToBcd2>
 800cc9a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cc9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	7b1b      	ldrb	r3, [r3, #12]
 800cca4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cca6:	4313      	orrs	r3, r2
 800cca8:	617b      	str	r3, [r7, #20]
 800ccaa:	e018      	b.n	800ccde <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d102      	bne.n	800ccc0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	785b      	ldrb	r3, [r3, #1]
 800ccca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cccc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ccd2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	7b1b      	ldrb	r3, [r3, #12]
 800ccd8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	22ca      	movs	r2, #202	; 0xca
 800cce4:	625a      	str	r2, [r3, #36]	; 0x24
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2253      	movs	r2, #83	; 0x53
 800ccec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 fa44 	bl	800d17c <RTC_EnterInitMode>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	22ff      	movs	r2, #255	; 0xff
 800cd00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2204      	movs	r2, #4
 800cd06:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e045      	b.n	800cd9e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	6979      	ldr	r1, [r7, #20]
 800cd18:	4b23      	ldr	r3, [pc, #140]	; (800cda8 <HAL_RTC_SetTime+0x178>)
 800cd1a:	400b      	ands	r3, r1
 800cd1c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	689a      	ldr	r2, [r3, #8]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6899      	ldr	r1, [r3, #8]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	691a      	ldr	r2, [r3, #16]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f003 0320 	and.w	r3, r3, #32
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d111      	bne.n	800cd88 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f000 f9e1 	bl	800d12c <HAL_RTC_WaitForSynchro>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e00a      	b.n	800cd9e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	22ff      	movs	r2, #255	; 0xff
 800cd8e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2201      	movs	r2, #1
 800cd94:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
  }
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	371c      	adds	r7, #28
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd90      	pop	{r4, r7, pc}
 800cda6:	bf00      	nop
 800cda8:	007f7f7f 	.word	0x007f7f7f

0800cdac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cdac:	b590      	push	{r4, r7, lr}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7f1b      	ldrb	r3, [r3, #28]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d101      	bne.n	800cdc8 <HAL_RTC_SetDate+0x1c>
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	e092      	b.n	800ceee <HAL_RTC_SetDate+0x142>
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10e      	bne.n	800cdf8 <HAL_RTC_SetDate+0x4c>
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	f003 0310 	and.w	r3, r3, #16
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d008      	beq.n	800cdf8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	f023 0310 	bic.w	r3, r3, #16
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	330a      	adds	r3, #10
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d11c      	bne.n	800ce38 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	78db      	ldrb	r3, [r3, #3]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 f9e6 	bl	800d1d4 <RTC_ByteToBcd2>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	785b      	ldrb	r3, [r3, #1]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f9df 	bl	800d1d4 <RTC_ByteToBcd2>
 800ce16:	4603      	mov	r3, r0
 800ce18:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ce1a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	789b      	ldrb	r3, [r3, #2]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 f9d7 	bl	800d1d4 <RTC_ByteToBcd2>
 800ce26:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ce28:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	e00e      	b.n	800ce56 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	78db      	ldrb	r3, [r3, #3]
 800ce3c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	785b      	ldrb	r3, [r3, #1]
 800ce42:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ce44:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ce4a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ce52:	4313      	orrs	r3, r2
 800ce54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	22ca      	movs	r2, #202	; 0xca
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2253      	movs	r2, #83	; 0x53
 800ce64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 f988 	bl	800d17c <RTC_EnterInitMode>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	22ff      	movs	r2, #255	; 0xff
 800ce78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2204      	movs	r2, #4
 800ce7e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e031      	b.n	800ceee <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	6979      	ldr	r1, [r7, #20]
 800ce90:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <HAL_RTC_SetDate+0x14c>)
 800ce92:	400b      	ands	r3, r1
 800ce94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68da      	ldr	r2, [r3, #12]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cea4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d111      	bne.n	800ced8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f000 f939 	bl	800d12c <HAL_RTC_WaitForSynchro>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	22ff      	movs	r2, #255	; 0xff
 800cec6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2204      	movs	r2, #4
 800cecc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	e00a      	b.n	800ceee <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	22ff      	movs	r2, #255	; 0xff
 800cede:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ceec:	2300      	movs	r3, #0
  }
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	371c      	adds	r7, #28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd90      	pop	{r4, r7, pc}
 800cef6:	bf00      	nop
 800cef8:	00ffff3f 	.word	0x00ffff3f

0800cefc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cefc:	b590      	push	{r4, r7, lr}
 800cefe:	b089      	sub	sp, #36	; 0x24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	7f1b      	ldrb	r3, [r3, #28]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d101      	bne.n	800cf20 <HAL_RTC_SetAlarm+0x24>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e101      	b.n	800d124 <HAL_RTC_SetAlarm+0x228>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2201      	movs	r2, #1
 800cf24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2202      	movs	r2, #2
 800cf2a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d137      	bne.n	800cfa2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d102      	bne.n	800cf46 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2200      	movs	r2, #0
 800cf44:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 f942 	bl	800d1d4 <RTC_ByteToBcd2>
 800cf50:	4603      	mov	r3, r0
 800cf52:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	785b      	ldrb	r3, [r3, #1]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 f93b 	bl	800d1d4 <RTC_ByteToBcd2>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cf62:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	789b      	ldrb	r3, [r3, #2]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f000 f933 	bl	800d1d4 <RTC_ByteToBcd2>
 800cf6e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800cf70:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	7b1b      	ldrb	r3, [r3, #12]
 800cf78:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cf7a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 f925 	bl	800d1d4 <RTC_ByteToBcd2>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cf8e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cf96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	61fb      	str	r3, [r7, #28]
 800cfa0:	e023      	b.n	800cfea <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cfc2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cfc8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	7b1b      	ldrb	r3, [r3, #12]
 800cfce:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cfd0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cfd8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cfda:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cfe0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	69db      	ldr	r3, [r3, #28]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	22ca      	movs	r2, #202	; 0xca
 800cffc:	625a      	str	r2, [r3, #36]	; 0x24
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2253      	movs	r2, #83	; 0x53
 800d004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d00e:	d13f      	bne.n	800d090 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689a      	ldr	r2, [r3, #8]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d01e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689a      	ldr	r2, [r3, #8]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d02e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d030:	f7f9 fc04 	bl	800683c <HAL_GetTick>
 800d034:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d036:	e013      	b.n	800d060 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d038:	f7f9 fc00 	bl	800683c <HAL_GetTick>
 800d03c:	4602      	mov	r2, r0
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d046:	d90b      	bls.n	800d060 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	22ff      	movs	r2, #255	; 0xff
 800d04e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2203      	movs	r2, #3
 800d054:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e061      	b.n	800d124 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0e4      	beq.n	800d038 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	69fa      	ldr	r2, [r7, #28]
 800d074:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	697a      	ldr	r2, [r7, #20]
 800d07c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d08c:	609a      	str	r2, [r3, #8]
 800d08e:	e03e      	b.n	800d10e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	689a      	ldr	r2, [r3, #8]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d09e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0ae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d0b0:	f7f9 fbc4 	bl	800683c <HAL_GetTick>
 800d0b4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d0b6:	e013      	b.n	800d0e0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d0b8:	f7f9 fbc0 	bl	800683c <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0c6:	d90b      	bls.n	800d0e0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	22ff      	movs	r2, #255	; 0xff
 800d0ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2203      	movs	r2, #3
 800d0d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e021      	b.n	800d124 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	f003 0302 	and.w	r3, r3, #2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0e4      	beq.n	800d0b8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69fa      	ldr	r2, [r7, #28]
 800d0f4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689a      	ldr	r2, [r3, #8]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d10c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	22ff      	movs	r2, #255	; 0xff
 800d114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3724      	adds	r7, #36	; 0x24
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd90      	pop	{r4, r7, pc}

0800d12c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68da      	ldr	r2, [r3, #12]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d146:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d148:	f7f9 fb78 	bl	800683c <HAL_GetTick>
 800d14c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d14e:	e009      	b.n	800d164 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d150:	f7f9 fb74 	bl	800683c <HAL_GetTick>
 800d154:	4602      	mov	r2, r0
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d15e:	d901      	bls.n	800d164 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d160:	2303      	movs	r3, #3
 800d162:	e007      	b.n	800d174 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0ee      	beq.n	800d150 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d192:	2b00      	cmp	r3, #0
 800d194:	d119      	bne.n	800d1ca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295
 800d19e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1a0:	f7f9 fb4c 	bl	800683c <HAL_GetTick>
 800d1a4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d1a6:	e009      	b.n	800d1bc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d1a8:	f7f9 fb48 	bl	800683c <HAL_GetTick>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1b6:	d901      	bls.n	800d1bc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e007      	b.n	800d1cc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0ee      	beq.n	800d1a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d1e2:	e005      	b.n	800d1f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	3b0a      	subs	r3, #10
 800d1ee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	2b09      	cmp	r3, #9
 800d1f4:	d8f6      	bhi.n	800d1e4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	011b      	lsls	r3, r3, #4
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	4313      	orrs	r3, r2
 800d202:	b2db      	uxtb	r3, r3
}
 800d204:	4618      	mov	r0, r3
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d210:	b480      	push	{r7}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	7f1b      	ldrb	r3, [r3, #28]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d101      	bne.n	800d22c <HAL_RTCEx_SetTimeStamp+0x1c>
 800d228:	2302      	movs	r3, #2
 800d22a:	e03e      	b.n	800d2aa <HAL_RTCEx_SetTimeStamp+0x9a>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2202      	movs	r2, #2
 800d236:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	4b1e      	ldr	r3, [pc, #120]	; (800d2b8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d240:	4013      	ands	r3, r2
 800d242:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	4313      	orrs	r3, r2
 800d24a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	22ca      	movs	r2, #202	; 0xca
 800d252:	625a      	str	r2, [r3, #36]	; 0x24
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2253      	movs	r2, #83	; 0x53
 800d25a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f022 0206 	bic.w	r2, r2, #6
 800d26a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	430a      	orrs	r2, r1
 800d27a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	689a      	ldr	r2, [r3, #8]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d292:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	22ff      	movs	r2, #255	; 0xff
 800d29a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	fffff7f7 	.word	0xfffff7f7

0800d2bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e149      	b.n	800d56e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7f6 f8f2 	bl	80034d8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fa57 	bl	800d7b0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d007      	beq.n	800d31a <HAL_SAI_Init+0x5e>
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d302      	bcc.n	800d314 <HAL_SAI_Init+0x58>
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d006      	beq.n	800d320 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800d312:	e008      	b.n	800d326 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	61fb      	str	r3, [r7, #28]
      break;
 800d318:	e005      	b.n	800d326 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d31a:	2310      	movs	r3, #16
 800d31c:	61fb      	str	r3, [r7, #28]
      break;
 800d31e:	e002      	b.n	800d326 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d320:	2320      	movs	r3, #32
 800d322:	61fb      	str	r3, [r7, #28]
      break;
 800d324:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d81d      	bhi.n	800d36a <HAL_SAI_Init+0xae>
 800d32e:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <HAL_SAI_Init+0x78>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800d345 	.word	0x0800d345
 800d338:	0800d34b 	.word	0x0800d34b
 800d33c:	0800d353 	.word	0x0800d353
 800d340:	0800d35b 	.word	0x0800d35b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
      }
      break;
 800d348:	e010      	b.n	800d36c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800d34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d34e:	617b      	str	r3, [r7, #20]
      }
      break;
 800d350:	e00c      	b.n	800d36c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d356:	617b      	str	r3, [r7, #20]
      }
      break;
 800d358:	e008      	b.n	800d36c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d35a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d35e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	f043 0301 	orr.w	r3, r3, #1
 800d366:	61fb      	str	r3, [r7, #28]
      }
      break;
 800d368:	e000      	b.n	800d36c <HAL_SAI_Init+0xb0>
  default:
    break;
 800d36a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a81      	ldr	r2, [pc, #516]	; (800d578 <HAL_SAI_Init+0x2bc>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d004      	beq.n	800d380 <HAL_SAI_Init+0xc4>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a80      	ldr	r2, [pc, #512]	; (800d57c <HAL_SAI_Init+0x2c0>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d103      	bne.n	800d388 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800d380:	4a7f      	ldr	r2, [pc, #508]	; (800d580 <HAL_SAI_Init+0x2c4>)
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	e002      	b.n	800d38e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d388:	4a7e      	ldr	r2, [pc, #504]	; (800d584 <HAL_SAI_Init+0x2c8>)
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d043      	beq.n	800d41e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a76      	ldr	r2, [pc, #472]	; (800d578 <HAL_SAI_Init+0x2bc>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d004      	beq.n	800d3ae <HAL_SAI_Init+0xf2>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a74      	ldr	r2, [pc, #464]	; (800d57c <HAL_SAI_Init+0x2c0>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d104      	bne.n	800d3b8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d3ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d3b2:	f7ff fa8d 	bl	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3b6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a72      	ldr	r2, [pc, #456]	; (800d588 <HAL_SAI_Init+0x2cc>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <HAL_SAI_Init+0x110>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a71      	ldr	r2, [pc, #452]	; (800d58c <HAL_SAI_Init+0x2d0>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d104      	bne.n	800d3d6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d3cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d3d0:	f7ff fa7e 	bl	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3d4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d3d6:	693a      	ldr	r2, [r7, #16]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	69db      	ldr	r3, [r3, #28]
 800d3e6:	025b      	lsls	r3, r3, #9
 800d3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	4a67      	ldr	r2, [pc, #412]	; (800d590 <HAL_SAI_Init+0x2d4>)
 800d3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f6:	08da      	lsrs	r2, r3, #3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800d3fc:	68f9      	ldr	r1, [r7, #12]
 800d3fe:	4b64      	ldr	r3, [pc, #400]	; (800d590 <HAL_SAI_Init+0x2d4>)
 800d400:	fba3 2301 	umull	r2, r3, r3, r1
 800d404:	08da      	lsrs	r2, r3, #3
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	1aca      	subs	r2, r1, r3
 800d410:	2a08      	cmp	r2, #8
 800d412:	d904      	bls.n	800d41e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <HAL_SAI_Init+0x172>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d109      	bne.n	800d442 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d432:	2b01      	cmp	r3, #1
 800d434:	d101      	bne.n	800d43a <HAL_SAI_Init+0x17e>
 800d436:	2300      	movs	r3, #0
 800d438:	e001      	b.n	800d43e <HAL_SAI_Init+0x182>
 800d43a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d43e:	61bb      	str	r3, [r7, #24]
 800d440:	e008      	b.n	800d454 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d446:	2b01      	cmp	r3, #1
 800d448:	d102      	bne.n	800d450 <HAL_SAI_Init+0x194>
 800d44a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d44e:	e000      	b.n	800d452 <HAL_SAI_Init+0x196>
 800d450:	2300      	movs	r3, #0
 800d452:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b4d      	ldr	r3, [pc, #308]	; (800d594 <HAL_SAI_Init+0x2d8>)
 800d460:	400b      	ands	r3, r1
 800d462:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6819      	ldr	r1, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	685a      	ldr	r2, [r3, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d472:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d478:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	431a      	orrs	r2, r3
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800d48c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d498:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	051b      	lsls	r3, r3, #20
 800d4a0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6859      	ldr	r1, [r3, #4]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	4b38      	ldr	r3, [pc, #224]	; (800d598 <HAL_SAI_Init+0x2dc>)
 800d4b6:	400b      	ands	r3, r1
 800d4b8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6859      	ldr	r1, [r3, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699a      	ldr	r2, [r3, #24]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6899      	ldr	r1, [r3, #8]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	4b2e      	ldr	r3, [pc, #184]	; (800d59c <HAL_SAI_Init+0x2e0>)
 800d4e4:	400b      	ands	r3, r1
 800d4e6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6899      	ldr	r1, [r3, #8]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d4f8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800d4fe:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800d504:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50a:	3b01      	subs	r3, #1
 800d50c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800d50e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	430a      	orrs	r2, r1
 800d516:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68d9      	ldr	r1, [r3, #12]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d526:	400b      	ands	r3, r1
 800d528:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68d9      	ldr	r1, [r3, #12]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d538:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d53e:	041b      	lsls	r3, r3, #16
 800d540:	431a      	orrs	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d546:	3b01      	subs	r3, #1
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	430a      	orrs	r2, r1
 800d552:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	40015804 	.word	0x40015804
 800d57c:	40015824 	.word	0x40015824
 800d580:	40015800 	.word	0x40015800
 800d584:	40015c00 	.word	0x40015c00
 800d588:	40015c04 	.word	0x40015c04
 800d58c:	40015c24 	.word	0x40015c24
 800d590:	cccccccd 	.word	0xcccccccd
 800d594:	ff05c010 	.word	0xff05c010
 800d598:	ffff1ff0 	.word	0xffff1ff0
 800d59c:	fff88000 	.word	0xfff88000

0800d5a0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e027      	b.n	800d602 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ca:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f8ef 	bl	800d7b0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f042 0208 	orr.w	r2, r2, #8
 800d5e0:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7f5 ffe2 	bl	80035ac <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <HAL_SAI_Receive_DMA+0x1a>
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e074      	b.n	800d714 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b01      	cmp	r3, #1
 800d634:	d16d      	bne.n	800d712 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d101      	bne.n	800d644 <HAL_SAI_Receive_DMA+0x38>
 800d640:	2302      	movs	r3, #2
 800d642:	e067      	b.n	800d714 <HAL_SAI_Receive_DMA+0x108>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	88fa      	ldrh	r2, [r7, #6]
 800d656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	88fa      	ldrh	r2, [r7, #6]
 800d65e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2200      	movs	r2, #0
 800d666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2222      	movs	r2, #34	; 0x22
 800d66e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d676:	4a29      	ldr	r2, [pc, #164]	; (800d71c <HAL_SAI_Receive_DMA+0x110>)
 800d678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	4a28      	ldr	r2, [pc, #160]	; (800d720 <HAL_SAI_Receive_DMA+0x114>)
 800d680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d686:	4a27      	ldr	r2, [pc, #156]	; (800d724 <HAL_SAI_Receive_DMA+0x118>)
 800d688:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68e:	2200      	movs	r2, #0
 800d690:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	331c      	adds	r3, #28
 800d69c:	4619      	mov	r1, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6aa:	f7f9 fecf 	bl	800744c <HAL_DMA_Start_IT>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d005      	beq.n	800d6c0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e029      	b.n	800d714 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d107      	bne.n	800d6de <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d6dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d6de:	2100      	movs	r1, #0
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f82f 	bl	800d744 <SAI_InterruptFlag>
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	691a      	ldr	r2, [r3, #16]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d704:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	e000      	b.n	800d714 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d712:	2302      	movs	r3, #2
  }
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	0800d87d 	.word	0x0800d87d
 800d720:	0800d81d 	.word	0x0800d81d
 800d724:	0800d899 	.word	0x0800d899

0800d728 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d736:	b2db      	uxtb	r3, r3
}
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d74e:	2301      	movs	r3, #1
 800d750:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d103      	bne.n	800d760 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f043 0308 	orr.w	r3, r3, #8
 800d75e:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d764:	2b08      	cmp	r3, #8
 800d766:	d10b      	bne.n	800d780 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d76c:	2b03      	cmp	r3, #3
 800d76e:	d003      	beq.n	800d778 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d103      	bne.n	800d780 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f043 0310 	orr.w	r3, r3, #16
 800d77e:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	2b03      	cmp	r3, #3
 800d786:	d003      	beq.n	800d790 <SAI_InterruptFlag+0x4c>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d104      	bne.n	800d79a <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d796:	60fb      	str	r3, [r7, #12]
 800d798:	e003      	b.n	800d7a2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f043 0304 	orr.w	r3, r3, #4
 800d7a0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d7b0:	b490      	push	{r4, r7}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800d7b8:	4b16      	ldr	r3, [pc, #88]	; (800d814 <SAI_Disable+0x64>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a16      	ldr	r2, [pc, #88]	; (800d818 <SAI_Disable+0x68>)
 800d7be:	fba2 2303 	umull	r2, r3, r2, r3
 800d7c2:	0b1b      	lsrs	r3, r3, #12
 800d7c4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d7d8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d7da:	4623      	mov	r3, r4
 800d7dc:	1e5c      	subs	r4, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f6:	e006      	b.n	800d806 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e9      	bne.n	800d7da <SAI_Disable+0x2a>

  return status;
 800d806:	7bfb      	ldrb	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bc90      	pop	{r4, r7}
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	20000000 	.word	0x20000000
 800d818:	95cbec1b 	.word	0x95cbec1b

0800d81c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d828:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d832:	d01c      	beq.n	800d86e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d842:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff ff78 	bl	800d744 <SAI_InterruptFlag>
 800d854:	4603      	mov	r3, r0
 800d856:	43d9      	mvns	r1, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	691a      	ldr	r2, [r3, #16]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	400a      	ands	r2, r1
 800d864:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7f7 ff1c 	bl	80056ac <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d874:	bf00      	nop
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d888:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f7f7 ff18 	bl	80056c0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d890:	bf00      	nop
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d004      	beq.n	800d8ca <SAI_DMAError+0x32>
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d112      	bne.n	800d8f0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d8d8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7ff ff68 	bl	800d7b0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7f7 fcfd 	bl	80052f0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b082      	sub	sp, #8
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e025      	b.n	800d95e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7f5 fdcc 	bl	80034c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3304      	adds	r3, #4
 800d93c:	4619      	mov	r1, r3
 800d93e:	4610      	mov	r0, r2
 800d940:	f001 fdea 	bl	800f518 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6818      	ldr	r0, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	461a      	mov	r2, r3
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	f001 fe54 	bl	800f5fc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d101      	bne.n	800d982 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d97e:	2302      	movs	r3, #2
 800d980:	e018      	b.n	800d9b4 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2202      	movs	r2, #2
 800d986:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	4618      	mov	r0, r3
 800d994:	f001 feb2 	bl	800f6fc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d104      	bne.n	800d9aa <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2205      	movs	r2, #5
 800d9a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d9a8:	e003      	b.n	800d9b2 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d101      	bne.n	800d9d6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	e00e      	b.n	800d9f4 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2202      	movs	r2, #2
 800d9da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f001 feaa 	bl	800f73e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e04c      	b.n	800daa8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da14:	b2db      	uxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7f5 fa8c 	bl	8002f40 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2202      	movs	r2, #2
 800da2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f022 0203 	bic.w	r2, r2, #3
 800da3e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	4b19      	ldr	r3, [pc, #100]	; (800dab0 <HAL_SPDIFRX_Init+0xb4>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800da58:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800da5e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800da64:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800da6a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800da70:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800da76:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800da7c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800da82:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800da88:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	4313      	orrs	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	fff88407 	.word	0xfff88407

0800dab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e01d      	b.n	800db02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7f5 fa72 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	3304      	adds	r3, #4
 800daf0:	4619      	mov	r1, r3
 800daf2:	4610      	mov	r0, r2
 800daf4:	f000 fb78 	bl	800e1e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f042 0201 	orr.w	r2, r2, #1
 800db22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	4b0c      	ldr	r3, [pc, #48]	; (800db5c <HAL_TIM_Base_Start_IT+0x50>)
 800db2c:	4013      	ands	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b06      	cmp	r3, #6
 800db34:	d00b      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x42>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db3c:	d007      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f042 0201 	orr.w	r2, r2, #1
 800db4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	00010007 	.word	0x00010007

0800db60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e01d      	b.n	800dbae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d106      	bne.n	800db8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7f5 fa8a 	bl	80030a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2202      	movs	r2, #2
 800db90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3304      	adds	r3, #4
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	f000 fb22 	bl	800e1e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	f003 0302 	and.w	r3, r3, #2
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d122      	bne.n	800dc12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f003 0302 	and.w	r3, r3, #2
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d11b      	bne.n	800dc12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f06f 0202 	mvn.w	r2, #2
 800dbe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	f003 0303 	and.w	r3, r3, #3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fad7 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800dbfe:	e005      	b.n	800dc0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fac9 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fada 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	f003 0304 	and.w	r3, r3, #4
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d122      	bne.n	800dc66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	f003 0304 	and.w	r3, r3, #4
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	d11b      	bne.n	800dc66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f06f 0204 	mvn.w	r2, #4
 800dc36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 faad 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800dc52:	e005      	b.n	800dc60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fa9f 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fab0 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	f003 0308 	and.w	r3, r3, #8
 800dc70:	2b08      	cmp	r3, #8
 800dc72:	d122      	bne.n	800dcba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b08      	cmp	r3, #8
 800dc80:	d11b      	bne.n	800dcba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f06f 0208 	mvn.w	r2, #8
 800dc8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2204      	movs	r2, #4
 800dc90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	f003 0303 	and.w	r3, r3, #3
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d003      	beq.n	800dca8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fa83 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800dca6:	e005      	b.n	800dcb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fa75 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fa86 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	f003 0310 	and.w	r3, r3, #16
 800dcc4:	2b10      	cmp	r3, #16
 800dcc6:	d122      	bne.n	800dd0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	f003 0310 	and.w	r3, r3, #16
 800dcd2:	2b10      	cmp	r3, #16
 800dcd4:	d11b      	bne.n	800dd0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f06f 0210 	mvn.w	r2, #16
 800dcde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2208      	movs	r2, #8
 800dce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	69db      	ldr	r3, [r3, #28]
 800dcec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d003      	beq.n	800dcfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fa59 	bl	800e1ac <HAL_TIM_IC_CaptureCallback>
 800dcfa:	e005      	b.n	800dd08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fa4b 	bl	800e198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fa5c 	bl	800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d10e      	bne.n	800dd3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d107      	bne.n	800dd3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f06f 0201 	mvn.w	r2, #1
 800dd32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7f4 fd41 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd44:	2b80      	cmp	r3, #128	; 0x80
 800dd46:	d10e      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd52:	2b80      	cmp	r3, #128	; 0x80
 800dd54:	d107      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 feef 	bl	800eb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd74:	d10e      	bne.n	800dd94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd80:	2b80      	cmp	r3, #128	; 0x80
 800dd82:	d107      	bne.n	800dd94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fee2 	bl	800eb58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9e:	2b40      	cmp	r3, #64	; 0x40
 800dda0:	d10e      	bne.n	800ddc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddac:	2b40      	cmp	r3, #64	; 0x40
 800ddae:	d107      	bne.n	800ddc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fa0a 	bl	800e1d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	f003 0320 	and.w	r3, r3, #32
 800ddca:	2b20      	cmp	r3, #32
 800ddcc:	d10e      	bne.n	800ddec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f003 0320 	and.w	r3, r3, #32
 800ddd8:	2b20      	cmp	r3, #32
 800ddda:	d107      	bne.n	800ddec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f06f 0220 	mvn.w	r2, #32
 800dde4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fea2 	bl	800eb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800de0a:	2302      	movs	r3, #2
 800de0c:	e105      	b.n	800e01a <HAL_TIM_PWM_ConfigChannel+0x226>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2202      	movs	r2, #2
 800de1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b14      	cmp	r3, #20
 800de22:	f200 80f0 	bhi.w	800e006 <HAL_TIM_PWM_ConfigChannel+0x212>
 800de26:	a201      	add	r2, pc, #4	; (adr r2, 800de2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800de28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2c:	0800de81 	.word	0x0800de81
 800de30:	0800e007 	.word	0x0800e007
 800de34:	0800e007 	.word	0x0800e007
 800de38:	0800e007 	.word	0x0800e007
 800de3c:	0800dec1 	.word	0x0800dec1
 800de40:	0800e007 	.word	0x0800e007
 800de44:	0800e007 	.word	0x0800e007
 800de48:	0800e007 	.word	0x0800e007
 800de4c:	0800df03 	.word	0x0800df03
 800de50:	0800e007 	.word	0x0800e007
 800de54:	0800e007 	.word	0x0800e007
 800de58:	0800e007 	.word	0x0800e007
 800de5c:	0800df43 	.word	0x0800df43
 800de60:	0800e007 	.word	0x0800e007
 800de64:	0800e007 	.word	0x0800e007
 800de68:	0800e007 	.word	0x0800e007
 800de6c:	0800df85 	.word	0x0800df85
 800de70:	0800e007 	.word	0x0800e007
 800de74:	0800e007 	.word	0x0800e007
 800de78:	0800e007 	.word	0x0800e007
 800de7c:	0800dfc5 	.word	0x0800dfc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fa4e 	bl	800e328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	699a      	ldr	r2, [r3, #24]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f042 0208 	orr.w	r2, r2, #8
 800de9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0204 	bic.w	r2, r2, #4
 800deaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6999      	ldr	r1, [r3, #24]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	691a      	ldr	r2, [r3, #16]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	619a      	str	r2, [r3, #24]
      break;
 800debe:	e0a3      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 faa0 	bl	800e40c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	699a      	ldr	r2, [r3, #24]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	699a      	ldr	r2, [r3, #24]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6999      	ldr	r1, [r3, #24]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	021a      	lsls	r2, r3, #8
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	619a      	str	r2, [r3, #24]
      break;
 800df00:	e082      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 faf7 	bl	800e4fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f042 0208 	orr.w	r2, r2, #8
 800df1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	69da      	ldr	r2, [r3, #28]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f022 0204 	bic.w	r2, r2, #4
 800df2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69d9      	ldr	r1, [r3, #28]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	691a      	ldr	r2, [r3, #16]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	430a      	orrs	r2, r1
 800df3e:	61da      	str	r2, [r3, #28]
      break;
 800df40:	e062      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 fb4d 	bl	800e5e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69da      	ldr	r2, [r3, #28]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	69da      	ldr	r2, [r3, #28]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	69d9      	ldr	r1, [r3, #28]
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	021a      	lsls	r2, r3, #8
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	61da      	str	r2, [r3, #28]
      break;
 800df82:	e041      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f000 fb84 	bl	800e698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f042 0208 	orr.w	r2, r2, #8
 800df9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f022 0204 	bic.w	r2, r2, #4
 800dfae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	691a      	ldr	r2, [r3, #16]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	430a      	orrs	r2, r1
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dfc2:	e021      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fbb6 	bl	800e73c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	691b      	ldr	r3, [r3, #16]
 800dffa:	021a      	lsls	r2, r3, #8
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e004:	e000      	b.n	800e008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e006:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop

0800e024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e034:	2b01      	cmp	r3, #1
 800e036:	d101      	bne.n	800e03c <HAL_TIM_ConfigClockSource+0x18>
 800e038:	2302      	movs	r3, #2
 800e03a:	e0a6      	b.n	800e18a <HAL_TIM_ConfigClockSource+0x166>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2202      	movs	r2, #2
 800e048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <HAL_TIM_ConfigClockSource+0x170>)
 800e058:	4013      	ands	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e062:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b40      	cmp	r3, #64	; 0x40
 800e072:	d067      	beq.n	800e144 <HAL_TIM_ConfigClockSource+0x120>
 800e074:	2b40      	cmp	r3, #64	; 0x40
 800e076:	d80b      	bhi.n	800e090 <HAL_TIM_ConfigClockSource+0x6c>
 800e078:	2b10      	cmp	r3, #16
 800e07a:	d073      	beq.n	800e164 <HAL_TIM_ConfigClockSource+0x140>
 800e07c:	2b10      	cmp	r3, #16
 800e07e:	d802      	bhi.n	800e086 <HAL_TIM_ConfigClockSource+0x62>
 800e080:	2b00      	cmp	r3, #0
 800e082:	d06f      	beq.n	800e164 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e084:	e078      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e086:	2b20      	cmp	r3, #32
 800e088:	d06c      	beq.n	800e164 <HAL_TIM_ConfigClockSource+0x140>
 800e08a:	2b30      	cmp	r3, #48	; 0x30
 800e08c:	d06a      	beq.n	800e164 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e08e:	e073      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e090:	2b70      	cmp	r3, #112	; 0x70
 800e092:	d00d      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x8c>
 800e094:	2b70      	cmp	r3, #112	; 0x70
 800e096:	d804      	bhi.n	800e0a2 <HAL_TIM_ConfigClockSource+0x7e>
 800e098:	2b50      	cmp	r3, #80	; 0x50
 800e09a:	d033      	beq.n	800e104 <HAL_TIM_ConfigClockSource+0xe0>
 800e09c:	2b60      	cmp	r3, #96	; 0x60
 800e09e:	d041      	beq.n	800e124 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e0a0:	e06a      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0a6:	d066      	beq.n	800e176 <HAL_TIM_ConfigClockSource+0x152>
 800e0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0ac:	d017      	beq.n	800e0de <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e0ae:	e063      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6818      	ldr	r0, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	6899      	ldr	r1, [r3, #8]
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f000 fc0a 	bl	800e8d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e0d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	609a      	str	r2, [r3, #8]
      break;
 800e0dc:	e04c      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	6899      	ldr	r1, [r3, #8]
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	685a      	ldr	r2, [r3, #4]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f000 fbf3 	bl	800e8d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	689a      	ldr	r2, [r3, #8]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e100:	609a      	str	r2, [r3, #8]
      break;
 800e102:	e039      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6818      	ldr	r0, [r3, #0]
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	6859      	ldr	r1, [r3, #4]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	461a      	mov	r2, r3
 800e112:	f000 fb67 	bl	800e7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2150      	movs	r1, #80	; 0x50
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 fbc0 	bl	800e8a2 <TIM_ITRx_SetConfig>
      break;
 800e122:	e029      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6818      	ldr	r0, [r3, #0]
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	6859      	ldr	r1, [r3, #4]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	461a      	mov	r2, r3
 800e132:	f000 fb86 	bl	800e842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2160      	movs	r1, #96	; 0x60
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 fbb0 	bl	800e8a2 <TIM_ITRx_SetConfig>
      break;
 800e142:	e019      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6818      	ldr	r0, [r3, #0]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	6859      	ldr	r1, [r3, #4]
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	461a      	mov	r2, r3
 800e152:	f000 fb47 	bl	800e7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2140      	movs	r1, #64	; 0x40
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 fba0 	bl	800e8a2 <TIM_ITRx_SetConfig>
      break;
 800e162:	e009      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4619      	mov	r1, r3
 800e16e:	4610      	mov	r0, r2
 800e170:	f000 fb97 	bl	800e8a2 <TIM_ITRx_SetConfig>
      break;
 800e174:	e000      	b.n	800e178 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	fffeff88 	.word	0xfffeff88

0800e198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a40      	ldr	r2, [pc, #256]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d013      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e206:	d00f      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a3d      	ldr	r2, [pc, #244]	; (800e300 <TIM_Base_SetConfig+0x118>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d00b      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a3c      	ldr	r2, [pc, #240]	; (800e304 <TIM_Base_SetConfig+0x11c>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d007      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a3b      	ldr	r2, [pc, #236]	; (800e308 <TIM_Base_SetConfig+0x120>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d003      	beq.n	800e228 <TIM_Base_SetConfig+0x40>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a3a      	ldr	r2, [pc, #232]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d108      	bne.n	800e23a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	4313      	orrs	r3, r2
 800e238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a2f      	ldr	r2, [pc, #188]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d02b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e248:	d027      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a2c      	ldr	r2, [pc, #176]	; (800e300 <TIM_Base_SetConfig+0x118>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d023      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a2b      	ldr	r2, [pc, #172]	; (800e304 <TIM_Base_SetConfig+0x11c>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d01f      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a2a      	ldr	r2, [pc, #168]	; (800e308 <TIM_Base_SetConfig+0x120>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d01b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a29      	ldr	r2, [pc, #164]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d017      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a28      	ldr	r2, [pc, #160]	; (800e310 <TIM_Base_SetConfig+0x128>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d013      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a27      	ldr	r2, [pc, #156]	; (800e314 <TIM_Base_SetConfig+0x12c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d00f      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a26      	ldr	r2, [pc, #152]	; (800e318 <TIM_Base_SetConfig+0x130>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00b      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a25      	ldr	r2, [pc, #148]	; (800e31c <TIM_Base_SetConfig+0x134>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d007      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a24      	ldr	r2, [pc, #144]	; (800e320 <TIM_Base_SetConfig+0x138>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d003      	beq.n	800e29a <TIM_Base_SetConfig+0xb2>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a23      	ldr	r2, [pc, #140]	; (800e324 <TIM_Base_SetConfig+0x13c>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d108      	bne.n	800e2ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a0a      	ldr	r2, [pc, #40]	; (800e2fc <TIM_Base_SetConfig+0x114>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d003      	beq.n	800e2e0 <TIM_Base_SetConfig+0xf8>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a0c      	ldr	r2, [pc, #48]	; (800e30c <TIM_Base_SetConfig+0x124>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d103      	bne.n	800e2e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	691a      	ldr	r2, [r3, #16]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	615a      	str	r2, [r3, #20]
}
 800e2ee:	bf00      	nop
 800e2f0:	3714      	adds	r7, #20
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	40010000 	.word	0x40010000
 800e300:	40000400 	.word	0x40000400
 800e304:	40000800 	.word	0x40000800
 800e308:	40000c00 	.word	0x40000c00
 800e30c:	40010400 	.word	0x40010400
 800e310:	40014000 	.word	0x40014000
 800e314:	40014400 	.word	0x40014400
 800e318:	40014800 	.word	0x40014800
 800e31c:	40001800 	.word	0x40001800
 800e320:	40001c00 	.word	0x40001c00
 800e324:	40002000 	.word	0x40002000

0800e328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	f023 0201 	bic.w	r2, r3, #1
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4b2b      	ldr	r3, [pc, #172]	; (800e400 <TIM_OC1_SetConfig+0xd8>)
 800e354:	4013      	ands	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f023 0303 	bic.w	r3, r3, #3
 800e35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	4313      	orrs	r3, r2
 800e368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f023 0302 	bic.w	r3, r3, #2
 800e370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4313      	orrs	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a21      	ldr	r2, [pc, #132]	; (800e404 <TIM_OC1_SetConfig+0xdc>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d003      	beq.n	800e38c <TIM_OC1_SetConfig+0x64>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a20      	ldr	r2, [pc, #128]	; (800e408 <TIM_OC1_SetConfig+0xe0>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d10c      	bne.n	800e3a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f023 0308 	bic.w	r3, r3, #8
 800e392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	697a      	ldr	r2, [r7, #20]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f023 0304 	bic.w	r3, r3, #4
 800e3a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a16      	ldr	r2, [pc, #88]	; (800e404 <TIM_OC1_SetConfig+0xdc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d003      	beq.n	800e3b6 <TIM_OC1_SetConfig+0x8e>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a15      	ldr	r2, [pc, #84]	; (800e408 <TIM_OC1_SetConfig+0xe0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d111      	bne.n	800e3da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	697a      	ldr	r2, [r7, #20]
 800e3f2:	621a      	str	r2, [r3, #32]
}
 800e3f4:	bf00      	nop
 800e3f6:	371c      	adds	r7, #28
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	fffeff8f 	.word	0xfffeff8f
 800e404:	40010000 	.word	0x40010000
 800e408:	40010400 	.word	0x40010400

0800e40c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	f023 0210 	bic.w	r2, r3, #16
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4b2e      	ldr	r3, [pc, #184]	; (800e4f0 <TIM_OC2_SetConfig+0xe4>)
 800e438:	4013      	ands	r3, r2
 800e43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	021b      	lsls	r3, r3, #8
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	4313      	orrs	r3, r2
 800e44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f023 0320 	bic.w	r3, r3, #32
 800e456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	011b      	lsls	r3, r3, #4
 800e45e:	697a      	ldr	r2, [r7, #20]
 800e460:	4313      	orrs	r3, r2
 800e462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a23      	ldr	r2, [pc, #140]	; (800e4f4 <TIM_OC2_SetConfig+0xe8>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d003      	beq.n	800e474 <TIM_OC2_SetConfig+0x68>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a22      	ldr	r2, [pc, #136]	; (800e4f8 <TIM_OC2_SetConfig+0xec>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d10d      	bne.n	800e490 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	011b      	lsls	r3, r3, #4
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	4313      	orrs	r3, r2
 800e486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e48e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a18      	ldr	r2, [pc, #96]	; (800e4f4 <TIM_OC2_SetConfig+0xe8>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d003      	beq.n	800e4a0 <TIM_OC2_SetConfig+0x94>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a17      	ldr	r2, [pc, #92]	; (800e4f8 <TIM_OC2_SetConfig+0xec>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d113      	bne.n	800e4c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	697a      	ldr	r2, [r7, #20]
 800e4e0:	621a      	str	r2, [r3, #32]
}
 800e4e2:	bf00      	nop
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	feff8fff 	.word	0xfeff8fff
 800e4f4:	40010000 	.word	0x40010000
 800e4f8:	40010400 	.word	0x40010400

0800e4fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	4b2d      	ldr	r3, [pc, #180]	; (800e5dc <TIM_OC3_SetConfig+0xe0>)
 800e528:	4013      	ands	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0303 	bic.w	r3, r3, #3
 800e532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a22      	ldr	r2, [pc, #136]	; (800e5e0 <TIM_OC3_SetConfig+0xe4>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d003      	beq.n	800e562 <TIM_OC3_SetConfig+0x66>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a21      	ldr	r2, [pc, #132]	; (800e5e4 <TIM_OC3_SetConfig+0xe8>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d10d      	bne.n	800e57e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	021b      	lsls	r3, r3, #8
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	4313      	orrs	r3, r2
 800e574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e57c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a17      	ldr	r2, [pc, #92]	; (800e5e0 <TIM_OC3_SetConfig+0xe4>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d003      	beq.n	800e58e <TIM_OC3_SetConfig+0x92>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a16      	ldr	r2, [pc, #88]	; (800e5e4 <TIM_OC3_SetConfig+0xe8>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d113      	bne.n	800e5b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e59c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	011b      	lsls	r3, r3, #4
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	011b      	lsls	r3, r3, #4
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	621a      	str	r2, [r3, #32]
}
 800e5d0:	bf00      	nop
 800e5d2:	371c      	adds	r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	fffeff8f 	.word	0xfffeff8f
 800e5e0:	40010000 	.word	0x40010000
 800e5e4:	40010400 	.word	0x40010400

0800e5e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	4b1e      	ldr	r3, [pc, #120]	; (800e68c <TIM_OC4_SetConfig+0xa4>)
 800e614:	4013      	ands	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	021b      	lsls	r3, r3, #8
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	4313      	orrs	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	031b      	lsls	r3, r3, #12
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a13      	ldr	r2, [pc, #76]	; (800e690 <TIM_OC4_SetConfig+0xa8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d003      	beq.n	800e650 <TIM_OC4_SetConfig+0x68>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a12      	ldr	r2, [pc, #72]	; (800e694 <TIM_OC4_SetConfig+0xac>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d109      	bne.n	800e664 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	019b      	lsls	r3, r3, #6
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	4313      	orrs	r3, r2
 800e662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	621a      	str	r2, [r3, #32]
}
 800e67e:	bf00      	nop
 800e680:	371c      	adds	r7, #28
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	feff8fff 	.word	0xfeff8fff
 800e690:	40010000 	.word	0x40010000
 800e694:	40010400 	.word	0x40010400

0800e698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e698:	b480      	push	{r7}
 800e69a:	b087      	sub	sp, #28
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a1b      	ldr	r3, [r3, #32]
 800e6b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <TIM_OC5_SetConfig+0x98>)
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e6d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	041b      	lsls	r3, r3, #16
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a12      	ldr	r2, [pc, #72]	; (800e734 <TIM_OC5_SetConfig+0x9c>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d003      	beq.n	800e6f6 <TIM_OC5_SetConfig+0x5e>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a11      	ldr	r2, [pc, #68]	; (800e738 <TIM_OC5_SetConfig+0xa0>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d109      	bne.n	800e70a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	021b      	lsls	r3, r3, #8
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	4313      	orrs	r3, r2
 800e708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	621a      	str	r2, [r3, #32]
}
 800e724:	bf00      	nop
 800e726:	371c      	adds	r7, #28
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	fffeff8f 	.word	0xfffeff8f
 800e734:	40010000 	.word	0x40010000
 800e738:	40010400 	.word	0x40010400

0800e73c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b087      	sub	sp, #28
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a1b      	ldr	r3, [r3, #32]
 800e74a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	4b1c      	ldr	r3, [pc, #112]	; (800e7d8 <TIM_OC6_SetConfig+0x9c>)
 800e768:	4013      	ands	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	021b      	lsls	r3, r3, #8
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	4313      	orrs	r3, r2
 800e776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e77e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	051b      	lsls	r3, r3, #20
 800e786:	693a      	ldr	r2, [r7, #16]
 800e788:	4313      	orrs	r3, r2
 800e78a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a13      	ldr	r2, [pc, #76]	; (800e7dc <TIM_OC6_SetConfig+0xa0>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d003      	beq.n	800e79c <TIM_OC6_SetConfig+0x60>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a12      	ldr	r2, [pc, #72]	; (800e7e0 <TIM_OC6_SetConfig+0xa4>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d109      	bne.n	800e7b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	695b      	ldr	r3, [r3, #20]
 800e7a8:	029b      	lsls	r3, r3, #10
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	685a      	ldr	r2, [r3, #4]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	621a      	str	r2, [r3, #32]
}
 800e7ca:	bf00      	nop
 800e7cc:	371c      	adds	r7, #28
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	feff8fff 	.word	0xfeff8fff
 800e7dc:	40010000 	.word	0x40010000
 800e7e0:	40010400 	.word	0x40010400

0800e7e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b087      	sub	sp, #28
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a1b      	ldr	r3, [r3, #32]
 800e7f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6a1b      	ldr	r3, [r3, #32]
 800e7fa:	f023 0201 	bic.w	r2, r3, #1
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	699b      	ldr	r3, [r3, #24]
 800e806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	693a      	ldr	r2, [r7, #16]
 800e816:	4313      	orrs	r3, r2
 800e818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	f023 030a 	bic.w	r3, r3, #10
 800e820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	4313      	orrs	r3, r2
 800e828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	621a      	str	r2, [r3, #32]
}
 800e836:	bf00      	nop
 800e838:	371c      	adds	r7, #28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e842:	b480      	push	{r7}
 800e844:	b087      	sub	sp, #28
 800e846:	af00      	add	r7, sp, #0
 800e848:	60f8      	str	r0, [r7, #12]
 800e84a:	60b9      	str	r1, [r7, #8]
 800e84c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	f023 0210 	bic.w	r2, r3, #16
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6a1b      	ldr	r3, [r3, #32]
 800e864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e86c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	031b      	lsls	r3, r3, #12
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	4313      	orrs	r3, r2
 800e876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e87e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	4313      	orrs	r3, r2
 800e888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	621a      	str	r2, [r3, #32]
}
 800e896:	bf00      	nop
 800e898:	371c      	adds	r7, #28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b085      	sub	sp, #20
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e8ba:	683a      	ldr	r2, [r7, #0]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	f043 0307 	orr.w	r3, r3, #7
 800e8c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	609a      	str	r2, [r3, #8]
}
 800e8cc:	bf00      	nop
 800e8ce:	3714      	adds	r7, #20
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b087      	sub	sp, #28
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	021a      	lsls	r2, r3, #8
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	697a      	ldr	r2, [r7, #20]
 800e902:	4313      	orrs	r3, r2
 800e904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	609a      	str	r2, [r3, #8]
}
 800e90c:	bf00      	nop
 800e90e:	371c      	adds	r7, #28
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d101      	bne.n	800e930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e92c:	2302      	movs	r3, #2
 800e92e:	e06d      	b.n	800ea0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a30      	ldr	r2, [pc, #192]	; (800ea18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d004      	beq.n	800e964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a2f      	ldr	r2, [pc, #188]	; (800ea1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d108      	bne.n	800e976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e96a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	4313      	orrs	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a20      	ldr	r2, [pc, #128]	; (800ea18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d022      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9a2:	d01d      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a1d      	ldr	r2, [pc, #116]	; (800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d018      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a1c      	ldr	r2, [pc, #112]	; (800ea24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d013      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a1a      	ldr	r2, [pc, #104]	; (800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d00e      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a15      	ldr	r2, [pc, #84]	; (800ea1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d009      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a16      	ldr	r2, [pc, #88]	; (800ea2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d004      	beq.n	800e9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a15      	ldr	r2, [pc, #84]	; (800ea30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d10c      	bne.n	800e9fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3714      	adds	r7, #20
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	40010000 	.word	0x40010000
 800ea1c:	40010400 	.word	0x40010400
 800ea20:	40000400 	.word	0x40000400
 800ea24:	40000800 	.word	0x40000800
 800ea28:	40000c00 	.word	0x40000c00
 800ea2c:	40014000 	.word	0x40014000
 800ea30:	40001800 	.word	0x40001800

0800ea34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d101      	bne.n	800ea50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	e065      	b.n	800eb1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	695b      	ldr	r3, [r3, #20]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	041b      	lsls	r3, r3, #16
 800eac6:	4313      	orrs	r3, r2
 800eac8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a16      	ldr	r2, [pc, #88]	; (800eb28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d004      	beq.n	800eade <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a14      	ldr	r2, [pc, #80]	; (800eb2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d115      	bne.n	800eb0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	051b      	lsls	r3, r3, #20
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	69db      	ldr	r3, [r3, #28]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	40010000 	.word	0x40010000
 800eb2c:	40010400 	.word	0x40010400

0800eb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb38:	bf00      	nop
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e040      	b.n	800ec00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d106      	bne.n	800eb94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f4 fb74 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2224      	movs	r2, #36	; 0x24
 800eb98:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f022 0201 	bic.w	r2, r2, #1
 800eba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f8be 	bl	800ed2c <UART_SetConfig>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d101      	bne.n	800ebba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e022      	b.n	800ec00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d002      	beq.n	800ebc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fb5c 	bl	800f280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ebd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689a      	ldr	r2, [r3, #8]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ebe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f042 0201 	orr.w	r2, r2, #1
 800ebf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fbe3 	bl	800f3c4 <UART_CheckIdleState>
 800ebfe:	4603      	mov	r3, r0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b08a      	sub	sp, #40	; 0x28
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	603b      	str	r3, [r7, #0]
 800ec14:	4613      	mov	r3, r2
 800ec16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d17f      	bne.n	800ed20 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d002      	beq.n	800ec2c <HAL_UART_Transmit+0x24>
 800ec26:	88fb      	ldrh	r3, [r7, #6]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e078      	b.n	800ed22 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d101      	bne.n	800ec3e <HAL_UART_Transmit+0x36>
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	e071      	b.n	800ed22 <HAL_UART_Transmit+0x11a>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2221      	movs	r2, #33	; 0x21
 800ec50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ec52:	f7f7 fdf3 	bl	800683c <HAL_GetTick>
 800ec56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	88fa      	ldrh	r2, [r7, #6]
 800ec5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	88fa      	ldrh	r2, [r7, #6]
 800ec64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec70:	d108      	bne.n	800ec84 <HAL_UART_Transmit+0x7c>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d104      	bne.n	800ec84 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	61bb      	str	r3, [r7, #24]
 800ec82:	e003      	b.n	800ec8c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ec94:	e02c      	b.n	800ecf0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2180      	movs	r1, #128	; 0x80
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 fbbe 	bl	800f422 <UART_WaitOnFlagUntilTimeout>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e038      	b.n	800ed22 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10b      	bne.n	800ecce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	881b      	ldrh	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	3302      	adds	r3, #2
 800ecca:	61bb      	str	r3, [r7, #24]
 800eccc:	e007      	b.n	800ecde <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	781a      	ldrb	r2, [r3, #0]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	3b01      	subs	r3, #1
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1cc      	bne.n	800ec96 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	2200      	movs	r2, #0
 800ed04:	2140      	movs	r1, #64	; 0x40
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f000 fb8b 	bl	800f422 <UART_WaitOnFlagUntilTimeout>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e005      	b.n	800ed22 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2220      	movs	r2, #32
 800ed1a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e000      	b.n	800ed22 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ed20:	2302      	movs	r3, #2
  }
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3720      	adds	r7, #32
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
	...

0800ed2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ed34:	2300      	movs	r3, #0
 800ed36:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	689a      	ldr	r2, [r3, #8]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	431a      	orrs	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	69db      	ldr	r3, [r3, #28]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	4bb1      	ldr	r3, [pc, #708]	; (800f020 <UART_SetConfig+0x2f4>)
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	6939      	ldr	r1, [r7, #16]
 800ed64:	430b      	orrs	r3, r1
 800ed66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	699b      	ldr	r3, [r3, #24]
 800ed82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	430a      	orrs	r2, r1
 800eda0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a9f      	ldr	r2, [pc, #636]	; (800f024 <UART_SetConfig+0x2f8>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d121      	bne.n	800edf0 <UART_SetConfig+0xc4>
 800edac:	4b9e      	ldr	r3, [pc, #632]	; (800f028 <UART_SetConfig+0x2fc>)
 800edae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edb2:	f003 0303 	and.w	r3, r3, #3
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d816      	bhi.n	800ede8 <UART_SetConfig+0xbc>
 800edba:	a201      	add	r2, pc, #4	; (adr r2, 800edc0 <UART_SetConfig+0x94>)
 800edbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc0:	0800edd1 	.word	0x0800edd1
 800edc4:	0800eddd 	.word	0x0800eddd
 800edc8:	0800edd7 	.word	0x0800edd7
 800edcc:	0800ede3 	.word	0x0800ede3
 800edd0:	2301      	movs	r3, #1
 800edd2:	77fb      	strb	r3, [r7, #31]
 800edd4:	e151      	b.n	800f07a <UART_SetConfig+0x34e>
 800edd6:	2302      	movs	r3, #2
 800edd8:	77fb      	strb	r3, [r7, #31]
 800edda:	e14e      	b.n	800f07a <UART_SetConfig+0x34e>
 800eddc:	2304      	movs	r3, #4
 800edde:	77fb      	strb	r3, [r7, #31]
 800ede0:	e14b      	b.n	800f07a <UART_SetConfig+0x34e>
 800ede2:	2308      	movs	r3, #8
 800ede4:	77fb      	strb	r3, [r7, #31]
 800ede6:	e148      	b.n	800f07a <UART_SetConfig+0x34e>
 800ede8:	2310      	movs	r3, #16
 800edea:	77fb      	strb	r3, [r7, #31]
 800edec:	bf00      	nop
 800edee:	e144      	b.n	800f07a <UART_SetConfig+0x34e>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a8d      	ldr	r2, [pc, #564]	; (800f02c <UART_SetConfig+0x300>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d134      	bne.n	800ee64 <UART_SetConfig+0x138>
 800edfa:	4b8b      	ldr	r3, [pc, #556]	; (800f028 <UART_SetConfig+0x2fc>)
 800edfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee00:	f003 030c 	and.w	r3, r3, #12
 800ee04:	2b0c      	cmp	r3, #12
 800ee06:	d829      	bhi.n	800ee5c <UART_SetConfig+0x130>
 800ee08:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <UART_SetConfig+0xe4>)
 800ee0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0e:	bf00      	nop
 800ee10:	0800ee45 	.word	0x0800ee45
 800ee14:	0800ee5d 	.word	0x0800ee5d
 800ee18:	0800ee5d 	.word	0x0800ee5d
 800ee1c:	0800ee5d 	.word	0x0800ee5d
 800ee20:	0800ee51 	.word	0x0800ee51
 800ee24:	0800ee5d 	.word	0x0800ee5d
 800ee28:	0800ee5d 	.word	0x0800ee5d
 800ee2c:	0800ee5d 	.word	0x0800ee5d
 800ee30:	0800ee4b 	.word	0x0800ee4b
 800ee34:	0800ee5d 	.word	0x0800ee5d
 800ee38:	0800ee5d 	.word	0x0800ee5d
 800ee3c:	0800ee5d 	.word	0x0800ee5d
 800ee40:	0800ee57 	.word	0x0800ee57
 800ee44:	2300      	movs	r3, #0
 800ee46:	77fb      	strb	r3, [r7, #31]
 800ee48:	e117      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	77fb      	strb	r3, [r7, #31]
 800ee4e:	e114      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee50:	2304      	movs	r3, #4
 800ee52:	77fb      	strb	r3, [r7, #31]
 800ee54:	e111      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee56:	2308      	movs	r3, #8
 800ee58:	77fb      	strb	r3, [r7, #31]
 800ee5a:	e10e      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee5c:	2310      	movs	r3, #16
 800ee5e:	77fb      	strb	r3, [r7, #31]
 800ee60:	bf00      	nop
 800ee62:	e10a      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a71      	ldr	r2, [pc, #452]	; (800f030 <UART_SetConfig+0x304>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d120      	bne.n	800eeb0 <UART_SetConfig+0x184>
 800ee6e:	4b6e      	ldr	r3, [pc, #440]	; (800f028 <UART_SetConfig+0x2fc>)
 800ee70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee78:	2b10      	cmp	r3, #16
 800ee7a:	d00f      	beq.n	800ee9c <UART_SetConfig+0x170>
 800ee7c:	2b10      	cmp	r3, #16
 800ee7e:	d802      	bhi.n	800ee86 <UART_SetConfig+0x15a>
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <UART_SetConfig+0x164>
 800ee84:	e010      	b.n	800eea8 <UART_SetConfig+0x17c>
 800ee86:	2b20      	cmp	r3, #32
 800ee88:	d005      	beq.n	800ee96 <UART_SetConfig+0x16a>
 800ee8a:	2b30      	cmp	r3, #48	; 0x30
 800ee8c:	d009      	beq.n	800eea2 <UART_SetConfig+0x176>
 800ee8e:	e00b      	b.n	800eea8 <UART_SetConfig+0x17c>
 800ee90:	2300      	movs	r3, #0
 800ee92:	77fb      	strb	r3, [r7, #31]
 800ee94:	e0f1      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee96:	2302      	movs	r3, #2
 800ee98:	77fb      	strb	r3, [r7, #31]
 800ee9a:	e0ee      	b.n	800f07a <UART_SetConfig+0x34e>
 800ee9c:	2304      	movs	r3, #4
 800ee9e:	77fb      	strb	r3, [r7, #31]
 800eea0:	e0eb      	b.n	800f07a <UART_SetConfig+0x34e>
 800eea2:	2308      	movs	r3, #8
 800eea4:	77fb      	strb	r3, [r7, #31]
 800eea6:	e0e8      	b.n	800f07a <UART_SetConfig+0x34e>
 800eea8:	2310      	movs	r3, #16
 800eeaa:	77fb      	strb	r3, [r7, #31]
 800eeac:	bf00      	nop
 800eeae:	e0e4      	b.n	800f07a <UART_SetConfig+0x34e>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a5f      	ldr	r2, [pc, #380]	; (800f034 <UART_SetConfig+0x308>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d120      	bne.n	800eefc <UART_SetConfig+0x1d0>
 800eeba:	4b5b      	ldr	r3, [pc, #364]	; (800f028 <UART_SetConfig+0x2fc>)
 800eebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eec0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eec4:	2b40      	cmp	r3, #64	; 0x40
 800eec6:	d00f      	beq.n	800eee8 <UART_SetConfig+0x1bc>
 800eec8:	2b40      	cmp	r3, #64	; 0x40
 800eeca:	d802      	bhi.n	800eed2 <UART_SetConfig+0x1a6>
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d005      	beq.n	800eedc <UART_SetConfig+0x1b0>
 800eed0:	e010      	b.n	800eef4 <UART_SetConfig+0x1c8>
 800eed2:	2b80      	cmp	r3, #128	; 0x80
 800eed4:	d005      	beq.n	800eee2 <UART_SetConfig+0x1b6>
 800eed6:	2bc0      	cmp	r3, #192	; 0xc0
 800eed8:	d009      	beq.n	800eeee <UART_SetConfig+0x1c2>
 800eeda:	e00b      	b.n	800eef4 <UART_SetConfig+0x1c8>
 800eedc:	2300      	movs	r3, #0
 800eede:	77fb      	strb	r3, [r7, #31]
 800eee0:	e0cb      	b.n	800f07a <UART_SetConfig+0x34e>
 800eee2:	2302      	movs	r3, #2
 800eee4:	77fb      	strb	r3, [r7, #31]
 800eee6:	e0c8      	b.n	800f07a <UART_SetConfig+0x34e>
 800eee8:	2304      	movs	r3, #4
 800eeea:	77fb      	strb	r3, [r7, #31]
 800eeec:	e0c5      	b.n	800f07a <UART_SetConfig+0x34e>
 800eeee:	2308      	movs	r3, #8
 800eef0:	77fb      	strb	r3, [r7, #31]
 800eef2:	e0c2      	b.n	800f07a <UART_SetConfig+0x34e>
 800eef4:	2310      	movs	r3, #16
 800eef6:	77fb      	strb	r3, [r7, #31]
 800eef8:	bf00      	nop
 800eefa:	e0be      	b.n	800f07a <UART_SetConfig+0x34e>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a4d      	ldr	r2, [pc, #308]	; (800f038 <UART_SetConfig+0x30c>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d124      	bne.n	800ef50 <UART_SetConfig+0x224>
 800ef06:	4b48      	ldr	r3, [pc, #288]	; (800f028 <UART_SetConfig+0x2fc>)
 800ef08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef14:	d012      	beq.n	800ef3c <UART_SetConfig+0x210>
 800ef16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef1a:	d802      	bhi.n	800ef22 <UART_SetConfig+0x1f6>
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d007      	beq.n	800ef30 <UART_SetConfig+0x204>
 800ef20:	e012      	b.n	800ef48 <UART_SetConfig+0x21c>
 800ef22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef26:	d006      	beq.n	800ef36 <UART_SetConfig+0x20a>
 800ef28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef2c:	d009      	beq.n	800ef42 <UART_SetConfig+0x216>
 800ef2e:	e00b      	b.n	800ef48 <UART_SetConfig+0x21c>
 800ef30:	2300      	movs	r3, #0
 800ef32:	77fb      	strb	r3, [r7, #31]
 800ef34:	e0a1      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef36:	2302      	movs	r3, #2
 800ef38:	77fb      	strb	r3, [r7, #31]
 800ef3a:	e09e      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	77fb      	strb	r3, [r7, #31]
 800ef40:	e09b      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef42:	2308      	movs	r3, #8
 800ef44:	77fb      	strb	r3, [r7, #31]
 800ef46:	e098      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef48:	2310      	movs	r3, #16
 800ef4a:	77fb      	strb	r3, [r7, #31]
 800ef4c:	bf00      	nop
 800ef4e:	e094      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a39      	ldr	r2, [pc, #228]	; (800f03c <UART_SetConfig+0x310>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d124      	bne.n	800efa4 <UART_SetConfig+0x278>
 800ef5a:	4b33      	ldr	r3, [pc, #204]	; (800f028 <UART_SetConfig+0x2fc>)
 800ef5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef68:	d012      	beq.n	800ef90 <UART_SetConfig+0x264>
 800ef6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef6e:	d802      	bhi.n	800ef76 <UART_SetConfig+0x24a>
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d007      	beq.n	800ef84 <UART_SetConfig+0x258>
 800ef74:	e012      	b.n	800ef9c <UART_SetConfig+0x270>
 800ef76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef7a:	d006      	beq.n	800ef8a <UART_SetConfig+0x25e>
 800ef7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef80:	d009      	beq.n	800ef96 <UART_SetConfig+0x26a>
 800ef82:	e00b      	b.n	800ef9c <UART_SetConfig+0x270>
 800ef84:	2301      	movs	r3, #1
 800ef86:	77fb      	strb	r3, [r7, #31]
 800ef88:	e077      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef8a:	2302      	movs	r3, #2
 800ef8c:	77fb      	strb	r3, [r7, #31]
 800ef8e:	e074      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef90:	2304      	movs	r3, #4
 800ef92:	77fb      	strb	r3, [r7, #31]
 800ef94:	e071      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef96:	2308      	movs	r3, #8
 800ef98:	77fb      	strb	r3, [r7, #31]
 800ef9a:	e06e      	b.n	800f07a <UART_SetConfig+0x34e>
 800ef9c:	2310      	movs	r3, #16
 800ef9e:	77fb      	strb	r3, [r7, #31]
 800efa0:	bf00      	nop
 800efa2:	e06a      	b.n	800f07a <UART_SetConfig+0x34e>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a25      	ldr	r2, [pc, #148]	; (800f040 <UART_SetConfig+0x314>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d124      	bne.n	800eff8 <UART_SetConfig+0x2cc>
 800efae:	4b1e      	ldr	r3, [pc, #120]	; (800f028 <UART_SetConfig+0x2fc>)
 800efb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800efb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efbc:	d012      	beq.n	800efe4 <UART_SetConfig+0x2b8>
 800efbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efc2:	d802      	bhi.n	800efca <UART_SetConfig+0x29e>
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d007      	beq.n	800efd8 <UART_SetConfig+0x2ac>
 800efc8:	e012      	b.n	800eff0 <UART_SetConfig+0x2c4>
 800efca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efce:	d006      	beq.n	800efde <UART_SetConfig+0x2b2>
 800efd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efd4:	d009      	beq.n	800efea <UART_SetConfig+0x2be>
 800efd6:	e00b      	b.n	800eff0 <UART_SetConfig+0x2c4>
 800efd8:	2300      	movs	r3, #0
 800efda:	77fb      	strb	r3, [r7, #31]
 800efdc:	e04d      	b.n	800f07a <UART_SetConfig+0x34e>
 800efde:	2302      	movs	r3, #2
 800efe0:	77fb      	strb	r3, [r7, #31]
 800efe2:	e04a      	b.n	800f07a <UART_SetConfig+0x34e>
 800efe4:	2304      	movs	r3, #4
 800efe6:	77fb      	strb	r3, [r7, #31]
 800efe8:	e047      	b.n	800f07a <UART_SetConfig+0x34e>
 800efea:	2308      	movs	r3, #8
 800efec:	77fb      	strb	r3, [r7, #31]
 800efee:	e044      	b.n	800f07a <UART_SetConfig+0x34e>
 800eff0:	2310      	movs	r3, #16
 800eff2:	77fb      	strb	r3, [r7, #31]
 800eff4:	bf00      	nop
 800eff6:	e040      	b.n	800f07a <UART_SetConfig+0x34e>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a11      	ldr	r2, [pc, #68]	; (800f044 <UART_SetConfig+0x318>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d139      	bne.n	800f076 <UART_SetConfig+0x34a>
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <UART_SetConfig+0x2fc>)
 800f004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f00c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f010:	d027      	beq.n	800f062 <UART_SetConfig+0x336>
 800f012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f016:	d817      	bhi.n	800f048 <UART_SetConfig+0x31c>
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d01c      	beq.n	800f056 <UART_SetConfig+0x32a>
 800f01c:	e027      	b.n	800f06e <UART_SetConfig+0x342>
 800f01e:	bf00      	nop
 800f020:	efff69f3 	.word	0xefff69f3
 800f024:	40011000 	.word	0x40011000
 800f028:	40023800 	.word	0x40023800
 800f02c:	40004400 	.word	0x40004400
 800f030:	40004800 	.word	0x40004800
 800f034:	40004c00 	.word	0x40004c00
 800f038:	40005000 	.word	0x40005000
 800f03c:	40011400 	.word	0x40011400
 800f040:	40007800 	.word	0x40007800
 800f044:	40007c00 	.word	0x40007c00
 800f048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f04c:	d006      	beq.n	800f05c <UART_SetConfig+0x330>
 800f04e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f052:	d009      	beq.n	800f068 <UART_SetConfig+0x33c>
 800f054:	e00b      	b.n	800f06e <UART_SetConfig+0x342>
 800f056:	2300      	movs	r3, #0
 800f058:	77fb      	strb	r3, [r7, #31]
 800f05a:	e00e      	b.n	800f07a <UART_SetConfig+0x34e>
 800f05c:	2302      	movs	r3, #2
 800f05e:	77fb      	strb	r3, [r7, #31]
 800f060:	e00b      	b.n	800f07a <UART_SetConfig+0x34e>
 800f062:	2304      	movs	r3, #4
 800f064:	77fb      	strb	r3, [r7, #31]
 800f066:	e008      	b.n	800f07a <UART_SetConfig+0x34e>
 800f068:	2308      	movs	r3, #8
 800f06a:	77fb      	strb	r3, [r7, #31]
 800f06c:	e005      	b.n	800f07a <UART_SetConfig+0x34e>
 800f06e:	2310      	movs	r3, #16
 800f070:	77fb      	strb	r3, [r7, #31]
 800f072:	bf00      	nop
 800f074:	e001      	b.n	800f07a <UART_SetConfig+0x34e>
 800f076:	2310      	movs	r3, #16
 800f078:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	69db      	ldr	r3, [r3, #28]
 800f07e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f082:	d17f      	bne.n	800f184 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800f084:	7ffb      	ldrb	r3, [r7, #31]
 800f086:	2b08      	cmp	r3, #8
 800f088:	d85c      	bhi.n	800f144 <UART_SetConfig+0x418>
 800f08a:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <UART_SetConfig+0x364>)
 800f08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0d5 	.word	0x0800f0d5
 800f098:	0800f0f5 	.word	0x0800f0f5
 800f09c:	0800f145 	.word	0x0800f145
 800f0a0:	0800f10d 	.word	0x0800f10d
 800f0a4:	0800f145 	.word	0x0800f145
 800f0a8:	0800f145 	.word	0x0800f145
 800f0ac:	0800f145 	.word	0x0800f145
 800f0b0:	0800f12d 	.word	0x0800f12d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0b4:	f7fc feb8 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 800f0b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	005a      	lsls	r2, r3, #1
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	085b      	lsrs	r3, r3, #1
 800f0c4:	441a      	add	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	61bb      	str	r3, [r7, #24]
        break;
 800f0d2:	e03a      	b.n	800f14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0d4:	f7fc febc 	bl	800be50 <HAL_RCC_GetPCLK2Freq>
 800f0d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	005a      	lsls	r2, r3, #1
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	085b      	lsrs	r3, r3, #1
 800f0e4:	441a      	add	r2, r3
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	61bb      	str	r3, [r7, #24]
        break;
 800f0f2:	e02a      	b.n	800f14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	085a      	lsrs	r2, r3, #1
 800f0fa:	4b5f      	ldr	r3, [pc, #380]	; (800f278 <UART_SetConfig+0x54c>)
 800f0fc:	4413      	add	r3, r2
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	6852      	ldr	r2, [r2, #4]
 800f102:	fbb3 f3f2 	udiv	r3, r3, r2
 800f106:	b29b      	uxth	r3, r3
 800f108:	61bb      	str	r3, [r7, #24]
        break;
 800f10a:	e01e      	b.n	800f14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f10c:	f7fc fdce 	bl	800bcac <HAL_RCC_GetSysClockFreq>
 800f110:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	005a      	lsls	r2, r3, #1
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	085b      	lsrs	r3, r3, #1
 800f11c:	441a      	add	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	fbb2 f3f3 	udiv	r3, r2, r3
 800f126:	b29b      	uxth	r3, r3
 800f128:	61bb      	str	r3, [r7, #24]
        break;
 800f12a:	e00e      	b.n	800f14a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	085b      	lsrs	r3, r3, #1
 800f132:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f13e:	b29b      	uxth	r3, r3
 800f140:	61bb      	str	r3, [r7, #24]
        break;
 800f142:	e002      	b.n	800f14a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	75fb      	strb	r3, [r7, #23]
        break;
 800f148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	2b0f      	cmp	r3, #15
 800f14e:	d916      	bls.n	800f17e <UART_SetConfig+0x452>
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f156:	d212      	bcs.n	800f17e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	f023 030f 	bic.w	r3, r3, #15
 800f160:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	b29b      	uxth	r3, r3
 800f168:	f003 0307 	and.w	r3, r3, #7
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	897b      	ldrh	r3, [r7, #10]
 800f170:	4313      	orrs	r3, r2
 800f172:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	897a      	ldrh	r2, [r7, #10]
 800f17a:	60da      	str	r2, [r3, #12]
 800f17c:	e070      	b.n	800f260 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f17e:	2301      	movs	r3, #1
 800f180:	75fb      	strb	r3, [r7, #23]
 800f182:	e06d      	b.n	800f260 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800f184:	7ffb      	ldrb	r3, [r7, #31]
 800f186:	2b08      	cmp	r3, #8
 800f188:	d859      	bhi.n	800f23e <UART_SetConfig+0x512>
 800f18a:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <UART_SetConfig+0x464>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f1b5 	.word	0x0800f1b5
 800f194:	0800f1d3 	.word	0x0800f1d3
 800f198:	0800f1f1 	.word	0x0800f1f1
 800f19c:	0800f23f 	.word	0x0800f23f
 800f1a0:	0800f209 	.word	0x0800f209
 800f1a4:	0800f23f 	.word	0x0800f23f
 800f1a8:	0800f23f 	.word	0x0800f23f
 800f1ac:	0800f23f 	.word	0x0800f23f
 800f1b0:	0800f227 	.word	0x0800f227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1b4:	f7fc fe38 	bl	800be28 <HAL_RCC_GetPCLK1Freq>
 800f1b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	085a      	lsrs	r2, r3, #1
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	441a      	add	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	61bb      	str	r3, [r7, #24]
        break;
 800f1d0:	e038      	b.n	800f244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1d2:	f7fc fe3d 	bl	800be50 <HAL_RCC_GetPCLK2Freq>
 800f1d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	085a      	lsrs	r2, r3, #1
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	441a      	add	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	61bb      	str	r3, [r7, #24]
        break;
 800f1ee:	e029      	b.n	800f244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	085a      	lsrs	r2, r3, #1
 800f1f6:	4b21      	ldr	r3, [pc, #132]	; (800f27c <UART_SetConfig+0x550>)
 800f1f8:	4413      	add	r3, r2
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	6852      	ldr	r2, [r2, #4]
 800f1fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800f202:	b29b      	uxth	r3, r3
 800f204:	61bb      	str	r3, [r7, #24]
        break;
 800f206:	e01d      	b.n	800f244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f208:	f7fc fd50 	bl	800bcac <HAL_RCC_GetSysClockFreq>
 800f20c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	085a      	lsrs	r2, r3, #1
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	441a      	add	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f220:	b29b      	uxth	r3, r3
 800f222:	61bb      	str	r3, [r7, #24]
        break;
 800f224:	e00e      	b.n	800f244 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	085b      	lsrs	r3, r3, #1
 800f22c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	fbb2 f3f3 	udiv	r3, r2, r3
 800f238:	b29b      	uxth	r3, r3
 800f23a:	61bb      	str	r3, [r7, #24]
        break;
 800f23c:	e002      	b.n	800f244 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	75fb      	strb	r3, [r7, #23]
        break;
 800f242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	2b0f      	cmp	r3, #15
 800f248:	d908      	bls.n	800f25c <UART_SetConfig+0x530>
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f250:	d204      	bcs.n	800f25c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	69ba      	ldr	r2, [r7, #24]
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	e001      	b.n	800f260 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3720      	adds	r7, #32
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	01e84800 	.word	0x01e84800
 800f27c:	00f42400 	.word	0x00f42400

0800f280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	f003 0301 	and.w	r3, r3, #1
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00a      	beq.n	800f2aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	430a      	orrs	r2, r1
 800f2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ae:	f003 0302 	and.w	r3, r3, #2
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d00a      	beq.n	800f2cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	430a      	orrs	r2, r1
 800f2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d0:	f003 0304 	and.w	r3, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00a      	beq.n	800f2ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	430a      	orrs	r2, r1
 800f2ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f2:	f003 0308 	and.w	r3, r3, #8
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00a      	beq.n	800f310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	430a      	orrs	r2, r1
 800f30e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	f003 0310 	and.w	r3, r3, #16
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00a      	beq.n	800f332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	430a      	orrs	r2, r1
 800f330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f336:	f003 0320 	and.w	r3, r3, #32
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00a      	beq.n	800f354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	430a      	orrs	r2, r1
 800f352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d01a      	beq.n	800f396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f37e:	d10a      	bne.n	800f396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	430a      	orrs	r2, r1
 800f394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00a      	beq.n	800f3b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	605a      	str	r2, [r3, #4]
  }
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af02      	add	r7, sp, #8
 800f3ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f3d2:	f7f7 fa33 	bl	800683c <HAL_GetTick>
 800f3d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f003 0308 	and.w	r3, r3, #8
 800f3e2:	2b08      	cmp	r3, #8
 800f3e4:	d10e      	bne.n	800f404 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f814 	bl	800f422 <UART_WaitOnFlagUntilTimeout>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f400:	2303      	movs	r3, #3
 800f402:	e00a      	b.n	800f41a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2220      	movs	r2, #32
 800f408:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2220      	movs	r2, #32
 800f40e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b084      	sub	sp, #16
 800f426:	af00      	add	r7, sp, #0
 800f428:	60f8      	str	r0, [r7, #12]
 800f42a:	60b9      	str	r1, [r7, #8]
 800f42c:	603b      	str	r3, [r7, #0]
 800f42e:	4613      	mov	r3, r2
 800f430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f432:	e05d      	b.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f43a:	d059      	beq.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f43c:	f7f7 f9fe 	bl	800683c <HAL_GetTick>
 800f440:	4602      	mov	r2, r0
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d302      	bcc.n	800f452 <UART_WaitOnFlagUntilTimeout+0x30>
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d11b      	bne.n	800f48a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f460:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	689a      	ldr	r2, [r3, #8]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f022 0201 	bic.w	r2, r2, #1
 800f470:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2220      	movs	r2, #32
 800f476:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2220      	movs	r2, #32
 800f47c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f486:	2303      	movs	r3, #3
 800f488:	e042      	b.n	800f510 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f003 0304 	and.w	r3, r3, #4
 800f494:	2b00      	cmp	r3, #0
 800f496:	d02b      	beq.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	69db      	ldr	r3, [r3, #28]
 800f49e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4a6:	d123      	bne.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f4c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	689a      	ldr	r2, [r3, #8]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0201 	bic.w	r2, r2, #1
 800f4d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2220      	movs	r2, #32
 800f4d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2220      	movs	r2, #32
 800f4dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2220      	movs	r2, #32
 800f4e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	e00f      	b.n	800f510 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	69da      	ldr	r2, [r3, #28]
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	bf0c      	ite	eq
 800f500:	2301      	moveq	r3, #1
 800f502:	2300      	movne	r3, #0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	461a      	mov	r2, r3
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d092      	beq.n	800f434 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d027      	beq.n	800f582 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	4b2f      	ldr	r3, [pc, #188]	; (800f5f8 <FMC_SDRAM_Init+0xe0>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f548:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800f54e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800f554:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800f55a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800f560:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800f566:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800f56c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f572:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4313      	orrs	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	601a      	str	r2, [r3, #0]
 800f580:	e032      	b.n	800f5e8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f58e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f598:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f59e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f5ac:	68ba      	ldr	r2, [r7, #8]
 800f5ae:	4b12      	ldr	r3, [pc, #72]	; (800f5f8 <FMC_SDRAM_Init+0xe0>)
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f5bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800f5c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800f5c8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800f5ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800f5d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	ffff8000 	.word	0xffff8000

0800f5fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800f60c:	2300      	movs	r3, #0
 800f60e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d02e      	beq.n	800f674 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f622:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	3b01      	subs	r3, #1
 800f630:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f632:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	3b01      	subs	r3, #1
 800f63a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f63c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	3b01      	subs	r3, #1
 800f644:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f646:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f650:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	3b01      	subs	r3, #1
 800f658:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f65a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	3b01      	subs	r3, #1
 800f662:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f664:	4313      	orrs	r3, r2
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4313      	orrs	r3, r2
 800f66a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	609a      	str	r2, [r3, #8]
 800f672:	e039      	b.n	800f6e8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	4b1e      	ldr	r3, [pc, #120]	; (800f6f8 <FMC_SDRAM_Timing_Init+0xfc>)
 800f67e:	4013      	ands	r3, r2
 800f680:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	3b01      	subs	r3, #1
 800f688:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	695b      	ldr	r3, [r3, #20]
 800f68e:	3b01      	subs	r3, #1
 800f690:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f692:	4313      	orrs	r3, r2
 800f694:	697a      	ldr	r2, [r7, #20]
 800f696:	4313      	orrs	r3, r2
 800f698:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f6a6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f6b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f6c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f6ca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	699b      	ldr	r3, [r3, #24]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	697a      	ldr	r2, [r7, #20]
 800f6e0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	371c      	adds	r7, #28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	ff0f0fff 	.word	0xff0f0fff

0800f6fc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f714:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800f71e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f726:	4313      	orrs	r3, r2
 800f728:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f73e:	b480      	push	{r7}
 800f740:	b083      	sub	sp, #12
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
 800f746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	695a      	ldr	r2, [r3, #20]
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	431a      	orrs	r2, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f764:	b084      	sub	sp, #16
 800f766:	b580      	push	{r7, lr}
 800f768:	b084      	sub	sp, #16
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	f107 001c 	add.w	r0, r7, #28
 800f772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d120      	bne.n	800f7be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	68da      	ldr	r2, [r3, #12]
 800f78c:	4b20      	ldr	r3, [pc, #128]	; (800f810 <USB_CoreInit+0xac>)
 800f78e:	4013      	ands	r3, r2
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d105      	bne.n	800f7b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 f942 	bl	800fa3c <USB_CoreReset>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	73fb      	strb	r3, [r7, #15]
 800f7bc:	e010      	b.n	800f7e0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f936 	bl	800fa3c <USB_CoreReset>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d10b      	bne.n	800f7fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f043 0206 	orr.w	r2, r3, #6
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	f043 0220 	orr.w	r2, r3, #32
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f80a:	b004      	add	sp, #16
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	ffbdffbf 	.word	0xffbdffbf

0800f814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	f043 0201 	orr.w	r2, r3, #1
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f836:	b480      	push	{r7}
 800f838:	b083      	sub	sp, #12
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	f023 0201 	bic.w	r2, r3, #1
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	460b      	mov	r3, r1
 800f862:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d106      	bne.n	800f884 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	60da      	str	r2, [r3, #12]
 800f882:	e00b      	b.n	800f89c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f884:	78fb      	ldrb	r3, [r7, #3]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	60da      	str	r2, [r3, #12]
 800f896:	e001      	b.n	800f89c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f898:	2301      	movs	r3, #1
 800f89a:	e003      	b.n	800f8a4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f89c:	2032      	movs	r0, #50	; 0x32
 800f89e:	f7f6 ffd9 	bl	8006854 <HAL_Delay>

  return HAL_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	019b      	lsls	r3, r3, #6
 800f8be:	f043 0220 	orr.w	r2, r3, #32
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	60fb      	str	r3, [r7, #12]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4a09      	ldr	r2, [pc, #36]	; (800f8f4 <USB_FlushTxFifo+0x48>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d901      	bls.n	800f8d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	e006      	b.n	800f8e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	f003 0320 	and.w	r3, r3, #32
 800f8e0:	2b20      	cmp	r3, #32
 800f8e2:	d0f0      	beq.n	800f8c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	00030d40 	.word	0x00030d40

0800f8f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f900:	2300      	movs	r3, #0
 800f902:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2210      	movs	r2, #16
 800f908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	3301      	adds	r3, #1
 800f90e:	60fb      	str	r3, [r7, #12]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4a09      	ldr	r2, [pc, #36]	; (800f938 <USB_FlushRxFifo+0x40>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d901      	bls.n	800f91c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f918:	2303      	movs	r3, #3
 800f91a:	e006      	b.n	800f92a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	691b      	ldr	r3, [r3, #16]
 800f920:	f003 0310 	and.w	r3, r3, #16
 800f924:	2b10      	cmp	r3, #16
 800f926:	d0f0      	beq.n	800f90a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	00030d40 	.word	0x00030d40

0800f93c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b089      	sub	sp, #36	; 0x24
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	4611      	mov	r1, r2
 800f948:	461a      	mov	r2, r3
 800f94a:	460b      	mov	r3, r1
 800f94c:	71fb      	strb	r3, [r7, #7]
 800f94e:	4613      	mov	r3, r2
 800f950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f95a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d11a      	bne.n	800f998 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f962:	88bb      	ldrh	r3, [r7, #4]
 800f964:	3303      	adds	r3, #3
 800f966:	089b      	lsrs	r3, r3, #2
 800f968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f96a:	2300      	movs	r3, #0
 800f96c:	61bb      	str	r3, [r7, #24]
 800f96e:	e00f      	b.n	800f990 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f970:	79fb      	ldrb	r3, [r7, #7]
 800f972:	031a      	lsls	r2, r3, #12
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	4413      	add	r3, r2
 800f978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f97c:	461a      	mov	r2, r3
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	3304      	adds	r3, #4
 800f988:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	3301      	adds	r3, #1
 800f98e:	61bb      	str	r3, [r7, #24]
 800f990:	69ba      	ldr	r2, [r7, #24]
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	429a      	cmp	r2, r3
 800f996:	d3eb      	bcc.n	800f970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3724      	adds	r7, #36	; 0x24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	b089      	sub	sp, #36	; 0x24
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	60f8      	str	r0, [r7, #12]
 800f9ae:	60b9      	str	r1, [r7, #8]
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	3303      	adds	r3, #3
 800f9c0:	089b      	lsrs	r3, r3, #2
 800f9c2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61bb      	str	r3, [r7, #24]
 800f9c8:	e00b      	b.n	800f9e2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	601a      	str	r2, [r3, #0]
    pDest++;
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	61bb      	str	r3, [r7, #24]
 800f9e2:	69ba      	ldr	r2, [r7, #24]
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d3ef      	bcc.n	800f9ca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f9ea:	69fb      	ldr	r3, [r7, #28]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3724      	adds	r7, #36	; 0x24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699b      	ldr	r3, [r3, #24]
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fa10:	68fb      	ldr	r3, [r7, #12]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	f003 0301 	and.w	r3, r3, #1
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
	...

0800fa3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	60fb      	str	r3, [r7, #12]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	4a13      	ldr	r2, [pc, #76]	; (800faa0 <USB_CoreReset+0x64>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d901      	bls.n	800fa5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa56:	2303      	movs	r3, #3
 800fa58:	e01b      	b.n	800fa92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	daf2      	bge.n	800fa48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa62:	2300      	movs	r3, #0
 800fa64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	f043 0201 	orr.w	r2, r3, #1
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	4a09      	ldr	r2, [pc, #36]	; (800faa0 <USB_CoreReset+0x64>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d901      	bls.n	800fa84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa80:	2303      	movs	r3, #3
 800fa82:	e006      	b.n	800fa92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d0f0      	beq.n	800fa72 <USB_CoreReset+0x36>

  return HAL_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	00030d40 	.word	0x00030d40

0800faa4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800faa4:	b084      	sub	sp, #16
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b084      	sub	sp, #16
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	f107 001c 	add.w	r0, r7, #28
 800fab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fac0:	461a      	mov	r2, r3
 800fac2:	2300      	movs	r3, #0
 800fac4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d018      	beq.n	800fb10 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d10a      	bne.n	800fafa <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800faf2:	f043 0304 	orr.w	r3, r3, #4
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	e014      	b.n	800fb24 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb08:	f023 0304 	bic.w	r3, r3, #4
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	e009      	b.n	800fb24 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb1e:	f023 0304 	bic.w	r3, r3, #4
 800fb22:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800fb24:	2110      	movs	r1, #16
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff fec0 	bl	800f8ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff fee3 	bl	800f8f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800fb32:	2300      	movs	r3, #0
 800fb34:	60fb      	str	r3, [r7, #12]
 800fb36:	e015      	b.n	800fb64 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb44:	461a      	mov	r2, r3
 800fb46:	f04f 33ff 	mov.w	r3, #4294967295
 800fb4a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	015a      	lsls	r2, r3, #5
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	4413      	add	r3, r2
 800fb54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb58:	461a      	mov	r2, r3
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3301      	adds	r3, #1
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	6a3b      	ldr	r3, [r7, #32]
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d3e5      	bcc.n	800fb38 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f8ac 	bl	800fccc <USB_DriveVbus>

  HAL_Delay(200U);
 800fb74:	20c8      	movs	r0, #200	; 0xc8
 800fb76:	f7f6 fe6d 	bl	8006854 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f04f 32ff 	mov.w	r2, #4294967295
 800fb86:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00b      	beq.n	800fbac <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4a14      	ldr	r2, [pc, #80]	; (800fbf0 <USB_HostInit+0x14c>)
 800fba0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4a13      	ldr	r2, [pc, #76]	; (800fbf4 <USB_HostInit+0x150>)
 800fba6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800fbaa:	e009      	b.n	800fbc0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2280      	movs	r2, #128	; 0x80
 800fbb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4a10      	ldr	r2, [pc, #64]	; (800fbf8 <USB_HostInit+0x154>)
 800fbb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a10      	ldr	r2, [pc, #64]	; (800fbfc <USB_HostInit+0x158>)
 800fbbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d105      	bne.n	800fbd2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	f043 0210 	orr.w	r2, r3, #16
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	699a      	ldr	r2, [r3, #24]
 800fbd6:	4b0a      	ldr	r3, [pc, #40]	; (800fc00 <USB_HostInit+0x15c>)
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbea:	b004      	add	sp, #16
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	01000200 	.word	0x01000200
 800fbf4:	00e00300 	.word	0x00e00300
 800fbf8:	00600080 	.word	0x00600080
 800fbfc:	004000e0 	.word	0x004000e0
 800fc00:	a3200008 	.word	0xa3200008

0800fc04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc22:	f023 0303 	bic.w	r3, r3, #3
 800fc26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	78fb      	ldrb	r3, [r7, #3]
 800fc32:	f003 0303 	and.w	r3, r3, #3
 800fc36:	68f9      	ldr	r1, [r7, #12]
 800fc38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800fc40:	78fb      	ldrb	r3, [r7, #3]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d107      	bne.n	800fc56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fc52:	6053      	str	r3, [r2, #4]
 800fc54:	e009      	b.n	800fc6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800fc56:	78fb      	ldrb	r3, [r7, #3]
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	d106      	bne.n	800fc6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc62:	461a      	mov	r2, r3
 800fc64:	f241 7370 	movw	r3, #6000	; 0x1770
 800fc68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3714      	adds	r7, #20
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800fc84:	2300      	movs	r3, #0
 800fc86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fc98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fca6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800fca8:	2064      	movs	r0, #100	; 0x64
 800fcaa:	f7f6 fdd3 	bl	8006854 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fcb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800fcbc:	200a      	movs	r0, #10
 800fcbe:	f7f6 fdc9 	bl	8006854 <HAL_Delay>

  return HAL_OK;
 800fcc2:	2300      	movs	r3, #0
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3710      	adds	r7, #16
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fcf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d109      	bne.n	800fd10 <USB_DriveVbus+0x44>
 800fcfc:	78fb      	ldrb	r3, [r7, #3]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d106      	bne.n	800fd10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fd0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fd0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd1a:	d109      	bne.n	800fd30 <USB_DriveVbus+0x64>
 800fd1c:	78fb      	ldrb	r3, [r7, #3]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3714      	adds	r7, #20
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fd3e:	b480      	push	{r7}
 800fd40:	b085      	sub	sp, #20
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	0c5b      	lsrs	r3, r3, #17
 800fd5c:	f003 0303 	and.w	r3, r3, #3
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	b29b      	uxth	r3, r3
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3714      	adds	r7, #20
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr
	...

0800fd90 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b087      	sub	sp, #28
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	4608      	mov	r0, r1
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4603      	mov	r3, r0
 800fda0:	70fb      	strb	r3, [r7, #3]
 800fda2:	460b      	mov	r3, r1
 800fda4:	70bb      	strb	r3, [r7, #2]
 800fda6:	4613      	mov	r3, r2
 800fda8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800fdb2:	78fb      	ldrb	r3, [r7, #3]
 800fdb4:	015a      	lsls	r2, r3, #5
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	4413      	add	r3, r2
 800fdba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800fdc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fdca:	2b03      	cmp	r3, #3
 800fdcc:	d87e      	bhi.n	800fecc <USB_HC_Init+0x13c>
 800fdce:	a201      	add	r2, pc, #4	; (adr r2, 800fdd4 <USB_HC_Init+0x44>)
 800fdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd4:	0800fde5 	.word	0x0800fde5
 800fdd8:	0800fe8f 	.word	0x0800fe8f
 800fddc:	0800fde5 	.word	0x0800fde5
 800fde0:	0800fe51 	.word	0x0800fe51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fde4:	78fb      	ldrb	r3, [r7, #3]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	f240 439d 	movw	r3, #1181	; 0x49d
 800fdf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800fdf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	da10      	bge.n	800fe22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	78fa      	ldrb	r2, [r7, #3]
 800fe10:	0151      	lsls	r1, r2, #5
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	440a      	add	r2, r1
 800fe16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe1e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800fe20:	e057      	b.n	800fed2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d051      	beq.n	800fed2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800fe2e:	78fb      	ldrb	r3, [r7, #3]
 800fe30:	015a      	lsls	r2, r3, #5
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	4413      	add	r3, r2
 800fe36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	78fa      	ldrb	r2, [r7, #3]
 800fe3e:	0151      	lsls	r1, r2, #5
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	440a      	add	r2, r1
 800fe44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fe4c:	60d3      	str	r3, [r2, #12]
      break;
 800fe4e:	e040      	b.n	800fed2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fe50:	78fb      	ldrb	r3, [r7, #3]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	f240 639d 	movw	r3, #1693	; 0x69d
 800fe62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fe64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	da34      	bge.n	800fed6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fe6c:	78fb      	ldrb	r3, [r7, #3]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	78fa      	ldrb	r2, [r7, #3]
 800fe7c:	0151      	lsls	r1, r2, #5
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	440a      	add	r2, r1
 800fe82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800fe8c:	e023      	b.n	800fed6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fe8e:	78fb      	ldrb	r3, [r7, #3]
 800fe90:	015a      	lsls	r2, r3, #5
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	4413      	add	r3, r2
 800fe96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	f240 2325 	movw	r3, #549	; 0x225
 800fea0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fea2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	da17      	bge.n	800feda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800feaa:	78fb      	ldrb	r3, [r7, #3]
 800feac:	015a      	lsls	r2, r3, #5
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	4413      	add	r3, r2
 800feb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	78fa      	ldrb	r2, [r7, #3]
 800feba:	0151      	lsls	r1, r2, #5
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	440a      	add	r2, r1
 800fec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fec4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800fec8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800feca:	e006      	b.n	800feda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800fecc:	2301      	movs	r3, #1
 800fece:	75fb      	strb	r3, [r7, #23]
      break;
 800fed0:	e004      	b.n	800fedc <USB_HC_Init+0x14c>
      break;
 800fed2:	bf00      	nop
 800fed4:	e002      	b.n	800fedc <USB_HC_Init+0x14c>
      break;
 800fed6:	bf00      	nop
 800fed8:	e000      	b.n	800fedc <USB_HC_Init+0x14c>
      break;
 800feda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fee2:	699a      	ldr	r2, [r3, #24]
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	f003 030f 	and.w	r3, r3, #15
 800feea:	2101      	movs	r1, #1
 800feec:	fa01 f303 	lsl.w	r3, r1, r3
 800fef0:	68b9      	ldr	r1, [r7, #8]
 800fef2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fef6:	4313      	orrs	r3, r2
 800fef8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ff06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	da03      	bge.n	800ff16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ff0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff12:	613b      	str	r3, [r7, #16]
 800ff14:	e001      	b.n	800ff1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ff16:	2300      	movs	r3, #0
 800ff18:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ff1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	d103      	bne.n	800ff2a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ff22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ff26:	60fb      	str	r3, [r7, #12]
 800ff28:	e001      	b.n	800ff2e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ff2e:	787b      	ldrb	r3, [r7, #1]
 800ff30:	059b      	lsls	r3, r3, #22
 800ff32:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ff36:	78bb      	ldrb	r3, [r7, #2]
 800ff38:	02db      	lsls	r3, r3, #11
 800ff3a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ff3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ff40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff44:	049b      	lsls	r3, r3, #18
 800ff46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ff4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ff4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ff52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ff58:	78fb      	ldrb	r3, [r7, #3]
 800ff5a:	0159      	lsls	r1, r3, #5
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	440b      	add	r3, r1
 800ff60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff64:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ff6a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ff6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff70:	2b03      	cmp	r3, #3
 800ff72:	d10f      	bne.n	800ff94 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ff74:	78fb      	ldrb	r3, [r7, #3]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	78fa      	ldrb	r2, [r7, #3]
 800ff84:	0151      	lsls	r1, r2, #5
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	440a      	add	r2, r1
 800ff8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff92:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	371c      	adds	r7, #28
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop

0800ffa4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b08c      	sub	sp, #48	; 0x30
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	4613      	mov	r3, r2
 800ffb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	785b      	ldrb	r3, [r3, #1]
 800ffba:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ffbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ffc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d028      	beq.n	8010020 <USB_HC_StartXfer+0x7c>
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	791b      	ldrb	r3, [r3, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d124      	bne.n	8010020 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10b      	bne.n	800fff4 <USB_HC_StartXfer+0x50>
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	795b      	ldrb	r3, [r3, #5]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d107      	bne.n	800fff4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	785b      	ldrb	r3, [r3, #1]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f000 fa2e 	bl	801044c <USB_DoPing>
      return HAL_OK;
 800fff0:	2300      	movs	r3, #0
 800fff2:	e112      	b.n	801021a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d112      	bne.n	8010020 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	015a      	lsls	r2, r3, #5
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	4413      	add	r3, r2
 8010002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	0151      	lsls	r1, r2, #5
 801000c:	6a3a      	ldr	r2, [r7, #32]
 801000e:	440a      	add	r2, r1
 8010010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010014:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8010018:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2200      	movs	r2, #0
 801001e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d018      	beq.n	801005a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	8912      	ldrh	r2, [r2, #8]
 8010030:	4413      	add	r3, r2
 8010032:	3b01      	subs	r3, #1
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	8912      	ldrh	r2, [r2, #8]
 8010038:	fbb3 f3f2 	udiv	r3, r3, r2
 801003c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 801003e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010040:	8b7b      	ldrh	r3, [r7, #26]
 8010042:	429a      	cmp	r2, r3
 8010044:	d90b      	bls.n	801005e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8010046:	8b7b      	ldrh	r3, [r7, #26]
 8010048:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801004a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801004c:	68ba      	ldr	r2, [r7, #8]
 801004e:	8912      	ldrh	r2, [r2, #8]
 8010050:	fb02 f203 	mul.w	r2, r2, r3
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	611a      	str	r2, [r3, #16]
 8010058:	e001      	b.n	801005e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 801005a:	2301      	movs	r3, #1
 801005c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	78db      	ldrb	r3, [r3, #3]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d006      	beq.n	8010074 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	8912      	ldrh	r2, [r2, #8]
 801006c:	fb02 f203 	mul.w	r2, r2, r3
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801007c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801007e:	04d9      	lsls	r1, r3, #19
 8010080:	4b68      	ldr	r3, [pc, #416]	; (8010224 <USB_HC_StartXfer+0x280>)
 8010082:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010084:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	7a9b      	ldrb	r3, [r3, #10]
 801008a:	075b      	lsls	r3, r3, #29
 801008c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010090:	69f9      	ldr	r1, [r7, #28]
 8010092:	0148      	lsls	r0, r1, #5
 8010094:	6a39      	ldr	r1, [r7, #32]
 8010096:	4401      	add	r1, r0
 8010098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801009c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801009e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80100a0:	79fb      	ldrb	r3, [r7, #7]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d009      	beq.n	80100ba <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	68d9      	ldr	r1, [r3, #12]
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	015a      	lsls	r2, r3, #5
 80100ae:	6a3b      	ldr	r3, [r7, #32]
 80100b0:	4413      	add	r3, r2
 80100b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100b6:	460a      	mov	r2, r1
 80100b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	bf0c      	ite	eq
 80100ca:	2301      	moveq	r3, #1
 80100cc:	2300      	movne	r3, #0
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	015a      	lsls	r2, r3, #5
 80100d6:	6a3b      	ldr	r3, [r7, #32]
 80100d8:	4413      	add	r3, r2
 80100da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	69fa      	ldr	r2, [r7, #28]
 80100e2:	0151      	lsls	r1, r2, #5
 80100e4:	6a3a      	ldr	r2, [r7, #32]
 80100e6:	440a      	add	r2, r1
 80100e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80100ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80100f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	015a      	lsls	r2, r3, #5
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	4413      	add	r3, r2
 80100fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	7e7b      	ldrb	r3, [r7, #25]
 8010102:	075b      	lsls	r3, r3, #29
 8010104:	69f9      	ldr	r1, [r7, #28]
 8010106:	0148      	lsls	r0, r1, #5
 8010108:	6a39      	ldr	r1, [r7, #32]
 801010a:	4401      	add	r1, r0
 801010c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8010110:	4313      	orrs	r3, r2
 8010112:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	015a      	lsls	r2, r3, #5
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	4413      	add	r3, r2
 801011c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a41      	ldr	r2, [pc, #260]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010124:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010126:	4b40      	ldr	r3, [pc, #256]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801012e:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010130:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	78db      	ldrb	r3, [r3, #3]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d006      	beq.n	8010148 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801013a:	4b3b      	ldr	r3, [pc, #236]	; (8010228 <USB_HC_StartXfer+0x284>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010142:	4a39      	ldr	r2, [pc, #228]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	e005      	b.n	8010154 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8010148:	4b37      	ldr	r3, [pc, #220]	; (8010228 <USB_HC_StartXfer+0x284>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010150:	4a35      	ldr	r2, [pc, #212]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010152:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010154:	4b34      	ldr	r3, [pc, #208]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801015c:	4a32      	ldr	r2, [pc, #200]	; (8010228 <USB_HC_StartXfer+0x284>)
 801015e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	015a      	lsls	r2, r3, #5
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	4413      	add	r3, r2
 8010168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801016c:	461a      	mov	r2, r3
 801016e:	4b2e      	ldr	r3, [pc, #184]	; (8010228 <USB_HC_StartXfer+0x284>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8010174:	79fb      	ldrb	r3, [r7, #7]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d14e      	bne.n	8010218 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	78db      	ldrb	r3, [r3, #3]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d14a      	bne.n	8010218 <USB_HC_StartXfer+0x274>
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d046      	beq.n	8010218 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	79db      	ldrb	r3, [r3, #7]
 801018e:	2b03      	cmp	r3, #3
 8010190:	d830      	bhi.n	80101f4 <USB_HC_StartXfer+0x250>
 8010192:	a201      	add	r2, pc, #4	; (adr r2, 8010198 <USB_HC_StartXfer+0x1f4>)
 8010194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010198:	080101a9 	.word	0x080101a9
 801019c:	080101cd 	.word	0x080101cd
 80101a0:	080101a9 	.word	0x080101a9
 80101a4:	080101cd 	.word	0x080101cd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	691b      	ldr	r3, [r3, #16]
 80101ac:	3303      	adds	r3, #3
 80101ae:	089b      	lsrs	r3, r3, #2
 80101b0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80101b2:	8afa      	ldrh	r2, [r7, #22]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d91c      	bls.n	80101f8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	699b      	ldr	r3, [r3, #24]
 80101c2:	f043 0220 	orr.w	r2, r3, #32
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	619a      	str	r2, [r3, #24]
          }
          break;
 80101ca:	e015      	b.n	80101f8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	3303      	adds	r3, #3
 80101d2:	089b      	lsrs	r3, r3, #2
 80101d4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80101d6:	8afa      	ldrh	r2, [r7, #22]
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	b29b      	uxth	r3, r3
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d90a      	bls.n	80101fc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	699b      	ldr	r3, [r3, #24]
 80101ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	619a      	str	r2, [r3, #24]
          }
          break;
 80101f2:	e003      	b.n	80101fc <USB_HC_StartXfer+0x258>

        default:
          break;
 80101f4:	bf00      	nop
 80101f6:	e002      	b.n	80101fe <USB_HC_StartXfer+0x25a>
          break;
 80101f8:	bf00      	nop
 80101fa:	e000      	b.n	80101fe <USB_HC_StartXfer+0x25a>
          break;
 80101fc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	68d9      	ldr	r1, [r3, #12]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	785a      	ldrb	r2, [r3, #1]
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	691b      	ldr	r3, [r3, #16]
 801020a:	b298      	uxth	r0, r3
 801020c:	2300      	movs	r3, #0
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	4603      	mov	r3, r0
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f7ff fb92 	bl	800f93c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3728      	adds	r7, #40	; 0x28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	1ff80000 	.word	0x1ff80000
 8010228:	2000111c 	.word	0x2000111c

0801022c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801023e:	695b      	ldr	r3, [r3, #20]
 8010240:	b29b      	uxth	r3, r3
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801024e:	b480      	push	{r7}
 8010250:	b087      	sub	sp, #28
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	460b      	mov	r3, r1
 8010258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 801025e:	78fb      	ldrb	r3, [r7, #3]
 8010260:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8010262:	2300      	movs	r3, #0
 8010264:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	015a      	lsls	r2, r3, #5
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	4413      	add	r3, r2
 801026e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	0c9b      	lsrs	r3, r3, #18
 8010276:	f003 0303 	and.w	r3, r3, #3
 801027a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d002      	beq.n	8010288 <USB_HC_Halt+0x3a>
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b02      	cmp	r3, #2
 8010286:	d16c      	bne.n	8010362 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	4413      	add	r3, r2
 8010290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	0151      	lsls	r1, r2, #5
 801029a:	693a      	ldr	r2, [r7, #16]
 801029c:	440a      	add	r2, r1
 801029e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102a6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d143      	bne.n	801033c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	015a      	lsls	r2, r3, #5
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	4413      	add	r3, r2
 80102bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	0151      	lsls	r1, r2, #5
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	440a      	add	r2, r1
 80102ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	015a      	lsls	r2, r3, #5
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	4413      	add	r3, r2
 80102dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	0151      	lsls	r1, r2, #5
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	440a      	add	r2, r1
 80102ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80102f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	0151      	lsls	r1, r2, #5
 8010306:	693a      	ldr	r2, [r7, #16]
 8010308:	440a      	add	r2, r1
 801030a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801030e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010312:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	3301      	adds	r3, #1
 8010318:	617b      	str	r3, [r7, #20]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010320:	d81d      	bhi.n	801035e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	015a      	lsls	r2, r3, #5
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	4413      	add	r3, r2
 801032a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010338:	d0ec      	beq.n	8010314 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801033a:	e080      	b.n	801043e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	015a      	lsls	r2, r3, #5
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	4413      	add	r3, r2
 8010344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	68fa      	ldr	r2, [r7, #12]
 801034c:	0151      	lsls	r1, r2, #5
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	440a      	add	r2, r1
 8010352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801035a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801035c:	e06f      	b.n	801043e <USB_HC_Halt+0x1f0>
          break;
 801035e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010360:	e06d      	b.n	801043e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	015a      	lsls	r2, r3, #5
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	4413      	add	r3, r2
 801036a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	0151      	lsls	r1, r2, #5
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	440a      	add	r2, r1
 8010378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801037c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010380:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801038e:	2b00      	cmp	r3, #0
 8010390:	d143      	bne.n	801041a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	015a      	lsls	r2, r3, #5
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	4413      	add	r3, r2
 801039a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	0151      	lsls	r1, r2, #5
 80103a4:	693a      	ldr	r2, [r7, #16]
 80103a6:	440a      	add	r2, r1
 80103a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80103ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	015a      	lsls	r2, r3, #5
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	4413      	add	r3, r2
 80103ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	0151      	lsls	r1, r2, #5
 80103c4:	693a      	ldr	r2, [r7, #16]
 80103c6:	440a      	add	r2, r1
 80103c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80103cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	015a      	lsls	r2, r3, #5
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	0151      	lsls	r1, r2, #5
 80103e4:	693a      	ldr	r2, [r7, #16]
 80103e6:	440a      	add	r2, r1
 80103e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80103ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80103f0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	3301      	adds	r3, #1
 80103f6:	617b      	str	r3, [r7, #20]
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80103fe:	d81d      	bhi.n	801043c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	4413      	add	r3, r2
 8010408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010416:	d0ec      	beq.n	80103f2 <USB_HC_Halt+0x1a4>
 8010418:	e011      	b.n	801043e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	015a      	lsls	r2, r3, #5
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	4413      	add	r3, r2
 8010422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	0151      	lsls	r1, r2, #5
 801042c:	693a      	ldr	r2, [r7, #16]
 801042e:	440a      	add	r2, r1
 8010430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010438:	6013      	str	r3, [r2, #0]
 801043a:	e000      	b.n	801043e <USB_HC_Halt+0x1f0>
          break;
 801043c:	bf00      	nop
    }
  }

  return HAL_OK;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	371c      	adds	r7, #28
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801044c:	b480      	push	{r7}
 801044e:	b087      	sub	sp, #28
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801045c:	78fb      	ldrb	r3, [r7, #3]
 801045e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8010460:	2301      	movs	r3, #1
 8010462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	04da      	lsls	r2, r3, #19
 8010468:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <USB_DoPing+0x74>)
 801046a:	4013      	ands	r3, r2
 801046c:	693a      	ldr	r2, [r7, #16]
 801046e:	0151      	lsls	r1, r2, #5
 8010470:	697a      	ldr	r2, [r7, #20]
 8010472:	440a      	add	r2, r1
 8010474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801047c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	015a      	lsls	r2, r3, #5
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	4413      	add	r3, r2
 8010486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010494:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801049c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104aa:	461a      	mov	r2, r3
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	371c      	adds	r7, #28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	1ff80000 	.word	0x1ff80000

080104c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80104d0:	2300      	movs	r3, #0
 80104d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff f9ae 	bl	800f836 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80104da:	2110      	movs	r1, #16
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7ff f9e5 	bl	800f8ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7ff fa08 	bl	800f8f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80104e8:	2300      	movs	r3, #0
 80104ea:	613b      	str	r3, [r7, #16]
 80104ec:	e01f      	b.n	801052e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010504:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801050c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010514:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	015a      	lsls	r2, r3, #5
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	4413      	add	r3, r2
 801051e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010522:	461a      	mov	r2, r3
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	3301      	adds	r3, #1
 801052c:	613b      	str	r3, [r7, #16]
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	2b0f      	cmp	r3, #15
 8010532:	d9dc      	bls.n	80104ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010534:	2300      	movs	r3, #0
 8010536:	613b      	str	r3, [r7, #16]
 8010538:	e034      	b.n	80105a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	015a      	lsls	r2, r3, #5
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	4413      	add	r3, r2
 8010542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010550:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010558:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010560:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	015a      	lsls	r2, r3, #5
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	4413      	add	r3, r2
 801056a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801056e:	461a      	mov	r2, r3
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	3301      	adds	r3, #1
 8010578:	617b      	str	r3, [r7, #20]
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010580:	d80c      	bhi.n	801059c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	015a      	lsls	r2, r3, #5
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010598:	d0ec      	beq.n	8010574 <USB_StopHost+0xb0>
 801059a:	e000      	b.n	801059e <USB_StopHost+0xda>
        break;
 801059c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	3301      	adds	r3, #1
 80105a2:	613b      	str	r3, [r7, #16]
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	2b0f      	cmp	r3, #15
 80105a8:	d9c7      	bls.n	801053a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80105b0:	461a      	mov	r2, r3
 80105b2:	f04f 33ff 	mov.w	r3, #4294967295
 80105b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f04f 32ff 	mov.w	r2, #4294967295
 80105be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff f927 	bl	800f814 <USB_EnableGlobalInt>

  return HAL_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3718      	adds	r7, #24
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80105d0:	b590      	push	{r4, r7, lr}
 80105d2:	b089      	sub	sp, #36	; 0x24
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80105d8:	2301      	movs	r3, #1
 80105da:	2202      	movs	r2, #2
 80105dc:	2102      	movs	r1, #2
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f000 fcb4 	bl	8010f4c <USBH_FindInterface>
 80105e4:	4603      	mov	r3, r0
 80105e6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
 80105ea:	2bff      	cmp	r3, #255	; 0xff
 80105ec:	d002      	beq.n	80105f4 <USBH_CDC_InterfaceInit+0x24>
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d901      	bls.n	80105f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80105f4:	2302      	movs	r3, #2
 80105f6:	e13d      	b.n	8010874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80105f8:	7bfb      	ldrb	r3, [r7, #15]
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 fc89 	bl	8010f14 <USBH_SelectInterface>
 8010602:	4603      	mov	r3, r0
 8010604:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d001      	beq.n	8010610 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801060c:	2302      	movs	r3, #2
 801060e:	e131      	b.n	8010874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8010616:	2050      	movs	r0, #80	; 0x50
 8010618:	f006 f848 	bl	80166ac <malloc>
 801061c:	4603      	mov	r3, r0
 801061e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010626:	69db      	ldr	r3, [r3, #28]
 8010628:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d101      	bne.n	8010634 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8010630:	2302      	movs	r3, #2
 8010632:	e11f      	b.n	8010874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010634:	2250      	movs	r2, #80	; 0x50
 8010636:	2100      	movs	r1, #0
 8010638:	68b8      	ldr	r0, [r7, #8]
 801063a:	f006 f852 	bl	80166e2 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	211a      	movs	r1, #26
 8010644:	fb01 f303 	mul.w	r3, r1, r3
 8010648:	4413      	add	r3, r2
 801064a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	b25b      	sxtb	r3, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	da15      	bge.n	8010682 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010656:	7bfb      	ldrb	r3, [r7, #15]
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	211a      	movs	r1, #26
 801065c:	fb01 f303 	mul.w	r3, r1, r3
 8010660:	4413      	add	r3, r2
 8010662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010666:	781a      	ldrb	r2, [r3, #0]
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801066c:	7bfb      	ldrb	r3, [r7, #15]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	211a      	movs	r1, #26
 8010672:	fb01 f303 	mul.w	r3, r1, r3
 8010676:	4413      	add	r3, r2
 8010678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801067c:	881a      	ldrh	r2, [r3, #0]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	785b      	ldrb	r3, [r3, #1]
 8010686:	4619      	mov	r1, r3
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f002 f890 	bl	80127ae <USBH_AllocPipe>
 801068e:	4603      	mov	r3, r0
 8010690:	461a      	mov	r2, r3
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	7819      	ldrb	r1, [r3, #0]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	7858      	ldrb	r0, [r3, #1]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	8952      	ldrh	r2, [r2, #10]
 80106ae:	9202      	str	r2, [sp, #8]
 80106b0:	2203      	movs	r2, #3
 80106b2:	9201      	str	r2, [sp, #4]
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	4623      	mov	r3, r4
 80106b8:	4602      	mov	r2, r0
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f002 f848 	bl	8012750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2200      	movs	r2, #0
 80106c6:	4619      	mov	r1, r3
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f005 fd0b 	bl	80160e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80106ce:	2300      	movs	r3, #0
 80106d0:	2200      	movs	r2, #0
 80106d2:	210a      	movs	r1, #10
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fc39 	bl	8010f4c <USBH_FindInterface>
 80106da:	4603      	mov	r3, r0
 80106dc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80106de:	7bfb      	ldrb	r3, [r7, #15]
 80106e0:	2bff      	cmp	r3, #255	; 0xff
 80106e2:	d002      	beq.n	80106ea <USBH_CDC_InterfaceInit+0x11a>
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d901      	bls.n	80106ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80106ea:	2302      	movs	r3, #2
 80106ec:	e0c2      	b.n	8010874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	211a      	movs	r1, #26
 80106f4:	fb01 f303 	mul.w	r3, r1, r3
 80106f8:	4413      	add	r3, r2
 80106fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	b25b      	sxtb	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	da16      	bge.n	8010734 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010706:	7bfb      	ldrb	r3, [r7, #15]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	211a      	movs	r1, #26
 801070c:	fb01 f303 	mul.w	r3, r1, r3
 8010710:	4413      	add	r3, r2
 8010712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010716:	781a      	ldrb	r2, [r3, #0]
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801071c:	7bfb      	ldrb	r3, [r7, #15]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	211a      	movs	r1, #26
 8010722:	fb01 f303 	mul.w	r3, r1, r3
 8010726:	4413      	add	r3, r2
 8010728:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801072c:	881a      	ldrh	r2, [r3, #0]
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	835a      	strh	r2, [r3, #26]
 8010732:	e015      	b.n	8010760 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	211a      	movs	r1, #26
 801073a:	fb01 f303 	mul.w	r3, r1, r3
 801073e:	4413      	add	r3, r2
 8010740:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010744:	781a      	ldrb	r2, [r3, #0]
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	211a      	movs	r1, #26
 8010750:	fb01 f303 	mul.w	r3, r1, r3
 8010754:	4413      	add	r3, r2
 8010756:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801075a:	881a      	ldrh	r2, [r3, #0]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	211a      	movs	r1, #26
 8010766:	fb01 f303 	mul.w	r3, r1, r3
 801076a:	4413      	add	r3, r2
 801076c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	b25b      	sxtb	r3, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	da16      	bge.n	80107a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010778:	7bfb      	ldrb	r3, [r7, #15]
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	211a      	movs	r1, #26
 801077e:	fb01 f303 	mul.w	r3, r1, r3
 8010782:	4413      	add	r3, r2
 8010784:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010788:	781a      	ldrb	r2, [r3, #0]
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801078e:	7bfb      	ldrb	r3, [r7, #15]
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	211a      	movs	r1, #26
 8010794:	fb01 f303 	mul.w	r3, r1, r3
 8010798:	4413      	add	r3, r2
 801079a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801079e:	881a      	ldrh	r2, [r3, #0]
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	835a      	strh	r2, [r3, #26]
 80107a4:	e015      	b.n	80107d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80107a6:	7bfb      	ldrb	r3, [r7, #15]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	211a      	movs	r1, #26
 80107ac:	fb01 f303 	mul.w	r3, r1, r3
 80107b0:	4413      	add	r3, r2
 80107b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80107b6:	781a      	ldrb	r2, [r3, #0]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	211a      	movs	r1, #26
 80107c2:	fb01 f303 	mul.w	r3, r1, r3
 80107c6:	4413      	add	r3, r2
 80107c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80107cc:	881a      	ldrh	r2, [r3, #0]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	7b9b      	ldrb	r3, [r3, #14]
 80107d6:	4619      	mov	r1, r3
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f001 ffe8 	bl	80127ae <USBH_AllocPipe>
 80107de:	4603      	mov	r3, r0
 80107e0:	461a      	mov	r2, r3
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	7bdb      	ldrb	r3, [r3, #15]
 80107ea:	4619      	mov	r1, r3
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f001 ffde 	bl	80127ae <USBH_AllocPipe>
 80107f2:	4603      	mov	r3, r0
 80107f4:	461a      	mov	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	7b59      	ldrb	r1, [r3, #13]
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	7b98      	ldrb	r0, [r3, #14]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	8b12      	ldrh	r2, [r2, #24]
 8010812:	9202      	str	r2, [sp, #8]
 8010814:	2202      	movs	r2, #2
 8010816:	9201      	str	r2, [sp, #4]
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	4623      	mov	r3, r4
 801081c:	4602      	mov	r2, r0
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f001 ff96 	bl	8012750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	7b19      	ldrb	r1, [r3, #12]
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	7bd8      	ldrb	r0, [r3, #15]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	8b52      	ldrh	r2, [r2, #26]
 801083c:	9202      	str	r2, [sp, #8]
 801083e:	2202      	movs	r2, #2
 8010840:	9201      	str	r2, [sp, #4]
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	4623      	mov	r3, r4
 8010846:	4602      	mov	r2, r0
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f001 ff81 	bl	8012750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	2200      	movs	r2, #0
 8010852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	7b5b      	ldrb	r3, [r3, #13]
 801085a:	2200      	movs	r2, #0
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f005 fc40 	bl	80160e4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	7b1b      	ldrb	r3, [r3, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f005 fc39 	bl	80160e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	bd90      	pop	{r4, r7, pc}

0801087c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00e      	beq.n	80108b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	4619      	mov	r1, r3
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f001 ff76 	bl	801278e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	4619      	mov	r1, r3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f001 ffa1 	bl	80127f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	7b1b      	ldrb	r3, [r3, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00e      	beq.n	80108da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	7b1b      	ldrb	r3, [r3, #12]
 80108c0:	4619      	mov	r1, r3
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f001 ff63 	bl	801278e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	7b1b      	ldrb	r3, [r3, #12]
 80108cc:	4619      	mov	r1, r3
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f001 ff8e 	bl	80127f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2200      	movs	r2, #0
 80108d8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	7b5b      	ldrb	r3, [r3, #13]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00e      	beq.n	8010900 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	7b5b      	ldrb	r3, [r3, #13]
 80108e6:	4619      	mov	r1, r3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f001 ff50 	bl	801278e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	7b5b      	ldrb	r3, [r3, #13]
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f001 ff7b 	bl	80127f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00b      	beq.n	8010924 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010912:	69db      	ldr	r3, [r3, #28]
 8010914:	4618      	mov	r0, r3
 8010916:	f005 fed1 	bl	80166bc <free>
    phost->pActiveClass->pData = 0U;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010920:	2200      	movs	r2, #0
 8010922:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b084      	sub	sp, #16
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	3340      	adds	r3, #64	; 0x40
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 f8b1 	bl	8010aae <GetLineCoding>
 801094c:	4603      	mov	r3, r0
 801094e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010950:	7afb      	ldrb	r3, [r7, #11]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d105      	bne.n	8010962 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801095c:	2102      	movs	r1, #2
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010962:	7afb      	ldrb	r3, [r7, #11]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010974:	2301      	movs	r3, #1
 8010976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801098c:	2b04      	cmp	r3, #4
 801098e:	d877      	bhi.n	8010a80 <USBH_CDC_Process+0x114>
 8010990:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <USBH_CDC_Process+0x2c>)
 8010992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010996:	bf00      	nop
 8010998:	080109ad 	.word	0x080109ad
 801099c:	080109b3 	.word	0x080109b3
 80109a0:	080109e3 	.word	0x080109e3
 80109a4:	08010a57 	.word	0x08010a57
 80109a8:	08010a65 	.word	0x08010a65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	73fb      	strb	r3, [r7, #15]
      break;
 80109b0:	e06d      	b.n	8010a8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f897 	bl	8010aec <SetLineCoding>
 80109be:	4603      	mov	r3, r0
 80109c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80109c2:	7bbb      	ldrb	r3, [r7, #14]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d104      	bne.n	80109d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	2202      	movs	r2, #2
 80109cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80109d0:	e058      	b.n	8010a84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80109d2:	7bbb      	ldrb	r3, [r7, #14]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d055      	beq.n	8010a84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	2204      	movs	r2, #4
 80109dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80109e0:	e050      	b.n	8010a84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	3340      	adds	r3, #64	; 0x40
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f860 	bl	8010aae <GetLineCoding>
 80109ee:	4603      	mov	r3, r0
 80109f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80109f2:	7bbb      	ldrb	r3, [r7, #14]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d126      	bne.n	8010a46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a0a:	791b      	ldrb	r3, [r3, #4]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d13b      	bne.n	8010a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d133      	bne.n	8010a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d12b      	bne.n	8010a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d124      	bne.n	8010a88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 f984 	bl	8010d4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010a44:	e020      	b.n	8010a88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010a46:	7bbb      	ldrb	r3, [r7, #14]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d01d      	beq.n	8010a88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2204      	movs	r2, #4
 8010a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010a54:	e018      	b.n	8010a88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 f867 	bl	8010b2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 f8f8 	bl	8010c52 <CDC_ProcessReception>
      break;
 8010a62:	e014      	b.n	8010a8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010a64:	2100      	movs	r1, #0
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f001 f94f 	bl	8011d0a <USBH_ClrFeature>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010a70:	7bbb      	ldrb	r3, [r7, #14]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d10a      	bne.n	8010a8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010a7e:	e005      	b.n	8010a8c <USBH_CDC_Process+0x120>

    default:
      break;
 8010a80:	bf00      	nop
 8010a82:	e004      	b.n	8010a8e <USBH_CDC_Process+0x122>
      break;
 8010a84:	bf00      	nop
 8010a86:	e002      	b.n	8010a8e <USBH_CDC_Process+0x122>
      break;
 8010a88:	bf00      	nop
 8010a8a:	e000      	b.n	8010a8e <USBH_CDC_Process+0x122>
      break;
 8010a8c:	bf00      	nop

  }

  return status;
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010aa0:	2300      	movs	r3, #0
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	370c      	adds	r7, #12
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	22a1      	movs	r2, #161	; 0xa1
 8010abc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2221      	movs	r2, #33	; 0x21
 8010ac2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2207      	movs	r2, #7
 8010ad4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2207      	movs	r2, #7
 8010ada:	4619      	mov	r1, r3
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f001 faf4 	bl	80120ca <USBH_CtlReq>
 8010ae2:	4603      	mov	r3, r0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2221      	movs	r2, #33	; 0x21
 8010afa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2220      	movs	r2, #32
 8010b00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2207      	movs	r2, #7
 8010b12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2207      	movs	r2, #7
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f001 fad5 	bl	80120ca <USBH_CtlReq>
 8010b20:	4603      	mov	r3, r0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b086      	sub	sp, #24
 8010b2e:	af02      	add	r7, sp, #8
 8010b30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d002      	beq.n	8010b50 <CDC_ProcessTransmission+0x26>
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d025      	beq.n	8010b9a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8010b4e:	e07c      	b.n	8010c4a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	8b12      	ldrh	r2, [r2, #24]
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d90c      	bls.n	8010b76 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	69d9      	ldr	r1, [r3, #28]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	8b1a      	ldrh	r2, [r3, #24]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	7b58      	ldrb	r0, [r3, #13]
 8010b68:	2301      	movs	r3, #1
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f001 fdab 	bl	80126ca <USBH_BulkSendData>
 8010b74:	e00c      	b.n	8010b90 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	7b58      	ldrb	r0, [r3, #13]
 8010b84:	2301      	movs	r3, #1
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	4603      	mov	r3, r0
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f001 fd9d 	bl	80126ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2202      	movs	r2, #2
 8010b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010b98:	e057      	b.n	8010c4a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	7b5b      	ldrb	r3, [r3, #13]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f005 fa75 	bl	8016090 <USBH_LL_GetURBState>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010baa:	7afb      	ldrb	r3, [r7, #11]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d136      	bne.n	8010c1e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	8b12      	ldrh	r2, [r2, #24]
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d90e      	bls.n	8010bda <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	8b12      	ldrh	r2, [r2, #24]
 8010bc4:	1a9a      	subs	r2, r3, r2
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	69db      	ldr	r3, [r3, #28]
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	8b12      	ldrh	r2, [r2, #24]
 8010bd2:	441a      	add	r2, r3
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	61da      	str	r2, [r3, #28]
 8010bd8:	e002      	b.n	8010be0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2201      	movs	r2, #1
 8010bec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010bf0:	e006      	b.n	8010c00 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f892 	bl	8010d24 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2204      	movs	r2, #4
 8010c04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010c14:	2300      	movs	r3, #0
 8010c16:	2200      	movs	r2, #0
 8010c18:	f002 f8c6 	bl	8012da8 <osMessageQueuePut>
      break;
 8010c1c:	e014      	b.n	8010c48 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8010c1e:	7afb      	ldrb	r3, [r7, #11]
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d111      	bne.n	8010c48 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2201      	movs	r2, #1
 8010c28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2204      	movs	r2, #4
 8010c30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010c40:	2300      	movs	r3, #0
 8010c42:	2200      	movs	r2, #0
 8010c44:	f002 f8b0 	bl	8012da8 <osMessageQueuePut>
      break;
 8010c48:	bf00      	nop
  }
}
 8010c4a:	bf00      	nop
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b086      	sub	sp, #24
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c60:	69db      	ldr	r3, [r3, #28]
 8010c62:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010c64:	2300      	movs	r3, #0
 8010c66:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010c6e:	2b03      	cmp	r3, #3
 8010c70:	d002      	beq.n	8010c78 <CDC_ProcessReception+0x26>
 8010c72:	2b04      	cmp	r3, #4
 8010c74:	d00e      	beq.n	8010c94 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010c76:	e051      	b.n	8010d1c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	6a19      	ldr	r1, [r3, #32]
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	8b5a      	ldrh	r2, [r3, #26]
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	7b1b      	ldrb	r3, [r3, #12]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f001 fd45 	bl	8012714 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	2204      	movs	r2, #4
 8010c8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010c92:	e043      	b.n	8010d1c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	7b1b      	ldrb	r3, [r3, #12]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f005 f9f8 	bl	8016090 <USBH_LL_GetURBState>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010ca4:	7cfb      	ldrb	r3, [r7, #19]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d137      	bne.n	8010d1a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	7b1b      	ldrb	r3, [r3, #12]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f005 f95b 	bl	8015f6c <USBH_LL_GetLastXferSize>
 8010cb6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d016      	beq.n	8010cf0 <CDC_ProcessReception+0x9e>
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	8b5b      	ldrh	r3, [r3, #26]
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d910      	bls.n	8010cf0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	1ad2      	subs	r2, r2, r3
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	6a1a      	ldr	r2, [r3, #32]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	441a      	add	r2, r3
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	2203      	movs	r2, #3
 8010cea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8010cee:	e006      	b.n	8010cfe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 f81d 	bl	8010d38 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2204      	movs	r2, #4
 8010d02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010d12:	2300      	movs	r3, #0
 8010d14:	2200      	movs	r2, #0
 8010d16:	f002 f847 	bl	8012da8 <osMessageQueuePut>
      break;
 8010d1a:	bf00      	nop
  }
}
 8010d1c:	bf00      	nop
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d2c:	bf00      	nop
 8010d2e:	370c      	adds	r7, #12
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d40:	bf00      	nop
 8010d42:	370c      	adds	r7, #12
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010d74:	2302      	movs	r3, #2
 8010d76:	e044      	b.n	8010e02 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	79fa      	ldrb	r2, [r7, #7]
 8010d7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f000 f841 	bl	8010e18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d003      	beq.n	8010dc4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	2104      	movs	r1, #4
 8010dc8:	2010      	movs	r0, #16
 8010dca:	f001 ff67 	bl	8012c9c <osMessageQueueNew>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8010dd6:	4b0d      	ldr	r3, [pc, #52]	; (8010e0c <USBH_Init+0xac>)
 8010dd8:	4a0d      	ldr	r2, [pc, #52]	; (8010e10 <USBH_Init+0xb0>)
 8010dda:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8010ddc:	4b0b      	ldr	r3, [pc, #44]	; (8010e0c <USBH_Init+0xac>)
 8010dde:	2280      	movs	r2, #128	; 0x80
 8010de0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8010de2:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <USBH_Init+0xac>)
 8010de4:	2218      	movs	r2, #24
 8010de6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8010de8:	4a08      	ldr	r2, [pc, #32]	; (8010e0c <USBH_Init+0xac>)
 8010dea:	68f9      	ldr	r1, [r7, #12]
 8010dec:	4809      	ldr	r0, [pc, #36]	; (8010e14 <USBH_Init+0xb4>)
 8010dee:	f001 fdb3 	bl	8012958 <osThreadNew>
 8010df2:	4602      	mov	r2, r0
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8010dfa:	68f8      	ldr	r0, [r7, #12]
 8010dfc:	f005 f804 	bl	8015e08 <USBH_LL_Init>

  return USBH_OK;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	2001b9b4 	.word	0x2001b9b4
 8010e10:	08017d8c 	.word	0x08017d8c
 8010e14:	08011a81 	.word	0x08011a81

08010e18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010e20:	2300      	movs	r3, #0
 8010e22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e24:	2300      	movs	r3, #0
 8010e26:	60fb      	str	r3, [r7, #12]
 8010e28:	e009      	b.n	8010e3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	33e0      	adds	r3, #224	; 0xe0
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	4413      	add	r3, r2
 8010e34:	2200      	movs	r2, #0
 8010e36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	60fb      	str	r3, [r7, #12]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2b0e      	cmp	r3, #14
 8010e42:	d9f2      	bls.n	8010e2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e44:	2300      	movs	r3, #0
 8010e46:	60fb      	str	r3, [r7, #12]
 8010e48:	e009      	b.n	8010e5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4413      	add	r3, r2
 8010e50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010e54:	2200      	movs	r2, #0
 8010e56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	60fb      	str	r3, [r7, #12]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e64:	d3f1      	bcc.n	8010e4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2201      	movs	r2, #1
 8010e76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2201      	movs	r2, #1
 8010e84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2240      	movs	r2, #64	; 0x40
 8010e8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3714      	adds	r7, #20
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d016      	beq.n	8010f02 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10e      	bne.n	8010efc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010ee4:	1c59      	adds	r1, r3, #1
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	33de      	adds	r3, #222	; 0xde
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	73fb      	strb	r3, [r7, #15]
 8010efa:	e004      	b.n	8010f06 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010efc:	2302      	movs	r3, #2
 8010efe:	73fb      	strb	r3, [r7, #15]
 8010f00:	e001      	b.n	8010f06 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010f02:	2302      	movs	r3, #2
 8010f04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010f20:	2300      	movs	r3, #0
 8010f22:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010f2a:	78fa      	ldrb	r2, [r7, #3]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d204      	bcs.n	8010f3a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	78fa      	ldrb	r2, [r7, #3]
 8010f34:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010f38:	e001      	b.n	8010f3e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b087      	sub	sp, #28
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	4608      	mov	r0, r1
 8010f56:	4611      	mov	r1, r2
 8010f58:	461a      	mov	r2, r3
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	70fb      	strb	r3, [r7, #3]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	70bb      	strb	r3, [r7, #2]
 8010f62:	4613      	mov	r3, r2
 8010f64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010f66:	2300      	movs	r3, #0
 8010f68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010f74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010f76:	e025      	b.n	8010fc4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	221a      	movs	r2, #26
 8010f7c:	fb02 f303 	mul.w	r3, r2, r3
 8010f80:	3308      	adds	r3, #8
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	4413      	add	r3, r2
 8010f86:	3302      	adds	r3, #2
 8010f88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	795b      	ldrb	r3, [r3, #5]
 8010f8e:	78fa      	ldrb	r2, [r7, #3]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d002      	beq.n	8010f9a <USBH_FindInterface+0x4e>
 8010f94:	78fb      	ldrb	r3, [r7, #3]
 8010f96:	2bff      	cmp	r3, #255	; 0xff
 8010f98:	d111      	bne.n	8010fbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010f9e:	78ba      	ldrb	r2, [r7, #2]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d002      	beq.n	8010faa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010fa4:	78bb      	ldrb	r3, [r7, #2]
 8010fa6:	2bff      	cmp	r3, #255	; 0xff
 8010fa8:	d109      	bne.n	8010fbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010fae:	787a      	ldrb	r2, [r7, #1]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d002      	beq.n	8010fba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010fb4:	787b      	ldrb	r3, [r7, #1]
 8010fb6:	2bff      	cmp	r3, #255	; 0xff
 8010fb8:	d101      	bne.n	8010fbe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010fba:	7dfb      	ldrb	r3, [r7, #23]
 8010fbc:	e006      	b.n	8010fcc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010fbe:	7dfb      	ldrb	r3, [r7, #23]
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010fc4:	7dfb      	ldrb	r3, [r7, #23]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d9d6      	bls.n	8010f78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010fca:	23ff      	movs	r3, #255	; 0xff
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	371c      	adds	r7, #28
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f004 ff4d 	bl	8015e80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f005 f864 	bl	80160b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b088      	sub	sp, #32
 8010ffc:	af04      	add	r7, sp, #16
 8010ffe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8011000:	2302      	movs	r3, #2
 8011002:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011004:	2300      	movs	r3, #0
 8011006:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801100e:	b2db      	uxtb	r3, r3
 8011010:	2b01      	cmp	r3, #1
 8011012:	d102      	bne.n	801101a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2203      	movs	r2, #3
 8011018:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	b2db      	uxtb	r3, r3
 8011020:	2b0b      	cmp	r3, #11
 8011022:	f200 823c 	bhi.w	801149e <USBH_Process+0x4a6>
 8011026:	a201      	add	r2, pc, #4	; (adr r2, 801102c <USBH_Process+0x34>)
 8011028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801102c:	0801105d 	.word	0x0801105d
 8011030:	080110ab 	.word	0x080110ab
 8011034:	0801112f 	.word	0x0801112f
 8011038:	0801141d 	.word	0x0801141d
 801103c:	0801149f 	.word	0x0801149f
 8011040:	080111ef 	.word	0x080111ef
 8011044:	080113a7 	.word	0x080113a7
 8011048:	08011241 	.word	0x08011241
 801104c:	0801127d 	.word	0x0801127d
 8011050:	080112b7 	.word	0x080112b7
 8011054:	080112ff 	.word	0x080112ff
 8011058:	08011405 	.word	0x08011405
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011062:	b2db      	uxtb	r3, r3
 8011064:	2b00      	cmp	r3, #0
 8011066:	f000 821c 	beq.w	80114a2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2201      	movs	r2, #1
 801106e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8011070:	20c8      	movs	r0, #200	; 0xc8
 8011072:	f005 f86a 	bl	801614a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f004 ff5d 	bl	8015f36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2200      	movs	r2, #0
 8011080:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2200      	movs	r2, #0
 8011088:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2201      	movs	r2, #1
 8011090:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80110a0:	2300      	movs	r3, #0
 80110a2:	2200      	movs	r2, #0
 80110a4:	f001 fe80 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80110a8:	e1fb      	b.n	80114a2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d107      	bne.n	80110c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2202      	movs	r2, #2
 80110c0:	701a      	strb	r2, [r3, #0]
 80110c2:	e025      	b.n	8011110 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80110ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80110ce:	d914      	bls.n	80110fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80110d6:	3301      	adds	r3, #1
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80110e6:	2b03      	cmp	r3, #3
 80110e8:	d903      	bls.n	80110f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	220d      	movs	r2, #13
 80110ee:	701a      	strb	r2, [r3, #0]
 80110f0:	e00e      	b.n	8011110 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	701a      	strb	r2, [r3, #0]
 80110f8:	e00a      	b.n	8011110 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011100:	f103 020a 	add.w	r2, r3, #10
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801110a:	200a      	movs	r0, #10
 801110c:	f005 f81d 	bl	801614a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2201      	movs	r2, #1
 8011114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011124:	2300      	movs	r3, #0
 8011126:	2200      	movs	r2, #0
 8011128:	f001 fe3e 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 801112c:	e1c0      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011134:	2b00      	cmp	r3, #0
 8011136:	d005      	beq.n	8011144 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801113e:	2104      	movs	r1, #4
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011144:	2064      	movs	r0, #100	; 0x64
 8011146:	f005 f800 	bl	801614a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f004 fece 	bl	8015eec <USBH_LL_GetSpeed>
 8011150:	4603      	mov	r3, r0
 8011152:	461a      	mov	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2205      	movs	r2, #5
 801115e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8011160:	2100      	movs	r1, #0
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f001 fb23 	bl	80127ae <USBH_AllocPipe>
 8011168:	4603      	mov	r3, r0
 801116a:	461a      	mov	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8011170:	2180      	movs	r1, #128	; 0x80
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f001 fb1b 	bl	80127ae <USBH_AllocPipe>
 8011178:	4603      	mov	r3, r0
 801117a:	461a      	mov	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	7919      	ldrb	r1, [r3, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011194:	b292      	uxth	r2, r2
 8011196:	9202      	str	r2, [sp, #8]
 8011198:	2200      	movs	r2, #0
 801119a:	9201      	str	r2, [sp, #4]
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	4603      	mov	r3, r0
 80111a0:	2280      	movs	r2, #128	; 0x80
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f001 fad4 	bl	8012750 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7959      	ldrb	r1, [r3, #5]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80111bc:	b292      	uxth	r2, r2
 80111be:	9202      	str	r2, [sp, #8]
 80111c0:	2200      	movs	r2, #0
 80111c2:	9201      	str	r2, [sp, #4]
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	4603      	mov	r3, r0
 80111c8:	2200      	movs	r2, #0
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f001 fac0 	bl	8012750 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2201      	movs	r2, #1
 80111d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80111e4:	2300      	movs	r3, #0
 80111e6:	2200      	movs	r2, #0
 80111e8:	f001 fdde 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 80111ec:	e160      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 f964 	bl	80114bc <USBH_HandleEnum>
 80111f4:	4603      	mov	r3, r0
 80111f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80111f8:	7bbb      	ldrb	r3, [r7, #14]
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	f040 8152 	bne.w	80114a6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8011210:	2b01      	cmp	r3, #1
 8011212:	d103      	bne.n	801121c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2208      	movs	r2, #8
 8011218:	701a      	strb	r2, [r3, #0]
 801121a:	e002      	b.n	8011222 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2207      	movs	r2, #7
 8011220:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2205      	movs	r2, #5
 8011226:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011236:	2300      	movs	r3, #0
 8011238:	2200      	movs	r2, #0
 801123a:	f001 fdb5 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 801123e:	e132      	b.n	80114a6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 812f 	beq.w	80114aa <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011252:	2101      	movs	r1, #1
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2208      	movs	r2, #8
 801125c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2205      	movs	r2, #5
 8011262:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011272:	2300      	movs	r3, #0
 8011274:	2200      	movs	r2, #0
 8011276:	f001 fd97 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 801127a:	e116      	b.n	80114aa <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8011282:	b29b      	uxth	r3, r3
 8011284:	4619      	mov	r1, r3
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 fcf8 	bl	8011c7c <USBH_SetCfg>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d102      	bne.n	8011298 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2209      	movs	r2, #9
 8011296:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80112ac:	2300      	movs	r3, #0
 80112ae:	2200      	movs	r2, #0
 80112b0:	f001 fd7a 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 80112b4:	e0fc      	b.n	80114b0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80112bc:	f003 0320 	and.w	r3, r3, #32
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00a      	beq.n	80112da <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80112c4:	2101      	movs	r1, #1
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fcfb 	bl	8011cc2 <USBH_SetFeature>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d106      	bne.n	80112e0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	220a      	movs	r2, #10
 80112d6:	701a      	strb	r2, [r3, #0]
 80112d8:	e002      	b.n	80112e0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	220a      	movs	r2, #10
 80112de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2201      	movs	r2, #1
 80112e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80112f4:	2300      	movs	r3, #0
 80112f6:	2200      	movs	r2, #0
 80112f8:	f001 fd56 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 80112fc:	e0d8      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011304:	2b00      	cmp	r3, #0
 8011306:	d03f      	beq.n	8011388 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011310:	2300      	movs	r3, #0
 8011312:	73fb      	strb	r3, [r7, #15]
 8011314:	e016      	b.n	8011344 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8011316:	7bfa      	ldrb	r2, [r7, #15]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	32de      	adds	r2, #222	; 0xde
 801131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011320:	791a      	ldrb	r2, [r3, #4]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8011328:	429a      	cmp	r2, r3
 801132a:	d108      	bne.n	801133e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 801132c:	7bfa      	ldrb	r2, [r7, #15]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	32de      	adds	r2, #222	; 0xde
 8011332:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 801133c:	e005      	b.n	801134a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	3301      	adds	r3, #1
 8011342:	73fb      	strb	r3, [r7, #15]
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d0e5      	beq.n	8011316 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d016      	beq.n	8011382 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801135a:	689b      	ldr	r3, [r3, #8]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	4798      	blx	r3
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d109      	bne.n	801137a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2206      	movs	r2, #6
 801136a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011372:	2103      	movs	r1, #3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	4798      	blx	r3
 8011378:	e006      	b.n	8011388 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	220d      	movs	r2, #13
 801137e:	701a      	strb	r2, [r3, #0]
 8011380:	e002      	b.n	8011388 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	220d      	movs	r2, #13
 8011386:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2205      	movs	r2, #5
 801138c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801139c:	2300      	movs	r3, #0
 801139e:	2200      	movs	r2, #0
 80113a0:	f001 fd02 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 80113a4:	e084      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d017      	beq.n	80113e0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	4798      	blx	r3
 80113bc:	4603      	mov	r3, r0
 80113be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80113c0:	7bbb      	ldrb	r3, [r7, #14]
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d103      	bne.n	80113d0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	220b      	movs	r2, #11
 80113cc:	701a      	strb	r2, [r3, #0]
 80113ce:	e00a      	b.n	80113e6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80113d0:	7bbb      	ldrb	r3, [r7, #14]
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	d106      	bne.n	80113e6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	220d      	movs	r2, #13
 80113dc:	701a      	strb	r2, [r3, #0]
 80113de:	e002      	b.n	80113e6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	220d      	movs	r2, #13
 80113e4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2205      	movs	r2, #5
 80113ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80113fa:	2300      	movs	r3, #0
 80113fc:	2200      	movs	r2, #0
 80113fe:	f001 fcd3 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 8011402:	e055      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801140a:	2b00      	cmp	r3, #0
 801140c:	d04f      	beq.n	80114ae <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	4798      	blx	r3
      }
      break;
 801141a:	e048      	b.n	80114ae <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff fcf7 	bl	8010e18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011430:	2b00      	cmp	r3, #0
 8011432:	d009      	beq.n	8011448 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801144e:	2b00      	cmp	r3, #0
 8011450:	d005      	beq.n	801145e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011458:	2105      	movs	r1, #5
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8011464:	b2db      	uxtb	r3, r3
 8011466:	2b01      	cmp	r3, #1
 8011468:	d107      	bne.n	801147a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f7ff fdb0 	bl	8010fd8 <USBH_Start>
 8011478:	e002      	b.n	8011480 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f004 fd00 	bl	8015e80 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2201      	movs	r2, #1
 8011484:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011494:	2300      	movs	r3, #0
 8011496:	2200      	movs	r2, #0
 8011498:	f001 fc86 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      break;
 801149c:	e008      	b.n	80114b0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 801149e:	bf00      	nop
 80114a0:	e006      	b.n	80114b0 <USBH_Process+0x4b8>
      break;
 80114a2:	bf00      	nop
 80114a4:	e004      	b.n	80114b0 <USBH_Process+0x4b8>
      break;
 80114a6:	bf00      	nop
 80114a8:	e002      	b.n	80114b0 <USBH_Process+0x4b8>
    break;
 80114aa:	bf00      	nop
 80114ac:	e000      	b.n	80114b0 <USBH_Process+0x4b8>
      break;
 80114ae:	bf00      	nop
  }
  return USBH_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop

080114bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b088      	sub	sp, #32
 80114c0:	af04      	add	r7, sp, #16
 80114c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80114c4:	2301      	movs	r3, #1
 80114c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80114c8:	2301      	movs	r3, #1
 80114ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	785b      	ldrb	r3, [r3, #1]
 80114d0:	2b07      	cmp	r3, #7
 80114d2:	f200 8208 	bhi.w	80118e6 <USBH_HandleEnum+0x42a>
 80114d6:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <USBH_HandleEnum+0x20>)
 80114d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114dc:	080114fd 	.word	0x080114fd
 80114e0:	080115bb 	.word	0x080115bb
 80114e4:	08011625 	.word	0x08011625
 80114e8:	080116b3 	.word	0x080116b3
 80114ec:	0801171d 	.word	0x0801171d
 80114f0:	0801178d 	.word	0x0801178d
 80114f4:	08011829 	.word	0x08011829
 80114f8:	080118a7 	.word	0x080118a7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80114fc:	2108      	movs	r1, #8
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 faec 	bl	8011adc <USBH_Get_DevDesc>
 8011504:	4603      	mov	r3, r0
 8011506:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011508:	7bbb      	ldrb	r3, [r7, #14]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d130      	bne.n	8011570 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2201      	movs	r2, #1
 801151c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	7919      	ldrb	r1, [r3, #4]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011532:	b292      	uxth	r2, r2
 8011534:	9202      	str	r2, [sp, #8]
 8011536:	2200      	movs	r2, #0
 8011538:	9201      	str	r2, [sp, #4]
 801153a:	9300      	str	r3, [sp, #0]
 801153c:	4603      	mov	r3, r0
 801153e:	2280      	movs	r2, #128	; 0x80
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f001 f905 	bl	8012750 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7959      	ldrb	r1, [r3, #5]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801155a:	b292      	uxth	r2, r2
 801155c:	9202      	str	r2, [sp, #8]
 801155e:	2200      	movs	r2, #0
 8011560:	9201      	str	r2, [sp, #4]
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	4603      	mov	r3, r0
 8011566:	2200      	movs	r2, #0
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f001 f8f1 	bl	8012750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801156e:	e1bc      	b.n	80118ea <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011570:	7bbb      	ldrb	r3, [r7, #14]
 8011572:	2b03      	cmp	r3, #3
 8011574:	f040 81b9 	bne.w	80118ea <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801157e:	3301      	adds	r3, #1
 8011580:	b2da      	uxtb	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801158e:	2b03      	cmp	r3, #3
 8011590:	d903      	bls.n	801159a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	220d      	movs	r2, #13
 8011596:	701a      	strb	r2, [r3, #0]
      break;
 8011598:	e1a7      	b.n	80118ea <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	795b      	ldrb	r3, [r3, #5]
 801159e:	4619      	mov	r1, r3
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f001 f925 	bl	80127f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	791b      	ldrb	r3, [r3, #4]
 80115aa:	4619      	mov	r1, r3
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f001 f91f 	bl	80127f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	701a      	strb	r2, [r3, #0]
      break;
 80115b8:	e197      	b.n	80118ea <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80115ba:	2112      	movs	r1, #18
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 fa8d 	bl	8011adc <USBH_Get_DevDesc>
 80115c2:	4603      	mov	r3, r0
 80115c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80115c6:	7bbb      	ldrb	r3, [r7, #14]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d103      	bne.n	80115d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2202      	movs	r2, #2
 80115d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80115d2:	e18c      	b.n	80118ee <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115d4:	7bbb      	ldrb	r3, [r7, #14]
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	f040 8189 	bne.w	80118ee <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80115e2:	3301      	adds	r3, #1
 80115e4:	b2da      	uxtb	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d903      	bls.n	80115fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	220d      	movs	r2, #13
 80115fa:	701a      	strb	r2, [r3, #0]
      break;
 80115fc:	e177      	b.n	80118ee <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	795b      	ldrb	r3, [r3, #5]
 8011602:	4619      	mov	r1, r3
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f001 f8f3 	bl	80127f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	791b      	ldrb	r3, [r3, #4]
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f001 f8ed 	bl	80127f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2200      	movs	r2, #0
 801161a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	701a      	strb	r2, [r3, #0]
      break;
 8011622:	e164      	b.n	80118ee <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8011624:	2101      	movs	r1, #1
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 fb04 	bl	8011c34 <USBH_SetAddress>
 801162c:	4603      	mov	r3, r0
 801162e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011630:	7bbb      	ldrb	r3, [r7, #14]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d132      	bne.n	801169c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8011636:	2002      	movs	r0, #2
 8011638:	f004 fd87 	bl	801614a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2201      	movs	r2, #1
 8011640:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2203      	movs	r2, #3
 8011648:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	7919      	ldrb	r1, [r3, #4]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801165e:	b292      	uxth	r2, r2
 8011660:	9202      	str	r2, [sp, #8]
 8011662:	2200      	movs	r2, #0
 8011664:	9201      	str	r2, [sp, #4]
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	4603      	mov	r3, r0
 801166a:	2280      	movs	r2, #128	; 0x80
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f001 f86f 	bl	8012750 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	7959      	ldrb	r1, [r3, #5]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011686:	b292      	uxth	r2, r2
 8011688:	9202      	str	r2, [sp, #8]
 801168a:	2200      	movs	r2, #0
 801168c:	9201      	str	r2, [sp, #4]
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	4603      	mov	r3, r0
 8011692:	2200      	movs	r2, #0
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f001 f85b 	bl	8012750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801169a:	e12a      	b.n	80118f2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801169c:	7bbb      	ldrb	r3, [r7, #14]
 801169e:	2b03      	cmp	r3, #3
 80116a0:	f040 8127 	bne.w	80118f2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	220d      	movs	r2, #13
 80116a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2200      	movs	r2, #0
 80116ae:	705a      	strb	r2, [r3, #1]
      break;
 80116b0:	e11f      	b.n	80118f2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80116b2:	2109      	movs	r1, #9
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 fa39 	bl	8011b2c <USBH_Get_CfgDesc>
 80116ba:	4603      	mov	r3, r0
 80116bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80116be:	7bbb      	ldrb	r3, [r7, #14]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d103      	bne.n	80116cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2204      	movs	r2, #4
 80116c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80116ca:	e114      	b.n	80118f6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80116cc:	7bbb      	ldrb	r3, [r7, #14]
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	f040 8111 	bne.w	80118f6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80116da:	3301      	adds	r3, #1
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80116ea:	2b03      	cmp	r3, #3
 80116ec:	d903      	bls.n	80116f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	220d      	movs	r2, #13
 80116f2:	701a      	strb	r2, [r3, #0]
      break;
 80116f4:	e0ff      	b.n	80118f6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	795b      	ldrb	r3, [r3, #5]
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f001 f877 	bl	80127f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	791b      	ldrb	r3, [r3, #4]
 8011706:	4619      	mov	r1, r3
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 f871 	bl	80127f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	701a      	strb	r2, [r3, #0]
      break;
 801171a:	e0ec      	b.n	80118f6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8011722:	4619      	mov	r1, r3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 fa01 	bl	8011b2c <USBH_Get_CfgDesc>
 801172a:	4603      	mov	r3, r0
 801172c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801172e:	7bbb      	ldrb	r3, [r7, #14]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d103      	bne.n	801173c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2205      	movs	r2, #5
 8011738:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801173a:	e0de      	b.n	80118fa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801173c:	7bbb      	ldrb	r3, [r7, #14]
 801173e:	2b03      	cmp	r3, #3
 8011740:	f040 80db 	bne.w	80118fa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801174a:	3301      	adds	r3, #1
 801174c:	b2da      	uxtb	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801175a:	2b03      	cmp	r3, #3
 801175c:	d903      	bls.n	8011766 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	220d      	movs	r2, #13
 8011762:	701a      	strb	r2, [r3, #0]
      break;
 8011764:	e0c9      	b.n	80118fa <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	795b      	ldrb	r3, [r3, #5]
 801176a:	4619      	mov	r1, r3
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f001 f83f 	bl	80127f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	791b      	ldrb	r3, [r3, #4]
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f001 f839 	bl	80127f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	701a      	strb	r2, [r3, #0]
      break;
 801178a:	e0b6      	b.n	80118fa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8011792:	2b00      	cmp	r3, #0
 8011794:	d036      	beq.n	8011804 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80117a2:	23ff      	movs	r3, #255	; 0xff
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 f9e5 	bl	8011b74 <USBH_Get_StringDesc>
 80117aa:	4603      	mov	r3, r0
 80117ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80117ae:	7bbb      	ldrb	r3, [r7, #14]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d111      	bne.n	80117d8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2206      	movs	r2, #6
 80117b8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2205      	movs	r2, #5
 80117be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80117ce:	2300      	movs	r3, #0
 80117d0:	2200      	movs	r2, #0
 80117d2:	f001 fae9 	bl	8012da8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80117d6:	e092      	b.n	80118fe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80117d8:	7bbb      	ldrb	r3, [r7, #14]
 80117da:	2b03      	cmp	r3, #3
 80117dc:	f040 808f 	bne.w	80118fe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2206      	movs	r2, #6
 80117e4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2205      	movs	r2, #5
 80117ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80117fa:	2300      	movs	r3, #0
 80117fc:	2200      	movs	r2, #0
 80117fe:	f001 fad3 	bl	8012da8 <osMessageQueuePut>
      break;
 8011802:	e07c      	b.n	80118fe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2206      	movs	r2, #6
 8011808:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2205      	movs	r2, #5
 801180e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801181e:	2300      	movs	r3, #0
 8011820:	2200      	movs	r2, #0
 8011822:	f001 fac1 	bl	8012da8 <osMessageQueuePut>
      break;
 8011826:	e06a      	b.n	80118fe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801182e:	2b00      	cmp	r3, #0
 8011830:	d027      	beq.n	8011882 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801183e:	23ff      	movs	r3, #255	; 0xff
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 f997 	bl	8011b74 <USBH_Get_StringDesc>
 8011846:	4603      	mov	r3, r0
 8011848:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801184a:	7bbb      	ldrb	r3, [r7, #14]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d103      	bne.n	8011858 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2207      	movs	r2, #7
 8011854:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8011856:	e054      	b.n	8011902 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011858:	7bbb      	ldrb	r3, [r7, #14]
 801185a:	2b03      	cmp	r3, #3
 801185c:	d151      	bne.n	8011902 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2207      	movs	r2, #7
 8011862:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2205      	movs	r2, #5
 8011868:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011878:	2300      	movs	r3, #0
 801187a:	2200      	movs	r2, #0
 801187c:	f001 fa94 	bl	8012da8 <osMessageQueuePut>
      break;
 8011880:	e03f      	b.n	8011902 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2207      	movs	r2, #7
 8011886:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2205      	movs	r2, #5
 801188c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801189c:	2300      	movs	r3, #0
 801189e:	2200      	movs	r2, #0
 80118a0:	f001 fa82 	bl	8012da8 <osMessageQueuePut>
      break;
 80118a4:	e02d      	b.n	8011902 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d017      	beq.n	80118e0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80118bc:	23ff      	movs	r3, #255	; 0xff
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 f958 	bl	8011b74 <USBH_Get_StringDesc>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80118c8:	7bbb      	ldrb	r3, [r7, #14]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d102      	bne.n	80118d4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80118ce:	2300      	movs	r3, #0
 80118d0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80118d2:	e018      	b.n	8011906 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80118d4:	7bbb      	ldrb	r3, [r7, #14]
 80118d6:	2b03      	cmp	r3, #3
 80118d8:	d115      	bne.n	8011906 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80118da:	2300      	movs	r3, #0
 80118dc:	73fb      	strb	r3, [r7, #15]
      break;
 80118de:	e012      	b.n	8011906 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	73fb      	strb	r3, [r7, #15]
      break;
 80118e4:	e00f      	b.n	8011906 <USBH_HandleEnum+0x44a>

    default:
      break;
 80118e6:	bf00      	nop
 80118e8:	e00e      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118ea:	bf00      	nop
 80118ec:	e00c      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118ee:	bf00      	nop
 80118f0:	e00a      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118f2:	bf00      	nop
 80118f4:	e008      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118f6:	bf00      	nop
 80118f8:	e006      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118fa:	bf00      	nop
 80118fc:	e004      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 80118fe:	bf00      	nop
 8011900:	e002      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 8011902:	bf00      	nop
 8011904:	e000      	b.n	8011908 <USBH_HandleEnum+0x44c>
      break;
 8011906:	bf00      	nop
  }
  return Status;
 8011908:	7bfb      	ldrb	r3, [r7, #15]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop

08011914 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8011926:	bf00      	nop
 8011928:	370c      	adds	r7, #12
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr

08011932 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b082      	sub	sp, #8
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011940:	1c5a      	adds	r2, r3, #1
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 f804 	bl	8011956 <USBH_HandleSof>
}
 801194e:	bf00      	nop
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b082      	sub	sp, #8
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b0b      	cmp	r3, #11
 8011966:	d10a      	bne.n	801197e <USBH_HandleSof+0x28>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801196e:	2b00      	cmp	r3, #0
 8011970:	d005      	beq.n	801197e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011978:	699b      	ldr	r3, [r3, #24]
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	4798      	blx	r3
  }
}
 801197e:	bf00      	nop
 8011980:	3708      	adds	r7, #8
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2201      	movs	r2, #1
 8011992:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2201      	movs	r2, #1
 801199a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80119aa:	2300      	movs	r3, #0
 80119ac:	2200      	movs	r2, #0
 80119ae:	f001 f9fb 	bl	8012da8 <osMessageQueuePut>
#endif
#endif

  return;
 80119b2:	bf00      	nop
}
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80119ba:	b480      	push	{r7}
 80119bc:	b083      	sub	sp, #12
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2200      	movs	r2, #0
 80119c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80119ca:	bf00      	nop
}
 80119cc:	370c      	adds	r7, #12
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b082      	sub	sp, #8
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2201      	movs	r2, #1
 80119e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2201      	movs	r2, #1
 80119fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f001 f9cb 	bl	8012da8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f004 fa3a 	bl	8015eb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	791b      	ldrb	r3, [r3, #4]
 8011a46:	4619      	mov	r1, r3
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 fed1 	bl	80127f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	795b      	ldrb	r3, [r3, #5]
 8011a52:	4619      	mov	r1, r3
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 fecb 	bl	80127f0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a6e:	2300      	movs	r3, #0
 8011a70:	2200      	movs	r2, #0
 8011a72:	f001 f999 	bl	8012da8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8011a94:	f04f 33ff 	mov.w	r3, #4294967295
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f001 f9f9 	bl	8012e90 <osMessageQueueGet>
 8011a9e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1f0      	bne.n	8011a88 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f7ff faa6 	bl	8010ff8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8011aac:	e7ec      	b.n	8011a88 <USBH_Process_OS+0x8>

08011aae <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b082      	sub	sp, #8
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011aca:	2300      	movs	r3, #0
 8011acc:	2200      	movs	r2, #0
 8011ace:	f001 f96b 	bl	8012da8 <osMessageQueuePut>
#endif

  return USBH_OK;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8011aee:	78fb      	ldrb	r3, [r7, #3]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	4613      	mov	r3, r2
 8011af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011afa:	2100      	movs	r1, #0
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f864 	bl	8011bca <USBH_GetDescriptor>
 8011b02:	4603      	mov	r3, r0
 8011b04:	73fb      	strb	r3, [r7, #15]
 8011b06:	7bfb      	ldrb	r3, [r7, #15]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10a      	bne.n	8011b22 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011b18:	78fa      	ldrb	r2, [r7, #3]
 8011b1a:	b292      	uxth	r2, r2
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	f000 f918 	bl	8011d52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8011b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af02      	add	r7, sp, #8
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	460b      	mov	r3, r1
 8011b36:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	331c      	adds	r3, #28
 8011b3c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011b3e:	887b      	ldrh	r3, [r7, #2]
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b48:	2100      	movs	r1, #0
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 f83d 	bl	8011bca <USBH_GetDescriptor>
 8011b50:	4603      	mov	r3, r0
 8011b52:	72fb      	strb	r3, [r7, #11]
 8011b54:	7afb      	ldrb	r3, [r7, #11]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d107      	bne.n	8011b6a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011b60:	887a      	ldrh	r2, [r7, #2]
 8011b62:	68f9      	ldr	r1, [r7, #12]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f000 f964 	bl	8011e32 <USBH_ParseCfgDesc>
  }

  return status;
 8011b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b088      	sub	sp, #32
 8011b78:	af02      	add	r7, sp, #8
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	607a      	str	r2, [r7, #4]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	460b      	mov	r3, r1
 8011b82:	72fb      	strb	r3, [r7, #11]
 8011b84:	4613      	mov	r3, r2
 8011b86:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8011b88:	7afb      	ldrb	r3, [r7, #11]
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011b90:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8011b98:	893b      	ldrh	r3, [r7, #8]
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	2100      	movs	r1, #0
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f000 f812 	bl	8011bca <USBH_GetDescriptor>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	75fb      	strb	r3, [r7, #23]
 8011baa:	7dfb      	ldrb	r3, [r7, #23]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d107      	bne.n	8011bc0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011bb6:	893a      	ldrh	r2, [r7, #8]
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 fa37 	bl	801202e <USBH_ParseStringDesc>
  }

  return status;
 8011bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3718      	adds	r7, #24
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b084      	sub	sp, #16
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	60f8      	str	r0, [r7, #12]
 8011bd2:	607b      	str	r3, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	72fb      	strb	r3, [r7, #11]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	789b      	ldrb	r3, [r3, #2]
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d11c      	bne.n	8011c1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011be4:	7afb      	ldrb	r3, [r7, #11]
 8011be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2206      	movs	r2, #6
 8011bf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	893a      	ldrh	r2, [r7, #8]
 8011bfa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011bfc:	893b      	ldrh	r3, [r7, #8]
 8011bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c06:	d104      	bne.n	8011c12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	f240 4209 	movw	r2, #1033	; 0x409
 8011c0e:	829a      	strh	r2, [r3, #20]
 8011c10:	e002      	b.n	8011c18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	8b3a      	ldrh	r2, [r7, #24]
 8011c1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011c1e:	8b3b      	ldrh	r3, [r7, #24]
 8011c20:	461a      	mov	r2, r3
 8011c22:	6879      	ldr	r1, [r7, #4]
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f000 fa50 	bl	80120ca <USBH_CtlReq>
 8011c2a:	4603      	mov	r3, r0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	789b      	ldrb	r3, [r3, #2]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d10f      	bne.n	8011c68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2205      	movs	r2, #5
 8011c52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011c54:	78fb      	ldrb	r3, [r7, #3]
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011c68:	2200      	movs	r2, #0
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fa2c 	bl	80120ca <USBH_CtlReq>
 8011c72:	4603      	mov	r3, r0
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	789b      	ldrb	r3, [r3, #2]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d10e      	bne.n	8011cae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2209      	movs	r2, #9
 8011c9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	887a      	ldrh	r2, [r7, #2]
 8011ca0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2200      	movs	r2, #0
 8011cac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011cae:	2200      	movs	r2, #0
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fa09 	bl	80120ca <USBH_CtlReq>
 8011cb8:	4603      	mov	r3, r0
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b082      	sub	sp, #8
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	789b      	ldrb	r3, [r3, #2]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d10f      	bne.n	8011cf6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2203      	movs	r2, #3
 8011ce0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011ce2:	78fb      	ldrb	r3, [r7, #3]
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2200      	movs	r2, #0
 8011cee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 f9e5 	bl	80120ca <USBH_CtlReq>
 8011d00:	4603      	mov	r3, r0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3708      	adds	r7, #8
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b082      	sub	sp, #8
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	460b      	mov	r3, r1
 8011d14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	789b      	ldrb	r3, [r3, #2]
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d10f      	bne.n	8011d3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2202      	movs	r2, #2
 8011d22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2201      	movs	r2, #1
 8011d28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	b29a      	uxth	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8011d3e:	2200      	movs	r2, #0
 8011d40:	2100      	movs	r1, #0
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 f9c1 	bl	80120ca <USBH_CtlReq>
 8011d48:	4603      	mov	r3, r0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8011d52:	b480      	push	{r7}
 8011d54:	b085      	sub	sp, #20
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	60f8      	str	r0, [r7, #12]
 8011d5a:	60b9      	str	r1, [r7, #8]
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	781a      	ldrb	r2, [r3, #0]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	785a      	ldrb	r2, [r3, #1]
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	3302      	adds	r3, #2
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	3303      	adds	r3, #3
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	021b      	lsls	r3, r3, #8
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4313      	orrs	r3, r2
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	791a      	ldrb	r2, [r3, #4]
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	795a      	ldrb	r2, [r3, #5]
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	799a      	ldrb	r2, [r3, #6]
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	79da      	ldrb	r2, [r3, #7]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8011dac:	88fb      	ldrh	r3, [r7, #6]
 8011dae:	2b08      	cmp	r3, #8
 8011db0:	d939      	bls.n	8011e26 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	3308      	adds	r3, #8
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	3309      	adds	r3, #9
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	021b      	lsls	r3, r3, #8
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	330a      	adds	r3, #10
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	b29a      	uxth	r2, r3
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	330b      	adds	r3, #11
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	021b      	lsls	r3, r3, #8
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	4313      	orrs	r3, r2
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	330c      	adds	r3, #12
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	330d      	adds	r3, #13
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	021b      	lsls	r3, r3, #8
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	4313      	orrs	r3, r2
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	7b9a      	ldrb	r2, [r3, #14]
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	7bda      	ldrb	r2, [r3, #15]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	7c1a      	ldrb	r2, [r3, #16]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	7c5a      	ldrb	r2, [r3, #17]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	745a      	strb	r2, [r3, #17]
  }
}
 8011e26:	bf00      	nop
 8011e28:	3714      	adds	r7, #20
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b08a      	sub	sp, #40	; 0x28
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011e44:	2300      	movs	r3, #0
 8011e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	781a      	ldrb	r2, [r3, #0]
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	785a      	ldrb	r2, [r3, #1]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	3302      	adds	r3, #2
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	3303      	adds	r3, #3
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	021b      	lsls	r3, r3, #8
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	791a      	ldrb	r2, [r3, #4]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	795a      	ldrb	r2, [r3, #5]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	799a      	ldrb	r2, [r3, #6]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	79da      	ldrb	r2, [r3, #7]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	7a1a      	ldrb	r2, [r3, #8]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011ea8:	88fb      	ldrh	r3, [r7, #6]
 8011eaa:	2b09      	cmp	r3, #9
 8011eac:	d95f      	bls.n	8011f6e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8011eae:	2309      	movs	r3, #9
 8011eb0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011eb6:	e051      	b.n	8011f5c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011eb8:	f107 0316 	add.w	r3, r7, #22
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ec0:	f000 f8e8 	bl	8012094 <USBH_GetNextDesc>
 8011ec4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec8:	785b      	ldrb	r3, [r3, #1]
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d146      	bne.n	8011f5c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8011ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ed2:	221a      	movs	r2, #26
 8011ed4:	fb02 f303 	mul.w	r3, r2, r3
 8011ed8:	3308      	adds	r3, #8
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	4413      	add	r3, r2
 8011ede:	3302      	adds	r3, #2
 8011ee0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ee4:	69f8      	ldr	r0, [r7, #28]
 8011ee6:	f000 f846 	bl	8011f76 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011eea:	2300      	movs	r3, #0
 8011eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011ef4:	e022      	b.n	8011f3c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011ef6:	f107 0316 	add.w	r3, r7, #22
 8011efa:	4619      	mov	r1, r3
 8011efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011efe:	f000 f8c9 	bl	8012094 <USBH_GetNextDesc>
 8011f02:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	785b      	ldrb	r3, [r3, #1]
 8011f08:	2b05      	cmp	r3, #5
 8011f0a:	d117      	bne.n	8011f3c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011f10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011f14:	3201      	adds	r2, #1
 8011f16:	00d2      	lsls	r2, r2, #3
 8011f18:	211a      	movs	r1, #26
 8011f1a:	fb01 f303 	mul.w	r3, r1, r3
 8011f1e:	4413      	add	r3, r2
 8011f20:	3308      	adds	r3, #8
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	4413      	add	r3, r2
 8011f26:	3304      	adds	r3, #4
 8011f28:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8011f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f2c:	69b8      	ldr	r0, [r7, #24]
 8011f2e:	f000 f851 	bl	8011fd4 <USBH_ParseEPDesc>
            ep_ix++;
 8011f32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f36:	3301      	adds	r3, #1
 8011f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	791b      	ldrb	r3, [r3, #4]
 8011f40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d204      	bcs.n	8011f52 <USBH_ParseCfgDesc+0x120>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	885a      	ldrh	r2, [r3, #2]
 8011f4c:	8afb      	ldrh	r3, [r7, #22]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d8d1      	bhi.n	8011ef6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8011f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011f56:	3301      	adds	r3, #1
 8011f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d804      	bhi.n	8011f6e <USBH_ParseCfgDesc+0x13c>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	885a      	ldrh	r2, [r3, #2]
 8011f68:	8afb      	ldrh	r3, [r7, #22]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d8a4      	bhi.n	8011eb8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8011f6e:	bf00      	nop
 8011f70:	3728      	adds	r7, #40	; 0x28
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8011f76:	b480      	push	{r7}
 8011f78:	b083      	sub	sp, #12
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	781a      	ldrb	r2, [r3, #0]
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	785a      	ldrb	r2, [r3, #1]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	789a      	ldrb	r2, [r3, #2]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	78da      	ldrb	r2, [r3, #3]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	791a      	ldrb	r2, [r3, #4]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	795a      	ldrb	r2, [r3, #5]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	799a      	ldrb	r2, [r3, #6]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	79da      	ldrb	r2, [r3, #7]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	7a1a      	ldrb	r2, [r3, #8]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	721a      	strb	r2, [r3, #8]
}
 8011fc8:	bf00      	nop
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	781a      	ldrb	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	785a      	ldrb	r2, [r3, #1]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	789a      	ldrb	r2, [r3, #2]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	78da      	ldrb	r2, [r3, #3]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	3304      	adds	r3, #4
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	b29a      	uxth	r2, r3
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	3305      	adds	r3, #5
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	b29b      	uxth	r3, r3
 801200e:	021b      	lsls	r3, r3, #8
 8012010:	b29b      	uxth	r3, r3
 8012012:	4313      	orrs	r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	799a      	ldrb	r2, [r3, #6]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	719a      	strb	r2, [r3, #6]
}
 8012022:	bf00      	nop
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr

0801202e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801202e:	b480      	push	{r7}
 8012030:	b087      	sub	sp, #28
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	60b9      	str	r1, [r7, #8]
 8012038:	4613      	mov	r3, r2
 801203a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	3301      	adds	r3, #1
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	2b03      	cmp	r3, #3
 8012044:	d120      	bne.n	8012088 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	1e9a      	subs	r2, r3, #2
 801204c:	88fb      	ldrh	r3, [r7, #6]
 801204e:	4293      	cmp	r3, r2
 8012050:	bf28      	it	cs
 8012052:	4613      	movcs	r3, r2
 8012054:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	3302      	adds	r3, #2
 801205a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801205c:	2300      	movs	r3, #0
 801205e:	82fb      	strh	r3, [r7, #22]
 8012060:	e00b      	b.n	801207a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012062:	8afb      	ldrh	r3, [r7, #22]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	4413      	add	r3, r2
 8012068:	781a      	ldrb	r2, [r3, #0]
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	701a      	strb	r2, [r3, #0]
      pdest++;
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	3301      	adds	r3, #1
 8012072:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8012074:	8afb      	ldrh	r3, [r7, #22]
 8012076:	3302      	adds	r3, #2
 8012078:	82fb      	strh	r3, [r7, #22]
 801207a:	8afa      	ldrh	r2, [r7, #22]
 801207c:	8abb      	ldrh	r3, [r7, #20]
 801207e:	429a      	cmp	r2, r3
 8012080:	d3ef      	bcc.n	8012062 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	2200      	movs	r2, #0
 8012086:	701a      	strb	r2, [r3, #0]
  }
}
 8012088:	bf00      	nop
 801208a:	371c      	adds	r7, #28
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8012094:	b480      	push	{r7}
 8012096:	b085      	sub	sp, #20
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	881a      	ldrh	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	4413      	add	r3, r2
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4413      	add	r3, r2
 80120ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80120bc:	68fb      	ldr	r3, [r7, #12]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3714      	adds	r7, #20
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80120ca:	b580      	push	{r7, lr}
 80120cc:	b086      	sub	sp, #24
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	60f8      	str	r0, [r7, #12]
 80120d2:	60b9      	str	r1, [r7, #8]
 80120d4:	4613      	mov	r3, r2
 80120d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80120d8:	2301      	movs	r3, #1
 80120da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	789b      	ldrb	r3, [r3, #2]
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d002      	beq.n	80120ea <USBH_CtlReq+0x20>
 80120e4:	2b02      	cmp	r3, #2
 80120e6:	d01d      	beq.n	8012124 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80120e8:	e043      	b.n	8012172 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	68ba      	ldr	r2, [r7, #8]
 80120ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	88fa      	ldrh	r2, [r7, #6]
 80120f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2201      	movs	r2, #1
 80120fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2202      	movs	r2, #2
 8012100:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8012102:	2301      	movs	r3, #1
 8012104:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2203      	movs	r2, #3
 801210a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801211a:	2300      	movs	r3, #0
 801211c:	2200      	movs	r2, #0
 801211e:	f000 fe43 	bl	8012da8 <osMessageQueuePut>
      break;
 8012122:	e026      	b.n	8012172 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	f000 f829 	bl	801217c <USBH_HandleControl>
 801212a:	4603      	mov	r3, r0
 801212c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d002      	beq.n	801213a <USBH_CtlReq+0x70>
 8012134:	7dfb      	ldrb	r3, [r7, #23]
 8012136:	2b03      	cmp	r3, #3
 8012138:	d106      	bne.n	8012148 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2201      	movs	r2, #1
 801213e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	761a      	strb	r2, [r3, #24]
 8012146:	e005      	b.n	8012154 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012148:	7dfb      	ldrb	r3, [r7, #23]
 801214a:	2b02      	cmp	r3, #2
 801214c:	d102      	bne.n	8012154 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2201      	movs	r2, #1
 8012152:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2203      	movs	r2, #3
 8012158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	f000 fe1c 	bl	8012da8 <osMessageQueuePut>
      break;
 8012170:	bf00      	nop
  }
  return status;
 8012172:	7dfb      	ldrb	r3, [r7, #23]
}
 8012174:	4618      	mov	r0, r3
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af02      	add	r7, sp, #8
 8012182:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012184:	2301      	movs	r3, #1
 8012186:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012188:	2300      	movs	r3, #0
 801218a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	7e1b      	ldrb	r3, [r3, #24]
 8012190:	3b01      	subs	r3, #1
 8012192:	2b0a      	cmp	r3, #10
 8012194:	f200 822b 	bhi.w	80125ee <USBH_HandleControl+0x472>
 8012198:	a201      	add	r2, pc, #4	; (adr r2, 80121a0 <USBH_HandleControl+0x24>)
 801219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801219e:	bf00      	nop
 80121a0:	080121cd 	.word	0x080121cd
 80121a4:	080121e7 	.word	0x080121e7
 80121a8:	08012289 	.word	0x08012289
 80121ac:	080122af 	.word	0x080122af
 80121b0:	0801233b 	.word	0x0801233b
 80121b4:	08012367 	.word	0x08012367
 80121b8:	08012429 	.word	0x08012429
 80121bc:	0801244b 	.word	0x0801244b
 80121c0:	080124dd 	.word	0x080124dd
 80121c4:	08012505 	.word	0x08012505
 80121c8:	08012597 	.word	0x08012597
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f103 0110 	add.w	r1, r3, #16
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	795b      	ldrb	r3, [r3, #5]
 80121d6:	461a      	mov	r2, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 fa19 	bl	8012610 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2202      	movs	r2, #2
 80121e2:	761a      	strb	r2, [r3, #24]
      break;
 80121e4:	e20e      	b.n	8012604 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	795b      	ldrb	r3, [r3, #5]
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f003 ff4f 	bl	8016090 <USBH_LL_GetURBState>
 80121f2:	4603      	mov	r3, r0
 80121f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80121f6:	7bbb      	ldrb	r3, [r7, #14]
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d12c      	bne.n	8012256 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	7c1b      	ldrb	r3, [r3, #16]
 8012200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012204:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8adb      	ldrh	r3, [r3, #22]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00a      	beq.n	8012224 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801220e:	7b7b      	ldrb	r3, [r7, #13]
 8012210:	2b80      	cmp	r3, #128	; 0x80
 8012212:	d103      	bne.n	801221c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2203      	movs	r2, #3
 8012218:	761a      	strb	r2, [r3, #24]
 801221a:	e00d      	b.n	8012238 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2205      	movs	r2, #5
 8012220:	761a      	strb	r2, [r3, #24]
 8012222:	e009      	b.n	8012238 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8012224:	7b7b      	ldrb	r3, [r7, #13]
 8012226:	2b80      	cmp	r3, #128	; 0x80
 8012228:	d103      	bne.n	8012232 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2209      	movs	r2, #9
 801222e:	761a      	strb	r2, [r3, #24]
 8012230:	e002      	b.n	8012238 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2207      	movs	r2, #7
 8012236:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2203      	movs	r2, #3
 801223c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801224c:	2300      	movs	r3, #0
 801224e:	2200      	movs	r2, #0
 8012250:	f000 fdaa 	bl	8012da8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8012254:	e1cd      	b.n	80125f2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012256:	7bbb      	ldrb	r3, [r7, #14]
 8012258:	2b04      	cmp	r3, #4
 801225a:	d003      	beq.n	8012264 <USBH_HandleControl+0xe8>
 801225c:	7bbb      	ldrb	r3, [r7, #14]
 801225e:	2b02      	cmp	r3, #2
 8012260:	f040 81c7 	bne.w	80125f2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	220b      	movs	r2, #11
 8012268:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2203      	movs	r2, #3
 801226e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801227e:	2300      	movs	r3, #0
 8012280:	2200      	movs	r2, #0
 8012282:	f000 fd91 	bl	8012da8 <osMessageQueuePut>
      break;
 8012286:	e1b4      	b.n	80125f2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801228e:	b29a      	uxth	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6899      	ldr	r1, [r3, #8]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	899a      	ldrh	r2, [r3, #12]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	791b      	ldrb	r3, [r3, #4]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f9f4 	bl	801268e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2204      	movs	r2, #4
 80122aa:	761a      	strb	r2, [r3, #24]
      break;
 80122ac:	e1aa      	b.n	8012604 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	791b      	ldrb	r3, [r3, #4]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f003 feeb 	bl	8016090 <USBH_LL_GetURBState>
 80122ba:	4603      	mov	r3, r0
 80122bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80122be:	7bbb      	ldrb	r3, [r7, #14]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d110      	bne.n	80122e6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2209      	movs	r2, #9
 80122c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2203      	movs	r2, #3
 80122ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80122de:	2300      	movs	r3, #0
 80122e0:	2200      	movs	r2, #0
 80122e2:	f000 fd61 	bl	8012da8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80122e6:	7bbb      	ldrb	r3, [r7, #14]
 80122e8:	2b05      	cmp	r3, #5
 80122ea:	d110      	bne.n	801230e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80122ec:	2303      	movs	r3, #3
 80122ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2203      	movs	r2, #3
 80122f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012304:	2300      	movs	r3, #0
 8012306:	2200      	movs	r2, #0
 8012308:	f000 fd4e 	bl	8012da8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801230c:	e173      	b.n	80125f6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801230e:	7bbb      	ldrb	r3, [r7, #14]
 8012310:	2b04      	cmp	r3, #4
 8012312:	f040 8170 	bne.w	80125f6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	220b      	movs	r2, #11
 801231a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2203      	movs	r2, #3
 8012320:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012330:	2300      	movs	r3, #0
 8012332:	2200      	movs	r2, #0
 8012334:	f000 fd38 	bl	8012da8 <osMessageQueuePut>
      break;
 8012338:	e15d      	b.n	80125f6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6899      	ldr	r1, [r3, #8]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	899a      	ldrh	r2, [r3, #12]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	7958      	ldrb	r0, [r3, #5]
 8012346:	2301      	movs	r3, #1
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	4603      	mov	r3, r0
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 f979 	bl	8012644 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012358:	b29a      	uxth	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2206      	movs	r2, #6
 8012362:	761a      	strb	r2, [r3, #24]
      break;
 8012364:	e14e      	b.n	8012604 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	795b      	ldrb	r3, [r3, #5]
 801236a:	4619      	mov	r1, r3
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f003 fe8f 	bl	8016090 <USBH_LL_GetURBState>
 8012372:	4603      	mov	r3, r0
 8012374:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012376:	7bbb      	ldrb	r3, [r7, #14]
 8012378:	2b01      	cmp	r3, #1
 801237a:	d111      	bne.n	80123a0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2207      	movs	r2, #7
 8012380:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2203      	movs	r2, #3
 8012386:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012396:	2300      	movs	r3, #0
 8012398:	2200      	movs	r2, #0
 801239a:	f000 fd05 	bl	8012da8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801239e:	e12c      	b.n	80125fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80123a0:	7bbb      	ldrb	r3, [r7, #14]
 80123a2:	2b05      	cmp	r3, #5
 80123a4:	d113      	bne.n	80123ce <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	220c      	movs	r2, #12
 80123aa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80123ac:	2303      	movs	r3, #3
 80123ae:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2203      	movs	r2, #3
 80123b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80123c4:	2300      	movs	r3, #0
 80123c6:	2200      	movs	r2, #0
 80123c8:	f000 fcee 	bl	8012da8 <osMessageQueuePut>
      break;
 80123cc:	e115      	b.n	80125fa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80123ce:	7bbb      	ldrb	r3, [r7, #14]
 80123d0:	2b02      	cmp	r3, #2
 80123d2:	d111      	bne.n	80123f8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2205      	movs	r2, #5
 80123d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2203      	movs	r2, #3
 80123de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80123ee:	2300      	movs	r3, #0
 80123f0:	2200      	movs	r2, #0
 80123f2:	f000 fcd9 	bl	8012da8 <osMessageQueuePut>
      break;
 80123f6:	e100      	b.n	80125fa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80123f8:	7bbb      	ldrb	r3, [r7, #14]
 80123fa:	2b04      	cmp	r3, #4
 80123fc:	f040 80fd 	bne.w	80125fa <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	220b      	movs	r2, #11
 8012404:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8012406:	2302      	movs	r3, #2
 8012408:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2203      	movs	r2, #3
 801240e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801241e:	2300      	movs	r3, #0
 8012420:	2200      	movs	r2, #0
 8012422:	f000 fcc1 	bl	8012da8 <osMessageQueuePut>
      break;
 8012426:	e0e8      	b.n	80125fa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	791b      	ldrb	r3, [r3, #4]
 801242c:	2200      	movs	r2, #0
 801242e:	2100      	movs	r1, #0
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 f92c 	bl	801268e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801243c:	b29a      	uxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2208      	movs	r2, #8
 8012446:	761a      	strb	r2, [r3, #24]

      break;
 8012448:	e0dc      	b.n	8012604 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	791b      	ldrb	r3, [r3, #4]
 801244e:	4619      	mov	r1, r3
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f003 fe1d 	bl	8016090 <USBH_LL_GetURBState>
 8012456:	4603      	mov	r3, r0
 8012458:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801245a:	7bbb      	ldrb	r3, [r7, #14]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d113      	bne.n	8012488 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	220d      	movs	r2, #13
 8012464:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012466:	2300      	movs	r3, #0
 8012468:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2203      	movs	r2, #3
 801246e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801247e:	2300      	movs	r3, #0
 8012480:	2200      	movs	r2, #0
 8012482:	f000 fc91 	bl	8012da8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8012486:	e0ba      	b.n	80125fe <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	2b04      	cmp	r3, #4
 801248c:	d111      	bne.n	80124b2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	220b      	movs	r2, #11
 8012492:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2203      	movs	r2, #3
 8012498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80124a8:	2300      	movs	r3, #0
 80124aa:	2200      	movs	r2, #0
 80124ac:	f000 fc7c 	bl	8012da8 <osMessageQueuePut>
      break;
 80124b0:	e0a5      	b.n	80125fe <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80124b2:	7bbb      	ldrb	r3, [r7, #14]
 80124b4:	2b05      	cmp	r3, #5
 80124b6:	f040 80a2 	bne.w	80125fe <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80124ba:	2303      	movs	r3, #3
 80124bc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2203      	movs	r2, #3
 80124c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80124d2:	2300      	movs	r3, #0
 80124d4:	2200      	movs	r2, #0
 80124d6:	f000 fc67 	bl	8012da8 <osMessageQueuePut>
      break;
 80124da:	e090      	b.n	80125fe <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	795a      	ldrb	r2, [r3, #5]
 80124e0:	2301      	movs	r3, #1
 80124e2:	9300      	str	r3, [sp, #0]
 80124e4:	4613      	mov	r3, r2
 80124e6:	2200      	movs	r2, #0
 80124e8:	2100      	movs	r1, #0
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 f8aa 	bl	8012644 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	220a      	movs	r2, #10
 8012500:	761a      	strb	r2, [r3, #24]
      break;
 8012502:	e07f      	b.n	8012604 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	795b      	ldrb	r3, [r3, #5]
 8012508:	4619      	mov	r1, r3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f003 fdc0 	bl	8016090 <USBH_LL_GetURBState>
 8012510:	4603      	mov	r3, r0
 8012512:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8012514:	7bbb      	ldrb	r3, [r7, #14]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d113      	bne.n	8012542 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	220d      	movs	r2, #13
 8012522:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2203      	movs	r2, #3
 8012528:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012538:	2300      	movs	r3, #0
 801253a:	2200      	movs	r2, #0
 801253c:	f000 fc34 	bl	8012da8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8012540:	e05f      	b.n	8012602 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012542:	7bbb      	ldrb	r3, [r7, #14]
 8012544:	2b02      	cmp	r3, #2
 8012546:	d111      	bne.n	801256c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2209      	movs	r2, #9
 801254c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2203      	movs	r2, #3
 8012552:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012562:	2300      	movs	r3, #0
 8012564:	2200      	movs	r2, #0
 8012566:	f000 fc1f 	bl	8012da8 <osMessageQueuePut>
      break;
 801256a:	e04a      	b.n	8012602 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 801256c:	7bbb      	ldrb	r3, [r7, #14]
 801256e:	2b04      	cmp	r3, #4
 8012570:	d147      	bne.n	8012602 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	220b      	movs	r2, #11
 8012576:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2203      	movs	r2, #3
 801257c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801258c:	2300      	movs	r3, #0
 801258e:	2200      	movs	r2, #0
 8012590:	f000 fc0a 	bl	8012da8 <osMessageQueuePut>
      break;
 8012594:	e035      	b.n	8012602 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	7e5b      	ldrb	r3, [r3, #25]
 801259a:	3301      	adds	r3, #1
 801259c:	b2da      	uxtb	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	765a      	strb	r2, [r3, #25]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	7e5b      	ldrb	r3, [r3, #25]
 80125a6:	2b02      	cmp	r3, #2
 80125a8:	d806      	bhi.n	80125b8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2201      	movs	r2, #1
 80125ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2201      	movs	r2, #1
 80125b4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80125b6:	e025      	b.n	8012604 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80125be:	2106      	movs	r1, #6
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	795b      	ldrb	r3, [r3, #5]
 80125ce:	4619      	mov	r1, r3
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f000 f90d 	bl	80127f0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	791b      	ldrb	r3, [r3, #4]
 80125da:	4619      	mov	r1, r3
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 f907 	bl	80127f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80125e8:	2302      	movs	r3, #2
 80125ea:	73fb      	strb	r3, [r7, #15]
      break;
 80125ec:	e00a      	b.n	8012604 <USBH_HandleControl+0x488>

    default:
      break;
 80125ee:	bf00      	nop
 80125f0:	e008      	b.n	8012604 <USBH_HandleControl+0x488>
      break;
 80125f2:	bf00      	nop
 80125f4:	e006      	b.n	8012604 <USBH_HandleControl+0x488>
      break;
 80125f6:	bf00      	nop
 80125f8:	e004      	b.n	8012604 <USBH_HandleControl+0x488>
      break;
 80125fa:	bf00      	nop
 80125fc:	e002      	b.n	8012604 <USBH_HandleControl+0x488>
      break;
 80125fe:	bf00      	nop
 8012600:	e000      	b.n	8012604 <USBH_HandleControl+0x488>
      break;
 8012602:	bf00      	nop
  }

  return status;
 8012604:	7bfb      	ldrb	r3, [r7, #15]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop

08012610 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b088      	sub	sp, #32
 8012614:	af04      	add	r7, sp, #16
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	4613      	mov	r3, r2
 801261c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801261e:	79f9      	ldrb	r1, [r7, #7]
 8012620:	2300      	movs	r3, #0
 8012622:	9303      	str	r3, [sp, #12]
 8012624:	2308      	movs	r3, #8
 8012626:	9302      	str	r3, [sp, #8]
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	2300      	movs	r3, #0
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	2300      	movs	r3, #0
 8012632:	2200      	movs	r2, #0
 8012634:	68f8      	ldr	r0, [r7, #12]
 8012636:	f003 fcfa 	bl	801602e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801263a:	2300      	movs	r3, #0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b088      	sub	sp, #32
 8012648:	af04      	add	r7, sp, #16
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	4611      	mov	r1, r2
 8012650:	461a      	mov	r2, r3
 8012652:	460b      	mov	r3, r1
 8012654:	80fb      	strh	r3, [r7, #6]
 8012656:	4613      	mov	r3, r2
 8012658:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8012664:	2300      	movs	r3, #0
 8012666:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8012668:	7979      	ldrb	r1, [r7, #5]
 801266a:	7e3b      	ldrb	r3, [r7, #24]
 801266c:	9303      	str	r3, [sp, #12]
 801266e:	88fb      	ldrh	r3, [r7, #6]
 8012670:	9302      	str	r3, [sp, #8]
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	9301      	str	r3, [sp, #4]
 8012676:	2301      	movs	r3, #1
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	2300      	movs	r3, #0
 801267c:	2200      	movs	r2, #0
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f003 fcd5 	bl	801602e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}

0801268e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801268e:	b580      	push	{r7, lr}
 8012690:	b088      	sub	sp, #32
 8012692:	af04      	add	r7, sp, #16
 8012694:	60f8      	str	r0, [r7, #12]
 8012696:	60b9      	str	r1, [r7, #8]
 8012698:	4611      	mov	r1, r2
 801269a:	461a      	mov	r2, r3
 801269c:	460b      	mov	r3, r1
 801269e:	80fb      	strh	r3, [r7, #6]
 80126a0:	4613      	mov	r3, r2
 80126a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80126a4:	7979      	ldrb	r1, [r7, #5]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9303      	str	r3, [sp, #12]
 80126aa:	88fb      	ldrh	r3, [r7, #6]
 80126ac:	9302      	str	r3, [sp, #8]
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	2301      	movs	r3, #1
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	2300      	movs	r3, #0
 80126b8:	2201      	movs	r2, #1
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f003 fcb7 	bl	801602e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80126c0:	2300      	movs	r3, #0

}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b088      	sub	sp, #32
 80126ce:	af04      	add	r7, sp, #16
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	4611      	mov	r1, r2
 80126d6:	461a      	mov	r2, r3
 80126d8:	460b      	mov	r3, r1
 80126da:	80fb      	strh	r3, [r7, #6]
 80126dc:	4613      	mov	r3, r2
 80126de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d001      	beq.n	80126ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80126ea:	2300      	movs	r3, #0
 80126ec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80126ee:	7979      	ldrb	r1, [r7, #5]
 80126f0:	7e3b      	ldrb	r3, [r7, #24]
 80126f2:	9303      	str	r3, [sp, #12]
 80126f4:	88fb      	ldrh	r3, [r7, #6]
 80126f6:	9302      	str	r3, [sp, #8]
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	9301      	str	r3, [sp, #4]
 80126fc:	2301      	movs	r3, #1
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	2302      	movs	r3, #2
 8012702:	2200      	movs	r2, #0
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f003 fc92 	bl	801602e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801270a:	2300      	movs	r3, #0
}
 801270c:	4618      	mov	r0, r3
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b088      	sub	sp, #32
 8012718:	af04      	add	r7, sp, #16
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	4611      	mov	r1, r2
 8012720:	461a      	mov	r2, r3
 8012722:	460b      	mov	r3, r1
 8012724:	80fb      	strh	r3, [r7, #6]
 8012726:	4613      	mov	r3, r2
 8012728:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801272a:	7979      	ldrb	r1, [r7, #5]
 801272c:	2300      	movs	r3, #0
 801272e:	9303      	str	r3, [sp, #12]
 8012730:	88fb      	ldrh	r3, [r7, #6]
 8012732:	9302      	str	r3, [sp, #8]
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	9301      	str	r3, [sp, #4]
 8012738:	2301      	movs	r3, #1
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	2302      	movs	r3, #2
 801273e:	2201      	movs	r2, #1
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f003 fc74 	bl	801602e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af04      	add	r7, sp, #16
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	4608      	mov	r0, r1
 801275a:	4611      	mov	r1, r2
 801275c:	461a      	mov	r2, r3
 801275e:	4603      	mov	r3, r0
 8012760:	70fb      	strb	r3, [r7, #3]
 8012762:	460b      	mov	r3, r1
 8012764:	70bb      	strb	r3, [r7, #2]
 8012766:	4613      	mov	r3, r2
 8012768:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801276a:	7878      	ldrb	r0, [r7, #1]
 801276c:	78ba      	ldrb	r2, [r7, #2]
 801276e:	78f9      	ldrb	r1, [r7, #3]
 8012770:	8b3b      	ldrh	r3, [r7, #24]
 8012772:	9302      	str	r3, [sp, #8]
 8012774:	7d3b      	ldrb	r3, [r7, #20]
 8012776:	9301      	str	r3, [sp, #4]
 8012778:	7c3b      	ldrb	r3, [r7, #16]
 801277a:	9300      	str	r3, [sp, #0]
 801277c:	4603      	mov	r3, r0
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f003 fc07 	bl	8015f92 <USBH_LL_OpenPipe>

  return USBH_OK;
 8012784:	2300      	movs	r3, #0
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	460b      	mov	r3, r1
 8012798:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801279a:	78fb      	ldrb	r3, [r7, #3]
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f003 fc26 	bl	8015ff0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80127a4:	2300      	movs	r3, #0
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3708      	adds	r7, #8
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}

080127ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b084      	sub	sp, #16
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
 80127b6:	460b      	mov	r3, r1
 80127b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 f836 	bl	801282c <USBH_GetFreePipe>
 80127c0:	4603      	mov	r3, r0
 80127c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80127c4:	89fb      	ldrh	r3, [r7, #14]
 80127c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d00a      	beq.n	80127e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80127ce:	78fa      	ldrb	r2, [r7, #3]
 80127d0:	89fb      	ldrh	r3, [r7, #14]
 80127d2:	f003 030f 	and.w	r3, r3, #15
 80127d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80127da:	6879      	ldr	r1, [r7, #4]
 80127dc:	33e0      	adds	r3, #224	; 0xe0
 80127de:	009b      	lsls	r3, r3, #2
 80127e0:	440b      	add	r3, r1
 80127e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80127e4:	89fb      	ldrh	r3, [r7, #14]
 80127e6:	b2db      	uxtb	r3, r3
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b083      	sub	sp, #12
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80127fc:	78fb      	ldrb	r3, [r7, #3]
 80127fe:	2b0a      	cmp	r3, #10
 8012800:	d80d      	bhi.n	801281e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012802:	78fb      	ldrb	r3, [r7, #3]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	33e0      	adds	r3, #224	; 0xe0
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	685a      	ldr	r2, [r3, #4]
 801280e:	78fb      	ldrb	r3, [r7, #3]
 8012810:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012814:	6879      	ldr	r1, [r7, #4]
 8012816:	33e0      	adds	r3, #224	; 0xe0
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	440b      	add	r3, r1
 801281c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012834:	2300      	movs	r3, #0
 8012836:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8012838:	2300      	movs	r3, #0
 801283a:	73fb      	strb	r3, [r7, #15]
 801283c:	e00f      	b.n	801285e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801283e:	7bfb      	ldrb	r3, [r7, #15]
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	33e0      	adds	r3, #224	; 0xe0
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012852:	7bfb      	ldrb	r3, [r7, #15]
 8012854:	b29b      	uxth	r3, r3
 8012856:	e007      	b.n	8012868 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8012858:	7bfb      	ldrb	r3, [r7, #15]
 801285a:	3301      	adds	r3, #1
 801285c:	73fb      	strb	r3, [r7, #15]
 801285e:	7bfb      	ldrb	r3, [r7, #15]
 8012860:	2b0a      	cmp	r3, #10
 8012862:	d9ec      	bls.n	801283e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012864:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012874:	b480      	push	{r7}
 8012876:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8012878:	bf00      	nop
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr
	...

08012884 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801288a:	f3ef 8305 	mrs	r3, IPSR
 801288e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012890:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10f      	bne.n	80128b6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012896:	f3ef 8310 	mrs	r3, PRIMASK
 801289a:	607b      	str	r3, [r7, #4]
  return(result);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d105      	bne.n	80128ae <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128a2:	f3ef 8311 	mrs	r3, BASEPRI
 80128a6:	603b      	str	r3, [r7, #0]
  return(result);
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d007      	beq.n	80128be <osKernelInitialize+0x3a>
 80128ae:	4b0e      	ldr	r3, [pc, #56]	; (80128e8 <osKernelInitialize+0x64>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d103      	bne.n	80128be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80128b6:	f06f 0305 	mvn.w	r3, #5
 80128ba:	60fb      	str	r3, [r7, #12]
 80128bc:	e00c      	b.n	80128d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80128be:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <osKernelInitialize+0x64>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d105      	bne.n	80128d2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80128c6:	4b08      	ldr	r3, [pc, #32]	; (80128e8 <osKernelInitialize+0x64>)
 80128c8:	2201      	movs	r2, #1
 80128ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80128cc:	2300      	movs	r3, #0
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	e002      	b.n	80128d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80128d2:	f04f 33ff 	mov.w	r3, #4294967295
 80128d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80128d8:	68fb      	ldr	r3, [r7, #12]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3714      	adds	r7, #20
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	20001120 	.word	0x20001120

080128ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128f2:	f3ef 8305 	mrs	r3, IPSR
 80128f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80128f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d10f      	bne.n	801291e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012902:	607b      	str	r3, [r7, #4]
  return(result);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d105      	bne.n	8012916 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801290a:	f3ef 8311 	mrs	r3, BASEPRI
 801290e:	603b      	str	r3, [r7, #0]
  return(result);
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d007      	beq.n	8012926 <osKernelStart+0x3a>
 8012916:	4b0f      	ldr	r3, [pc, #60]	; (8012954 <osKernelStart+0x68>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	2b02      	cmp	r3, #2
 801291c:	d103      	bne.n	8012926 <osKernelStart+0x3a>
    stat = osErrorISR;
 801291e:	f06f 0305 	mvn.w	r3, #5
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	e010      	b.n	8012948 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012926:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <osKernelStart+0x68>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d109      	bne.n	8012942 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801292e:	f7ff ffa1 	bl	8012874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012932:	4b08      	ldr	r3, [pc, #32]	; (8012954 <osKernelStart+0x68>)
 8012934:	2202      	movs	r2, #2
 8012936:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012938:	f001 fc98 	bl	801426c <vTaskStartScheduler>
      stat = osOK;
 801293c:	2300      	movs	r3, #0
 801293e:	60fb      	str	r3, [r7, #12]
 8012940:	e002      	b.n	8012948 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8012942:	f04f 33ff 	mov.w	r3, #4294967295
 8012946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012948:	68fb      	ldr	r3, [r7, #12]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	20001120 	.word	0x20001120

08012958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012958:	b580      	push	{r7, lr}
 801295a:	b090      	sub	sp, #64	; 0x40
 801295c:	af04      	add	r7, sp, #16
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012968:	f3ef 8305 	mrs	r3, IPSR
 801296c:	61fb      	str	r3, [r7, #28]
  return(result);
 801296e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8012970:	2b00      	cmp	r3, #0
 8012972:	f040 808f 	bne.w	8012a94 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012976:	f3ef 8310 	mrs	r3, PRIMASK
 801297a:	61bb      	str	r3, [r7, #24]
  return(result);
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d105      	bne.n	801298e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012982:	f3ef 8311 	mrs	r3, BASEPRI
 8012986:	617b      	str	r3, [r7, #20]
  return(result);
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d003      	beq.n	8012996 <osThreadNew+0x3e>
 801298e:	4b44      	ldr	r3, [pc, #272]	; (8012aa0 <osThreadNew+0x148>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2b02      	cmp	r3, #2
 8012994:	d07e      	beq.n	8012a94 <osThreadNew+0x13c>
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d07b      	beq.n	8012a94 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 801299c:	2380      	movs	r3, #128	; 0x80
 801299e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80129a0:	2318      	movs	r3, #24
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80129a4:	2300      	movs	r3, #0
 80129a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80129a8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d045      	beq.n	8012a40 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <osThreadNew+0x6a>
        name = attr->name;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	699b      	ldr	r3, [r3, #24]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d002      	beq.n	80129d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	699b      	ldr	r3, [r3, #24]
 80129ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d008      	beq.n	80129e8 <osThreadNew+0x90>
 80129d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d8:	2b38      	cmp	r3, #56	; 0x38
 80129da:	d805      	bhi.n	80129e8 <osThreadNew+0x90>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	f003 0301 	and.w	r3, r3, #1
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d001      	beq.n	80129ec <osThreadNew+0x94>
        return (NULL);
 80129e8:	2300      	movs	r3, #0
 80129ea:	e054      	b.n	8012a96 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	695b      	ldr	r3, [r3, #20]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d003      	beq.n	80129fc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	695b      	ldr	r3, [r3, #20]
 80129f8:	089b      	lsrs	r3, r3, #2
 80129fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	689b      	ldr	r3, [r3, #8]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00e      	beq.n	8012a22 <osThreadNew+0xca>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	2b5f      	cmp	r3, #95	; 0x5f
 8012a0a:	d90a      	bls.n	8012a22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d006      	beq.n	8012a22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	695b      	ldr	r3, [r3, #20]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d002      	beq.n	8012a22 <osThreadNew+0xca>
        mem = 1;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	623b      	str	r3, [r7, #32]
 8012a20:	e010      	b.n	8012a44 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d10c      	bne.n	8012a44 <osThreadNew+0xec>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	68db      	ldr	r3, [r3, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d108      	bne.n	8012a44 <osThreadNew+0xec>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	691b      	ldr	r3, [r3, #16]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <osThreadNew+0xec>
          mem = 0;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	623b      	str	r3, [r7, #32]
 8012a3e:	e001      	b.n	8012a44 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012a40:	2300      	movs	r3, #0
 8012a42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012a44:	6a3b      	ldr	r3, [r7, #32]
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d110      	bne.n	8012a6c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a52:	9202      	str	r2, [sp, #8]
 8012a54:	9301      	str	r3, [sp, #4]
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f001 f9a1 	bl	8013da8 <xTaskCreateStatic>
 8012a66:	4603      	mov	r3, r0
 8012a68:	613b      	str	r3, [r7, #16]
 8012a6a:	e013      	b.n	8012a94 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012a6c:	6a3b      	ldr	r3, [r7, #32]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d110      	bne.n	8012a94 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	f107 0310 	add.w	r3, r7, #16
 8012a7a:	9301      	str	r3, [sp, #4]
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f001 f9ef 	bl	8013e68 <xTaskCreate>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d001      	beq.n	8012a94 <osThreadNew+0x13c>
          hTask = NULL;
 8012a90:	2300      	movs	r3, #0
 8012a92:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012a94:	693b      	ldr	r3, [r7, #16]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3730      	adds	r7, #48	; 0x30
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20001120 	.word	0x20001120

08012aa4 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b088      	sub	sp, #32
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ab0:	f3ef 8305 	mrs	r3, IPSR
 8012ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8012ab6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10f      	bne.n	8012adc <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012abc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ac0:	613b      	str	r3, [r7, #16]
  return(result);
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d105      	bne.n	8012ad4 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8012acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d007      	beq.n	8012ae4 <osThreadSuspend+0x40>
 8012ad4:	4b0c      	ldr	r3, [pc, #48]	; (8012b08 <osThreadSuspend+0x64>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	d103      	bne.n	8012ae4 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8012adc:	f06f 0305 	mvn.w	r3, #5
 8012ae0:	61fb      	str	r3, [r7, #28]
 8012ae2:	e00b      	b.n	8012afc <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d103      	bne.n	8012af2 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8012aea:	f06f 0303 	mvn.w	r3, #3
 8012aee:	61fb      	str	r3, [r7, #28]
 8012af0:	e004      	b.n	8012afc <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8012af2:	2300      	movs	r3, #0
 8012af4:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8012af6:	69b8      	ldr	r0, [r7, #24]
 8012af8:	f001 fb3c 	bl	8014174 <vTaskSuspend>
  }

  return (stat);
 8012afc:	69fb      	ldr	r3, [r7, #28]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3720      	adds	r7, #32
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	20001120 	.word	0x20001120

08012b0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b14:	f3ef 8305 	mrs	r3, IPSR
 8012b18:	613b      	str	r3, [r7, #16]
  return(result);
 8012b1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10f      	bne.n	8012b40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b20:	f3ef 8310 	mrs	r3, PRIMASK
 8012b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d105      	bne.n	8012b38 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8012b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d007      	beq.n	8012b48 <osDelay+0x3c>
 8012b38:	4b0a      	ldr	r3, [pc, #40]	; (8012b64 <osDelay+0x58>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d103      	bne.n	8012b48 <osDelay+0x3c>
    stat = osErrorISR;
 8012b40:	f06f 0305 	mvn.w	r3, #5
 8012b44:	617b      	str	r3, [r7, #20]
 8012b46:	e007      	b.n	8012b58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <osDelay+0x4c>
      vTaskDelay(ticks);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f001 fad8 	bl	8014108 <vTaskDelay>
    }
  }

  return (stat);
 8012b58:	697b      	ldr	r3, [r7, #20]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	20001120 	.word	0x20001120

08012b68 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b08a      	sub	sp, #40	; 0x28
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012b70:	2300      	movs	r3, #0
 8012b72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b74:	f3ef 8305 	mrs	r3, IPSR
 8012b78:	613b      	str	r3, [r7, #16]
  return(result);
 8012b7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f040 8085 	bne.w	8012c8c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b82:	f3ef 8310 	mrs	r3, PRIMASK
 8012b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d105      	bne.n	8012b9a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8012b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d003      	beq.n	8012ba2 <osMutexNew+0x3a>
 8012b9a:	4b3f      	ldr	r3, [pc, #252]	; (8012c98 <osMutexNew+0x130>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2b02      	cmp	r3, #2
 8012ba0:	d074      	beq.n	8012c8c <osMutexNew+0x124>
    if (attr != NULL) {
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d003      	beq.n	8012bb0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	623b      	str	r3, [r7, #32]
 8012bae:	e001      	b.n	8012bb4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	f003 0301 	and.w	r3, r3, #1
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d002      	beq.n	8012bc4 <osMutexNew+0x5c>
      rmtx = 1U;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	61fb      	str	r3, [r7, #28]
 8012bc2:	e001      	b.n	8012bc8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	f003 0308 	and.w	r3, r3, #8
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d15c      	bne.n	8012c8c <osMutexNew+0x124>
      mem = -1;
 8012bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8012bd6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d015      	beq.n	8012c0a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d006      	beq.n	8012bf4 <osMutexNew+0x8c>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	2b4f      	cmp	r3, #79	; 0x4f
 8012bec:	d902      	bls.n	8012bf4 <osMutexNew+0x8c>
          mem = 1;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	61bb      	str	r3, [r7, #24]
 8012bf2:	e00c      	b.n	8012c0e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d108      	bne.n	8012c0e <osMutexNew+0xa6>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d104      	bne.n	8012c0e <osMutexNew+0xa6>
            mem = 0;
 8012c04:	2300      	movs	r3, #0
 8012c06:	61bb      	str	r3, [r7, #24]
 8012c08:	e001      	b.n	8012c0e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d112      	bne.n	8012c3a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d007      	beq.n	8012c2a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	4619      	mov	r1, r3
 8012c20:	2004      	movs	r0, #4
 8012c22:	f000 fc11 	bl	8013448 <xQueueCreateMutexStatic>
 8012c26:	6278      	str	r0, [r7, #36]	; 0x24
 8012c28:	e016      	b.n	8012c58 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	2001      	movs	r0, #1
 8012c32:	f000 fc09 	bl	8013448 <xQueueCreateMutexStatic>
 8012c36:	6278      	str	r0, [r7, #36]	; 0x24
 8012c38:	e00e      	b.n	8012c58 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d10b      	bne.n	8012c58 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d004      	beq.n	8012c50 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8012c46:	2004      	movs	r0, #4
 8012c48:	f000 fbe6 	bl	8013418 <xQueueCreateMutex>
 8012c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8012c4e:	e003      	b.n	8012c58 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012c50:	2001      	movs	r0, #1
 8012c52:	f000 fbe1 	bl	8013418 <xQueueCreateMutex>
 8012c56:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00c      	beq.n	8012c78 <osMutexNew+0x110>
        if (attr != NULL) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d003      	beq.n	8012c6c <osMutexNew+0x104>
          name = attr->name;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	617b      	str	r3, [r7, #20]
 8012c6a:	e001      	b.n	8012c70 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012c70:	6979      	ldr	r1, [r7, #20]
 8012c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c74:	f001 f838 	bl	8013ce8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d006      	beq.n	8012c8c <osMutexNew+0x124>
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d003      	beq.n	8012c8c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	f043 0301 	orr.w	r3, r3, #1
 8012c8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3728      	adds	r7, #40	; 0x28
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	20001120 	.word	0x20001120

08012c9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b08c      	sub	sp, #48	; 0x30
 8012ca0:	af02      	add	r7, sp, #8
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cac:	f3ef 8305 	mrs	r3, IPSR
 8012cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8012cb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d170      	bne.n	8012d9a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8012cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d105      	bne.n	8012cd0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8012cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d003      	beq.n	8012cd8 <osMessageQueueNew+0x3c>
 8012cd0:	4b34      	ldr	r3, [pc, #208]	; (8012da4 <osMessageQueueNew+0x108>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b02      	cmp	r3, #2
 8012cd6:	d060      	beq.n	8012d9a <osMessageQueueNew+0xfe>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d05d      	beq.n	8012d9a <osMessageQueueNew+0xfe>
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d05a      	beq.n	8012d9a <osMessageQueueNew+0xfe>
    mem = -1;
 8012ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ce8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d029      	beq.n	8012d44 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d012      	beq.n	8012d1e <osMessageQueueNew+0x82>
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	2b4f      	cmp	r3, #79	; 0x4f
 8012cfe:	d90e      	bls.n	8012d1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d00a      	beq.n	8012d1e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	695a      	ldr	r2, [r3, #20]
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	68b9      	ldr	r1, [r7, #8]
 8012d10:	fb01 f303 	mul.w	r3, r1, r3
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d302      	bcc.n	8012d1e <osMessageQueueNew+0x82>
        mem = 1;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	623b      	str	r3, [r7, #32]
 8012d1c:	e014      	b.n	8012d48 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d110      	bne.n	8012d48 <osMessageQueueNew+0xac>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d10c      	bne.n	8012d48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d108      	bne.n	8012d48 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	695b      	ldr	r3, [r3, #20]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d104      	bne.n	8012d48 <osMessageQueueNew+0xac>
          mem = 0;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	623b      	str	r3, [r7, #32]
 8012d42:	e001      	b.n	8012d48 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012d44:	2300      	movs	r3, #0
 8012d46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d10c      	bne.n	8012d68 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	691a      	ldr	r2, [r3, #16]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6899      	ldr	r1, [r3, #8]
 8012d56:	2300      	movs	r3, #0
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	68b9      	ldr	r1, [r7, #8]
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	f000 fa5a 	bl	8013218 <xQueueGenericCreateStatic>
 8012d64:	6278      	str	r0, [r7, #36]	; 0x24
 8012d66:	e008      	b.n	8012d7a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012d68:	6a3b      	ldr	r3, [r7, #32]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d105      	bne.n	8012d7a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012d6e:	2200      	movs	r2, #0
 8012d70:	68b9      	ldr	r1, [r7, #8]
 8012d72:	68f8      	ldr	r0, [r7, #12]
 8012d74:	f000 facd 	bl	8013312 <xQueueGenericCreate>
 8012d78:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d00c      	beq.n	8012d9a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d003      	beq.n	8012d8e <osMessageQueueNew+0xf2>
        name = attr->name;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	61fb      	str	r3, [r7, #28]
 8012d8c:	e001      	b.n	8012d92 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012d92:	69f9      	ldr	r1, [r7, #28]
 8012d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d96:	f000 ffa7 	bl	8013ce8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3728      	adds	r7, #40	; 0x28
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	20001120 	.word	0x20001120

08012da8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b08a      	sub	sp, #40	; 0x28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	603b      	str	r3, [r7, #0]
 8012db4:	4613      	mov	r3, r2
 8012db6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dc0:	f3ef 8305 	mrs	r3, IPSR
 8012dc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8012dc6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d10f      	bne.n	8012dec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8012dd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d105      	bne.n	8012de4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8012ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d02c      	beq.n	8012e3e <osMessageQueuePut+0x96>
 8012de4:	4b28      	ldr	r3, [pc, #160]	; (8012e88 <osMessageQueuePut+0xe0>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b02      	cmp	r3, #2
 8012dea:	d128      	bne.n	8012e3e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dec:	6a3b      	ldr	r3, [r7, #32]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d005      	beq.n	8012dfe <osMessageQueuePut+0x56>
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <osMessageQueuePut+0x56>
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d003      	beq.n	8012e06 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012dfe:	f06f 0303 	mvn.w	r3, #3
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e04:	e039      	b.n	8012e7a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012e06:	2300      	movs	r3, #0
 8012e08:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012e0a:	f107 0210 	add.w	r2, r7, #16
 8012e0e:	2300      	movs	r3, #0
 8012e10:	68b9      	ldr	r1, [r7, #8]
 8012e12:	6a38      	ldr	r0, [r7, #32]
 8012e14:	f000 fc3e 	bl	8013694 <xQueueGenericSendFromISR>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d003      	beq.n	8012e26 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012e1e:	f06f 0302 	mvn.w	r3, #2
 8012e22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e24:	e029      	b.n	8012e7a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d026      	beq.n	8012e7a <osMessageQueuePut+0xd2>
 8012e2c:	4b17      	ldr	r3, [pc, #92]	; (8012e8c <osMessageQueuePut+0xe4>)
 8012e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e32:	601a      	str	r2, [r3, #0]
 8012e34:	f3bf 8f4f 	dsb	sy
 8012e38:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e3c:	e01d      	b.n	8012e7a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e3e:	6a3b      	ldr	r3, [r7, #32]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d002      	beq.n	8012e4a <osMessageQueuePut+0xa2>
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d103      	bne.n	8012e52 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012e4a:	f06f 0303 	mvn.w	r3, #3
 8012e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8012e50:	e014      	b.n	8012e7c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e52:	2300      	movs	r3, #0
 8012e54:	683a      	ldr	r2, [r7, #0]
 8012e56:	68b9      	ldr	r1, [r7, #8]
 8012e58:	6a38      	ldr	r0, [r7, #32]
 8012e5a:	f000 fb11 	bl	8013480 <xQueueGenericSend>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d00b      	beq.n	8012e7c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d003      	beq.n	8012e72 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012e6a:	f06f 0301 	mvn.w	r3, #1
 8012e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8012e70:	e004      	b.n	8012e7c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012e72:	f06f 0302 	mvn.w	r3, #2
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
 8012e78:	e000      	b.n	8012e7c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3728      	adds	r7, #40	; 0x28
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	20001120 	.word	0x20001120
 8012e8c:	e000ed04 	.word	0xe000ed04

08012e90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b08a      	sub	sp, #40	; 0x28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ea6:	f3ef 8305 	mrs	r3, IPSR
 8012eaa:	61fb      	str	r3, [r7, #28]
  return(result);
 8012eac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d10f      	bne.n	8012ed2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8012eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d105      	bne.n	8012eca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8012ec2:	617b      	str	r3, [r7, #20]
  return(result);
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d02c      	beq.n	8012f24 <osMessageQueueGet+0x94>
 8012eca:	4b28      	ldr	r3, [pc, #160]	; (8012f6c <osMessageQueueGet+0xdc>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d128      	bne.n	8012f24 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012ed2:	6a3b      	ldr	r3, [r7, #32]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d005      	beq.n	8012ee4 <osMessageQueueGet+0x54>
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d002      	beq.n	8012ee4 <osMessageQueueGet+0x54>
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d003      	beq.n	8012eec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012ee4:	f06f 0303 	mvn.w	r3, #3
 8012ee8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012eea:	e038      	b.n	8012f5e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012eec:	2300      	movs	r3, #0
 8012eee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012ef0:	f107 0310 	add.w	r3, r7, #16
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	68b9      	ldr	r1, [r7, #8]
 8012ef8:	6a38      	ldr	r0, [r7, #32]
 8012efa:	f000 fd59 	bl	80139b0 <xQueueReceiveFromISR>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d003      	beq.n	8012f0c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012f04:	f06f 0302 	mvn.w	r3, #2
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f0a:	e028      	b.n	8012f5e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d025      	beq.n	8012f5e <osMessageQueueGet+0xce>
 8012f12:	4b17      	ldr	r3, [pc, #92]	; (8012f70 <osMessageQueueGet+0xe0>)
 8012f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	f3bf 8f4f 	dsb	sy
 8012f1e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f22:	e01c      	b.n	8012f5e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012f24:	6a3b      	ldr	r3, [r7, #32]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d002      	beq.n	8012f30 <osMessageQueueGet+0xa0>
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d103      	bne.n	8012f38 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012f30:	f06f 0303 	mvn.w	r3, #3
 8012f34:	627b      	str	r3, [r7, #36]	; 0x24
 8012f36:	e013      	b.n	8012f60 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	68b9      	ldr	r1, [r7, #8]
 8012f3c:	6a38      	ldr	r0, [r7, #32]
 8012f3e:	f000 fc4d 	bl	80137dc <xQueueReceive>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d00b      	beq.n	8012f60 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d003      	beq.n	8012f56 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012f4e:	f06f 0301 	mvn.w	r3, #1
 8012f52:	627b      	str	r3, [r7, #36]	; 0x24
 8012f54:	e004      	b.n	8012f60 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012f56:	f06f 0302 	mvn.w	r3, #2
 8012f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f5c:	e000      	b.n	8012f60 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3728      	adds	r7, #40	; 0x28
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	20001120 	.word	0x20001120
 8012f70:	e000ed04 	.word	0xe000ed04

08012f74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012f74:	b480      	push	{r7}
 8012f76:	b085      	sub	sp, #20
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	4a07      	ldr	r2, [pc, #28]	; (8012fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8012f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	4a06      	ldr	r2, [pc, #24]	; (8012fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8012f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2280      	movs	r2, #128	; 0x80
 8012f90:	601a      	str	r2, [r3, #0]
}
 8012f92:	bf00      	nop
 8012f94:	3714      	adds	r7, #20
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop
 8012fa0:	20001124 	.word	0x20001124
 8012fa4:	20001184 	.word	0x20001184

08012fa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012fa8:	b480      	push	{r7}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	4a07      	ldr	r2, [pc, #28]	; (8012fd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8012fb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	4a06      	ldr	r2, [pc, #24]	; (8012fd8 <vApplicationGetTimerTaskMemory+0x30>)
 8012fbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fc6:	601a      	str	r2, [r3, #0]
}
 8012fc8:	bf00      	nop
 8012fca:	3714      	adds	r7, #20
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr
 8012fd4:	20001384 	.word	0x20001384
 8012fd8:	200013e4 	.word	0x200013e4

08012fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012fdc:	b480      	push	{r7}
 8012fde:	b083      	sub	sp, #12
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f103 0208 	add.w	r2, r3, #8
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f103 0208 	add.w	r2, r3, #8
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f103 0208 	add.w	r2, r3, #8
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2200      	movs	r2, #0
 801300e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013010:	bf00      	nop
 8013012:	370c      	adds	r7, #12
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr

0801301c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2200      	movs	r2, #0
 8013028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801302a:	bf00      	nop
 801302c:	370c      	adds	r7, #12
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr

08013036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013036:	b480      	push	{r7}
 8013038:	b085      	sub	sp, #20
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	68fa      	ldr	r2, [r7, #12]
 801304a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	689a      	ldr	r2, [r3, #8]
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	683a      	ldr	r2, [r7, #0]
 801305a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	1c5a      	adds	r2, r3, #1
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	601a      	str	r2, [r3, #0]
}
 8013072:	bf00      	nop
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr

0801307e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801307e:	b480      	push	{r7}
 8013080:	b085      	sub	sp, #20
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013094:	d103      	bne.n	801309e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	691b      	ldr	r3, [r3, #16]
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	e00c      	b.n	80130b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	3308      	adds	r3, #8
 80130a2:	60fb      	str	r3, [r7, #12]
 80130a4:	e002      	b.n	80130ac <vListInsert+0x2e>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	60fb      	str	r3, [r7, #12]
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	68ba      	ldr	r2, [r7, #8]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d2f6      	bcs.n	80130a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	685a      	ldr	r2, [r3, #4]
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	1c5a      	adds	r2, r3, #1
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	601a      	str	r2, [r3, #0]
}
 80130e4:	bf00      	nop
 80130e6:	3714      	adds	r7, #20
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr

080130f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80130f0:	b480      	push	{r7}
 80130f2:	b085      	sub	sp, #20
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	691b      	ldr	r3, [r3, #16]
 80130fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	6892      	ldr	r2, [r2, #8]
 8013106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	6852      	ldr	r2, [r2, #4]
 8013110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	429a      	cmp	r2, r3
 801311a:	d103      	bne.n	8013124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	689a      	ldr	r2, [r3, #8]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	1e5a      	subs	r2, r3, #1
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
}
 8013138:	4618      	mov	r0, r3
 801313a:	3714      	adds	r7, #20
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr

08013144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d10b      	bne.n	8013170 <xQueueGenericReset+0x2c>
	__asm volatile
 8013158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315c:	b672      	cpsid	i
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	b662      	cpsie	i
 801316c:	60bb      	str	r3, [r7, #8]
 801316e:	e7fe      	b.n	801316e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013170:	f002 fa42 	bl	80155f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801317c:	68f9      	ldr	r1, [r7, #12]
 801317e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013180:	fb01 f303 	mul.w	r3, r1, r3
 8013184:	441a      	add	r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2200      	movs	r2, #0
 801318e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131a0:	3b01      	subs	r3, #1
 80131a2:	68f9      	ldr	r1, [r7, #12]
 80131a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80131a6:	fb01 f303 	mul.w	r3, r1, r3
 80131aa:	441a      	add	r2, r3
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	22ff      	movs	r2, #255	; 0xff
 80131b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	22ff      	movs	r2, #255	; 0xff
 80131bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d114      	bne.n	80131f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	691b      	ldr	r3, [r3, #16]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d01a      	beq.n	8013204 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	3310      	adds	r3, #16
 80131d2:	4618      	mov	r0, r3
 80131d4:	f001 fb12 	bl	80147fc <xTaskRemoveFromEventList>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d012      	beq.n	8013204 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80131de:	4b0d      	ldr	r3, [pc, #52]	; (8013214 <xQueueGenericReset+0xd0>)
 80131e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131e4:	601a      	str	r2, [r3, #0]
 80131e6:	f3bf 8f4f 	dsb	sy
 80131ea:	f3bf 8f6f 	isb	sy
 80131ee:	e009      	b.n	8013204 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	3310      	adds	r3, #16
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7ff fef1 	bl	8012fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3324      	adds	r3, #36	; 0x24
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff feec 	bl	8012fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013204:	f002 fa2a 	bl	801565c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013208:	2301      	movs	r3, #1
}
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	e000ed04 	.word	0xe000ed04

08013218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013218:	b580      	push	{r7, lr}
 801321a:	b08e      	sub	sp, #56	; 0x38
 801321c:	af02      	add	r7, sp, #8
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d10b      	bne.n	8013244 <xQueueGenericCreateStatic+0x2c>
 801322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013230:	b672      	cpsid	i
 8013232:	f383 8811 	msr	BASEPRI, r3
 8013236:	f3bf 8f6f 	isb	sy
 801323a:	f3bf 8f4f 	dsb	sy
 801323e:	b662      	cpsie	i
 8013240:	62bb      	str	r3, [r7, #40]	; 0x28
 8013242:	e7fe      	b.n	8013242 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d10b      	bne.n	8013262 <xQueueGenericCreateStatic+0x4a>
 801324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324e:	b672      	cpsid	i
 8013250:	f383 8811 	msr	BASEPRI, r3
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	b662      	cpsie	i
 801325e:	627b      	str	r3, [r7, #36]	; 0x24
 8013260:	e7fe      	b.n	8013260 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <xQueueGenericCreateStatic+0x56>
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <xQueueGenericCreateStatic+0x5a>
 801326e:	2301      	movs	r3, #1
 8013270:	e000      	b.n	8013274 <xQueueGenericCreateStatic+0x5c>
 8013272:	2300      	movs	r3, #0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d10b      	bne.n	8013290 <xQueueGenericCreateStatic+0x78>
 8013278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327c:	b672      	cpsid	i
 801327e:	f383 8811 	msr	BASEPRI, r3
 8013282:	f3bf 8f6f 	isb	sy
 8013286:	f3bf 8f4f 	dsb	sy
 801328a:	b662      	cpsie	i
 801328c:	623b      	str	r3, [r7, #32]
 801328e:	e7fe      	b.n	801328e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d102      	bne.n	801329c <xQueueGenericCreateStatic+0x84>
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d101      	bne.n	80132a0 <xQueueGenericCreateStatic+0x88>
 801329c:	2301      	movs	r3, #1
 801329e:	e000      	b.n	80132a2 <xQueueGenericCreateStatic+0x8a>
 80132a0:	2300      	movs	r3, #0
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10b      	bne.n	80132be <xQueueGenericCreateStatic+0xa6>
 80132a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132aa:	b672      	cpsid	i
 80132ac:	f383 8811 	msr	BASEPRI, r3
 80132b0:	f3bf 8f6f 	isb	sy
 80132b4:	f3bf 8f4f 	dsb	sy
 80132b8:	b662      	cpsie	i
 80132ba:	61fb      	str	r3, [r7, #28]
 80132bc:	e7fe      	b.n	80132bc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80132be:	2350      	movs	r3, #80	; 0x50
 80132c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2b50      	cmp	r3, #80	; 0x50
 80132c6:	d00b      	beq.n	80132e0 <xQueueGenericCreateStatic+0xc8>
 80132c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132cc:	b672      	cpsid	i
 80132ce:	f383 8811 	msr	BASEPRI, r3
 80132d2:	f3bf 8f6f 	isb	sy
 80132d6:	f3bf 8f4f 	dsb	sy
 80132da:	b662      	cpsie	i
 80132dc:	61bb      	str	r3, [r7, #24]
 80132de:	e7fe      	b.n	80132de <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80132e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80132e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00d      	beq.n	8013308 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80132ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ee:	2201      	movs	r2, #1
 80132f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4613      	mov	r3, r2
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	68b9      	ldr	r1, [r7, #8]
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	f000 f846 	bl	8013394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801330a:	4618      	mov	r0, r3
 801330c:	3730      	adds	r7, #48	; 0x30
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013312:	b580      	push	{r7, lr}
 8013314:	b08a      	sub	sp, #40	; 0x28
 8013316:	af02      	add	r7, sp, #8
 8013318:	60f8      	str	r0, [r7, #12]
 801331a:	60b9      	str	r1, [r7, #8]
 801331c:	4613      	mov	r3, r2
 801331e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d10b      	bne.n	801333e <xQueueGenericCreate+0x2c>
 8013326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332a:	b672      	cpsid	i
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	b662      	cpsie	i
 801333a:	613b      	str	r3, [r7, #16]
 801333c:	e7fe      	b.n	801333c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d102      	bne.n	801334a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013344:	2300      	movs	r3, #0
 8013346:	61fb      	str	r3, [r7, #28]
 8013348:	e004      	b.n	8013354 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	68ba      	ldr	r2, [r7, #8]
 801334e:	fb02 f303 	mul.w	r3, r2, r3
 8013352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	3350      	adds	r3, #80	; 0x50
 8013358:	4618      	mov	r0, r3
 801335a:	f002 fa6f 	bl	801583c <pvPortMalloc>
 801335e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d011      	beq.n	801338a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	3350      	adds	r3, #80	; 0x50
 801336e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	2200      	movs	r2, #0
 8013374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013378:	79fa      	ldrb	r2, [r7, #7]
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	9300      	str	r3, [sp, #0]
 801337e:	4613      	mov	r3, r2
 8013380:	697a      	ldr	r2, [r7, #20]
 8013382:	68b9      	ldr	r1, [r7, #8]
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f000 f805 	bl	8013394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801338a:	69bb      	ldr	r3, [r7, #24]
	}
 801338c:	4618      	mov	r0, r3
 801338e:	3720      	adds	r7, #32
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d103      	bne.n	80133b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	69ba      	ldr	r2, [r7, #24]
 80133ac:	601a      	str	r2, [r3, #0]
 80133ae:	e002      	b.n	80133b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80133c2:	2101      	movs	r1, #1
 80133c4:	69b8      	ldr	r0, [r7, #24]
 80133c6:	f7ff febd 	bl	8013144 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	78fa      	ldrb	r2, [r7, #3]
 80133ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	3348      	adds	r3, #72	; 0x48
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ed fcba 	bl	8000d50 <TimeDoctor_QUEUE_CREATE>
}
 80133dc:	bf00      	nop
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00e      	beq.n	8013410 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2200      	movs	r2, #0
 8013402:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013404:	2300      	movs	r3, #0
 8013406:	2200      	movs	r2, #0
 8013408:	2100      	movs	r1, #0
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f838 	bl	8013480 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013410:	bf00      	nop
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013422:	2301      	movs	r3, #1
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	2300      	movs	r3, #0
 8013428:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	461a      	mov	r2, r3
 801342e:	6939      	ldr	r1, [r7, #16]
 8013430:	6978      	ldr	r0, [r7, #20]
 8013432:	f7ff ff6e 	bl	8013312 <xQueueGenericCreate>
 8013436:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013438:	68f8      	ldr	r0, [r7, #12]
 801343a:	f7ff ffd3 	bl	80133e4 <prvInitialiseMutex>

		return xNewQueue;
 801343e:	68fb      	ldr	r3, [r7, #12]
	}
 8013440:	4618      	mov	r0, r3
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013448:	b580      	push	{r7, lr}
 801344a:	b088      	sub	sp, #32
 801344c:	af02      	add	r7, sp, #8
 801344e:	4603      	mov	r3, r0
 8013450:	6039      	str	r1, [r7, #0]
 8013452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013454:	2301      	movs	r3, #1
 8013456:	617b      	str	r3, [r7, #20]
 8013458:	2300      	movs	r3, #0
 801345a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	2200      	movs	r2, #0
 8013464:	6939      	ldr	r1, [r7, #16]
 8013466:	6978      	ldr	r0, [r7, #20]
 8013468:	f7ff fed6 	bl	8013218 <xQueueGenericCreateStatic>
 801346c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801346e:	68f8      	ldr	r0, [r7, #12]
 8013470:	f7ff ffb8 	bl	80133e4 <prvInitialiseMutex>

		return xNewQueue;
 8013474:	68fb      	ldr	r3, [r7, #12]
	}
 8013476:	4618      	mov	r0, r3
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
	...

08013480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b08e      	sub	sp, #56	; 0x38
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801348e:	2300      	movs	r3, #0
 8013490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	2b00      	cmp	r3, #0
 801349a:	d10b      	bne.n	80134b4 <xQueueGenericSend+0x34>
 801349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a0:	b672      	cpsid	i
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	b662      	cpsie	i
 80134b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80134b2:	e7fe      	b.n	80134b2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d103      	bne.n	80134c2 <xQueueGenericSend+0x42>
 80134ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d101      	bne.n	80134c6 <xQueueGenericSend+0x46>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e000      	b.n	80134c8 <xQueueGenericSend+0x48>
 80134c6:	2300      	movs	r3, #0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10b      	bne.n	80134e4 <xQueueGenericSend+0x64>
 80134cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d0:	b672      	cpsid	i
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	b662      	cpsie	i
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
 80134e2:	e7fe      	b.n	80134e2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2b02      	cmp	r3, #2
 80134e8:	d103      	bne.n	80134f2 <xQueueGenericSend+0x72>
 80134ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d101      	bne.n	80134f6 <xQueueGenericSend+0x76>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e000      	b.n	80134f8 <xQueueGenericSend+0x78>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d10b      	bne.n	8013514 <xQueueGenericSend+0x94>
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	b672      	cpsid	i
 8013502:	f383 8811 	msr	BASEPRI, r3
 8013506:	f3bf 8f6f 	isb	sy
 801350a:	f3bf 8f4f 	dsb	sy
 801350e:	b662      	cpsie	i
 8013510:	623b      	str	r3, [r7, #32]
 8013512:	e7fe      	b.n	8013512 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013514:	f001 fb32 	bl	8014b7c <xTaskGetSchedulerState>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d102      	bne.n	8013524 <xQueueGenericSend+0xa4>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d101      	bne.n	8013528 <xQueueGenericSend+0xa8>
 8013524:	2301      	movs	r3, #1
 8013526:	e000      	b.n	801352a <xQueueGenericSend+0xaa>
 8013528:	2300      	movs	r3, #0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10b      	bne.n	8013546 <xQueueGenericSend+0xc6>
 801352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013532:	b672      	cpsid	i
 8013534:	f383 8811 	msr	BASEPRI, r3
 8013538:	f3bf 8f6f 	isb	sy
 801353c:	f3bf 8f4f 	dsb	sy
 8013540:	b662      	cpsie	i
 8013542:	61fb      	str	r3, [r7, #28]
 8013544:	e7fe      	b.n	8013544 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013546:	f002 f857 	bl	80155f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013552:	429a      	cmp	r2, r3
 8013554:	d302      	bcc.n	801355c <xQueueGenericSend+0xdc>
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	2b02      	cmp	r3, #2
 801355a:	d131      	bne.n	80135c0 <xQueueGenericSend+0x140>
			{
				traceQUEUE_SEND( pxQueue );
 801355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f7ed fc5a 	bl	8000e20 <TimeDoctor_QUEUE_SEND>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	68b9      	ldr	r1, [r7, #8]
 8013570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013572:	f000 faa8 	bl	8013ac6 <prvCopyDataToQueue>
 8013576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801357c:	2b00      	cmp	r3, #0
 801357e:	d010      	beq.n	80135a2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	3324      	adds	r3, #36	; 0x24
 8013584:	4618      	mov	r0, r3
 8013586:	f001 f939 	bl	80147fc <xTaskRemoveFromEventList>
 801358a:	4603      	mov	r3, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	d013      	beq.n	80135b8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013590:	4b3f      	ldr	r3, [pc, #252]	; (8013690 <xQueueGenericSend+0x210>)
 8013592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013596:	601a      	str	r2, [r3, #0]
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	e00a      	b.n	80135b8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80135a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d007      	beq.n	80135b8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80135a8:	4b39      	ldr	r3, [pc, #228]	; (8013690 <xQueueGenericSend+0x210>)
 80135aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80135b8:	f002 f850 	bl	801565c <vPortExitCritical>
				return pdPASS;
 80135bc:	2301      	movs	r3, #1
 80135be:	e063      	b.n	8013688 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d103      	bne.n	80135ce <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80135c6:	f002 f849 	bl	801565c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80135ca:	2300      	movs	r3, #0
 80135cc:	e05c      	b.n	8013688 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80135ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d106      	bne.n	80135e2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80135d4:	f107 0314 	add.w	r3, r7, #20
 80135d8:	4618      	mov	r0, r3
 80135da:	f001 f973 	bl	80148c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80135de:	2301      	movs	r3, #1
 80135e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80135e2:	f002 f83b 	bl	801565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135e6:	f000 feb1 	bl	801434c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135ea:	f002 f805 	bl	80155f8 <vPortEnterCritical>
 80135ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135f4:	b25b      	sxtb	r3, r3
 80135f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fa:	d103      	bne.n	8013604 <xQueueGenericSend+0x184>
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801360a:	b25b      	sxtb	r3, r3
 801360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013610:	d103      	bne.n	801361a <xQueueGenericSend+0x19a>
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	2200      	movs	r2, #0
 8013616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801361a:	f002 f81f 	bl	801565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801361e:	1d3a      	adds	r2, r7, #4
 8013620:	f107 0314 	add.w	r3, r7, #20
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f001 f962 	bl	80148f0 <xTaskCheckForTimeOut>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d124      	bne.n	801367c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013634:	f000 fb3f 	bl	8013cb6 <prvIsQueueFull>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d018      	beq.n	8013670 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	3310      	adds	r3, #16
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f001 f886 	bl	8014758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801364c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801364e:	f000 faca 	bl	8013be6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013652:	f000 fe89 	bl	8014368 <xTaskResumeAll>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	f47f af74 	bne.w	8013546 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801365e:	4b0c      	ldr	r3, [pc, #48]	; (8013690 <xQueueGenericSend+0x210>)
 8013660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013664:	601a      	str	r2, [r3, #0]
 8013666:	f3bf 8f4f 	dsb	sy
 801366a:	f3bf 8f6f 	isb	sy
 801366e:	e76a      	b.n	8013546 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013672:	f000 fab8 	bl	8013be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013676:	f000 fe77 	bl	8014368 <xTaskResumeAll>
 801367a:	e764      	b.n	8013546 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801367c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801367e:	f000 fab2 	bl	8013be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013682:	f000 fe71 	bl	8014368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013688:	4618      	mov	r0, r3
 801368a:	3738      	adds	r7, #56	; 0x38
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	e000ed04 	.word	0xe000ed04

08013694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b08e      	sub	sp, #56	; 0x38
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
 80136a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d10b      	bne.n	80136c4 <xQueueGenericSendFromISR+0x30>
 80136ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b0:	b672      	cpsid	i
 80136b2:	f383 8811 	msr	BASEPRI, r3
 80136b6:	f3bf 8f6f 	isb	sy
 80136ba:	f3bf 8f4f 	dsb	sy
 80136be:	b662      	cpsie	i
 80136c0:	627b      	str	r3, [r7, #36]	; 0x24
 80136c2:	e7fe      	b.n	80136c2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d103      	bne.n	80136d2 <xQueueGenericSendFromISR+0x3e>
 80136ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d101      	bne.n	80136d6 <xQueueGenericSendFromISR+0x42>
 80136d2:	2301      	movs	r3, #1
 80136d4:	e000      	b.n	80136d8 <xQueueGenericSendFromISR+0x44>
 80136d6:	2300      	movs	r3, #0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d10b      	bne.n	80136f4 <xQueueGenericSendFromISR+0x60>
 80136dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e0:	b672      	cpsid	i
 80136e2:	f383 8811 	msr	BASEPRI, r3
 80136e6:	f3bf 8f6f 	isb	sy
 80136ea:	f3bf 8f4f 	dsb	sy
 80136ee:	b662      	cpsie	i
 80136f0:	623b      	str	r3, [r7, #32]
 80136f2:	e7fe      	b.n	80136f2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d103      	bne.n	8013702 <xQueueGenericSendFromISR+0x6e>
 80136fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136fe:	2b01      	cmp	r3, #1
 8013700:	d101      	bne.n	8013706 <xQueueGenericSendFromISR+0x72>
 8013702:	2301      	movs	r3, #1
 8013704:	e000      	b.n	8013708 <xQueueGenericSendFromISR+0x74>
 8013706:	2300      	movs	r3, #0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10b      	bne.n	8013724 <xQueueGenericSendFromISR+0x90>
 801370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013710:	b672      	cpsid	i
 8013712:	f383 8811 	msr	BASEPRI, r3
 8013716:	f3bf 8f6f 	isb	sy
 801371a:	f3bf 8f4f 	dsb	sy
 801371e:	b662      	cpsie	i
 8013720:	61fb      	str	r3, [r7, #28]
 8013722:	e7fe      	b.n	8013722 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013724:	f002 f848 	bl	80157b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013728:	f3ef 8211 	mrs	r2, BASEPRI
 801372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013730:	b672      	cpsid	i
 8013732:	f383 8811 	msr	BASEPRI, r3
 8013736:	f3bf 8f6f 	isb	sy
 801373a:	f3bf 8f4f 	dsb	sy
 801373e:	b662      	cpsie	i
 8013740:	61ba      	str	r2, [r7, #24]
 8013742:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013744:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013746:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013750:	429a      	cmp	r2, r3
 8013752:	d302      	bcc.n	801375a <xQueueGenericSendFromISR+0xc6>
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	2b02      	cmp	r3, #2
 8013758:	d134      	bne.n	80137c4 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8013764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801376c:	4619      	mov	r1, r3
 801376e:	4610      	mov	r0, r2
 8013770:	f7ed fb98 	bl	8000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	68b9      	ldr	r1, [r7, #8]
 8013778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801377a:	f000 f9a4 	bl	8013ac6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801377e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013786:	d112      	bne.n	80137ae <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801378c:	2b00      	cmp	r3, #0
 801378e:	d016      	beq.n	80137be <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013792:	3324      	adds	r3, #36	; 0x24
 8013794:	4618      	mov	r0, r3
 8013796:	f001 f831 	bl	80147fc <xTaskRemoveFromEventList>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00e      	beq.n	80137be <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00b      	beq.n	80137be <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2201      	movs	r2, #1
 80137aa:	601a      	str	r2, [r3, #0]
 80137ac:	e007      	b.n	80137be <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80137ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80137b2:	3301      	adds	r3, #1
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	b25a      	sxtb	r2, r3
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80137be:	2301      	movs	r3, #1
 80137c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80137c2:	e001      	b.n	80137c8 <xQueueGenericSendFromISR+0x134>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80137c4:	2300      	movs	r3, #0
 80137c6:	637b      	str	r3, [r7, #52]	; 0x34
 80137c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80137d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3738      	adds	r7, #56	; 0x38
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08c      	sub	sp, #48	; 0x30
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80137e8:	2300      	movs	r3, #0
 80137ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80137f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10b      	bne.n	801380e <xQueueReceive+0x32>
	__asm volatile
 80137f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fa:	b672      	cpsid	i
 80137fc:	f383 8811 	msr	BASEPRI, r3
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	f3bf 8f4f 	dsb	sy
 8013808:	b662      	cpsie	i
 801380a:	623b      	str	r3, [r7, #32]
 801380c:	e7fe      	b.n	801380c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d103      	bne.n	801381c <xQueueReceive+0x40>
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <xQueueReceive+0x44>
 801381c:	2301      	movs	r3, #1
 801381e:	e000      	b.n	8013822 <xQueueReceive+0x46>
 8013820:	2300      	movs	r3, #0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d10b      	bne.n	801383e <xQueueReceive+0x62>
 8013826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382a:	b672      	cpsid	i
 801382c:	f383 8811 	msr	BASEPRI, r3
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f3bf 8f4f 	dsb	sy
 8013838:	b662      	cpsie	i
 801383a:	61fb      	str	r3, [r7, #28]
 801383c:	e7fe      	b.n	801383c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801383e:	f001 f99d 	bl	8014b7c <xTaskGetSchedulerState>
 8013842:	4603      	mov	r3, r0
 8013844:	2b00      	cmp	r3, #0
 8013846:	d102      	bne.n	801384e <xQueueReceive+0x72>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d101      	bne.n	8013852 <xQueueReceive+0x76>
 801384e:	2301      	movs	r3, #1
 8013850:	e000      	b.n	8013854 <xQueueReceive+0x78>
 8013852:	2300      	movs	r3, #0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d10b      	bne.n	8013870 <xQueueReceive+0x94>
 8013858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801385c:	b672      	cpsid	i
 801385e:	f383 8811 	msr	BASEPRI, r3
 8013862:	f3bf 8f6f 	isb	sy
 8013866:	f3bf 8f4f 	dsb	sy
 801386a:	b662      	cpsie	i
 801386c:	61bb      	str	r3, [r7, #24]
 801386e:	e7fe      	b.n	801386e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013870:	f001 fec2 	bl	80155f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013878:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	2b00      	cmp	r3, #0
 801387e:	d027      	beq.n	80138d0 <xQueueReceive+0xf4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013880:	68b9      	ldr	r1, [r7, #8]
 8013882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013884:	f000 f989 	bl	8013b9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8013888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013890:	4619      	mov	r1, r3
 8013892:	4610      	mov	r0, r2
 8013894:	f7ed fb48 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	1e5a      	subs	r2, r3, #1
 801389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801389e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a2:	691b      	ldr	r3, [r3, #16]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00f      	beq.n	80138c8 <xQueueReceive+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138aa:	3310      	adds	r3, #16
 80138ac:	4618      	mov	r0, r3
 80138ae:	f000 ffa5 	bl	80147fc <xTaskRemoveFromEventList>
 80138b2:	4603      	mov	r3, r0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d007      	beq.n	80138c8 <xQueueReceive+0xec>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80138b8:	4b3c      	ldr	r3, [pc, #240]	; (80139ac <xQueueReceive+0x1d0>)
 80138ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	f3bf 8f4f 	dsb	sy
 80138c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80138c8:	f001 fec8 	bl	801565c <vPortExitCritical>
				return pdPASS;
 80138cc:	2301      	movs	r3, #1
 80138ce:	e069      	b.n	80139a4 <xQueueReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d103      	bne.n	80138de <xQueueReceive+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80138d6:	f001 fec1 	bl	801565c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80138da:	2300      	movs	r3, #0
 80138dc:	e062      	b.n	80139a4 <xQueueReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d106      	bne.n	80138f2 <xQueueReceive+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138e4:	f107 0310 	add.w	r3, r7, #16
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 ffeb 	bl	80148c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138ee:	2301      	movs	r3, #1
 80138f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138f2:	f001 feb3 	bl	801565c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138f6:	f000 fd29 	bl	801434c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138fa:	f001 fe7d 	bl	80155f8 <vPortEnterCritical>
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013904:	b25b      	sxtb	r3, r3
 8013906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390a:	d103      	bne.n	8013914 <xQueueReceive+0x138>
 801390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390e:	2200      	movs	r2, #0
 8013910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801391a:	b25b      	sxtb	r3, r3
 801391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013920:	d103      	bne.n	801392a <xQueueReceive+0x14e>
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	2200      	movs	r2, #0
 8013926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801392a:	f001 fe97 	bl	801565c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801392e:	1d3a      	adds	r2, r7, #4
 8013930:	f107 0310 	add.w	r3, r7, #16
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f000 ffda 	bl	80148f0 <xTaskCheckForTimeOut>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d123      	bne.n	801398a <xQueueReceive+0x1ae>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013944:	f000 f9a1 	bl	8013c8a <prvIsQueueEmpty>
 8013948:	4603      	mov	r3, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d017      	beq.n	801397e <xQueueReceive+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013950:	3324      	adds	r3, #36	; 0x24
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	4611      	mov	r1, r2
 8013956:	4618      	mov	r0, r3
 8013958:	f000 fefe 	bl	8014758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801395c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801395e:	f000 f942 	bl	8013be6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013962:	f000 fd01 	bl	8014368 <xTaskResumeAll>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d181      	bne.n	8013870 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801396c:	4b0f      	ldr	r3, [pc, #60]	; (80139ac <xQueueReceive+0x1d0>)
 801396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013972:	601a      	str	r2, [r3, #0]
 8013974:	f3bf 8f4f 	dsb	sy
 8013978:	f3bf 8f6f 	isb	sy
 801397c:	e778      	b.n	8013870 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801397e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013980:	f000 f931 	bl	8013be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013984:	f000 fcf0 	bl	8014368 <xTaskResumeAll>
 8013988:	e772      	b.n	8013870 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801398a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801398c:	f000 f92b 	bl	8013be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013990:	f000 fcea 	bl	8014368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013996:	f000 f978 	bl	8013c8a <prvIsQueueEmpty>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	f43f af67 	beq.w	8013870 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80139a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3730      	adds	r7, #48	; 0x30
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	e000ed04 	.word	0xe000ed04

080139b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b08e      	sub	sp, #56	; 0x38
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d10b      	bne.n	80139de <xQueueReceiveFromISR+0x2e>
 80139c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ca:	b672      	cpsid	i
 80139cc:	f383 8811 	msr	BASEPRI, r3
 80139d0:	f3bf 8f6f 	isb	sy
 80139d4:	f3bf 8f4f 	dsb	sy
 80139d8:	b662      	cpsie	i
 80139da:	623b      	str	r3, [r7, #32]
 80139dc:	e7fe      	b.n	80139dc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d103      	bne.n	80139ec <xQueueReceiveFromISR+0x3c>
 80139e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d101      	bne.n	80139f0 <xQueueReceiveFromISR+0x40>
 80139ec:	2301      	movs	r3, #1
 80139ee:	e000      	b.n	80139f2 <xQueueReceiveFromISR+0x42>
 80139f0:	2300      	movs	r3, #0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d10b      	bne.n	8013a0e <xQueueReceiveFromISR+0x5e>
 80139f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139fa:	b672      	cpsid	i
 80139fc:	f383 8811 	msr	BASEPRI, r3
 8013a00:	f3bf 8f6f 	isb	sy
 8013a04:	f3bf 8f4f 	dsb	sy
 8013a08:	b662      	cpsie	i
 8013a0a:	61fb      	str	r3, [r7, #28]
 8013a0c:	e7fe      	b.n	8013a0c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a0e:	f001 fed3 	bl	80157b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013a12:	f3ef 8211 	mrs	r2, BASEPRI
 8013a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1a:	b672      	cpsid	i
 8013a1c:	f383 8811 	msr	BASEPRI, r3
 8013a20:	f3bf 8f6f 	isb	sy
 8013a24:	f3bf 8f4f 	dsb	sy
 8013a28:	b662      	cpsie	i
 8013a2a:	61ba      	str	r2, [r7, #24]
 8013a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d037      	beq.n	8013aae <xQueueReceiveFromISR+0xfe>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8013a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a50:	4619      	mov	r1, r3
 8013a52:	4610      	mov	r0, r2
 8013a54:	f7ed faaa 	bl	8000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a58:	68b9      	ldr	r1, [r7, #8]
 8013a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a5c:	f000 f89d 	bl	8013b9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	1e5a      	subs	r2, r3, #1
 8013a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a70:	d112      	bne.n	8013a98 <xQueueReceiveFromISR+0xe8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a74:	691b      	ldr	r3, [r3, #16]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d016      	beq.n	8013aa8 <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	3310      	adds	r3, #16
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f000 febc 	bl	80147fc <xTaskRemoveFromEventList>
 8013a84:	4603      	mov	r3, r0
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d00e      	beq.n	8013aa8 <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00b      	beq.n	8013aa8 <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2201      	movs	r2, #1
 8013a94:	601a      	str	r2, [r3, #0]
 8013a96:	e007      	b.n	8013aa8 <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	b25a      	sxtb	r2, r3
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8013aac:	e001      	b.n	8013ab2 <xQueueReceiveFromISR+0x102>
		}
		else
		{
			xReturn = pdFAIL;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3738      	adds	r7, #56	; 0x38
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}

08013ac6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b086      	sub	sp, #24
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	60f8      	str	r0, [r7, #12]
 8013ace:	60b9      	str	r1, [r7, #8]
 8013ad0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ada:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10d      	bne.n	8013b00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d14d      	bne.n	8013b88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f001 f861 	bl	8014bb8 <xTaskPriorityDisinherit>
 8013af6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2200      	movs	r2, #0
 8013afc:	609a      	str	r2, [r3, #8]
 8013afe:	e043      	b.n	8013b88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d119      	bne.n	8013b3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6858      	ldr	r0, [r3, #4]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b0e:	461a      	mov	r2, r3
 8013b10:	68b9      	ldr	r1, [r7, #8]
 8013b12:	f002 fddb 	bl	80166cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	685a      	ldr	r2, [r3, #4]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b1e:	441a      	add	r2, r3
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	685a      	ldr	r2, [r3, #4]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d32b      	bcc.n	8013b88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	605a      	str	r2, [r3, #4]
 8013b38:	e026      	b.n	8013b88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	68d8      	ldr	r0, [r3, #12]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b42:	461a      	mov	r2, r3
 8013b44:	68b9      	ldr	r1, [r7, #8]
 8013b46:	f002 fdc1 	bl	80166cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	68da      	ldr	r2, [r3, #12]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b52:	425b      	negs	r3, r3
 8013b54:	441a      	add	r2, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	68da      	ldr	r2, [r3, #12]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d207      	bcs.n	8013b76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	689a      	ldr	r2, [r3, #8]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b6e:	425b      	negs	r3, r3
 8013b70:	441a      	add	r2, r3
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2b02      	cmp	r3, #2
 8013b7a:	d105      	bne.n	8013b88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d002      	beq.n	8013b88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	3b01      	subs	r3, #1
 8013b86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	1c5a      	adds	r2, r3, #1
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013b90:	697b      	ldr	r3, [r7, #20]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b082      	sub	sp, #8
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d018      	beq.n	8013bde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	68da      	ldr	r2, [r3, #12]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bb4:	441a      	add	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68da      	ldr	r2, [r3, #12]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	689b      	ldr	r3, [r3, #8]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d303      	bcc.n	8013bce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	68d9      	ldr	r1, [r3, #12]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	6838      	ldr	r0, [r7, #0]
 8013bda:	f002 fd77 	bl	80166cc <memcpy>
	}
}
 8013bde:	bf00      	nop
 8013be0:	3708      	adds	r7, #8
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013bee:	f001 fd03 	bl	80155f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bfa:	e011      	b.n	8013c20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d012      	beq.n	8013c2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	3324      	adds	r3, #36	; 0x24
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f000 fdf7 	bl	80147fc <xTaskRemoveFromEventList>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d001      	beq.n	8013c18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c14:	f000 fed0 	bl	80149b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	dce9      	bgt.n	8013bfc <prvUnlockQueue+0x16>
 8013c28:	e000      	b.n	8013c2c <prvUnlockQueue+0x46>
					break;
 8013c2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	22ff      	movs	r2, #255	; 0xff
 8013c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013c34:	f001 fd12 	bl	801565c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c38:	f001 fcde 	bl	80155f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c44:	e011      	b.n	8013c6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d012      	beq.n	8013c74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	3310      	adds	r3, #16
 8013c52:	4618      	mov	r0, r3
 8013c54:	f000 fdd2 	bl	80147fc <xTaskRemoveFromEventList>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d001      	beq.n	8013c62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c5e:	f000 feab 	bl	80149b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c62:	7bbb      	ldrb	r3, [r7, #14]
 8013c64:	3b01      	subs	r3, #1
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	dce9      	bgt.n	8013c46 <prvUnlockQueue+0x60>
 8013c72:	e000      	b.n	8013c76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013c74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	22ff      	movs	r2, #255	; 0xff
 8013c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013c7e:	f001 fced 	bl	801565c <vPortExitCritical>
}
 8013c82:	bf00      	nop
 8013c84:	3710      	adds	r7, #16
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b084      	sub	sp, #16
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c92:	f001 fcb1 	bl	80155f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d102      	bne.n	8013ca4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	60fb      	str	r3, [r7, #12]
 8013ca2:	e001      	b.n	8013ca8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ca8:	f001 fcd8 	bl	801565c <vPortExitCritical>

	return xReturn;
 8013cac:	68fb      	ldr	r3, [r7, #12]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3710      	adds	r7, #16
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b084      	sub	sp, #16
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cbe:	f001 fc9b 	bl	80155f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d102      	bne.n	8013cd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	60fb      	str	r3, [r7, #12]
 8013cd2:	e001      	b.n	8013cd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013cd8:	f001 fcc0 	bl	801565c <vPortExitCritical>

	return xReturn;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3710      	adds	r7, #16
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
	...

08013ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	60fb      	str	r3, [r7, #12]
 8013cf6:	e01a      	b.n	8013d2e <vQueueAddToRegistry+0x46>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013cf8:	4a10      	ldr	r2, [pc, #64]	; (8013d3c <vQueueAddToRegistry+0x54>)
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d111      	bne.n	8013d28 <vQueueAddToRegistry+0x40>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013d04:	490d      	ldr	r1, [pc, #52]	; (8013d3c <vQueueAddToRegistry+0x54>)
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013d0e:	4a0b      	ldr	r2, [pc, #44]	; (8013d3c <vQueueAddToRegistry+0x54>)
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	4413      	add	r3, r2
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ed f85d 	bl	8000de0 <Timedoctor_QUEUE_REGISTRY_ADD>
				break;
 8013d26:	e005      	b.n	8013d34 <vQueueAddToRegistry+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	60fb      	str	r3, [r7, #12]
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	2b07      	cmp	r3, #7
 8013d32:	d9e1      	bls.n	8013cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013d34:	bf00      	nop
 8013d36:	3710      	adds	r7, #16
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	2001b9d8 	.word	0x2001b9d8

08013d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b086      	sub	sp, #24
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013d50:	f001 fc52 	bl	80155f8 <vPortEnterCritical>
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d5a:	b25b      	sxtb	r3, r3
 8013d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d60:	d103      	bne.n	8013d6a <vQueueWaitForMessageRestricted+0x2a>
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	2200      	movs	r2, #0
 8013d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d70:	b25b      	sxtb	r3, r3
 8013d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d76:	d103      	bne.n	8013d80 <vQueueWaitForMessageRestricted+0x40>
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d80:	f001 fc6c 	bl	801565c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d106      	bne.n	8013d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	3324      	adds	r3, #36	; 0x24
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	68b9      	ldr	r1, [r7, #8]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 fd05 	bl	80147a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013d9a:	6978      	ldr	r0, [r7, #20]
 8013d9c:	f7ff ff23 	bl	8013be6 <prvUnlockQueue>
	}
 8013da0:	bf00      	nop
 8013da2:	3718      	adds	r7, #24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08e      	sub	sp, #56	; 0x38
 8013dac:	af04      	add	r7, sp, #16
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	607a      	str	r2, [r7, #4]
 8013db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d10b      	bne.n	8013dd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc0:	b672      	cpsid	i
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	b662      	cpsie	i
 8013dd0:	623b      	str	r3, [r7, #32]
 8013dd2:	e7fe      	b.n	8013dd2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d10b      	bne.n	8013df2 <xTaskCreateStatic+0x4a>
 8013dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dde:	b672      	cpsid	i
 8013de0:	f383 8811 	msr	BASEPRI, r3
 8013de4:	f3bf 8f6f 	isb	sy
 8013de8:	f3bf 8f4f 	dsb	sy
 8013dec:	b662      	cpsie	i
 8013dee:	61fb      	str	r3, [r7, #28]
 8013df0:	e7fe      	b.n	8013df0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013df2:	2360      	movs	r3, #96	; 0x60
 8013df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	2b60      	cmp	r3, #96	; 0x60
 8013dfa:	d00b      	beq.n	8013e14 <xTaskCreateStatic+0x6c>
 8013dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e00:	b672      	cpsid	i
 8013e02:	f383 8811 	msr	BASEPRI, r3
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	b662      	cpsie	i
 8013e10:	61bb      	str	r3, [r7, #24]
 8013e12:	e7fe      	b.n	8013e12 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013e14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d01e      	beq.n	8013e5a <xTaskCreateStatic+0xb2>
 8013e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d01b      	beq.n	8013e5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	2202      	movs	r2, #2
 8013e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013e34:	2300      	movs	r3, #0
 8013e36:	9303      	str	r3, [sp, #12]
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	9302      	str	r3, [sp, #8]
 8013e3c:	f107 0314 	add.w	r3, r7, #20
 8013e40:	9301      	str	r3, [sp, #4]
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	687a      	ldr	r2, [r7, #4]
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 f850 	bl	8013ef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e54:	f000 f8e0 	bl	8014018 <prvAddNewTaskToReadyList>
 8013e58:	e001      	b.n	8013e5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e5e:	697b      	ldr	r3, [r7, #20]
	}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3728      	adds	r7, #40	; 0x28
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b08c      	sub	sp, #48	; 0x30
 8013e6c:	af04      	add	r7, sp, #16
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	603b      	str	r3, [r7, #0]
 8013e74:	4613      	mov	r3, r2
 8013e76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013e78:	88fb      	ldrh	r3, [r7, #6]
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f001 fcdd 	bl	801583c <pvPortMalloc>
 8013e82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00e      	beq.n	8013ea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013e8a:	2060      	movs	r0, #96	; 0x60
 8013e8c:	f001 fcd6 	bl	801583c <pvPortMalloc>
 8013e90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d003      	beq.n	8013ea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013e98:	69fb      	ldr	r3, [r7, #28]
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8013e9e:	e005      	b.n	8013eac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013ea0:	6978      	ldr	r0, [r7, #20]
 8013ea2:	f001 fd97 	bl	80159d4 <vPortFree>
 8013ea6:	e001      	b.n	8013eac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d017      	beq.n	8013ee2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013eba:	88fa      	ldrh	r2, [r7, #6]
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	9303      	str	r3, [sp, #12]
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	9302      	str	r3, [sp, #8]
 8013ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec6:	9301      	str	r3, [sp, #4]
 8013ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eca:	9300      	str	r3, [sp, #0]
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f000 f80e 	bl	8013ef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ed6:	69f8      	ldr	r0, [r7, #28]
 8013ed8:	f000 f89e 	bl	8014018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013edc:	2301      	movs	r3, #1
 8013ede:	61bb      	str	r3, [r7, #24]
 8013ee0:	e002      	b.n	8013ee8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013ee8:	69bb      	ldr	r3, [r7, #24]
	}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3720      	adds	r7, #32
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}

08013ef2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b088      	sub	sp, #32
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	60f8      	str	r0, [r7, #12]
 8013efa:	60b9      	str	r1, [r7, #8]
 8013efc:	607a      	str	r2, [r7, #4]
 8013efe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	461a      	mov	r2, r3
 8013f0a:	21a5      	movs	r1, #165	; 0xa5
 8013f0c:	f002 fbe9 	bl	80166e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f14:	6879      	ldr	r1, [r7, #4]
 8013f16:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013f1a:	440b      	add	r3, r1
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	4413      	add	r3, r2
 8013f20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	f023 0307 	bic.w	r3, r3, #7
 8013f28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	f003 0307 	and.w	r3, r3, #7
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d00b      	beq.n	8013f4c <prvInitialiseNewTask+0x5a>
 8013f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f38:	b672      	cpsid	i
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	b662      	cpsie	i
 8013f48:	617b      	str	r3, [r7, #20]
 8013f4a:	e7fe      	b.n	8013f4a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d01f      	beq.n	8013f92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f52:	2300      	movs	r3, #0
 8013f54:	61fb      	str	r3, [r7, #28]
 8013f56:	e012      	b.n	8013f7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f58:	68ba      	ldr	r2, [r7, #8]
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	7819      	ldrb	r1, [r3, #0]
 8013f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f62:	69fb      	ldr	r3, [r7, #28]
 8013f64:	4413      	add	r3, r2
 8013f66:	3334      	adds	r3, #52	; 0x34
 8013f68:	460a      	mov	r2, r1
 8013f6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	69fb      	ldr	r3, [r7, #28]
 8013f70:	4413      	add	r3, r2
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d006      	beq.n	8013f86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	61fb      	str	r3, [r7, #28]
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	2b0f      	cmp	r3, #15
 8013f82:	d9e9      	bls.n	8013f58 <prvInitialiseNewTask+0x66>
 8013f84:	e000      	b.n	8013f88 <prvInitialiseNewTask+0x96>
			{
				break;
 8013f86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f90:	e003      	b.n	8013f9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	2b37      	cmp	r3, #55	; 0x37
 8013f9e:	d901      	bls.n	8013fa4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013fa0:	2337      	movs	r3, #55	; 0x37
 8013fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	3304      	adds	r3, #4
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7ff f82e 	bl	801301c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc2:	3318      	adds	r3, #24
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7ff f829 	bl	801301c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe8:	2200      	movs	r2, #0
 8013fea:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	68f9      	ldr	r1, [r7, #12]
 8013ff8:	69b8      	ldr	r0, [r7, #24]
 8013ffa:	f001 f9f5 	bl	80153e8 <pxPortInitialiseStack>
 8013ffe:	4602      	mov	r2, r0
 8014000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014002:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014006:	2b00      	cmp	r3, #0
 8014008:	d002      	beq.n	8014010 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801400e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014010:	bf00      	nop
 8014012:	3720      	adds	r7, #32
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014020:	f001 faea 	bl	80155f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014024:	4b31      	ldr	r3, [pc, #196]	; (80140ec <prvAddNewTaskToReadyList+0xd4>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	3301      	adds	r3, #1
 801402a:	4a30      	ldr	r2, [pc, #192]	; (80140ec <prvAddNewTaskToReadyList+0xd4>)
 801402c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801402e:	4b30      	ldr	r3, [pc, #192]	; (80140f0 <prvAddNewTaskToReadyList+0xd8>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d109      	bne.n	801404a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014036:	4a2e      	ldr	r2, [pc, #184]	; (80140f0 <prvAddNewTaskToReadyList+0xd8>)
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801403c:	4b2b      	ldr	r3, [pc, #172]	; (80140ec <prvAddNewTaskToReadyList+0xd4>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d110      	bne.n	8014066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014044:	f000 fcde 	bl	8014a04 <prvInitialiseTaskLists>
 8014048:	e00d      	b.n	8014066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801404a:	4b2a      	ldr	r3, [pc, #168]	; (80140f4 <prvAddNewTaskToReadyList+0xdc>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d109      	bne.n	8014066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014052:	4b27      	ldr	r3, [pc, #156]	; (80140f0 <prvAddNewTaskToReadyList+0xd8>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801405c:	429a      	cmp	r2, r3
 801405e:	d802      	bhi.n	8014066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014060:	4a23      	ldr	r2, [pc, #140]	; (80140f0 <prvAddNewTaskToReadyList+0xd8>)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014066:	4b24      	ldr	r3, [pc, #144]	; (80140f8 <prvAddNewTaskToReadyList+0xe0>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	3301      	adds	r3, #1
 801406c:	4a22      	ldr	r2, [pc, #136]	; (80140f8 <prvAddNewTaskToReadyList+0xe0>)
 801406e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014070:	4b21      	ldr	r3, [pc, #132]	; (80140f8 <prvAddNewTaskToReadyList+0xe0>)
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	3334      	adds	r3, #52	; 0x34
 8014080:	4619      	mov	r1, r3
 8014082:	4610      	mov	r0, r2
 8014084:	f7ec fd5a 	bl	8000b3c <TimeDoctor_CREATE>

		prvAddTaskToReadyList( pxNewTCB );
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801408c:	4b1b      	ldr	r3, [pc, #108]	; (80140fc <prvAddNewTaskToReadyList+0xe4>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d903      	bls.n	801409c <prvAddNewTaskToReadyList+0x84>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014098:	4a18      	ldr	r2, [pc, #96]	; (80140fc <prvAddNewTaskToReadyList+0xe4>)
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a0:	4613      	mov	r3, r2
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	4413      	add	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4a15      	ldr	r2, [pc, #84]	; (8014100 <prvAddNewTaskToReadyList+0xe8>)
 80140aa:	441a      	add	r2, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	3304      	adds	r3, #4
 80140b0:	4619      	mov	r1, r3
 80140b2:	4610      	mov	r0, r2
 80140b4:	f7fe ffbf 	bl	8013036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80140b8:	f001 fad0 	bl	801565c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80140bc:	4b0d      	ldr	r3, [pc, #52]	; (80140f4 <prvAddNewTaskToReadyList+0xdc>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d00e      	beq.n	80140e2 <prvAddNewTaskToReadyList+0xca>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80140c4:	4b0a      	ldr	r3, [pc, #40]	; (80140f0 <prvAddNewTaskToReadyList+0xd8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d207      	bcs.n	80140e2 <prvAddNewTaskToReadyList+0xca>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80140d2:	4b0c      	ldr	r3, [pc, #48]	; (8014104 <prvAddNewTaskToReadyList+0xec>)
 80140d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140d8:	601a      	str	r2, [r3, #0]
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140e2:	bf00      	nop
 80140e4:	3708      	adds	r7, #8
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	20001cb8 	.word	0x20001cb8
 80140f0:	200017e4 	.word	0x200017e4
 80140f4:	20001cc4 	.word	0x20001cc4
 80140f8:	20001cd4 	.word	0x20001cd4
 80140fc:	20001cc0 	.word	0x20001cc0
 8014100:	200017e8 	.word	0x200017e8
 8014104:	e000ed04 	.word	0xe000ed04

08014108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014110:	2300      	movs	r3, #0
 8014112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d018      	beq.n	801414c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801411a:	4b14      	ldr	r3, [pc, #80]	; (801416c <vTaskDelay+0x64>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00b      	beq.n	801413a <vTaskDelay+0x32>
 8014122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014126:	b672      	cpsid	i
 8014128:	f383 8811 	msr	BASEPRI, r3
 801412c:	f3bf 8f6f 	isb	sy
 8014130:	f3bf 8f4f 	dsb	sy
 8014134:	b662      	cpsie	i
 8014136:	60bb      	str	r3, [r7, #8]
 8014138:	e7fe      	b.n	8014138 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801413a:	f000 f907 	bl	801434c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801413e:	2100      	movs	r1, #0
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fda9 	bl	8014c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014146:	f000 f90f 	bl	8014368 <xTaskResumeAll>
 801414a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d107      	bne.n	8014162 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014152:	4b07      	ldr	r3, [pc, #28]	; (8014170 <vTaskDelay+0x68>)
 8014154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014158:	601a      	str	r2, [r3, #0]
 801415a:	f3bf 8f4f 	dsb	sy
 801415e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014162:	bf00      	nop
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	20001ce0 	.word	0x20001ce0
 8014170:	e000ed04 	.word	0xe000ed04

08014174 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801417c:	f001 fa3c 	bl	80155f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d102      	bne.n	801418c <vTaskSuspend+0x18>
 8014186:	4b33      	ldr	r3, [pc, #204]	; (8014254 <vTaskSuspend+0xe0>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	e000      	b.n	801418e <vTaskSuspend+0x1a>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014194:	4618      	mov	r0, r3
 8014196:	f7ec fd9d 	bl	8000cd4 <TimeDoctor_TASK_SUSPEND>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	3304      	adds	r3, #4
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe ffa6 	bl	80130f0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d004      	beq.n	80141b6 <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	3318      	adds	r3, #24
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7fe ff9d 	bl	80130f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3304      	adds	r3, #4
 80141ba:	4619      	mov	r1, r3
 80141bc:	4826      	ldr	r0, [pc, #152]	; (8014258 <vTaskSuspend+0xe4>)
 80141be:	f7fe ff3a 	bl	8013036 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80141c8:	b2db      	uxtb	r3, r3
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d103      	bne.n	80141d6 <vTaskSuspend+0x62>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	2200      	movs	r2, #0
 80141d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80141d6:	f001 fa41 	bl	801565c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80141da:	4b20      	ldr	r3, [pc, #128]	; (801425c <vTaskSuspend+0xe8>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d005      	beq.n	80141ee <vTaskSuspend+0x7a>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80141e2:	f001 fa09 	bl	80155f8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80141e6:	f000 fca9 	bl	8014b3c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80141ea:	f001 fa37 	bl	801565c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80141ee:	4b19      	ldr	r3, [pc, #100]	; (8014254 <vTaskSuspend+0xe0>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d128      	bne.n	801424a <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
 80141f8:	4b18      	ldr	r3, [pc, #96]	; (801425c <vTaskSuspend+0xe8>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d018      	beq.n	8014232 <vTaskSuspend+0xbe>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014200:	4b17      	ldr	r3, [pc, #92]	; (8014260 <vTaskSuspend+0xec>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d00b      	beq.n	8014220 <vTaskSuspend+0xac>
 8014208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420c:	b672      	cpsid	i
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	b662      	cpsie	i
 801421c:	60bb      	str	r3, [r7, #8]
 801421e:	e7fe      	b.n	801421e <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 8014220:	4b10      	ldr	r3, [pc, #64]	; (8014264 <vTaskSuspend+0xf0>)
 8014222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014226:	601a      	str	r2, [r3, #0]
 8014228:	f3bf 8f4f 	dsb	sy
 801422c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014230:	e00b      	b.n	801424a <vTaskSuspend+0xd6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014232:	4b09      	ldr	r3, [pc, #36]	; (8014258 <vTaskSuspend+0xe4>)
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	4b0c      	ldr	r3, [pc, #48]	; (8014268 <vTaskSuspend+0xf4>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	429a      	cmp	r2, r3
 801423c:	d103      	bne.n	8014246 <vTaskSuspend+0xd2>
					pxCurrentTCB = NULL;
 801423e:	4b05      	ldr	r3, [pc, #20]	; (8014254 <vTaskSuspend+0xe0>)
 8014240:	2200      	movs	r2, #0
 8014242:	601a      	str	r2, [r3, #0]
	}
 8014244:	e001      	b.n	801424a <vTaskSuspend+0xd6>
					vTaskSwitchContext();
 8014246:	f000 f9f7 	bl	8014638 <vTaskSwitchContext>
	}
 801424a:	bf00      	nop
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	200017e4 	.word	0x200017e4
 8014258:	20001ca4 	.word	0x20001ca4
 801425c:	20001cc4 	.word	0x20001cc4
 8014260:	20001ce0 	.word	0x20001ce0
 8014264:	e000ed04 	.word	0xe000ed04
 8014268:	20001cb8 	.word	0x20001cb8

0801426c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b08a      	sub	sp, #40	; 0x28
 8014270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014272:	2300      	movs	r3, #0
 8014274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014276:	2300      	movs	r3, #0
 8014278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801427a:	463a      	mov	r2, r7
 801427c:	1d39      	adds	r1, r7, #4
 801427e:	f107 0308 	add.w	r3, r7, #8
 8014282:	4618      	mov	r0, r3
 8014284:	f7fe fe76 	bl	8012f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	68ba      	ldr	r2, [r7, #8]
 801428e:	9202      	str	r2, [sp, #8]
 8014290:	9301      	str	r3, [sp, #4]
 8014292:	2300      	movs	r3, #0
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	2300      	movs	r3, #0
 8014298:	460a      	mov	r2, r1
 801429a:	4925      	ldr	r1, [pc, #148]	; (8014330 <vTaskStartScheduler+0xc4>)
 801429c:	4825      	ldr	r0, [pc, #148]	; (8014334 <vTaskStartScheduler+0xc8>)
 801429e:	f7ff fd83 	bl	8013da8 <xTaskCreateStatic>
 80142a2:	4602      	mov	r2, r0
 80142a4:	4b24      	ldr	r3, [pc, #144]	; (8014338 <vTaskStartScheduler+0xcc>)
 80142a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80142a8:	4b23      	ldr	r3, [pc, #140]	; (8014338 <vTaskStartScheduler+0xcc>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80142b0:	2301      	movs	r3, #1
 80142b2:	617b      	str	r3, [r7, #20]
 80142b4:	e001      	b.n	80142ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80142b6:	2300      	movs	r3, #0
 80142b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d102      	bne.n	80142c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80142c0:	f000 fd3e 	bl	8014d40 <xTimerCreateTimerTask>
 80142c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	2b01      	cmp	r3, #1
 80142ca:	d11d      	bne.n	8014308 <vTaskStartScheduler+0x9c>
 80142cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d0:	b672      	cpsid	i
 80142d2:	f383 8811 	msr	BASEPRI, r3
 80142d6:	f3bf 8f6f 	isb	sy
 80142da:	f3bf 8f4f 	dsb	sy
 80142de:	b662      	cpsie	i
 80142e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80142e2:	4b16      	ldr	r3, [pc, #88]	; (801433c <vTaskStartScheduler+0xd0>)
 80142e4:	f04f 32ff 	mov.w	r2, #4294967295
 80142e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80142ea:	4b15      	ldr	r3, [pc, #84]	; (8014340 <vTaskStartScheduler+0xd4>)
 80142ec:	2201      	movs	r2, #1
 80142ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80142f0:	4b14      	ldr	r3, [pc, #80]	; (8014344 <vTaskStartScheduler+0xd8>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80142f6:	4b14      	ldr	r3, [pc, #80]	; (8014348 <vTaskStartScheduler+0xdc>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7ec fc6d 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014302:	f001 f8fd 	bl	8015500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014306:	e00f      	b.n	8014328 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801430e:	d10b      	bne.n	8014328 <vTaskStartScheduler+0xbc>
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	b672      	cpsid	i
 8014316:	f383 8811 	msr	BASEPRI, r3
 801431a:	f3bf 8f6f 	isb	sy
 801431e:	f3bf 8f4f 	dsb	sy
 8014322:	b662      	cpsie	i
 8014324:	60fb      	str	r3, [r7, #12]
 8014326:	e7fe      	b.n	8014326 <vTaskStartScheduler+0xba>
}
 8014328:	bf00      	nop
 801432a:	3718      	adds	r7, #24
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	08017d98 	.word	0x08017d98
 8014334:	080149d1 	.word	0x080149d1
 8014338:	20001cdc 	.word	0x20001cdc
 801433c:	20001cd8 	.word	0x20001cd8
 8014340:	20001cc4 	.word	0x20001cc4
 8014344:	20001cbc 	.word	0x20001cbc
 8014348:	200017e4 	.word	0x200017e4

0801434c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801434c:	b480      	push	{r7}
 801434e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014350:	4b04      	ldr	r3, [pc, #16]	; (8014364 <vTaskSuspendAll+0x18>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	3301      	adds	r3, #1
 8014356:	4a03      	ldr	r2, [pc, #12]	; (8014364 <vTaskSuspendAll+0x18>)
 8014358:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801435a:	bf00      	nop
 801435c:	46bd      	mov	sp, r7
 801435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014362:	4770      	bx	lr
 8014364:	20001ce0 	.word	0x20001ce0

08014368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801436e:	2300      	movs	r3, #0
 8014370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014372:	2300      	movs	r3, #0
 8014374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014376:	4b42      	ldr	r3, [pc, #264]	; (8014480 <xTaskResumeAll+0x118>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d10b      	bne.n	8014396 <xTaskResumeAll+0x2e>
 801437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014382:	b672      	cpsid	i
 8014384:	f383 8811 	msr	BASEPRI, r3
 8014388:	f3bf 8f6f 	isb	sy
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	b662      	cpsie	i
 8014392:	603b      	str	r3, [r7, #0]
 8014394:	e7fe      	b.n	8014394 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014396:	f001 f92f 	bl	80155f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801439a:	4b39      	ldr	r3, [pc, #228]	; (8014480 <xTaskResumeAll+0x118>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	3b01      	subs	r3, #1
 80143a0:	4a37      	ldr	r2, [pc, #220]	; (8014480 <xTaskResumeAll+0x118>)
 80143a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143a4:	4b36      	ldr	r3, [pc, #216]	; (8014480 <xTaskResumeAll+0x118>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d162      	bne.n	8014472 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80143ac:	4b35      	ldr	r3, [pc, #212]	; (8014484 <xTaskResumeAll+0x11c>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d05e      	beq.n	8014472 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143b4:	e02f      	b.n	8014416 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143b6:	4b34      	ldr	r3, [pc, #208]	; (8014488 <xTaskResumeAll+0x120>)
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	3318      	adds	r3, #24
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fe fe94 	bl	80130f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	3304      	adds	r3, #4
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe fe8f 	bl	80130f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143d6:	4b2d      	ldr	r3, [pc, #180]	; (801448c <xTaskResumeAll+0x124>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d903      	bls.n	80143e6 <xTaskResumeAll+0x7e>
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e2:	4a2a      	ldr	r2, [pc, #168]	; (801448c <xTaskResumeAll+0x124>)
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ea:	4613      	mov	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	4413      	add	r3, r2
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	4a27      	ldr	r2, [pc, #156]	; (8014490 <xTaskResumeAll+0x128>)
 80143f4:	441a      	add	r2, r3
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	3304      	adds	r3, #4
 80143fa:	4619      	mov	r1, r3
 80143fc:	4610      	mov	r0, r2
 80143fe:	f7fe fe1a 	bl	8013036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014406:	4b23      	ldr	r3, [pc, #140]	; (8014494 <xTaskResumeAll+0x12c>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801440c:	429a      	cmp	r2, r3
 801440e:	d302      	bcc.n	8014416 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014410:	4b21      	ldr	r3, [pc, #132]	; (8014498 <xTaskResumeAll+0x130>)
 8014412:	2201      	movs	r2, #1
 8014414:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014416:	4b1c      	ldr	r3, [pc, #112]	; (8014488 <xTaskResumeAll+0x120>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d1cb      	bne.n	80143b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d001      	beq.n	8014428 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014424:	f000 fb8a 	bl	8014b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014428:	4b1c      	ldr	r3, [pc, #112]	; (801449c <xTaskResumeAll+0x134>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d010      	beq.n	8014456 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014434:	f000 f846 	bl	80144c4 <xTaskIncrementTick>
 8014438:	4603      	mov	r3, r0
 801443a:	2b00      	cmp	r3, #0
 801443c:	d002      	beq.n	8014444 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801443e:	4b16      	ldr	r3, [pc, #88]	; (8014498 <xTaskResumeAll+0x130>)
 8014440:	2201      	movs	r2, #1
 8014442:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	3b01      	subs	r3, #1
 8014448:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d1f1      	bne.n	8014434 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8014450:	4b12      	ldr	r3, [pc, #72]	; (801449c <xTaskResumeAll+0x134>)
 8014452:	2200      	movs	r2, #0
 8014454:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014456:	4b10      	ldr	r3, [pc, #64]	; (8014498 <xTaskResumeAll+0x130>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d009      	beq.n	8014472 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801445e:	2301      	movs	r3, #1
 8014460:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014462:	4b0f      	ldr	r3, [pc, #60]	; (80144a0 <xTaskResumeAll+0x138>)
 8014464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014468:	601a      	str	r2, [r3, #0]
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014472:	f001 f8f3 	bl	801565c <vPortExitCritical>

	return xAlreadyYielded;
 8014476:	68bb      	ldr	r3, [r7, #8]
}
 8014478:	4618      	mov	r0, r3
 801447a:	3710      	adds	r7, #16
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	20001ce0 	.word	0x20001ce0
 8014484:	20001cb8 	.word	0x20001cb8
 8014488:	20001c78 	.word	0x20001c78
 801448c:	20001cc0 	.word	0x20001cc0
 8014490:	200017e8 	.word	0x200017e8
 8014494:	200017e4 	.word	0x200017e4
 8014498:	20001ccc 	.word	0x20001ccc
 801449c:	20001cc8 	.word	0x20001cc8
 80144a0:	e000ed04 	.word	0xe000ed04

080144a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80144aa:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <xTaskGetTickCount+0x1c>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80144b0:	687b      	ldr	r3, [r7, #4]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	370c      	adds	r7, #12
 80144b6:	46bd      	mov	sp, r7
 80144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144bc:	4770      	bx	lr
 80144be:	bf00      	nop
 80144c0:	20001cbc 	.word	0x20001cbc

080144c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80144ca:	2300      	movs	r3, #0
 80144cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144ce:	4b4f      	ldr	r3, [pc, #316]	; (801460c <xTaskIncrementTick+0x148>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	f040 808a 	bne.w	80145ec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144d8:	4b4d      	ldr	r3, [pc, #308]	; (8014610 <xTaskIncrementTick+0x14c>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	3301      	adds	r3, #1
 80144de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80144e0:	4a4b      	ldr	r2, [pc, #300]	; (8014610 <xTaskIncrementTick+0x14c>)
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d121      	bne.n	8014530 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80144ec:	4b49      	ldr	r3, [pc, #292]	; (8014614 <xTaskIncrementTick+0x150>)
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00b      	beq.n	801450e <xTaskIncrementTick+0x4a>
 80144f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144fa:	b672      	cpsid	i
 80144fc:	f383 8811 	msr	BASEPRI, r3
 8014500:	f3bf 8f6f 	isb	sy
 8014504:	f3bf 8f4f 	dsb	sy
 8014508:	b662      	cpsie	i
 801450a:	603b      	str	r3, [r7, #0]
 801450c:	e7fe      	b.n	801450c <xTaskIncrementTick+0x48>
 801450e:	4b41      	ldr	r3, [pc, #260]	; (8014614 <xTaskIncrementTick+0x150>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	60fb      	str	r3, [r7, #12]
 8014514:	4b40      	ldr	r3, [pc, #256]	; (8014618 <xTaskIncrementTick+0x154>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4a3e      	ldr	r2, [pc, #248]	; (8014614 <xTaskIncrementTick+0x150>)
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	4a3e      	ldr	r2, [pc, #248]	; (8014618 <xTaskIncrementTick+0x154>)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6013      	str	r3, [r2, #0]
 8014522:	4b3e      	ldr	r3, [pc, #248]	; (801461c <xTaskIncrementTick+0x158>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	4a3c      	ldr	r2, [pc, #240]	; (801461c <xTaskIncrementTick+0x158>)
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	f000 fb06 	bl	8014b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014530:	4b3b      	ldr	r3, [pc, #236]	; (8014620 <xTaskIncrementTick+0x15c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	693a      	ldr	r2, [r7, #16]
 8014536:	429a      	cmp	r2, r3
 8014538:	d349      	bcc.n	80145ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801453a:	4b36      	ldr	r3, [pc, #216]	; (8014614 <xTaskIncrementTick+0x150>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d104      	bne.n	801454e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014544:	4b36      	ldr	r3, [pc, #216]	; (8014620 <xTaskIncrementTick+0x15c>)
 8014546:	f04f 32ff 	mov.w	r2, #4294967295
 801454a:	601a      	str	r2, [r3, #0]
					break;
 801454c:	e03f      	b.n	80145ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801454e:	4b31      	ldr	r3, [pc, #196]	; (8014614 <xTaskIncrementTick+0x150>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801455e:	693a      	ldr	r2, [r7, #16]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	429a      	cmp	r2, r3
 8014564:	d203      	bcs.n	801456e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014566:	4a2e      	ldr	r2, [pc, #184]	; (8014620 <xTaskIncrementTick+0x15c>)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801456c:	e02f      	b.n	80145ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	3304      	adds	r3, #4
 8014572:	4618      	mov	r0, r3
 8014574:	f7fe fdbc 	bl	80130f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801457c:	2b00      	cmp	r3, #0
 801457e:	d004      	beq.n	801458a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	3318      	adds	r3, #24
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe fdb3 	bl	80130f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801458e:	4b25      	ldr	r3, [pc, #148]	; (8014624 <xTaskIncrementTick+0x160>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	429a      	cmp	r2, r3
 8014594:	d903      	bls.n	801459e <xTaskIncrementTick+0xda>
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459a:	4a22      	ldr	r2, [pc, #136]	; (8014624 <xTaskIncrementTick+0x160>)
 801459c:	6013      	str	r3, [r2, #0]
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145a2:	4613      	mov	r3, r2
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	4413      	add	r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4a1f      	ldr	r2, [pc, #124]	; (8014628 <xTaskIncrementTick+0x164>)
 80145ac:	441a      	add	r2, r3
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	3304      	adds	r3, #4
 80145b2:	4619      	mov	r1, r3
 80145b4:	4610      	mov	r0, r2
 80145b6:	f7fe fd3e 	bl	8013036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145be:	4b1b      	ldr	r3, [pc, #108]	; (801462c <xTaskIncrementTick+0x168>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d3b8      	bcc.n	801453a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80145c8:	2301      	movs	r3, #1
 80145ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145cc:	e7b5      	b.n	801453a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145ce:	4b17      	ldr	r3, [pc, #92]	; (801462c <xTaskIncrementTick+0x168>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d4:	4914      	ldr	r1, [pc, #80]	; (8014628 <xTaskIncrementTick+0x164>)
 80145d6:	4613      	mov	r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	4413      	add	r3, r2
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	440b      	add	r3, r1
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d907      	bls.n	80145f6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80145e6:	2301      	movs	r3, #1
 80145e8:	617b      	str	r3, [r7, #20]
 80145ea:	e004      	b.n	80145f6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80145ec:	4b10      	ldr	r3, [pc, #64]	; (8014630 <xTaskIncrementTick+0x16c>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	3301      	adds	r3, #1
 80145f2:	4a0f      	ldr	r2, [pc, #60]	; (8014630 <xTaskIncrementTick+0x16c>)
 80145f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80145f6:	4b0f      	ldr	r3, [pc, #60]	; (8014634 <xTaskIncrementTick+0x170>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d001      	beq.n	8014602 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80145fe:	2301      	movs	r3, #1
 8014600:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014602:	697b      	ldr	r3, [r7, #20]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3718      	adds	r7, #24
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	20001ce0 	.word	0x20001ce0
 8014610:	20001cbc 	.word	0x20001cbc
 8014614:	20001c70 	.word	0x20001c70
 8014618:	20001c74 	.word	0x20001c74
 801461c:	20001cd0 	.word	0x20001cd0
 8014620:	20001cd8 	.word	0x20001cd8
 8014624:	20001cc0 	.word	0x20001cc0
 8014628:	200017e8 	.word	0x200017e8
 801462c:	200017e4 	.word	0x200017e4
 8014630:	20001cc8 	.word	0x20001cc8
 8014634:	20001ccc 	.word	0x20001ccc

08014638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801463e:	4b41      	ldr	r3, [pc, #260]	; (8014744 <vTaskSwitchContext+0x10c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d003      	beq.n	801464e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014646:	4b40      	ldr	r3, [pc, #256]	; (8014748 <vTaskSwitchContext+0x110>)
 8014648:	2201      	movs	r2, #1
 801464a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801464c:	e075      	b.n	801473a <vTaskSwitchContext+0x102>
		xYieldPending = pdFALSE;
 801464e:	4b3e      	ldr	r3, [pc, #248]	; (8014748 <vTaskSwitchContext+0x110>)
 8014650:	2200      	movs	r2, #0
 8014652:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8014654:	4b3d      	ldr	r3, [pc, #244]	; (801474c <vTaskSwitchContext+0x114>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801465a:	4618      	mov	r0, r3
 801465c:	f7ec fafc 	bl	8000c58 <TimeDoctor_TASK_SWITCHED_OUT>
		taskCHECK_FOR_STACK_OVERFLOW();
 8014660:	4b3a      	ldr	r3, [pc, #232]	; (801474c <vTaskSwitchContext+0x114>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014666:	613b      	str	r3, [r7, #16]
 8014668:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	68fa      	ldr	r2, [r7, #12]
 8014674:	429a      	cmp	r2, r3
 8014676:	d111      	bne.n	801469c <vTaskSwitchContext+0x64>
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	3304      	adds	r3, #4
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	68fa      	ldr	r2, [r7, #12]
 8014680:	429a      	cmp	r2, r3
 8014682:	d10b      	bne.n	801469c <vTaskSwitchContext+0x64>
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	3308      	adds	r3, #8
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	68fa      	ldr	r2, [r7, #12]
 801468c:	429a      	cmp	r2, r3
 801468e:	d105      	bne.n	801469c <vTaskSwitchContext+0x64>
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	330c      	adds	r3, #12
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	429a      	cmp	r2, r3
 801469a:	d008      	beq.n	80146ae <vTaskSwitchContext+0x76>
 801469c:	4b2b      	ldr	r3, [pc, #172]	; (801474c <vTaskSwitchContext+0x114>)
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	4b2a      	ldr	r3, [pc, #168]	; (801474c <vTaskSwitchContext+0x114>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	3334      	adds	r3, #52	; 0x34
 80146a6:	4619      	mov	r1, r3
 80146a8:	4610      	mov	r0, r2
 80146aa:	f7ec fcc8 	bl	800103e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146ae:	4b28      	ldr	r3, [pc, #160]	; (8014750 <vTaskSwitchContext+0x118>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	617b      	str	r3, [r7, #20]
 80146b4:	e011      	b.n	80146da <vTaskSwitchContext+0xa2>
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10b      	bne.n	80146d4 <vTaskSwitchContext+0x9c>
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	b672      	cpsid	i
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	b662      	cpsie	i
 80146d0:	607b      	str	r3, [r7, #4]
 80146d2:	e7fe      	b.n	80146d2 <vTaskSwitchContext+0x9a>
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	3b01      	subs	r3, #1
 80146d8:	617b      	str	r3, [r7, #20]
 80146da:	491e      	ldr	r1, [pc, #120]	; (8014754 <vTaskSwitchContext+0x11c>)
 80146dc:	697a      	ldr	r2, [r7, #20]
 80146de:	4613      	mov	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	4413      	add	r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	440b      	add	r3, r1
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d0e3      	beq.n	80146b6 <vTaskSwitchContext+0x7e>
 80146ee:	697a      	ldr	r2, [r7, #20]
 80146f0:	4613      	mov	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4413      	add	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4a16      	ldr	r2, [pc, #88]	; (8014754 <vTaskSwitchContext+0x11c>)
 80146fa:	4413      	add	r3, r2
 80146fc:	60bb      	str	r3, [r7, #8]
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	685a      	ldr	r2, [r3, #4]
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	605a      	str	r2, [r3, #4]
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	3308      	adds	r3, #8
 8014710:	429a      	cmp	r2, r3
 8014712:	d104      	bne.n	801471e <vTaskSwitchContext+0xe6>
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	685a      	ldr	r2, [r3, #4]
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	605a      	str	r2, [r3, #4]
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	68db      	ldr	r3, [r3, #12]
 8014724:	4a09      	ldr	r2, [pc, #36]	; (801474c <vTaskSwitchContext+0x114>)
 8014726:	6013      	str	r3, [r2, #0]
 8014728:	4a09      	ldr	r2, [pc, #36]	; (8014750 <vTaskSwitchContext+0x118>)
 801472a:	697b      	ldr	r3, [r7, #20]
 801472c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801472e:	4b07      	ldr	r3, [pc, #28]	; (801474c <vTaskSwitchContext+0x114>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014734:	4618      	mov	r0, r3
 8014736:	f7ec fa51 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>
}
 801473a:	bf00      	nop
 801473c:	3718      	adds	r7, #24
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	20001ce0 	.word	0x20001ce0
 8014748:	20001ccc 	.word	0x20001ccc
 801474c:	200017e4 	.word	0x200017e4
 8014750:	20001cc0 	.word	0x20001cc0
 8014754:	200017e8 	.word	0x200017e8

08014758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
 8014760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d10b      	bne.n	8014780 <vTaskPlaceOnEventList+0x28>
 8014768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801476c:	b672      	cpsid	i
 801476e:	f383 8811 	msr	BASEPRI, r3
 8014772:	f3bf 8f6f 	isb	sy
 8014776:	f3bf 8f4f 	dsb	sy
 801477a:	b662      	cpsie	i
 801477c:	60fb      	str	r3, [r7, #12]
 801477e:	e7fe      	b.n	801477e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014780:	4b07      	ldr	r3, [pc, #28]	; (80147a0 <vTaskPlaceOnEventList+0x48>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	3318      	adds	r3, #24
 8014786:	4619      	mov	r1, r3
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7fe fc78 	bl	801307e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801478e:	2101      	movs	r1, #1
 8014790:	6838      	ldr	r0, [r7, #0]
 8014792:	f000 fa81 	bl	8014c98 <prvAddCurrentTaskToDelayedList>
}
 8014796:	bf00      	nop
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	200017e4 	.word	0x200017e4

080147a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d10b      	bne.n	80147ce <vTaskPlaceOnEventListRestricted+0x2a>
 80147b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ba:	b672      	cpsid	i
 80147bc:	f383 8811 	msr	BASEPRI, r3
 80147c0:	f3bf 8f6f 	isb	sy
 80147c4:	f3bf 8f4f 	dsb	sy
 80147c8:	b662      	cpsie	i
 80147ca:	617b      	str	r3, [r7, #20]
 80147cc:	e7fe      	b.n	80147cc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147ce:	4b0a      	ldr	r3, [pc, #40]	; (80147f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	3318      	adds	r3, #24
 80147d4:	4619      	mov	r1, r3
 80147d6:	68f8      	ldr	r0, [r7, #12]
 80147d8:	f7fe fc2d 	bl	8013036 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d002      	beq.n	80147e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80147e2:	f04f 33ff 	mov.w	r3, #4294967295
 80147e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	68b8      	ldr	r0, [r7, #8]
 80147ec:	f000 fa54 	bl	8014c98 <prvAddCurrentTaskToDelayedList>
	}
 80147f0:	bf00      	nop
 80147f2:	3718      	adds	r7, #24
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	200017e4 	.word	0x200017e4

080147fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d10b      	bne.n	801482a <xTaskRemoveFromEventList+0x2e>
 8014812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014816:	b672      	cpsid	i
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	b662      	cpsie	i
 8014826:	60fb      	str	r3, [r7, #12]
 8014828:	e7fe      	b.n	8014828 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	3318      	adds	r3, #24
 801482e:	4618      	mov	r0, r3
 8014830:	f7fe fc5e 	bl	80130f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014834:	4b1d      	ldr	r3, [pc, #116]	; (80148ac <xTaskRemoveFromEventList+0xb0>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d11d      	bne.n	8014878 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	3304      	adds	r3, #4
 8014840:	4618      	mov	r0, r3
 8014842:	f7fe fc55 	bl	80130f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801484a:	4b19      	ldr	r3, [pc, #100]	; (80148b0 <xTaskRemoveFromEventList+0xb4>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	429a      	cmp	r2, r3
 8014850:	d903      	bls.n	801485a <xTaskRemoveFromEventList+0x5e>
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014856:	4a16      	ldr	r2, [pc, #88]	; (80148b0 <xTaskRemoveFromEventList+0xb4>)
 8014858:	6013      	str	r3, [r2, #0]
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801485e:	4613      	mov	r3, r2
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	4413      	add	r3, r2
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	4a13      	ldr	r2, [pc, #76]	; (80148b4 <xTaskRemoveFromEventList+0xb8>)
 8014868:	441a      	add	r2, r3
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	3304      	adds	r3, #4
 801486e:	4619      	mov	r1, r3
 8014870:	4610      	mov	r0, r2
 8014872:	f7fe fbe0 	bl	8013036 <vListInsertEnd>
 8014876:	e005      	b.n	8014884 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	3318      	adds	r3, #24
 801487c:	4619      	mov	r1, r3
 801487e:	480e      	ldr	r0, [pc, #56]	; (80148b8 <xTaskRemoveFromEventList+0xbc>)
 8014880:	f7fe fbd9 	bl	8013036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014888:	4b0c      	ldr	r3, [pc, #48]	; (80148bc <xTaskRemoveFromEventList+0xc0>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801488e:	429a      	cmp	r2, r3
 8014890:	d905      	bls.n	801489e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014892:	2301      	movs	r3, #1
 8014894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014896:	4b0a      	ldr	r3, [pc, #40]	; (80148c0 <xTaskRemoveFromEventList+0xc4>)
 8014898:	2201      	movs	r2, #1
 801489a:	601a      	str	r2, [r3, #0]
 801489c:	e001      	b.n	80148a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801489e:	2300      	movs	r3, #0
 80148a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80148a2:	697b      	ldr	r3, [r7, #20]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3718      	adds	r7, #24
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20001ce0 	.word	0x20001ce0
 80148b0:	20001cc0 	.word	0x20001cc0
 80148b4:	200017e8 	.word	0x200017e8
 80148b8:	20001c78 	.word	0x20001c78
 80148bc:	200017e4 	.word	0x200017e4
 80148c0:	20001ccc 	.word	0x20001ccc

080148c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80148c4:	b480      	push	{r7}
 80148c6:	b083      	sub	sp, #12
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80148cc:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <vTaskInternalSetTimeOutState+0x24>)
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80148d4:	4b05      	ldr	r3, [pc, #20]	; (80148ec <vTaskInternalSetTimeOutState+0x28>)
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	605a      	str	r2, [r3, #4]
}
 80148dc:	bf00      	nop
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr
 80148e8:	20001cd0 	.word	0x20001cd0
 80148ec:	20001cbc 	.word	0x20001cbc

080148f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b088      	sub	sp, #32
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d10b      	bne.n	8014918 <xTaskCheckForTimeOut+0x28>
 8014900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014904:	b672      	cpsid	i
 8014906:	f383 8811 	msr	BASEPRI, r3
 801490a:	f3bf 8f6f 	isb	sy
 801490e:	f3bf 8f4f 	dsb	sy
 8014912:	b662      	cpsie	i
 8014914:	613b      	str	r3, [r7, #16]
 8014916:	e7fe      	b.n	8014916 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10b      	bne.n	8014936 <xTaskCheckForTimeOut+0x46>
 801491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014922:	b672      	cpsid	i
 8014924:	f383 8811 	msr	BASEPRI, r3
 8014928:	f3bf 8f6f 	isb	sy
 801492c:	f3bf 8f4f 	dsb	sy
 8014930:	b662      	cpsie	i
 8014932:	60fb      	str	r3, [r7, #12]
 8014934:	e7fe      	b.n	8014934 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8014936:	f000 fe5f 	bl	80155f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801493a:	4b1d      	ldr	r3, [pc, #116]	; (80149b0 <xTaskCheckForTimeOut+0xc0>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	69ba      	ldr	r2, [r7, #24]
 8014946:	1ad3      	subs	r3, r2, r3
 8014948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014952:	d102      	bne.n	801495a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014954:	2300      	movs	r3, #0
 8014956:	61fb      	str	r3, [r7, #28]
 8014958:	e023      	b.n	80149a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	4b15      	ldr	r3, [pc, #84]	; (80149b4 <xTaskCheckForTimeOut+0xc4>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	429a      	cmp	r2, r3
 8014964:	d007      	beq.n	8014976 <xTaskCheckForTimeOut+0x86>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	69ba      	ldr	r2, [r7, #24]
 801496c:	429a      	cmp	r2, r3
 801496e:	d302      	bcc.n	8014976 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014970:	2301      	movs	r3, #1
 8014972:	61fb      	str	r3, [r7, #28]
 8014974:	e015      	b.n	80149a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	697a      	ldr	r2, [r7, #20]
 801497c:	429a      	cmp	r2, r3
 801497e:	d20b      	bcs.n	8014998 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	1ad2      	subs	r2, r2, r3
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7ff ff99 	bl	80148c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014992:	2300      	movs	r3, #0
 8014994:	61fb      	str	r3, [r7, #28]
 8014996:	e004      	b.n	80149a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	2200      	movs	r2, #0
 801499c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801499e:	2301      	movs	r3, #1
 80149a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80149a2:	f000 fe5b 	bl	801565c <vPortExitCritical>

	return xReturn;
 80149a6:	69fb      	ldr	r3, [r7, #28]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3720      	adds	r7, #32
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	20001cbc 	.word	0x20001cbc
 80149b4:	20001cd0 	.word	0x20001cd0

080149b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80149b8:	b480      	push	{r7}
 80149ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80149bc:	4b03      	ldr	r3, [pc, #12]	; (80149cc <vTaskMissedYield+0x14>)
 80149be:	2201      	movs	r2, #1
 80149c0:	601a      	str	r2, [r3, #0]
}
 80149c2:	bf00      	nop
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr
 80149cc:	20001ccc 	.word	0x20001ccc

080149d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b082      	sub	sp, #8
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80149d8:	f000 f854 	bl	8014a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80149dc:	4b07      	ldr	r3, [pc, #28]	; (80149fc <prvIdleTask+0x2c>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d907      	bls.n	80149f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80149e4:	4b06      	ldr	r3, [pc, #24]	; (8014a00 <prvIdleTask+0x30>)
 80149e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	f3bf 8f4f 	dsb	sy
 80149f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80149f4:	f7ec fb1c 	bl	8001030 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80149f8:	e7ee      	b.n	80149d8 <prvIdleTask+0x8>
 80149fa:	bf00      	nop
 80149fc:	200017e8 	.word	0x200017e8
 8014a00:	e000ed04 	.word	0xe000ed04

08014a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b082      	sub	sp, #8
 8014a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	607b      	str	r3, [r7, #4]
 8014a0e:	e00c      	b.n	8014a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	4613      	mov	r3, r2
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	4413      	add	r3, r2
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	4a12      	ldr	r2, [pc, #72]	; (8014a64 <prvInitialiseTaskLists+0x60>)
 8014a1c:	4413      	add	r3, r2
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fe fadc 	bl	8012fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	3301      	adds	r3, #1
 8014a28:	607b      	str	r3, [r7, #4]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2b37      	cmp	r3, #55	; 0x37
 8014a2e:	d9ef      	bls.n	8014a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014a30:	480d      	ldr	r0, [pc, #52]	; (8014a68 <prvInitialiseTaskLists+0x64>)
 8014a32:	f7fe fad3 	bl	8012fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014a36:	480d      	ldr	r0, [pc, #52]	; (8014a6c <prvInitialiseTaskLists+0x68>)
 8014a38:	f7fe fad0 	bl	8012fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014a3c:	480c      	ldr	r0, [pc, #48]	; (8014a70 <prvInitialiseTaskLists+0x6c>)
 8014a3e:	f7fe facd 	bl	8012fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014a42:	480c      	ldr	r0, [pc, #48]	; (8014a74 <prvInitialiseTaskLists+0x70>)
 8014a44:	f7fe faca 	bl	8012fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014a48:	480b      	ldr	r0, [pc, #44]	; (8014a78 <prvInitialiseTaskLists+0x74>)
 8014a4a:	f7fe fac7 	bl	8012fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014a4e:	4b0b      	ldr	r3, [pc, #44]	; (8014a7c <prvInitialiseTaskLists+0x78>)
 8014a50:	4a05      	ldr	r2, [pc, #20]	; (8014a68 <prvInitialiseTaskLists+0x64>)
 8014a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014a54:	4b0a      	ldr	r3, [pc, #40]	; (8014a80 <prvInitialiseTaskLists+0x7c>)
 8014a56:	4a05      	ldr	r2, [pc, #20]	; (8014a6c <prvInitialiseTaskLists+0x68>)
 8014a58:	601a      	str	r2, [r3, #0]
}
 8014a5a:	bf00      	nop
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	200017e8 	.word	0x200017e8
 8014a68:	20001c48 	.word	0x20001c48
 8014a6c:	20001c5c 	.word	0x20001c5c
 8014a70:	20001c78 	.word	0x20001c78
 8014a74:	20001c8c 	.word	0x20001c8c
 8014a78:	20001ca4 	.word	0x20001ca4
 8014a7c:	20001c70 	.word	0x20001c70
 8014a80:	20001c74 	.word	0x20001c74

08014a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014a8a:	e019      	b.n	8014ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014a8c:	f000 fdb4 	bl	80155f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a90:	4b0f      	ldr	r3, [pc, #60]	; (8014ad0 <prvCheckTasksWaitingTermination+0x4c>)
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fe fb27 	bl	80130f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014aa2:	4b0c      	ldr	r3, [pc, #48]	; (8014ad4 <prvCheckTasksWaitingTermination+0x50>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	3b01      	subs	r3, #1
 8014aa8:	4a0a      	ldr	r2, [pc, #40]	; (8014ad4 <prvCheckTasksWaitingTermination+0x50>)
 8014aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014aac:	4b0a      	ldr	r3, [pc, #40]	; (8014ad8 <prvCheckTasksWaitingTermination+0x54>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	4a09      	ldr	r2, [pc, #36]	; (8014ad8 <prvCheckTasksWaitingTermination+0x54>)
 8014ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014ab6:	f000 fdd1 	bl	801565c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f000 f80e 	bl	8014adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014ac0:	4b05      	ldr	r3, [pc, #20]	; (8014ad8 <prvCheckTasksWaitingTermination+0x54>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d1e1      	bne.n	8014a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ac8:	bf00      	nop
 8014aca:	3708      	adds	r7, #8
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	20001c8c 	.word	0x20001c8c
 8014ad4:	20001cb8 	.word	0x20001cb8
 8014ad8:	20001ca0 	.word	0x20001ca0

08014adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d108      	bne.n	8014b00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014af2:	4618      	mov	r0, r3
 8014af4:	f000 ff6e 	bl	80159d4 <vPortFree>
				vPortFree( pxTCB );
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 ff6b 	bl	80159d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014afe:	e019      	b.n	8014b34 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d103      	bne.n	8014b12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 ff62 	bl	80159d4 <vPortFree>
	}
 8014b10:	e010      	b.n	8014b34 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014b18:	2b02      	cmp	r3, #2
 8014b1a:	d00b      	beq.n	8014b34 <prvDeleteTCB+0x58>
 8014b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b20:	b672      	cpsid	i
 8014b22:	f383 8811 	msr	BASEPRI, r3
 8014b26:	f3bf 8f6f 	isb	sy
 8014b2a:	f3bf 8f4f 	dsb	sy
 8014b2e:	b662      	cpsie	i
 8014b30:	60fb      	str	r3, [r7, #12]
 8014b32:	e7fe      	b.n	8014b32 <prvDeleteTCB+0x56>
	}
 8014b34:	bf00      	nop
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b42:	4b0c      	ldr	r3, [pc, #48]	; (8014b74 <prvResetNextTaskUnblockTime+0x38>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d104      	bne.n	8014b56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014b4c:	4b0a      	ldr	r3, [pc, #40]	; (8014b78 <prvResetNextTaskUnblockTime+0x3c>)
 8014b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014b54:	e008      	b.n	8014b68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b56:	4b07      	ldr	r3, [pc, #28]	; (8014b74 <prvResetNextTaskUnblockTime+0x38>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	68db      	ldr	r3, [r3, #12]
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	4a04      	ldr	r2, [pc, #16]	; (8014b78 <prvResetNextTaskUnblockTime+0x3c>)
 8014b66:	6013      	str	r3, [r2, #0]
}
 8014b68:	bf00      	nop
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr
 8014b74:	20001c70 	.word	0x20001c70
 8014b78:	20001cd8 	.word	0x20001cd8

08014b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014b82:	4b0b      	ldr	r3, [pc, #44]	; (8014bb0 <xTaskGetSchedulerState+0x34>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d102      	bne.n	8014b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	607b      	str	r3, [r7, #4]
 8014b8e:	e008      	b.n	8014ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b90:	4b08      	ldr	r3, [pc, #32]	; (8014bb4 <xTaskGetSchedulerState+0x38>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014b98:	2302      	movs	r3, #2
 8014b9a:	607b      	str	r3, [r7, #4]
 8014b9c:	e001      	b.n	8014ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014ba2:	687b      	ldr	r3, [r7, #4]
	}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	370c      	adds	r7, #12
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr
 8014bb0:	20001cc4 	.word	0x20001cc4
 8014bb4:	20001ce0 	.word	0x20001ce0

08014bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d058      	beq.n	8014c80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014bce:	4b2f      	ldr	r3, [pc, #188]	; (8014c8c <xTaskPriorityDisinherit+0xd4>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	693a      	ldr	r2, [r7, #16]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d00b      	beq.n	8014bf0 <xTaskPriorityDisinherit+0x38>
 8014bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bdc:	b672      	cpsid	i
 8014bde:	f383 8811 	msr	BASEPRI, r3
 8014be2:	f3bf 8f6f 	isb	sy
 8014be6:	f3bf 8f4f 	dsb	sy
 8014bea:	b662      	cpsie	i
 8014bec:	60fb      	str	r3, [r7, #12]
 8014bee:	e7fe      	b.n	8014bee <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d10b      	bne.n	8014c10 <xTaskPriorityDisinherit+0x58>
 8014bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfc:	b672      	cpsid	i
 8014bfe:	f383 8811 	msr	BASEPRI, r3
 8014c02:	f3bf 8f6f 	isb	sy
 8014c06:	f3bf 8f4f 	dsb	sy
 8014c0a:	b662      	cpsie	i
 8014c0c:	60bb      	str	r3, [r7, #8]
 8014c0e:	e7fe      	b.n	8014c0e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c14:	1e5a      	subs	r2, r3, #1
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d02c      	beq.n	8014c80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d128      	bne.n	8014c80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	3304      	adds	r3, #4
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fe fa5c 	bl	80130f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c50:	4b0f      	ldr	r3, [pc, #60]	; (8014c90 <xTaskPriorityDisinherit+0xd8>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d903      	bls.n	8014c60 <xTaskPriorityDisinherit+0xa8>
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c5c:	4a0c      	ldr	r2, [pc, #48]	; (8014c90 <xTaskPriorityDisinherit+0xd8>)
 8014c5e:	6013      	str	r3, [r2, #0]
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c64:	4613      	mov	r3, r2
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	4413      	add	r3, r2
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	4a09      	ldr	r2, [pc, #36]	; (8014c94 <xTaskPriorityDisinherit+0xdc>)
 8014c6e:	441a      	add	r2, r3
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	3304      	adds	r3, #4
 8014c74:	4619      	mov	r1, r3
 8014c76:	4610      	mov	r0, r2
 8014c78:	f7fe f9dd 	bl	8013036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014c80:	697b      	ldr	r3, [r7, #20]
	}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3718      	adds	r7, #24
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	200017e4 	.word	0x200017e4
 8014c90:	20001cc0 	.word	0x20001cc0
 8014c94:	200017e8 	.word	0x200017e8

08014c98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014ca2:	4b21      	ldr	r3, [pc, #132]	; (8014d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ca8:	4b20      	ldr	r3, [pc, #128]	; (8014d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	3304      	adds	r3, #4
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fe fa1e 	bl	80130f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cba:	d10a      	bne.n	8014cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d007      	beq.n	8014cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cc2:	4b1a      	ldr	r3, [pc, #104]	; (8014d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	4619      	mov	r1, r3
 8014cca:	4819      	ldr	r0, [pc, #100]	; (8014d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8014ccc:	f7fe f9b3 	bl	8013036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014cd0:	e026      	b.n	8014d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014cd2:	68fa      	ldr	r2, [r7, #12]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014cda:	4b14      	ldr	r3, [pc, #80]	; (8014d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	68ba      	ldr	r2, [r7, #8]
 8014ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014ce2:	68ba      	ldr	r2, [r7, #8]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d209      	bcs.n	8014cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cea:	4b12      	ldr	r3, [pc, #72]	; (8014d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	4b0f      	ldr	r3, [pc, #60]	; (8014d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	4610      	mov	r0, r2
 8014cf8:	f7fe f9c1 	bl	801307e <vListInsert>
}
 8014cfc:	e010      	b.n	8014d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cfe:	4b0e      	ldr	r3, [pc, #56]	; (8014d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	4b0a      	ldr	r3, [pc, #40]	; (8014d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	3304      	adds	r3, #4
 8014d08:	4619      	mov	r1, r3
 8014d0a:	4610      	mov	r0, r2
 8014d0c:	f7fe f9b7 	bl	801307e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014d10:	4b0a      	ldr	r3, [pc, #40]	; (8014d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	68ba      	ldr	r2, [r7, #8]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d202      	bcs.n	8014d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014d1a:	4a08      	ldr	r2, [pc, #32]	; (8014d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	6013      	str	r3, [r2, #0]
}
 8014d20:	bf00      	nop
 8014d22:	3710      	adds	r7, #16
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	20001cbc 	.word	0x20001cbc
 8014d2c:	200017e4 	.word	0x200017e4
 8014d30:	20001ca4 	.word	0x20001ca4
 8014d34:	20001c74 	.word	0x20001c74
 8014d38:	20001c70 	.word	0x20001c70
 8014d3c:	20001cd8 	.word	0x20001cd8

08014d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b08a      	sub	sp, #40	; 0x28
 8014d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014d46:	2300      	movs	r3, #0
 8014d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014d4a:	f000 fb0d 	bl	8015368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014d4e:	4b1d      	ldr	r3, [pc, #116]	; (8014dc4 <xTimerCreateTimerTask+0x84>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d021      	beq.n	8014d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014d56:	2300      	movs	r3, #0
 8014d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014d5e:	1d3a      	adds	r2, r7, #4
 8014d60:	f107 0108 	add.w	r1, r7, #8
 8014d64:	f107 030c 	add.w	r3, r7, #12
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fe f91d 	bl	8012fa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	9202      	str	r2, [sp, #8]
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	2302      	movs	r3, #2
 8014d7a:	9300      	str	r3, [sp, #0]
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	460a      	mov	r2, r1
 8014d80:	4911      	ldr	r1, [pc, #68]	; (8014dc8 <xTimerCreateTimerTask+0x88>)
 8014d82:	4812      	ldr	r0, [pc, #72]	; (8014dcc <xTimerCreateTimerTask+0x8c>)
 8014d84:	f7ff f810 	bl	8013da8 <xTaskCreateStatic>
 8014d88:	4602      	mov	r2, r0
 8014d8a:	4b11      	ldr	r3, [pc, #68]	; (8014dd0 <xTimerCreateTimerTask+0x90>)
 8014d8c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014d8e:	4b10      	ldr	r3, [pc, #64]	; (8014dd0 <xTimerCreateTimerTask+0x90>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d001      	beq.n	8014d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014d96:	2301      	movs	r3, #1
 8014d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d10b      	bne.n	8014db8 <xTimerCreateTimerTask+0x78>
 8014da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da4:	b672      	cpsid	i
 8014da6:	f383 8811 	msr	BASEPRI, r3
 8014daa:	f3bf 8f6f 	isb	sy
 8014dae:	f3bf 8f4f 	dsb	sy
 8014db2:	b662      	cpsie	i
 8014db4:	613b      	str	r3, [r7, #16]
 8014db6:	e7fe      	b.n	8014db6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014db8:	697b      	ldr	r3, [r7, #20]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3718      	adds	r7, #24
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	20001d14 	.word	0x20001d14
 8014dc8:	08017da0 	.word	0x08017da0
 8014dcc:	08014f0d 	.word	0x08014f0d
 8014dd0:	20001d18 	.word	0x20001d18

08014dd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b08a      	sub	sp, #40	; 0x28
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	607a      	str	r2, [r7, #4]
 8014de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014de2:	2300      	movs	r3, #0
 8014de4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d10b      	bne.n	8014e04 <xTimerGenericCommand+0x30>
 8014dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014df0:	b672      	cpsid	i
 8014df2:	f383 8811 	msr	BASEPRI, r3
 8014df6:	f3bf 8f6f 	isb	sy
 8014dfa:	f3bf 8f4f 	dsb	sy
 8014dfe:	b662      	cpsie	i
 8014e00:	623b      	str	r3, [r7, #32]
 8014e02:	e7fe      	b.n	8014e02 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014e04:	4b19      	ldr	r3, [pc, #100]	; (8014e6c <xTimerGenericCommand+0x98>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d02a      	beq.n	8014e62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2b05      	cmp	r3, #5
 8014e1c:	dc18      	bgt.n	8014e50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014e1e:	f7ff fead 	bl	8014b7c <xTaskGetSchedulerState>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	d109      	bne.n	8014e3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014e28:	4b10      	ldr	r3, [pc, #64]	; (8014e6c <xTimerGenericCommand+0x98>)
 8014e2a:	6818      	ldr	r0, [r3, #0]
 8014e2c:	f107 0110 	add.w	r1, r7, #16
 8014e30:	2300      	movs	r3, #0
 8014e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e34:	f7fe fb24 	bl	8013480 <xQueueGenericSend>
 8014e38:	6278      	str	r0, [r7, #36]	; 0x24
 8014e3a:	e012      	b.n	8014e62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014e3c:	4b0b      	ldr	r3, [pc, #44]	; (8014e6c <xTimerGenericCommand+0x98>)
 8014e3e:	6818      	ldr	r0, [r3, #0]
 8014e40:	f107 0110 	add.w	r1, r7, #16
 8014e44:	2300      	movs	r3, #0
 8014e46:	2200      	movs	r2, #0
 8014e48:	f7fe fb1a 	bl	8013480 <xQueueGenericSend>
 8014e4c:	6278      	str	r0, [r7, #36]	; 0x24
 8014e4e:	e008      	b.n	8014e62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014e50:	4b06      	ldr	r3, [pc, #24]	; (8014e6c <xTimerGenericCommand+0x98>)
 8014e52:	6818      	ldr	r0, [r3, #0]
 8014e54:	f107 0110 	add.w	r1, r7, #16
 8014e58:	2300      	movs	r3, #0
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	f7fe fc1a 	bl	8013694 <xQueueGenericSendFromISR>
 8014e60:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3728      	adds	r7, #40	; 0x28
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	20001d14 	.word	0x20001d14

08014e70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b088      	sub	sp, #32
 8014e74:	af02      	add	r7, sp, #8
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e7a:	4b23      	ldr	r3, [pc, #140]	; (8014f08 <prvProcessExpiredTimer+0x98>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	68db      	ldr	r3, [r3, #12]
 8014e82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	3304      	adds	r3, #4
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fe f931 	bl	80130f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e94:	f003 0304 	and.w	r3, r3, #4
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d023      	beq.n	8014ee4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	699a      	ldr	r2, [r3, #24]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	18d1      	adds	r1, r2, r3
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	683a      	ldr	r2, [r7, #0]
 8014ea8:	6978      	ldr	r0, [r7, #20]
 8014eaa:	f000 f8d3 	bl	8015054 <prvInsertTimerInActiveList>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d020      	beq.n	8014ef6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	2300      	movs	r3, #0
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	6978      	ldr	r0, [r7, #20]
 8014ec0:	f7ff ff88 	bl	8014dd4 <xTimerGenericCommand>
 8014ec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d114      	bne.n	8014ef6 <prvProcessExpiredTimer+0x86>
 8014ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed0:	b672      	cpsid	i
 8014ed2:	f383 8811 	msr	BASEPRI, r3
 8014ed6:	f3bf 8f6f 	isb	sy
 8014eda:	f3bf 8f4f 	dsb	sy
 8014ede:	b662      	cpsie	i
 8014ee0:	60fb      	str	r3, [r7, #12]
 8014ee2:	e7fe      	b.n	8014ee2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014eea:	f023 0301 	bic.w	r3, r3, #1
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	6a1b      	ldr	r3, [r3, #32]
 8014efa:	6978      	ldr	r0, [r7, #20]
 8014efc:	4798      	blx	r3
}
 8014efe:	bf00      	nop
 8014f00:	3718      	adds	r7, #24
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	20001d0c 	.word	0x20001d0c

08014f0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014f14:	f107 0308 	add.w	r3, r7, #8
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f000 f857 	bl	8014fcc <prvGetNextExpireTime>
 8014f1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	4619      	mov	r1, r3
 8014f24:	68f8      	ldr	r0, [r7, #12]
 8014f26:	f000 f803 	bl	8014f30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014f2a:	f000 f8d5 	bl	80150d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014f2e:	e7f1      	b.n	8014f14 <prvTimerTask+0x8>

08014f30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014f3a:	f7ff fa07 	bl	801434c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014f3e:	f107 0308 	add.w	r3, r7, #8
 8014f42:	4618      	mov	r0, r3
 8014f44:	f000 f866 	bl	8015014 <prvSampleTimeNow>
 8014f48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d130      	bne.n	8014fb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d10a      	bne.n	8014f6c <prvProcessTimerOrBlockTask+0x3c>
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d806      	bhi.n	8014f6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014f5e:	f7ff fa03 	bl	8014368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014f62:	68f9      	ldr	r1, [r7, #12]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7ff ff83 	bl	8014e70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014f6a:	e024      	b.n	8014fb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d008      	beq.n	8014f84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014f72:	4b13      	ldr	r3, [pc, #76]	; (8014fc0 <prvProcessTimerOrBlockTask+0x90>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <prvProcessTimerOrBlockTask+0x50>
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e000      	b.n	8014f82 <prvProcessTimerOrBlockTask+0x52>
 8014f80:	2300      	movs	r3, #0
 8014f82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014f84:	4b0f      	ldr	r3, [pc, #60]	; (8014fc4 <prvProcessTimerOrBlockTask+0x94>)
 8014f86:	6818      	ldr	r0, [r3, #0]
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	1ad3      	subs	r3, r2, r3
 8014f8e:	683a      	ldr	r2, [r7, #0]
 8014f90:	4619      	mov	r1, r3
 8014f92:	f7fe fed5 	bl	8013d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014f96:	f7ff f9e7 	bl	8014368 <xTaskResumeAll>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d10a      	bne.n	8014fb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014fa0:	4b09      	ldr	r3, [pc, #36]	; (8014fc8 <prvProcessTimerOrBlockTask+0x98>)
 8014fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fa6:	601a      	str	r2, [r3, #0]
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	f3bf 8f6f 	isb	sy
}
 8014fb0:	e001      	b.n	8014fb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014fb2:	f7ff f9d9 	bl	8014368 <xTaskResumeAll>
}
 8014fb6:	bf00      	nop
 8014fb8:	3710      	adds	r7, #16
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	20001d10 	.word	0x20001d10
 8014fc4:	20001d14 	.word	0x20001d14
 8014fc8:	e000ed04 	.word	0xe000ed04

08014fcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014fd4:	4b0e      	ldr	r3, [pc, #56]	; (8015010 <prvGetNextExpireTime+0x44>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d101      	bne.n	8014fe2 <prvGetNextExpireTime+0x16>
 8014fde:	2201      	movs	r2, #1
 8014fe0:	e000      	b.n	8014fe4 <prvGetNextExpireTime+0x18>
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d105      	bne.n	8014ffc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ff0:	4b07      	ldr	r3, [pc, #28]	; (8015010 <prvGetNextExpireTime+0x44>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	60fb      	str	r3, [r7, #12]
 8014ffa:	e001      	b.n	8015000 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015000:	68fb      	ldr	r3, [r7, #12]
}
 8015002:	4618      	mov	r0, r3
 8015004:	3714      	adds	r7, #20
 8015006:	46bd      	mov	sp, r7
 8015008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500c:	4770      	bx	lr
 801500e:	bf00      	nop
 8015010:	20001d0c 	.word	0x20001d0c

08015014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801501c:	f7ff fa42 	bl	80144a4 <xTaskGetTickCount>
 8015020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015022:	4b0b      	ldr	r3, [pc, #44]	; (8015050 <prvSampleTimeNow+0x3c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	429a      	cmp	r2, r3
 801502a:	d205      	bcs.n	8015038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801502c:	f000 f936 	bl	801529c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	601a      	str	r2, [r3, #0]
 8015036:	e002      	b.n	801503e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801503e:	4a04      	ldr	r2, [pc, #16]	; (8015050 <prvSampleTimeNow+0x3c>)
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015044:	68fb      	ldr	r3, [r7, #12]
}
 8015046:	4618      	mov	r0, r3
 8015048:	3710      	adds	r7, #16
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	20001d1c 	.word	0x20001d1c

08015054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b086      	sub	sp, #24
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015062:	2300      	movs	r3, #0
 8015064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	68ba      	ldr	r2, [r7, #8]
 801506a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	429a      	cmp	r2, r3
 8015078:	d812      	bhi.n	80150a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	1ad2      	subs	r2, r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	429a      	cmp	r2, r3
 8015086:	d302      	bcc.n	801508e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015088:	2301      	movs	r3, #1
 801508a:	617b      	str	r3, [r7, #20]
 801508c:	e01b      	b.n	80150c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801508e:	4b10      	ldr	r3, [pc, #64]	; (80150d0 <prvInsertTimerInActiveList+0x7c>)
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	3304      	adds	r3, #4
 8015096:	4619      	mov	r1, r3
 8015098:	4610      	mov	r0, r2
 801509a:	f7fd fff0 	bl	801307e <vListInsert>
 801509e:	e012      	b.n	80150c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d206      	bcs.n	80150b6 <prvInsertTimerInActiveList+0x62>
 80150a8:	68ba      	ldr	r2, [r7, #8]
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d302      	bcc.n	80150b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80150b0:	2301      	movs	r3, #1
 80150b2:	617b      	str	r3, [r7, #20]
 80150b4:	e007      	b.n	80150c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80150b6:	4b07      	ldr	r3, [pc, #28]	; (80150d4 <prvInsertTimerInActiveList+0x80>)
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	3304      	adds	r3, #4
 80150be:	4619      	mov	r1, r3
 80150c0:	4610      	mov	r0, r2
 80150c2:	f7fd ffdc 	bl	801307e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80150c6:	697b      	ldr	r3, [r7, #20]
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3718      	adds	r7, #24
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	20001d10 	.word	0x20001d10
 80150d4:	20001d0c 	.word	0x20001d0c

080150d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b08e      	sub	sp, #56	; 0x38
 80150dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80150de:	e0cc      	b.n	801527a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	da19      	bge.n	801511a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80150e6:	1d3b      	adds	r3, r7, #4
 80150e8:	3304      	adds	r3, #4
 80150ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80150ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10b      	bne.n	801510a <prvProcessReceivedCommands+0x32>
 80150f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f6:	b672      	cpsid	i
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	b662      	cpsie	i
 8015106:	61fb      	str	r3, [r7, #28]
 8015108:	e7fe      	b.n	8015108 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015110:	6850      	ldr	r0, [r2, #4]
 8015112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015114:	6892      	ldr	r2, [r2, #8]
 8015116:	4611      	mov	r1, r2
 8015118:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	f2c0 80ab 	blt.w	8015278 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015128:	695b      	ldr	r3, [r3, #20]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d004      	beq.n	8015138 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	3304      	adds	r3, #4
 8015132:	4618      	mov	r0, r3
 8015134:	f7fd ffdc 	bl	80130f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015138:	463b      	mov	r3, r7
 801513a:	4618      	mov	r0, r3
 801513c:	f7ff ff6a 	bl	8015014 <prvSampleTimeNow>
 8015140:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b09      	cmp	r3, #9
 8015146:	f200 8098 	bhi.w	801527a <prvProcessReceivedCommands+0x1a2>
 801514a:	a201      	add	r2, pc, #4	; (adr r2, 8015150 <prvProcessReceivedCommands+0x78>)
 801514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015150:	08015179 	.word	0x08015179
 8015154:	08015179 	.word	0x08015179
 8015158:	08015179 	.word	0x08015179
 801515c:	080151ef 	.word	0x080151ef
 8015160:	08015203 	.word	0x08015203
 8015164:	0801524f 	.word	0x0801524f
 8015168:	08015179 	.word	0x08015179
 801516c:	08015179 	.word	0x08015179
 8015170:	080151ef 	.word	0x080151ef
 8015174:	08015203 	.word	0x08015203
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801517a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801517e:	f043 0301 	orr.w	r3, r3, #1
 8015182:	b2da      	uxtb	r2, r3
 8015184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801518a:	68ba      	ldr	r2, [r7, #8]
 801518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518e:	699b      	ldr	r3, [r3, #24]
 8015190:	18d1      	adds	r1, r2, r3
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015198:	f7ff ff5c 	bl	8015054 <prvInsertTimerInActiveList>
 801519c:	4603      	mov	r3, r0
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d06b      	beq.n	801527a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80151a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a4:	6a1b      	ldr	r3, [r3, #32]
 80151a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80151aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151b0:	f003 0304 	and.w	r3, r3, #4
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d060      	beq.n	801527a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80151b8:	68ba      	ldr	r2, [r7, #8]
 80151ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151bc:	699b      	ldr	r3, [r3, #24]
 80151be:	441a      	add	r2, r3
 80151c0:	2300      	movs	r3, #0
 80151c2:	9300      	str	r3, [sp, #0]
 80151c4:	2300      	movs	r3, #0
 80151c6:	2100      	movs	r1, #0
 80151c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151ca:	f7ff fe03 	bl	8014dd4 <xTimerGenericCommand>
 80151ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80151d0:	6a3b      	ldr	r3, [r7, #32]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d151      	bne.n	801527a <prvProcessReceivedCommands+0x1a2>
 80151d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151da:	b672      	cpsid	i
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	b662      	cpsie	i
 80151ea:	61bb      	str	r3, [r7, #24]
 80151ec:	e7fe      	b.n	80151ec <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151f4:	f023 0301 	bic.w	r3, r3, #1
 80151f8:	b2da      	uxtb	r2, r3
 80151fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015200:	e03b      	b.n	801527a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015208:	f043 0301 	orr.w	r3, r3, #1
 801520c:	b2da      	uxtb	r2, r3
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015214:	68ba      	ldr	r2, [r7, #8]
 8015216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015218:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521c:	699b      	ldr	r3, [r3, #24]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d10b      	bne.n	801523a <prvProcessReceivedCommands+0x162>
 8015222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015226:	b672      	cpsid	i
 8015228:	f383 8811 	msr	BASEPRI, r3
 801522c:	f3bf 8f6f 	isb	sy
 8015230:	f3bf 8f4f 	dsb	sy
 8015234:	b662      	cpsie	i
 8015236:	617b      	str	r3, [r7, #20]
 8015238:	e7fe      	b.n	8015238 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	699a      	ldr	r2, [r3, #24]
 801523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015240:	18d1      	adds	r1, r2, r3
 8015242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015248:	f7ff ff04 	bl	8015054 <prvInsertTimerInActiveList>
					break;
 801524c:	e015      	b.n	801527a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015254:	f003 0302 	and.w	r3, r3, #2
 8015258:	2b00      	cmp	r3, #0
 801525a:	d103      	bne.n	8015264 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801525c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801525e:	f000 fbb9 	bl	80159d4 <vPortFree>
 8015262:	e00a      	b.n	801527a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801526a:	f023 0301 	bic.w	r3, r3, #1
 801526e:	b2da      	uxtb	r2, r3
 8015270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015276:	e000      	b.n	801527a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801527a:	4b07      	ldr	r3, [pc, #28]	; (8015298 <prvProcessReceivedCommands+0x1c0>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	1d39      	adds	r1, r7, #4
 8015280:	2200      	movs	r2, #0
 8015282:	4618      	mov	r0, r3
 8015284:	f7fe faaa 	bl	80137dc <xQueueReceive>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	f47f af28 	bne.w	80150e0 <prvProcessReceivedCommands+0x8>
	}
}
 8015290:	bf00      	nop
 8015292:	3730      	adds	r7, #48	; 0x30
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	20001d14 	.word	0x20001d14

0801529c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b088      	sub	sp, #32
 80152a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80152a2:	e049      	b.n	8015338 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80152a4:	4b2e      	ldr	r3, [pc, #184]	; (8015360 <prvSwitchTimerLists+0xc4>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152ae:	4b2c      	ldr	r3, [pc, #176]	; (8015360 <prvSwitchTimerLists+0xc4>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	3304      	adds	r3, #4
 80152bc:	4618      	mov	r0, r3
 80152be:	f7fd ff17 	bl	80130f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	6a1b      	ldr	r3, [r3, #32]
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152d0:	f003 0304 	and.w	r3, r3, #4
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d02f      	beq.n	8015338 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	699b      	ldr	r3, [r3, #24]
 80152dc:	693a      	ldr	r2, [r7, #16]
 80152de:	4413      	add	r3, r2
 80152e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80152e2:	68ba      	ldr	r2, [r7, #8]
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d90e      	bls.n	8015308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	68fa      	ldr	r2, [r7, #12]
 80152f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80152f6:	4b1a      	ldr	r3, [pc, #104]	; (8015360 <prvSwitchTimerLists+0xc4>)
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	3304      	adds	r3, #4
 80152fe:	4619      	mov	r1, r3
 8015300:	4610      	mov	r0, r2
 8015302:	f7fd febc 	bl	801307e <vListInsert>
 8015306:	e017      	b.n	8015338 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015308:	2300      	movs	r3, #0
 801530a:	9300      	str	r3, [sp, #0]
 801530c:	2300      	movs	r3, #0
 801530e:	693a      	ldr	r2, [r7, #16]
 8015310:	2100      	movs	r1, #0
 8015312:	68f8      	ldr	r0, [r7, #12]
 8015314:	f7ff fd5e 	bl	8014dd4 <xTimerGenericCommand>
 8015318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d10b      	bne.n	8015338 <prvSwitchTimerLists+0x9c>
 8015320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015324:	b672      	cpsid	i
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	b662      	cpsie	i
 8015334:	603b      	str	r3, [r7, #0]
 8015336:	e7fe      	b.n	8015336 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015338:	4b09      	ldr	r3, [pc, #36]	; (8015360 <prvSwitchTimerLists+0xc4>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d1b0      	bne.n	80152a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015342:	4b07      	ldr	r3, [pc, #28]	; (8015360 <prvSwitchTimerLists+0xc4>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015348:	4b06      	ldr	r3, [pc, #24]	; (8015364 <prvSwitchTimerLists+0xc8>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	4a04      	ldr	r2, [pc, #16]	; (8015360 <prvSwitchTimerLists+0xc4>)
 801534e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015350:	4a04      	ldr	r2, [pc, #16]	; (8015364 <prvSwitchTimerLists+0xc8>)
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	6013      	str	r3, [r2, #0]
}
 8015356:	bf00      	nop
 8015358:	3718      	adds	r7, #24
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	20001d0c 	.word	0x20001d0c
 8015364:	20001d10 	.word	0x20001d10

08015368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801536e:	f000 f943 	bl	80155f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015372:	4b15      	ldr	r3, [pc, #84]	; (80153c8 <prvCheckForValidListAndQueue+0x60>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d120      	bne.n	80153bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801537a:	4814      	ldr	r0, [pc, #80]	; (80153cc <prvCheckForValidListAndQueue+0x64>)
 801537c:	f7fd fe2e 	bl	8012fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015380:	4813      	ldr	r0, [pc, #76]	; (80153d0 <prvCheckForValidListAndQueue+0x68>)
 8015382:	f7fd fe2b 	bl	8012fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015386:	4b13      	ldr	r3, [pc, #76]	; (80153d4 <prvCheckForValidListAndQueue+0x6c>)
 8015388:	4a10      	ldr	r2, [pc, #64]	; (80153cc <prvCheckForValidListAndQueue+0x64>)
 801538a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801538c:	4b12      	ldr	r3, [pc, #72]	; (80153d8 <prvCheckForValidListAndQueue+0x70>)
 801538e:	4a10      	ldr	r2, [pc, #64]	; (80153d0 <prvCheckForValidListAndQueue+0x68>)
 8015390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015392:	2300      	movs	r3, #0
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	4b11      	ldr	r3, [pc, #68]	; (80153dc <prvCheckForValidListAndQueue+0x74>)
 8015398:	4a11      	ldr	r2, [pc, #68]	; (80153e0 <prvCheckForValidListAndQueue+0x78>)
 801539a:	2110      	movs	r1, #16
 801539c:	200a      	movs	r0, #10
 801539e:	f7fd ff3b 	bl	8013218 <xQueueGenericCreateStatic>
 80153a2:	4602      	mov	r2, r0
 80153a4:	4b08      	ldr	r3, [pc, #32]	; (80153c8 <prvCheckForValidListAndQueue+0x60>)
 80153a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80153a8:	4b07      	ldr	r3, [pc, #28]	; (80153c8 <prvCheckForValidListAndQueue+0x60>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d005      	beq.n	80153bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80153b0:	4b05      	ldr	r3, [pc, #20]	; (80153c8 <prvCheckForValidListAndQueue+0x60>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	490b      	ldr	r1, [pc, #44]	; (80153e4 <prvCheckForValidListAndQueue+0x7c>)
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7fe fc96 	bl	8013ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80153bc:	f000 f94e 	bl	801565c <vPortExitCritical>
}
 80153c0:	bf00      	nop
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	20001d14 	.word	0x20001d14
 80153cc:	20001ce4 	.word	0x20001ce4
 80153d0:	20001cf8 	.word	0x20001cf8
 80153d4:	20001d0c 	.word	0x20001d0c
 80153d8:	20001d10 	.word	0x20001d10
 80153dc:	20001dc0 	.word	0x20001dc0
 80153e0:	20001d20 	.word	0x20001d20
 80153e4:	08017da8 	.word	0x08017da8

080153e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80153e8:	b480      	push	{r7}
 80153ea:	b085      	sub	sp, #20
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	3b04      	subs	r3, #4
 80153f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	3b04      	subs	r3, #4
 8015406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	f023 0201 	bic.w	r2, r3, #1
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	3b04      	subs	r3, #4
 8015416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015418:	4a0c      	ldr	r2, [pc, #48]	; (801544c <pxPortInitialiseStack+0x64>)
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	3b14      	subs	r3, #20
 8015422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	3b04      	subs	r3, #4
 801542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f06f 0202 	mvn.w	r2, #2
 8015436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	3b20      	subs	r3, #32
 801543c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801543e:	68fb      	ldr	r3, [r7, #12]
}
 8015440:	4618      	mov	r0, r3
 8015442:	3714      	adds	r7, #20
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr
 801544c:	08015451 	.word	0x08015451

08015450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015450:	b480      	push	{r7}
 8015452:	b085      	sub	sp, #20
 8015454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015456:	2300      	movs	r3, #0
 8015458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801545a:	4b13      	ldr	r3, [pc, #76]	; (80154a8 <prvTaskExitError+0x58>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015462:	d00b      	beq.n	801547c <prvTaskExitError+0x2c>
 8015464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015468:	b672      	cpsid	i
 801546a:	f383 8811 	msr	BASEPRI, r3
 801546e:	f3bf 8f6f 	isb	sy
 8015472:	f3bf 8f4f 	dsb	sy
 8015476:	b662      	cpsie	i
 8015478:	60fb      	str	r3, [r7, #12]
 801547a:	e7fe      	b.n	801547a <prvTaskExitError+0x2a>
 801547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015480:	b672      	cpsid	i
 8015482:	f383 8811 	msr	BASEPRI, r3
 8015486:	f3bf 8f6f 	isb	sy
 801548a:	f3bf 8f4f 	dsb	sy
 801548e:	b662      	cpsie	i
 8015490:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015492:	bf00      	nop
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d0fc      	beq.n	8015494 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801549a:	bf00      	nop
 801549c:	3714      	adds	r7, #20
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr
 80154a6:	bf00      	nop
 80154a8:	2000007c 	.word	0x2000007c
 80154ac:	00000000 	.word	0x00000000

080154b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80154b0:	4b07      	ldr	r3, [pc, #28]	; (80154d0 <pxCurrentTCBConst2>)
 80154b2:	6819      	ldr	r1, [r3, #0]
 80154b4:	6808      	ldr	r0, [r1, #0]
 80154b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ba:	f380 8809 	msr	PSP, r0
 80154be:	f3bf 8f6f 	isb	sy
 80154c2:	f04f 0000 	mov.w	r0, #0
 80154c6:	f380 8811 	msr	BASEPRI, r0
 80154ca:	4770      	bx	lr
 80154cc:	f3af 8000 	nop.w

080154d0 <pxCurrentTCBConst2>:
 80154d0:	200017e4 	.word	0x200017e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop

080154d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80154d8:	4808      	ldr	r0, [pc, #32]	; (80154fc <prvPortStartFirstTask+0x24>)
 80154da:	6800      	ldr	r0, [r0, #0]
 80154dc:	6800      	ldr	r0, [r0, #0]
 80154de:	f380 8808 	msr	MSP, r0
 80154e2:	f04f 0000 	mov.w	r0, #0
 80154e6:	f380 8814 	msr	CONTROL, r0
 80154ea:	b662      	cpsie	i
 80154ec:	b661      	cpsie	f
 80154ee:	f3bf 8f4f 	dsb	sy
 80154f2:	f3bf 8f6f 	isb	sy
 80154f6:	df00      	svc	0
 80154f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80154fa:	bf00      	nop
 80154fc:	e000ed08 	.word	0xe000ed08

08015500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015506:	4b36      	ldr	r3, [pc, #216]	; (80155e0 <xPortStartScheduler+0xe0>)
 8015508:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	b2db      	uxtb	r3, r3
 8015510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	22ff      	movs	r2, #255	; 0xff
 8015516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	781b      	ldrb	r3, [r3, #0]
 801551c:	b2db      	uxtb	r3, r3
 801551e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015520:	78fb      	ldrb	r3, [r7, #3]
 8015522:	b2db      	uxtb	r3, r3
 8015524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015528:	b2da      	uxtb	r2, r3
 801552a:	4b2e      	ldr	r3, [pc, #184]	; (80155e4 <xPortStartScheduler+0xe4>)
 801552c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801552e:	4b2e      	ldr	r3, [pc, #184]	; (80155e8 <xPortStartScheduler+0xe8>)
 8015530:	2207      	movs	r2, #7
 8015532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015534:	e009      	b.n	801554a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015536:	4b2c      	ldr	r3, [pc, #176]	; (80155e8 <xPortStartScheduler+0xe8>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	3b01      	subs	r3, #1
 801553c:	4a2a      	ldr	r2, [pc, #168]	; (80155e8 <xPortStartScheduler+0xe8>)
 801553e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015540:	78fb      	ldrb	r3, [r7, #3]
 8015542:	b2db      	uxtb	r3, r3
 8015544:	005b      	lsls	r3, r3, #1
 8015546:	b2db      	uxtb	r3, r3
 8015548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801554a:	78fb      	ldrb	r3, [r7, #3]
 801554c:	b2db      	uxtb	r3, r3
 801554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015552:	2b80      	cmp	r3, #128	; 0x80
 8015554:	d0ef      	beq.n	8015536 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015556:	4b24      	ldr	r3, [pc, #144]	; (80155e8 <xPortStartScheduler+0xe8>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f1c3 0307 	rsb	r3, r3, #7
 801555e:	2b04      	cmp	r3, #4
 8015560:	d00b      	beq.n	801557a <xPortStartScheduler+0x7a>
 8015562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015566:	b672      	cpsid	i
 8015568:	f383 8811 	msr	BASEPRI, r3
 801556c:	f3bf 8f6f 	isb	sy
 8015570:	f3bf 8f4f 	dsb	sy
 8015574:	b662      	cpsie	i
 8015576:	60bb      	str	r3, [r7, #8]
 8015578:	e7fe      	b.n	8015578 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801557a:	4b1b      	ldr	r3, [pc, #108]	; (80155e8 <xPortStartScheduler+0xe8>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	021b      	lsls	r3, r3, #8
 8015580:	4a19      	ldr	r2, [pc, #100]	; (80155e8 <xPortStartScheduler+0xe8>)
 8015582:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015584:	4b18      	ldr	r3, [pc, #96]	; (80155e8 <xPortStartScheduler+0xe8>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801558c:	4a16      	ldr	r2, [pc, #88]	; (80155e8 <xPortStartScheduler+0xe8>)
 801558e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	b2da      	uxtb	r2, r3
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015598:	4b14      	ldr	r3, [pc, #80]	; (80155ec <xPortStartScheduler+0xec>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	4a13      	ldr	r2, [pc, #76]	; (80155ec <xPortStartScheduler+0xec>)
 801559e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80155a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80155a4:	4b11      	ldr	r3, [pc, #68]	; (80155ec <xPortStartScheduler+0xec>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	4a10      	ldr	r2, [pc, #64]	; (80155ec <xPortStartScheduler+0xec>)
 80155aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80155ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80155b0:	f000 f8d4 	bl	801575c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80155b4:	4b0e      	ldr	r3, [pc, #56]	; (80155f0 <xPortStartScheduler+0xf0>)
 80155b6:	2200      	movs	r2, #0
 80155b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80155ba:	f000 f8f3 	bl	80157a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80155be:	4b0d      	ldr	r3, [pc, #52]	; (80155f4 <xPortStartScheduler+0xf4>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4a0c      	ldr	r2, [pc, #48]	; (80155f4 <xPortStartScheduler+0xf4>)
 80155c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80155c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80155ca:	f7ff ff85 	bl	80154d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80155ce:	f7ff f833 	bl	8014638 <vTaskSwitchContext>
	prvTaskExitError();
 80155d2:	f7ff ff3d 	bl	8015450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80155d6:	2300      	movs	r3, #0
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	e000e400 	.word	0xe000e400
 80155e4:	20001e10 	.word	0x20001e10
 80155e8:	20001e14 	.word	0x20001e14
 80155ec:	e000ed20 	.word	0xe000ed20
 80155f0:	2000007c 	.word	0x2000007c
 80155f4:	e000ef34 	.word	0xe000ef34

080155f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015602:	b672      	cpsid	i
 8015604:	f383 8811 	msr	BASEPRI, r3
 8015608:	f3bf 8f6f 	isb	sy
 801560c:	f3bf 8f4f 	dsb	sy
 8015610:	b662      	cpsie	i
 8015612:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015614:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <vPortEnterCritical+0x5c>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	3301      	adds	r3, #1
 801561a:	4a0e      	ldr	r2, [pc, #56]	; (8015654 <vPortEnterCritical+0x5c>)
 801561c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801561e:	4b0d      	ldr	r3, [pc, #52]	; (8015654 <vPortEnterCritical+0x5c>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b01      	cmp	r3, #1
 8015624:	d110      	bne.n	8015648 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015626:	4b0c      	ldr	r3, [pc, #48]	; (8015658 <vPortEnterCritical+0x60>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	b2db      	uxtb	r3, r3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d00b      	beq.n	8015648 <vPortEnterCritical+0x50>
 8015630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015634:	b672      	cpsid	i
 8015636:	f383 8811 	msr	BASEPRI, r3
 801563a:	f3bf 8f6f 	isb	sy
 801563e:	f3bf 8f4f 	dsb	sy
 8015642:	b662      	cpsie	i
 8015644:	603b      	str	r3, [r7, #0]
 8015646:	e7fe      	b.n	8015646 <vPortEnterCritical+0x4e>
	}
}
 8015648:	bf00      	nop
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr
 8015654:	2000007c 	.word	0x2000007c
 8015658:	e000ed04 	.word	0xe000ed04

0801565c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801565c:	b480      	push	{r7}
 801565e:	b083      	sub	sp, #12
 8015660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015662:	4b12      	ldr	r3, [pc, #72]	; (80156ac <vPortExitCritical+0x50>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d10b      	bne.n	8015682 <vPortExitCritical+0x26>
 801566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801566e:	b672      	cpsid	i
 8015670:	f383 8811 	msr	BASEPRI, r3
 8015674:	f3bf 8f6f 	isb	sy
 8015678:	f3bf 8f4f 	dsb	sy
 801567c:	b662      	cpsie	i
 801567e:	607b      	str	r3, [r7, #4]
 8015680:	e7fe      	b.n	8015680 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8015682:	4b0a      	ldr	r3, [pc, #40]	; (80156ac <vPortExitCritical+0x50>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	3b01      	subs	r3, #1
 8015688:	4a08      	ldr	r2, [pc, #32]	; (80156ac <vPortExitCritical+0x50>)
 801568a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801568c:	4b07      	ldr	r3, [pc, #28]	; (80156ac <vPortExitCritical+0x50>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d104      	bne.n	801569e <vPortExitCritical+0x42>
 8015694:	2300      	movs	r3, #0
 8015696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801569e:	bf00      	nop
 80156a0:	370c      	adds	r7, #12
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	2000007c 	.word	0x2000007c

080156b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80156b0:	f3ef 8009 	mrs	r0, PSP
 80156b4:	f3bf 8f6f 	isb	sy
 80156b8:	4b15      	ldr	r3, [pc, #84]	; (8015710 <pxCurrentTCBConst>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	f01e 0f10 	tst.w	lr, #16
 80156c0:	bf08      	it	eq
 80156c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80156c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ca:	6010      	str	r0, [r2, #0]
 80156cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80156d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80156d4:	b672      	cpsid	i
 80156d6:	f380 8811 	msr	BASEPRI, r0
 80156da:	f3bf 8f4f 	dsb	sy
 80156de:	f3bf 8f6f 	isb	sy
 80156e2:	b662      	cpsie	i
 80156e4:	f7fe ffa8 	bl	8014638 <vTaskSwitchContext>
 80156e8:	f04f 0000 	mov.w	r0, #0
 80156ec:	f380 8811 	msr	BASEPRI, r0
 80156f0:	bc09      	pop	{r0, r3}
 80156f2:	6819      	ldr	r1, [r3, #0]
 80156f4:	6808      	ldr	r0, [r1, #0]
 80156f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fa:	f01e 0f10 	tst.w	lr, #16
 80156fe:	bf08      	it	eq
 8015700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015704:	f380 8809 	msr	PSP, r0
 8015708:	f3bf 8f6f 	isb	sy
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop

08015710 <pxCurrentTCBConst>:
 8015710:	200017e4 	.word	0x200017e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015714:	bf00      	nop
 8015716:	bf00      	nop

08015718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
	__asm volatile
 801571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015722:	b672      	cpsid	i
 8015724:	f383 8811 	msr	BASEPRI, r3
 8015728:	f3bf 8f6f 	isb	sy
 801572c:	f3bf 8f4f 	dsb	sy
 8015730:	b662      	cpsie	i
 8015732:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015734:	f7fe fec6 	bl	80144c4 <xTaskIncrementTick>
 8015738:	4603      	mov	r3, r0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801573e:	4b06      	ldr	r3, [pc, #24]	; (8015758 <SysTick_Handler+0x40>)
 8015740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015744:	601a      	str	r2, [r3, #0]
 8015746:	2300      	movs	r3, #0
 8015748:	603b      	str	r3, [r7, #0]
	__asm volatile
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015750:	bf00      	nop
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	e000ed04 	.word	0xe000ed04

0801575c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801575c:	b480      	push	{r7}
 801575e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <vPortSetupTimerInterrupt+0x34>)
 8015762:	2200      	movs	r2, #0
 8015764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015766:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <vPortSetupTimerInterrupt+0x38>)
 8015768:	2200      	movs	r2, #0
 801576a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801576c:	4b0a      	ldr	r3, [pc, #40]	; (8015798 <vPortSetupTimerInterrupt+0x3c>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	4a0a      	ldr	r2, [pc, #40]	; (801579c <vPortSetupTimerInterrupt+0x40>)
 8015772:	fba2 2303 	umull	r2, r3, r2, r3
 8015776:	099b      	lsrs	r3, r3, #6
 8015778:	4a09      	ldr	r2, [pc, #36]	; (80157a0 <vPortSetupTimerInterrupt+0x44>)
 801577a:	3b01      	subs	r3, #1
 801577c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801577e:	4b04      	ldr	r3, [pc, #16]	; (8015790 <vPortSetupTimerInterrupt+0x34>)
 8015780:	2207      	movs	r2, #7
 8015782:	601a      	str	r2, [r3, #0]
}
 8015784:	bf00      	nop
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
 801578e:	bf00      	nop
 8015790:	e000e010 	.word	0xe000e010
 8015794:	e000e018 	.word	0xe000e018
 8015798:	20000000 	.word	0x20000000
 801579c:	10624dd3 	.word	0x10624dd3
 80157a0:	e000e014 	.word	0xe000e014

080157a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80157a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80157b4 <vPortEnableVFP+0x10>
 80157a8:	6801      	ldr	r1, [r0, #0]
 80157aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80157ae:	6001      	str	r1, [r0, #0]
 80157b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80157b2:	bf00      	nop
 80157b4:	e000ed88 	.word	0xe000ed88

080157b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80157b8:	b480      	push	{r7}
 80157ba:	b085      	sub	sp, #20
 80157bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80157be:	f3ef 8305 	mrs	r3, IPSR
 80157c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b0f      	cmp	r3, #15
 80157c8:	d915      	bls.n	80157f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80157ca:	4a18      	ldr	r2, [pc, #96]	; (801582c <vPortValidateInterruptPriority+0x74>)
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	4413      	add	r3, r2
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80157d4:	4b16      	ldr	r3, [pc, #88]	; (8015830 <vPortValidateInterruptPriority+0x78>)
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	7afa      	ldrb	r2, [r7, #11]
 80157da:	429a      	cmp	r2, r3
 80157dc:	d20b      	bcs.n	80157f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80157de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e2:	b672      	cpsid	i
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	b662      	cpsie	i
 80157f2:	607b      	str	r3, [r7, #4]
 80157f4:	e7fe      	b.n	80157f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80157f6:	4b0f      	ldr	r3, [pc, #60]	; (8015834 <vPortValidateInterruptPriority+0x7c>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80157fe:	4b0e      	ldr	r3, [pc, #56]	; (8015838 <vPortValidateInterruptPriority+0x80>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	429a      	cmp	r2, r3
 8015804:	d90b      	bls.n	801581e <vPortValidateInterruptPriority+0x66>
 8015806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801580a:	b672      	cpsid	i
 801580c:	f383 8811 	msr	BASEPRI, r3
 8015810:	f3bf 8f6f 	isb	sy
 8015814:	f3bf 8f4f 	dsb	sy
 8015818:	b662      	cpsie	i
 801581a:	603b      	str	r3, [r7, #0]
 801581c:	e7fe      	b.n	801581c <vPortValidateInterruptPriority+0x64>
	}
 801581e:	bf00      	nop
 8015820:	3714      	adds	r7, #20
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr
 801582a:	bf00      	nop
 801582c:	e000e3f0 	.word	0xe000e3f0
 8015830:	20001e10 	.word	0x20001e10
 8015834:	e000ed0c 	.word	0xe000ed0c
 8015838:	20001e14 	.word	0x20001e14

0801583c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b08a      	sub	sp, #40	; 0x28
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015844:	2300      	movs	r3, #0
 8015846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015848:	f7fe fd80 	bl	801434c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801584c:	4b5c      	ldr	r3, [pc, #368]	; (80159c0 <pvPortMalloc+0x184>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d101      	bne.n	8015858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015854:	f000 f91a 	bl	8015a8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015858:	4b5a      	ldr	r3, [pc, #360]	; (80159c4 <pvPortMalloc+0x188>)
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	4013      	ands	r3, r2
 8015860:	2b00      	cmp	r3, #0
 8015862:	f040 8090 	bne.w	8015986 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d01e      	beq.n	80158aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801586c:	2208      	movs	r2, #8
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	4413      	add	r3, r2
 8015872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f003 0307 	and.w	r3, r3, #7
 801587a:	2b00      	cmp	r3, #0
 801587c:	d015      	beq.n	80158aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f023 0307 	bic.w	r3, r3, #7
 8015884:	3308      	adds	r3, #8
 8015886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f003 0307 	and.w	r3, r3, #7
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00b      	beq.n	80158aa <pvPortMalloc+0x6e>
 8015892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015896:	b672      	cpsid	i
 8015898:	f383 8811 	msr	BASEPRI, r3
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	f3bf 8f4f 	dsb	sy
 80158a4:	b662      	cpsie	i
 80158a6:	617b      	str	r3, [r7, #20]
 80158a8:	e7fe      	b.n	80158a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d06a      	beq.n	8015986 <pvPortMalloc+0x14a>
 80158b0:	4b45      	ldr	r3, [pc, #276]	; (80159c8 <pvPortMalloc+0x18c>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	687a      	ldr	r2, [r7, #4]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d865      	bhi.n	8015986 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80158ba:	4b44      	ldr	r3, [pc, #272]	; (80159cc <pvPortMalloc+0x190>)
 80158bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80158be:	4b43      	ldr	r3, [pc, #268]	; (80159cc <pvPortMalloc+0x190>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80158c4:	e004      	b.n	80158d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80158c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80158ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	687a      	ldr	r2, [r7, #4]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d903      	bls.n	80158e2 <pvPortMalloc+0xa6>
 80158da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d1f1      	bne.n	80158c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80158e2:	4b37      	ldr	r3, [pc, #220]	; (80159c0 <pvPortMalloc+0x184>)
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d04c      	beq.n	8015986 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80158ec:	6a3b      	ldr	r3, [r7, #32]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2208      	movs	r2, #8
 80158f2:	4413      	add	r3, r2
 80158f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80158f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	6a3b      	ldr	r3, [r7, #32]
 80158fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80158fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015900:	685a      	ldr	r2, [r3, #4]
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	1ad2      	subs	r2, r2, r3
 8015906:	2308      	movs	r3, #8
 8015908:	005b      	lsls	r3, r3, #1
 801590a:	429a      	cmp	r2, r3
 801590c:	d920      	bls.n	8015950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	4413      	add	r3, r2
 8015914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	f003 0307 	and.w	r3, r3, #7
 801591c:	2b00      	cmp	r3, #0
 801591e:	d00b      	beq.n	8015938 <pvPortMalloc+0xfc>
 8015920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015924:	b672      	cpsid	i
 8015926:	f383 8811 	msr	BASEPRI, r3
 801592a:	f3bf 8f6f 	isb	sy
 801592e:	f3bf 8f4f 	dsb	sy
 8015932:	b662      	cpsie	i
 8015934:	613b      	str	r3, [r7, #16]
 8015936:	e7fe      	b.n	8015936 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593a:	685a      	ldr	r2, [r3, #4]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	1ad2      	subs	r2, r2, r3
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801594a:	69b8      	ldr	r0, [r7, #24]
 801594c:	f000 f900 	bl	8015b50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015950:	4b1d      	ldr	r3, [pc, #116]	; (80159c8 <pvPortMalloc+0x18c>)
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	1ad3      	subs	r3, r2, r3
 801595a:	4a1b      	ldr	r2, [pc, #108]	; (80159c8 <pvPortMalloc+0x18c>)
 801595c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801595e:	4b1a      	ldr	r3, [pc, #104]	; (80159c8 <pvPortMalloc+0x18c>)
 8015960:	681a      	ldr	r2, [r3, #0]
 8015962:	4b1b      	ldr	r3, [pc, #108]	; (80159d0 <pvPortMalloc+0x194>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	429a      	cmp	r2, r3
 8015968:	d203      	bcs.n	8015972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801596a:	4b17      	ldr	r3, [pc, #92]	; (80159c8 <pvPortMalloc+0x18c>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	4a18      	ldr	r2, [pc, #96]	; (80159d0 <pvPortMalloc+0x194>)
 8015970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015974:	685a      	ldr	r2, [r3, #4]
 8015976:	4b13      	ldr	r3, [pc, #76]	; (80159c4 <pvPortMalloc+0x188>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	431a      	orrs	r2, r3
 801597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015982:	2200      	movs	r2, #0
 8015984:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015986:	f7fe fcef 	bl	8014368 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801598a:	69fb      	ldr	r3, [r7, #28]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015990:	f7eb fb60 	bl	8001054 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	f003 0307 	and.w	r3, r3, #7
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00b      	beq.n	80159b6 <pvPortMalloc+0x17a>
 801599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a2:	b672      	cpsid	i
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	b662      	cpsie	i
 80159b2:	60fb      	str	r3, [r7, #12]
 80159b4:	e7fe      	b.n	80159b4 <pvPortMalloc+0x178>
	return pvReturn;
 80159b6:	69fb      	ldr	r3, [r7, #28]
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3728      	adds	r7, #40	; 0x28
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	20009e20 	.word	0x20009e20
 80159c4:	20009e2c 	.word	0x20009e2c
 80159c8:	20009e24 	.word	0x20009e24
 80159cc:	20009e18 	.word	0x20009e18
 80159d0:	20009e28 	.word	0x20009e28

080159d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b086      	sub	sp, #24
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d04a      	beq.n	8015a7c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80159e6:	2308      	movs	r3, #8
 80159e8:	425b      	negs	r3, r3
 80159ea:	697a      	ldr	r2, [r7, #20]
 80159ec:	4413      	add	r3, r2
 80159ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	685a      	ldr	r2, [r3, #4]
 80159f8:	4b22      	ldr	r3, [pc, #136]	; (8015a84 <vPortFree+0xb0>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	4013      	ands	r3, r2
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10b      	bne.n	8015a1a <vPortFree+0x46>
 8015a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a06:	b672      	cpsid	i
 8015a08:	f383 8811 	msr	BASEPRI, r3
 8015a0c:	f3bf 8f6f 	isb	sy
 8015a10:	f3bf 8f4f 	dsb	sy
 8015a14:	b662      	cpsie	i
 8015a16:	60fb      	str	r3, [r7, #12]
 8015a18:	e7fe      	b.n	8015a18 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015a1a:	693b      	ldr	r3, [r7, #16]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d00b      	beq.n	8015a3a <vPortFree+0x66>
 8015a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a26:	b672      	cpsid	i
 8015a28:	f383 8811 	msr	BASEPRI, r3
 8015a2c:	f3bf 8f6f 	isb	sy
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	b662      	cpsie	i
 8015a36:	60bb      	str	r3, [r7, #8]
 8015a38:	e7fe      	b.n	8015a38 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	685a      	ldr	r2, [r3, #4]
 8015a3e:	4b11      	ldr	r3, [pc, #68]	; (8015a84 <vPortFree+0xb0>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	4013      	ands	r3, r2
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d019      	beq.n	8015a7c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d115      	bne.n	8015a7c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015a50:	693b      	ldr	r3, [r7, #16]
 8015a52:	685a      	ldr	r2, [r3, #4]
 8015a54:	4b0b      	ldr	r3, [pc, #44]	; (8015a84 <vPortFree+0xb0>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	43db      	mvns	r3, r3
 8015a5a:	401a      	ands	r2, r3
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015a60:	f7fe fc74 	bl	801434c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	685a      	ldr	r2, [r3, #4]
 8015a68:	4b07      	ldr	r3, [pc, #28]	; (8015a88 <vPortFree+0xb4>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	4a06      	ldr	r2, [pc, #24]	; (8015a88 <vPortFree+0xb4>)
 8015a70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015a72:	6938      	ldr	r0, [r7, #16]
 8015a74:	f000 f86c 	bl	8015b50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015a78:	f7fe fc76 	bl	8014368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015a7c:	bf00      	nop
 8015a7e:	3718      	adds	r7, #24
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	20009e2c 	.word	0x20009e2c
 8015a88:	20009e24 	.word	0x20009e24

08015a8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b085      	sub	sp, #20
 8015a90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015a98:	4b27      	ldr	r3, [pc, #156]	; (8015b38 <prvHeapInit+0xac>)
 8015a9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	f003 0307 	and.w	r3, r3, #7
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00c      	beq.n	8015ac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	3307      	adds	r3, #7
 8015aaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f023 0307 	bic.w	r3, r3, #7
 8015ab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015ab4:	68ba      	ldr	r2, [r7, #8]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	4a1f      	ldr	r2, [pc, #124]	; (8015b38 <prvHeapInit+0xac>)
 8015abc:	4413      	add	r3, r2
 8015abe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015ac4:	4a1d      	ldr	r2, [pc, #116]	; (8015b3c <prvHeapInit+0xb0>)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015aca:	4b1c      	ldr	r3, [pc, #112]	; (8015b3c <prvHeapInit+0xb0>)
 8015acc:	2200      	movs	r2, #0
 8015ace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	68ba      	ldr	r2, [r7, #8]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015ad8:	2208      	movs	r2, #8
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	1a9b      	subs	r3, r3, r2
 8015ade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f023 0307 	bic.w	r3, r3, #7
 8015ae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	4a15      	ldr	r2, [pc, #84]	; (8015b40 <prvHeapInit+0xb4>)
 8015aec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015aee:	4b14      	ldr	r3, [pc, #80]	; (8015b40 <prvHeapInit+0xb4>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2200      	movs	r2, #0
 8015af4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015af6:	4b12      	ldr	r3, [pc, #72]	; (8015b40 <prvHeapInit+0xb4>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2200      	movs	r2, #0
 8015afc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	68fa      	ldr	r2, [r7, #12]
 8015b06:	1ad2      	subs	r2, r2, r3
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015b0c:	4b0c      	ldr	r3, [pc, #48]	; (8015b40 <prvHeapInit+0xb4>)
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	4a0a      	ldr	r2, [pc, #40]	; (8015b44 <prvHeapInit+0xb8>)
 8015b1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	4a09      	ldr	r2, [pc, #36]	; (8015b48 <prvHeapInit+0xbc>)
 8015b22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015b24:	4b09      	ldr	r3, [pc, #36]	; (8015b4c <prvHeapInit+0xc0>)
 8015b26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015b2a:	601a      	str	r2, [r3, #0]
}
 8015b2c:	bf00      	nop
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	20001e18 	.word	0x20001e18
 8015b3c:	20009e18 	.word	0x20009e18
 8015b40:	20009e20 	.word	0x20009e20
 8015b44:	20009e28 	.word	0x20009e28
 8015b48:	20009e24 	.word	0x20009e24
 8015b4c:	20009e2c 	.word	0x20009e2c

08015b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015b50:	b480      	push	{r7}
 8015b52:	b085      	sub	sp, #20
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015b58:	4b28      	ldr	r3, [pc, #160]	; (8015bfc <prvInsertBlockIntoFreeList+0xac>)
 8015b5a:	60fb      	str	r3, [r7, #12]
 8015b5c:	e002      	b.n	8015b64 <prvInsertBlockIntoFreeList+0x14>
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	60fb      	str	r3, [r7, #12]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d8f7      	bhi.n	8015b5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	68ba      	ldr	r2, [r7, #8]
 8015b78:	4413      	add	r3, r2
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d108      	bne.n	8015b92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	685a      	ldr	r2, [r3, #4]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	441a      	add	r2, r3
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	68ba      	ldr	r2, [r7, #8]
 8015b9c:	441a      	add	r2, r3
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d118      	bne.n	8015bd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	4b15      	ldr	r3, [pc, #84]	; (8015c00 <prvInsertBlockIntoFreeList+0xb0>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d00d      	beq.n	8015bce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	685a      	ldr	r2, [r3, #4]
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	685b      	ldr	r3, [r3, #4]
 8015bbc:	441a      	add	r2, r3
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	681a      	ldr	r2, [r3, #0]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	601a      	str	r2, [r3, #0]
 8015bcc:	e008      	b.n	8015be0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015bce:	4b0c      	ldr	r3, [pc, #48]	; (8015c00 <prvInsertBlockIntoFreeList+0xb0>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	601a      	str	r2, [r3, #0]
 8015bd6:	e003      	b.n	8015be0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	681a      	ldr	r2, [r3, #0]
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d002      	beq.n	8015bee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015bee:	bf00      	nop
 8015bf0:	3714      	adds	r7, #20
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf8:	4770      	bx	lr
 8015bfa:	bf00      	nop
 8015bfc:	20009e18 	.word	0x20009e18
 8015c00:	20009e20 	.word	0x20009e20

08015c04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015c08:	2201      	movs	r2, #1
 8015c0a:	490e      	ldr	r1, [pc, #56]	; (8015c44 <MX_USB_HOST_Init+0x40>)
 8015c0c:	480e      	ldr	r0, [pc, #56]	; (8015c48 <MX_USB_HOST_Init+0x44>)
 8015c0e:	f7fb f8a7 	bl	8010d60 <USBH_Init>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d001      	beq.n	8015c1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015c18:	f7ec fde2 	bl	80027e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015c1c:	490b      	ldr	r1, [pc, #44]	; (8015c4c <MX_USB_HOST_Init+0x48>)
 8015c1e:	480a      	ldr	r0, [pc, #40]	; (8015c48 <MX_USB_HOST_Init+0x44>)
 8015c20:	f7fb f94e 	bl	8010ec0 <USBH_RegisterClass>
 8015c24:	4603      	mov	r3, r0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d001      	beq.n	8015c2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015c2a:	f7ec fdd9 	bl	80027e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015c2e:	4806      	ldr	r0, [pc, #24]	; (8015c48 <MX_USB_HOST_Init+0x44>)
 8015c30:	f7fb f9d2 	bl	8010fd8 <USBH_Start>
 8015c34:	4603      	mov	r3, r0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d001      	beq.n	8015c3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015c3a:	f7ec fdd1 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015c3e:	bf00      	nop
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	08015c51 	.word	0x08015c51
 8015c48:	2001ba18 	.word	0x2001ba18
 8015c4c:	2000005c 	.word	0x2000005c

08015c50 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015c50:	b480      	push	{r7}
 8015c52:	b083      	sub	sp, #12
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015c5c:	78fb      	ldrb	r3, [r7, #3]
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	2b04      	cmp	r3, #4
 8015c62:	d819      	bhi.n	8015c98 <USBH_UserProcess+0x48>
 8015c64:	a201      	add	r2, pc, #4	; (adr r2, 8015c6c <USBH_UserProcess+0x1c>)
 8015c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c6a:	bf00      	nop
 8015c6c:	08015c99 	.word	0x08015c99
 8015c70:	08015c89 	.word	0x08015c89
 8015c74:	08015c99 	.word	0x08015c99
 8015c78:	08015c91 	.word	0x08015c91
 8015c7c:	08015c81 	.word	0x08015c81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015c80:	4b09      	ldr	r3, [pc, #36]	; (8015ca8 <USBH_UserProcess+0x58>)
 8015c82:	2203      	movs	r2, #3
 8015c84:	701a      	strb	r2, [r3, #0]
  break;
 8015c86:	e008      	b.n	8015c9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015c88:	4b07      	ldr	r3, [pc, #28]	; (8015ca8 <USBH_UserProcess+0x58>)
 8015c8a:	2202      	movs	r2, #2
 8015c8c:	701a      	strb	r2, [r3, #0]
  break;
 8015c8e:	e004      	b.n	8015c9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015c90:	4b05      	ldr	r3, [pc, #20]	; (8015ca8 <USBH_UserProcess+0x58>)
 8015c92:	2201      	movs	r2, #1
 8015c94:	701a      	strb	r2, [r3, #0]
  break;
 8015c96:	e000      	b.n	8015c9a <USBH_UserProcess+0x4a>

  default:
  break;
 8015c98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015c9a:	bf00      	nop
 8015c9c:	370c      	adds	r7, #12
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca4:	4770      	bx	lr
 8015ca6:	bf00      	nop
 8015ca8:	20009e30 	.word	0x20009e30

08015cac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b08a      	sub	sp, #40	; 0x28
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015cb4:	f107 0314 	add.w	r3, r7, #20
 8015cb8:	2200      	movs	r2, #0
 8015cba:	601a      	str	r2, [r3, #0]
 8015cbc:	605a      	str	r2, [r3, #4]
 8015cbe:	609a      	str	r2, [r3, #8]
 8015cc0:	60da      	str	r2, [r3, #12]
 8015cc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015ccc:	d13c      	bne.n	8015d48 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015cce:	4b20      	ldr	r3, [pc, #128]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cd2:	4a1f      	ldr	r2, [pc, #124]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015cd4:	f043 0301 	orr.w	r3, r3, #1
 8015cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8015cda:	4b1d      	ldr	r3, [pc, #116]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cde:	f003 0301 	and.w	r3, r3, #1
 8015ce2:	613b      	str	r3, [r7, #16]
 8015ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8015ce6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cec:	2302      	movs	r3, #2
 8015cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cf4:	2303      	movs	r3, #3
 8015cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015cf8:	230a      	movs	r3, #10
 8015cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015cfc:	f107 0314 	add.w	r3, r7, #20
 8015d00:	4619      	mov	r1, r3
 8015d02:	4814      	ldr	r0, [pc, #80]	; (8015d54 <HAL_HCD_MspInit+0xa8>)
 8015d04:	f7f2 fa06 	bl	8008114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015d08:	4b11      	ldr	r3, [pc, #68]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d0c:	4a10      	ldr	r2, [pc, #64]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d12:	6353      	str	r3, [r2, #52]	; 0x34
 8015d14:	4b0e      	ldr	r3, [pc, #56]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d1c:	60fb      	str	r3, [r7, #12]
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	4b0b      	ldr	r3, [pc, #44]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d24:	4a0a      	ldr	r2, [pc, #40]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8015d2c:	4b08      	ldr	r3, [pc, #32]	; (8015d50 <HAL_HCD_MspInit+0xa4>)
 8015d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d34:	60bb      	str	r3, [r7, #8]
 8015d36:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015d38:	2200      	movs	r2, #0
 8015d3a:	2100      	movs	r1, #0
 8015d3c:	2043      	movs	r0, #67	; 0x43
 8015d3e:	f7f1 f8eb 	bl	8006f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015d42:	2043      	movs	r0, #67	; 0x43
 8015d44:	f7f1 f904 	bl	8006f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015d48:	bf00      	nop
 8015d4a:	3728      	adds	r7, #40	; 0x28
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	40023800 	.word	0x40023800
 8015d54:	40020000 	.word	0x40020000

08015d58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b082      	sub	sp, #8
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7fb fde3 	bl	8011932 <USBH_LL_IncTimer>
}
 8015d6c:	bf00      	nop
 8015d6e:	3708      	adds	r7, #8
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7fb fe27 	bl	80119d6 <USBH_LL_Connect>
}
 8015d88:	bf00      	nop
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7fb fe3c 	bl	8011a1c <USBH_LL_Disconnect>
}
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
 8015db8:	4613      	mov	r3, r2
 8015dba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fb fe73 	bl	8011aae <USBH_LL_NotifyURBChange>
#endif
}
 8015dc8:	bf00      	nop
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fb fdd1 	bl	8011986 <USBH_LL_PortEnabled>
}
 8015de4:	bf00      	nop
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fb fddd 	bl	80119ba <USBH_LL_PortDisabled>
}
 8015e00:	bf00      	nop
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d12a      	bne.n	8015e70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015e1a:	4a18      	ldr	r2, [pc, #96]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4a15      	ldr	r2, [pc, #84]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015e2a:	4b14      	ldr	r3, [pc, #80]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015e30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015e32:	4b12      	ldr	r3, [pc, #72]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e34:	2208      	movs	r2, #8
 8015e36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015e38:	4b10      	ldr	r3, [pc, #64]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015e3e:	4b0f      	ldr	r3, [pc, #60]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e40:	2200      	movs	r2, #0
 8015e42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015e44:	4b0d      	ldr	r3, [pc, #52]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e46:	2202      	movs	r2, #2
 8015e48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015e4a:	4b0c      	ldr	r3, [pc, #48]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015e50:	480a      	ldr	r0, [pc, #40]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e52:	f7f2 fc5f 	bl	8008714 <HAL_HCD_Init>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d001      	beq.n	8015e60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015e5c:	f7ec fcc0 	bl	80027e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015e60:	4806      	ldr	r0, [pc, #24]	; (8015e7c <USBH_LL_Init+0x74>)
 8015e62:	f7f3 f863 	bl	8008f2c <HAL_HCD_GetCurrentFrame>
 8015e66:	4603      	mov	r3, r0
 8015e68:	4619      	mov	r1, r3
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f7fb fd52 	bl	8011914 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015e70:	2300      	movs	r3, #0
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3708      	adds	r7, #8
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	2001bdfc 	.word	0x2001bdfc

08015e80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b084      	sub	sp, #16
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7f2 ffd0 	bl	8008e3c <HAL_HCD_Start>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015ea0:	7bfb      	ldrb	r3, [r7, #15]
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f000 f95c 	bl	8016160 <USBH_Get_USB_Status>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3710      	adds	r7, #16
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b084      	sub	sp, #16
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7f2 ffd8 	bl	8008e82 <HAL_HCD_Stop>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015ed6:	7bfb      	ldrb	r3, [r7, #15]
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f000 f941 	bl	8016160 <USBH_Get_USB_Status>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3710      	adds	r7, #16
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b084      	sub	sp, #16
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7f3 f822 	bl	8008f48 <HAL_HCD_GetCurrentSpeed>
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b01      	cmp	r3, #1
 8015f08:	d007      	beq.n	8015f1a <USBH_LL_GetSpeed+0x2e>
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d302      	bcc.n	8015f14 <USBH_LL_GetSpeed+0x28>
 8015f0e:	2b02      	cmp	r3, #2
 8015f10:	d006      	beq.n	8015f20 <USBH_LL_GetSpeed+0x34>
 8015f12:	e008      	b.n	8015f26 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015f14:	2300      	movs	r3, #0
 8015f16:	73fb      	strb	r3, [r7, #15]
    break;
 8015f18:	e008      	b.n	8015f2c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8015f1e:	e005      	b.n	8015f2c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015f20:	2302      	movs	r3, #2
 8015f22:	73fb      	strb	r3, [r7, #15]
    break;
 8015f24:	e002      	b.n	8015f2c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8015f26:	2301      	movs	r3, #1
 8015f28:	73fb      	strb	r3, [r7, #15]
    break;
 8015f2a:	bf00      	nop
  }
  return  speed;
 8015f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3710      	adds	r7, #16
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b084      	sub	sp, #16
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f42:	2300      	movs	r3, #0
 8015f44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7f2 ffb5 	bl	8008ebc <HAL_HCD_ResetPort>
 8015f52:	4603      	mov	r3, r0
 8015f54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f000 f901 	bl	8016160 <USBH_Get_USB_Status>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	460b      	mov	r3, r1
 8015f76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f7e:	78fa      	ldrb	r2, [r7, #3]
 8015f80:	4611      	mov	r1, r2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f2 ffbd 	bl	8008f02 <HAL_HCD_HC_GetXferCount>
 8015f88:	4603      	mov	r3, r0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015f92:	b590      	push	{r4, r7, lr}
 8015f94:	b089      	sub	sp, #36	; 0x24
 8015f96:	af04      	add	r7, sp, #16
 8015f98:	6078      	str	r0, [r7, #4]
 8015f9a:	4608      	mov	r0, r1
 8015f9c:	4611      	mov	r1, r2
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	70fb      	strb	r3, [r7, #3]
 8015fa4:	460b      	mov	r3, r1
 8015fa6:	70bb      	strb	r3, [r7, #2]
 8015fa8:	4613      	mov	r3, r2
 8015faa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fac:	2300      	movs	r3, #0
 8015fae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015fba:	787c      	ldrb	r4, [r7, #1]
 8015fbc:	78ba      	ldrb	r2, [r7, #2]
 8015fbe:	78f9      	ldrb	r1, [r7, #3]
 8015fc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015fc2:	9302      	str	r3, [sp, #8]
 8015fc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fce:	9300      	str	r3, [sp, #0]
 8015fd0:	4623      	mov	r3, r4
 8015fd2:	f7f2 fc01 	bl	80087d8 <HAL_HCD_HC_Init>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015fda:	7bfb      	ldrb	r3, [r7, #15]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f000 f8bf 	bl	8016160 <USBH_Get_USB_Status>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3714      	adds	r7, #20
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd90      	pop	{r4, r7, pc}

08015ff0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	460b      	mov	r3, r1
 8015ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016000:	2300      	movs	r3, #0
 8016002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801600a:	78fa      	ldrb	r2, [r7, #3]
 801600c:	4611      	mov	r1, r2
 801600e:	4618      	mov	r0, r3
 8016010:	f7f2 fc7a 	bl	8008908 <HAL_HCD_HC_Halt>
 8016014:	4603      	mov	r3, r0
 8016016:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016018:	7bfb      	ldrb	r3, [r7, #15]
 801601a:	4618      	mov	r0, r3
 801601c:	f000 f8a0 	bl	8016160 <USBH_Get_USB_Status>
 8016020:	4603      	mov	r3, r0
 8016022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016024:	7bbb      	ldrb	r3, [r7, #14]
}
 8016026:	4618      	mov	r0, r3
 8016028:	3710      	adds	r7, #16
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801602e:	b590      	push	{r4, r7, lr}
 8016030:	b089      	sub	sp, #36	; 0x24
 8016032:	af04      	add	r7, sp, #16
 8016034:	6078      	str	r0, [r7, #4]
 8016036:	4608      	mov	r0, r1
 8016038:	4611      	mov	r1, r2
 801603a:	461a      	mov	r2, r3
 801603c:	4603      	mov	r3, r0
 801603e:	70fb      	strb	r3, [r7, #3]
 8016040:	460b      	mov	r3, r1
 8016042:	70bb      	strb	r3, [r7, #2]
 8016044:	4613      	mov	r3, r2
 8016046:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016048:	2300      	movs	r3, #0
 801604a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801604c:	2300      	movs	r3, #0
 801604e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8016056:	787c      	ldrb	r4, [r7, #1]
 8016058:	78ba      	ldrb	r2, [r7, #2]
 801605a:	78f9      	ldrb	r1, [r7, #3]
 801605c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016060:	9303      	str	r3, [sp, #12]
 8016062:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016064:	9302      	str	r3, [sp, #8]
 8016066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4623      	mov	r3, r4
 8016072:	f7f2 fc6d 	bl	8008950 <HAL_HCD_HC_SubmitRequest>
 8016076:	4603      	mov	r3, r0
 8016078:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801607a:	7bfb      	ldrb	r3, [r7, #15]
 801607c:	4618      	mov	r0, r3
 801607e:	f000 f86f 	bl	8016160 <USBH_Get_USB_Status>
 8016082:	4603      	mov	r3, r0
 8016084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016086:	7bbb      	ldrb	r3, [r7, #14]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3714      	adds	r7, #20
 801608c:	46bd      	mov	sp, r7
 801608e:	bd90      	pop	{r4, r7, pc}

08016090 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	460b      	mov	r3, r1
 801609a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80160a2:	78fa      	ldrb	r2, [r7, #3]
 80160a4:	4611      	mov	r1, r2
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7f2 ff16 	bl	8008ed8 <HAL_HCD_HC_GetURBState>
 80160ac:	4603      	mov	r3, r0
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3708      	adds	r7, #8
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}

080160b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80160b6:	b580      	push	{r7, lr}
 80160b8:	b082      	sub	sp, #8
 80160ba:	af00      	add	r7, sp, #0
 80160bc:	6078      	str	r0, [r7, #4]
 80160be:	460b      	mov	r3, r1
 80160c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d103      	bne.n	80160d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80160cc:	78fb      	ldrb	r3, [r7, #3]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f000 f872 	bl	80161b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80160d4:	20c8      	movs	r0, #200	; 0xc8
 80160d6:	f7f0 fbbd 	bl	8006854 <HAL_Delay>
  return USBH_OK;
 80160da:	2300      	movs	r3, #0
}
 80160dc:	4618      	mov	r0, r3
 80160de:	3708      	adds	r7, #8
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b085      	sub	sp, #20
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	460b      	mov	r3, r1
 80160ee:	70fb      	strb	r3, [r7, #3]
 80160f0:	4613      	mov	r3, r2
 80160f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80160fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80160fc:	78fa      	ldrb	r2, [r7, #3]
 80160fe:	68f9      	ldr	r1, [r7, #12]
 8016100:	4613      	mov	r3, r2
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4413      	add	r3, r2
 8016106:	00db      	lsls	r3, r3, #3
 8016108:	440b      	add	r3, r1
 801610a:	333b      	adds	r3, #59	; 0x3b
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00a      	beq.n	8016128 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016112:	78fa      	ldrb	r2, [r7, #3]
 8016114:	68f9      	ldr	r1, [r7, #12]
 8016116:	4613      	mov	r3, r2
 8016118:	009b      	lsls	r3, r3, #2
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	440b      	add	r3, r1
 8016120:	3350      	adds	r3, #80	; 0x50
 8016122:	78ba      	ldrb	r2, [r7, #2]
 8016124:	701a      	strb	r2, [r3, #0]
 8016126:	e009      	b.n	801613c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016128:	78fa      	ldrb	r2, [r7, #3]
 801612a:	68f9      	ldr	r1, [r7, #12]
 801612c:	4613      	mov	r3, r2
 801612e:	009b      	lsls	r3, r3, #2
 8016130:	4413      	add	r3, r2
 8016132:	00db      	lsls	r3, r3, #3
 8016134:	440b      	add	r3, r1
 8016136:	3351      	adds	r3, #81	; 0x51
 8016138:	78ba      	ldrb	r2, [r7, #2]
 801613a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3714      	adds	r7, #20
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801614a:	b580      	push	{r7, lr}
 801614c:	b082      	sub	sp, #8
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	f7f0 fb7e 	bl	8006854 <HAL_Delay>
}
 8016158:	bf00      	nop
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016160:	b480      	push	{r7}
 8016162:	b085      	sub	sp, #20
 8016164:	af00      	add	r7, sp, #0
 8016166:	4603      	mov	r3, r0
 8016168:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801616a:	2300      	movs	r3, #0
 801616c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801616e:	79fb      	ldrb	r3, [r7, #7]
 8016170:	2b03      	cmp	r3, #3
 8016172:	d817      	bhi.n	80161a4 <USBH_Get_USB_Status+0x44>
 8016174:	a201      	add	r2, pc, #4	; (adr r2, 801617c <USBH_Get_USB_Status+0x1c>)
 8016176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801617a:	bf00      	nop
 801617c:	0801618d 	.word	0x0801618d
 8016180:	08016193 	.word	0x08016193
 8016184:	08016199 	.word	0x08016199
 8016188:	0801619f 	.word	0x0801619f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801618c:	2300      	movs	r3, #0
 801618e:	73fb      	strb	r3, [r7, #15]
    break;
 8016190:	e00b      	b.n	80161aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016192:	2302      	movs	r3, #2
 8016194:	73fb      	strb	r3, [r7, #15]
    break;
 8016196:	e008      	b.n	80161aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016198:	2301      	movs	r3, #1
 801619a:	73fb      	strb	r3, [r7, #15]
    break;
 801619c:	e005      	b.n	80161aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801619e:	2302      	movs	r3, #2
 80161a0:	73fb      	strb	r3, [r7, #15]
    break;
 80161a2:	e002      	b.n	80161aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80161a4:	2302      	movs	r3, #2
 80161a6:	73fb      	strb	r3, [r7, #15]
    break;
 80161a8:	bf00      	nop
  }
  return usb_status;
 80161aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	4603      	mov	r3, r0
 80161c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80161c2:	79fb      	ldrb	r3, [r7, #7]
 80161c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80161c6:	79fb      	ldrb	r3, [r7, #7]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d102      	bne.n	80161d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80161cc:	2301      	movs	r3, #1
 80161ce:	73fb      	strb	r3, [r7, #15]
 80161d0:	e001      	b.n	80161d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80161d2:	2300      	movs	r3, #0
 80161d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80161d6:	7bfb      	ldrb	r3, [r7, #15]
 80161d8:	461a      	mov	r2, r3
 80161da:	2120      	movs	r1, #32
 80161dc:	4803      	ldr	r0, [pc, #12]	; (80161ec <MX_DriverVbusFS+0x34>)
 80161de:	f7f2 fa4d 	bl	800867c <HAL_GPIO_WritePin>
}
 80161e2:	bf00      	nop
 80161e4:	3710      	adds	r7, #16
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	40020c00 	.word	0x40020c00

080161f0 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 80161f4:	f000 f806 	bl	8016204 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80161f8:	f04f 30ff 	mov.w	r0, #4294967295
 80161fc:	f7ef fd42 	bl	8005c84 <BSP_LCD_Clear>
}
 8016200:	bf00      	nop
 8016202:	bd80      	pop	{r7, pc}

08016204 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8016204:	b480      	push	{r7}
 8016206:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8016208:	4b12      	ldr	r3, [pc, #72]	; (8016254 <LCD_LOG_DeInit+0x50>)
 801620a:	4a13      	ldr	r2, [pc, #76]	; (8016258 <LCD_LOG_DeInit+0x54>)
 801620c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 801620e:	4b13      	ldr	r3, [pc, #76]	; (801625c <LCD_LOG_DeInit+0x58>)
 8016210:	2200      	movs	r2, #0
 8016212:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8016214:	4b12      	ldr	r3, [pc, #72]	; (8016260 <LCD_LOG_DeInit+0x5c>)
 8016216:	2200      	movs	r2, #0
 8016218:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 801621a:	4b12      	ldr	r3, [pc, #72]	; (8016264 <LCD_LOG_DeInit+0x60>)
 801621c:	2200      	movs	r2, #0
 801621e:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8016220:	4b11      	ldr	r3, [pc, #68]	; (8016268 <LCD_LOG_DeInit+0x64>)
 8016222:	2200      	movs	r2, #0
 8016224:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8016226:	4b11      	ldr	r3, [pc, #68]	; (801626c <LCD_LOG_DeInit+0x68>)
 8016228:	2200      	movs	r2, #0
 801622a:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 801622c:	4b10      	ldr	r3, [pc, #64]	; (8016270 <LCD_LOG_DeInit+0x6c>)
 801622e:	2201      	movs	r2, #1
 8016230:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8016232:	4b10      	ldr	r3, [pc, #64]	; (8016274 <LCD_LOG_DeInit+0x70>)
 8016234:	2200      	movs	r2, #0
 8016236:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8016238:	4b0f      	ldr	r3, [pc, #60]	; (8016278 <LCD_LOG_DeInit+0x74>)
 801623a:	2200      	movs	r2, #0
 801623c:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 801623e:	4b0f      	ldr	r3, [pc, #60]	; (801627c <LCD_LOG_DeInit+0x78>)
 8016240:	2200      	movs	r2, #0
 8016242:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8016244:	4b0e      	ldr	r3, [pc, #56]	; (8016280 <LCD_LOG_DeInit+0x7c>)
 8016246:	2200      	movs	r2, #0
 8016248:	801a      	strh	r2, [r3, #0]
}
 801624a:	bf00      	nop
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr
 8016254:	2001fd24 	.word	0x2001fd24
 8016258:	ff000080 	.word	0xff000080
 801625c:	2001c0c6 	.word	0x2001c0c6
 8016260:	2001c0cc 	.word	0x2001c0cc
 8016264:	2001c0c4 	.word	0x2001c0c4
 8016268:	2001c0c2 	.word	0x2001c0c2
 801626c:	2001c0c0 	.word	0x2001c0c0
 8016270:	2001c0c8 	.word	0x2001c0c8
 8016274:	2001c0ce 	.word	0x2001c0ce
 8016278:	2001c0c9 	.word	0x2001c0c9
 801627c:	2001c0ca 	.word	0x2001c0ca
 8016280:	2001fd28 	.word	0x2001fd28

08016284 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 801628c:	4817      	ldr	r0, [pc, #92]	; (80162ec <LCD_LOG_SetHeader+0x68>)
 801628e:	f7ef fcc9 	bl	8005c24 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8016292:	4817      	ldr	r0, [pc, #92]	; (80162f0 <LCD_LOG_SetHeader+0x6c>)
 8016294:	f7ef fc94 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8016298:	f7ef fc0a 	bl	8005ab0 <BSP_LCD_GetXSize>
 801629c:	4603      	mov	r3, r0
 801629e:	b29a      	uxth	r2, r3
 80162a0:	4b12      	ldr	r3, [pc, #72]	; (80162ec <LCD_LOG_SetHeader+0x68>)
 80162a2:	88db      	ldrh	r3, [r3, #6]
 80162a4:	4619      	mov	r1, r3
 80162a6:	0049      	lsls	r1, r1, #1
 80162a8:	440b      	add	r3, r1
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	2100      	movs	r1, #0
 80162ae:	2000      	movs	r0, #0
 80162b0:	f7ef fe78 	bl	8005fa4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80162b4:	f04f 30ff 	mov.w	r0, #4294967295
 80162b8:	f7ef fc82 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80162bc:	480c      	ldr	r0, [pc, #48]	; (80162f0 <LCD_LOG_SetHeader+0x6c>)
 80162be:	f7ef fc97 	bl	8005bf0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80162c2:	4b0a      	ldr	r3, [pc, #40]	; (80162ec <LCD_LOG_SetHeader+0x68>)
 80162c4:	88d9      	ldrh	r1, [r3, #6]
 80162c6:	2301      	movs	r3, #1
 80162c8:	687a      	ldr	r2, [r7, #4]
 80162ca:	2000      	movs	r0, #0
 80162cc:	f7ef fd46 	bl	8005d5c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80162d0:	f04f 30ff 	mov.w	r0, #4294967295
 80162d4:	f7ef fc8c 	bl	8005bf0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80162d8:	4806      	ldr	r0, [pc, #24]	; (80162f4 <LCD_LOG_SetHeader+0x70>)
 80162da:	f7ef fc71 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80162de:	4806      	ldr	r0, [pc, #24]	; (80162f8 <LCD_LOG_SetHeader+0x74>)
 80162e0:	f7ef fca0 	bl	8005c24 <BSP_LCD_SetFont>
}
 80162e4:	bf00      	nop
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	20000040 	.word	0x20000040
 80162f0:	ff0000ff 	.word	0xff0000ff
 80162f4:	ff000080 	.word	0xff000080
 80162f8:	20000048 	.word	0x20000048

080162fc <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 80162fc:	b590      	push	{r4, r7, lr}
 80162fe:	b083      	sub	sp, #12
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8016304:	481e      	ldr	r0, [pc, #120]	; (8016380 <LCD_LOG_SetFooter+0x84>)
 8016306:	f7ef fc8d 	bl	8005c24 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 801630a:	481e      	ldr	r0, [pc, #120]	; (8016384 <LCD_LOG_SetFooter+0x88>)
 801630c:	f7ef fc58 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8016310:	f7ef fbe2 	bl	8005ad8 <BSP_LCD_GetYSize>
 8016314:	4603      	mov	r3, r0
 8016316:	b29a      	uxth	r2, r3
 8016318:	4b19      	ldr	r3, [pc, #100]	; (8016380 <LCD_LOG_SetFooter+0x84>)
 801631a:	88db      	ldrh	r3, [r3, #6]
 801631c:	1ad3      	subs	r3, r2, r3
 801631e:	b29b      	uxth	r3, r3
 8016320:	3b04      	subs	r3, #4
 8016322:	b29c      	uxth	r4, r3
 8016324:	f7ef fbc4 	bl	8005ab0 <BSP_LCD_GetXSize>
 8016328:	4603      	mov	r3, r0
 801632a:	b29a      	uxth	r2, r3
 801632c:	4b14      	ldr	r3, [pc, #80]	; (8016380 <LCD_LOG_SetFooter+0x84>)
 801632e:	88db      	ldrh	r3, [r3, #6]
 8016330:	3304      	adds	r3, #4
 8016332:	b29b      	uxth	r3, r3
 8016334:	4621      	mov	r1, r4
 8016336:	2000      	movs	r0, #0
 8016338:	f7ef fe34 	bl	8005fa4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 801633c:	f04f 30ff 	mov.w	r0, #4294967295
 8016340:	f7ef fc3e 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8016344:	480f      	ldr	r0, [pc, #60]	; (8016384 <LCD_LOG_SetFooter+0x88>)
 8016346:	f7ef fc53 	bl	8005bf0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 801634a:	f7ef fbc5 	bl	8005ad8 <BSP_LCD_GetYSize>
 801634e:	4603      	mov	r3, r0
 8016350:	b29a      	uxth	r2, r3
 8016352:	4b0b      	ldr	r3, [pc, #44]	; (8016380 <LCD_LOG_SetFooter+0x84>)
 8016354:	88db      	ldrh	r3, [r3, #6]
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	b299      	uxth	r1, r3
 801635a:	2301      	movs	r3, #1
 801635c:	687a      	ldr	r2, [r7, #4]
 801635e:	2000      	movs	r0, #0
 8016360:	f7ef fcfc 	bl	8005d5c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8016364:	f04f 30ff 	mov.w	r0, #4294967295
 8016368:	f7ef fc42 	bl	8005bf0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 801636c:	4806      	ldr	r0, [pc, #24]	; (8016388 <LCD_LOG_SetFooter+0x8c>)
 801636e:	f7ef fc27 	bl	8005bc0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8016372:	4803      	ldr	r0, [pc, #12]	; (8016380 <LCD_LOG_SetFooter+0x84>)
 8016374:	f7ef fc56 	bl	8005c24 <BSP_LCD_SetFont>
}
 8016378:	bf00      	nop
 801637a:	370c      	adds	r7, #12
 801637c:	46bd      	mov	sp, r7
 801637e:	bd90      	pop	{r4, r7, pc}
 8016380:	20000048 	.word	0x20000048
 8016384:	ff0000ff 	.word	0xff0000ff
 8016388:	ff000080 	.word	0xff000080

0801638c <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 801638c:	b590      	push	{r4, r7, lr}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8016394:	f7ef fc60 	bl	8005c58 <BSP_LCD_GetFont>
 8016398:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 801639a:	4b60      	ldr	r3, [pc, #384]	; (801651c <__io_putchar+0x190>)
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	f040 80b6 	bne.w	8016510 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 80163a4:	4b5e      	ldr	r3, [pc, #376]	; (8016520 <__io_putchar+0x194>)
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	2b01      	cmp	r3, #1
 80163aa:	d110      	bne.n	80163ce <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80163ac:	4b5d      	ldr	r3, [pc, #372]	; (8016524 <__io_putchar+0x198>)
 80163ae:	881a      	ldrh	r2, [r3, #0]
 80163b0:	4b5d      	ldr	r3, [pc, #372]	; (8016528 <__io_putchar+0x19c>)
 80163b2:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80163b4:	4b5d      	ldr	r3, [pc, #372]	; (801652c <__io_putchar+0x1a0>)
 80163b6:	881a      	ldrh	r2, [r3, #0]
 80163b8:	4b5d      	ldr	r3, [pc, #372]	; (8016530 <__io_putchar+0x1a4>)
 80163ba:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 80163bc:	4b58      	ldr	r3, [pc, #352]	; (8016520 <__io_putchar+0x194>)
 80163be:	2200      	movs	r2, #0
 80163c0:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 80163c2:	4b5c      	ldr	r3, [pc, #368]	; (8016534 <__io_putchar+0x1a8>)
 80163c4:	2200      	movs	r2, #0
 80163c6:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 80163c8:	4b5b      	ldr	r3, [pc, #364]	; (8016538 <__io_putchar+0x1ac>)
 80163ca:	2200      	movs	r2, #0
 80163cc:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80163ce:	4b5b      	ldr	r3, [pc, #364]	; (801653c <__io_putchar+0x1b0>)
 80163d0:	881b      	ldrh	r3, [r3, #0]
 80163d2:	461c      	mov	r4, r3
 80163d4:	f7ef fb6c 	bl	8005ab0 <BSP_LCD_GetXSize>
 80163d8:	4602      	mov	r2, r0
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	fbb2 f3f3 	udiv	r3, r2, r3
 80163e2:	429c      	cmp	r4, r3
 80163e4:	d218      	bcs.n	8016418 <__io_putchar+0x8c>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2b0a      	cmp	r3, #10
 80163ea:	d015      	beq.n	8016418 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80163ec:	4b4e      	ldr	r3, [pc, #312]	; (8016528 <__io_putchar+0x19c>)
 80163ee:	881b      	ldrh	r3, [r3, #0]
 80163f0:	4619      	mov	r1, r3
 80163f2:	4b52      	ldr	r3, [pc, #328]	; (801653c <__io_putchar+0x1b0>)
 80163f4:	881b      	ldrh	r3, [r3, #0]
 80163f6:	1c5a      	adds	r2, r3, #1
 80163f8:	b290      	uxth	r0, r2
 80163fa:	4a50      	ldr	r2, [pc, #320]	; (801653c <__io_putchar+0x1b0>)
 80163fc:	8010      	strh	r0, [r2, #0]
 80163fe:	461c      	mov	r4, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	b2d8      	uxtb	r0, r3
 8016404:	4a4e      	ldr	r2, [pc, #312]	; (8016540 <__io_putchar+0x1b4>)
 8016406:	460b      	mov	r3, r1
 8016408:	015b      	lsls	r3, r3, #5
 801640a:	440b      	add	r3, r1
 801640c:	009b      	lsls	r3, r3, #2
 801640e:	4413      	add	r3, r2
 8016410:	4423      	add	r3, r4
 8016412:	4602      	mov	r2, r0
 8016414:	701a      	strb	r2, [r3, #0]
 8016416:	e07b      	b.n	8016510 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8016418:	4b45      	ldr	r3, [pc, #276]	; (8016530 <__io_putchar+0x1a4>)
 801641a:	881a      	ldrh	r2, [r3, #0]
 801641c:	4b42      	ldr	r3, [pc, #264]	; (8016528 <__io_putchar+0x19c>)
 801641e:	881b      	ldrh	r3, [r3, #0]
 8016420:	429a      	cmp	r2, r3
 8016422:	d314      	bcc.n	801644e <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8016424:	4b47      	ldr	r3, [pc, #284]	; (8016544 <__io_putchar+0x1b8>)
 8016426:	781b      	ldrb	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d10d      	bne.n	8016448 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 801642c:	4b40      	ldr	r3, [pc, #256]	; (8016530 <__io_putchar+0x1a4>)
 801642e:	881b      	ldrh	r3, [r3, #0]
 8016430:	3301      	adds	r3, #1
 8016432:	b29a      	uxth	r2, r3
 8016434:	4b3e      	ldr	r3, [pc, #248]	; (8016530 <__io_putchar+0x1a4>)
 8016436:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8016438:	4b3d      	ldr	r3, [pc, #244]	; (8016530 <__io_putchar+0x1a4>)
 801643a:	881b      	ldrh	r3, [r3, #0]
 801643c:	2b75      	cmp	r3, #117	; 0x75
 801643e:	d106      	bne.n	801644e <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8016440:	4b3b      	ldr	r3, [pc, #236]	; (8016530 <__io_putchar+0x1a4>)
 8016442:	2200      	movs	r2, #0
 8016444:	801a      	strh	r2, [r3, #0]
 8016446:	e002      	b.n	801644e <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8016448:	4b3e      	ldr	r3, [pc, #248]	; (8016544 <__io_putchar+0x1b8>)
 801644a:	2200      	movs	r2, #0
 801644c:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 801644e:	4b3b      	ldr	r3, [pc, #236]	; (801653c <__io_putchar+0x1b0>)
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	e015      	b.n	8016482 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8016456:	4b34      	ldr	r3, [pc, #208]	; (8016528 <__io_putchar+0x19c>)
 8016458:	881b      	ldrh	r3, [r3, #0]
 801645a:	4619      	mov	r1, r3
 801645c:	4b37      	ldr	r3, [pc, #220]	; (801653c <__io_putchar+0x1b0>)
 801645e:	881b      	ldrh	r3, [r3, #0]
 8016460:	1c5a      	adds	r2, r3, #1
 8016462:	b290      	uxth	r0, r2
 8016464:	4a35      	ldr	r2, [pc, #212]	; (801653c <__io_putchar+0x1b0>)
 8016466:	8010      	strh	r0, [r2, #0]
 8016468:	4618      	mov	r0, r3
 801646a:	4a35      	ldr	r2, [pc, #212]	; (8016540 <__io_putchar+0x1b4>)
 801646c:	460b      	mov	r3, r1
 801646e:	015b      	lsls	r3, r3, #5
 8016470:	440b      	add	r3, r1
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	4413      	add	r3, r2
 8016476:	4403      	add	r3, r0
 8016478:	2220      	movs	r2, #32
 801647a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	3301      	adds	r3, #1
 8016480:	60fb      	str	r3, [r7, #12]
 8016482:	f7ef fb15 	bl	8005ab0 <BSP_LCD_GetXSize>
 8016486:	4602      	mov	r2, r0
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	889b      	ldrh	r3, [r3, #4]
 801648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016490:	68fa      	ldr	r2, [r7, #12]
 8016492:	429a      	cmp	r2, r3
 8016494:	d3df      	bcc.n	8016456 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8016496:	4b24      	ldr	r3, [pc, #144]	; (8016528 <__io_putchar+0x19c>)
 8016498:	881b      	ldrh	r3, [r3, #0]
 801649a:	4618      	mov	r0, r3
 801649c:	4b2a      	ldr	r3, [pc, #168]	; (8016548 <__io_putchar+0x1bc>)
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	4927      	ldr	r1, [pc, #156]	; (8016540 <__io_putchar+0x1b4>)
 80164a2:	4603      	mov	r3, r0
 80164a4:	015b      	lsls	r3, r3, #5
 80164a6:	4403      	add	r3, r0
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	440b      	add	r3, r1
 80164ac:	3380      	adds	r3, #128	; 0x80
 80164ae:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 80164b0:	4b22      	ldr	r3, [pc, #136]	; (801653c <__io_putchar+0x1b0>)
 80164b2:	2200      	movs	r2, #0
 80164b4:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 80164b6:	f000 f849 	bl	801654c <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 80164ba:	4b1b      	ldr	r3, [pc, #108]	; (8016528 <__io_putchar+0x19c>)
 80164bc:	881b      	ldrh	r3, [r3, #0]
 80164be:	3301      	adds	r3, #1
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	4b19      	ldr	r3, [pc, #100]	; (8016528 <__io_putchar+0x19c>)
 80164c4:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80164c6:	4b18      	ldr	r3, [pc, #96]	; (8016528 <__io_putchar+0x19c>)
 80164c8:	881b      	ldrh	r3, [r3, #0]
 80164ca:	2b75      	cmp	r3, #117	; 0x75
 80164cc:	d108      	bne.n	80164e0 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 80164ce:	4b16      	ldr	r3, [pc, #88]	; (8016528 <__io_putchar+0x19c>)
 80164d0:	2200      	movs	r2, #0
 80164d2:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 80164d4:	4b16      	ldr	r3, [pc, #88]	; (8016530 <__io_putchar+0x1a4>)
 80164d6:	2201      	movs	r2, #1
 80164d8:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80164da:	4b1a      	ldr	r3, [pc, #104]	; (8016544 <__io_putchar+0x1b8>)
 80164dc:	2201      	movs	r2, #1
 80164de:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2b0a      	cmp	r3, #10
 80164e4:	d014      	beq.n	8016510 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80164e6:	4b10      	ldr	r3, [pc, #64]	; (8016528 <__io_putchar+0x19c>)
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	4619      	mov	r1, r3
 80164ec:	4b13      	ldr	r3, [pc, #76]	; (801653c <__io_putchar+0x1b0>)
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	1c5a      	adds	r2, r3, #1
 80164f2:	b290      	uxth	r0, r2
 80164f4:	4a11      	ldr	r2, [pc, #68]	; (801653c <__io_putchar+0x1b0>)
 80164f6:	8010      	strh	r0, [r2, #0]
 80164f8:	461c      	mov	r4, r3
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	b2d8      	uxtb	r0, r3
 80164fe:	4a10      	ldr	r2, [pc, #64]	; (8016540 <__io_putchar+0x1b4>)
 8016500:	460b      	mov	r3, r1
 8016502:	015b      	lsls	r3, r3, #5
 8016504:	440b      	add	r3, r1
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	4413      	add	r3, r2
 801650a:	4423      	add	r3, r4
 801650c:	4602      	mov	r2, r0
 801650e:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8016510:	687b      	ldr	r3, [r7, #4]
}
 8016512:	4618      	mov	r0, r3
 8016514:	3714      	adds	r7, #20
 8016516:	46bd      	mov	sp, r7
 8016518:	bd90      	pop	{r4, r7, pc}
 801651a:	bf00      	nop
 801651c:	2001c0c9 	.word	0x2001c0c9
 8016520:	2001c0ce 	.word	0x2001c0ce
 8016524:	2001c0c0 	.word	0x2001c0c0
 8016528:	2001c0c4 	.word	0x2001c0c4
 801652c:	2001c0c2 	.word	0x2001c0c2
 8016530:	2001c0cc 	.word	0x2001c0cc
 8016534:	2001c0ca 	.word	0x2001c0ca
 8016538:	2001fd28 	.word	0x2001fd28
 801653c:	2001c0c6 	.word	0x2001c0c6
 8016540:	2001c0d0 	.word	0x2001c0d0
 8016544:	2001c0c8 	.word	0x2001c0c8
 8016548:	2001fd24 	.word	0x2001fd24

0801654c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8016552:	2300      	movs	r3, #0
 8016554:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8016556:	2300      	movs	r3, #0
 8016558:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	807b      	strh	r3, [r7, #2]
 801655e:	2300      	movs	r3, #0
 8016560:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8016562:	4b39      	ldr	r3, [pc, #228]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 8016564:	881b      	ldrh	r3, [r3, #0]
 8016566:	2b0f      	cmp	r3, #15
 8016568:	d826      	bhi.n	80165b8 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 801656a:	4b37      	ldr	r3, [pc, #220]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 801656c:	881a      	ldrh	r2, [r3, #0]
 801656e:	4b37      	ldr	r3, [pc, #220]	; (801664c <LCD_LOG_UpdateDisplay+0x100>)
 8016570:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8016572:	429a      	cmp	r2, r3
 8016574:	d320      	bcc.n	80165b8 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8016576:	79fb      	ldrb	r3, [r7, #7]
 8016578:	4a33      	ldr	r2, [pc, #204]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 801657a:	8812      	ldrh	r2, [r2, #0]
 801657c:	441a      	add	r2, r3
 801657e:	4934      	ldr	r1, [pc, #208]	; (8016650 <LCD_LOG_UpdateDisplay+0x104>)
 8016580:	4613      	mov	r3, r2
 8016582:	015b      	lsls	r3, r3, #5
 8016584:	4413      	add	r3, r2
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	440b      	add	r3, r1
 801658a:	3380      	adds	r3, #128	; 0x80
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4618      	mov	r0, r3
 8016590:	f7ef fb16 	bl	8005bc0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8016594:	4b2c      	ldr	r3, [pc, #176]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	3304      	adds	r3, #4
 801659a:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 801659c:	79fb      	ldrb	r3, [r7, #7]
 801659e:	4a2a      	ldr	r2, [pc, #168]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 80165a0:	8812      	ldrh	r2, [r2, #0]
 80165a2:	441a      	add	r2, r3
 80165a4:	4613      	mov	r3, r2
 80165a6:	015b      	lsls	r3, r3, #5
 80165a8:	4413      	add	r3, r2
 80165aa:	009b      	lsls	r3, r3, #2
 80165ac:	4a28      	ldr	r2, [pc, #160]	; (8016650 <LCD_LOG_UpdateDisplay+0x104>)
 80165ae:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80165b0:	4619      	mov	r1, r3
 80165b2:	f7ef fc97 	bl	8005ee4 <BSP_LCD_DisplayStringAtLine>
 80165b6:	e043      	b.n	8016640 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80165b8:	4b23      	ldr	r3, [pc, #140]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 80165ba:	881a      	ldrh	r2, [r3, #0]
 80165bc:	4b23      	ldr	r3, [pc, #140]	; (801664c <LCD_LOG_UpdateDisplay+0x100>)
 80165be:	881b      	ldrh	r3, [r3, #0]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d204      	bcs.n	80165ce <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80165c4:	4b20      	ldr	r3, [pc, #128]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	3375      	adds	r3, #117	; 0x75
 80165ca:	80bb      	strh	r3, [r7, #4]
 80165cc:	e002      	b.n	80165d4 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80165ce:	4b1e      	ldr	r3, [pc, #120]	; (8016648 <LCD_LOG_UpdateDisplay+0xfc>)
 80165d0:	881b      	ldrh	r3, [r3, #0]
 80165d2:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80165d4:	88bb      	ldrh	r3, [r7, #4]
 80165d6:	3b10      	subs	r3, #16
 80165d8:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80165da:	2300      	movs	r3, #0
 80165dc:	71fb      	strb	r3, [r7, #7]
 80165de:	e02c      	b.n	801663a <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80165e0:	79fa      	ldrb	r2, [r7, #7]
 80165e2:	887b      	ldrh	r3, [r7, #2]
 80165e4:	4413      	add	r3, r2
 80165e6:	4a1b      	ldr	r2, [pc, #108]	; (8016654 <LCD_LOG_UpdateDisplay+0x108>)
 80165e8:	fb82 1203 	smull	r1, r2, r2, r3
 80165ec:	441a      	add	r2, r3
 80165ee:	1191      	asrs	r1, r2, #6
 80165f0:	17da      	asrs	r2, r3, #31
 80165f2:	1a8a      	subs	r2, r1, r2
 80165f4:	2175      	movs	r1, #117	; 0x75
 80165f6:	fb01 f202 	mul.w	r2, r1, r2
 80165fa:	1a9a      	subs	r2, r3, r2
 80165fc:	4613      	mov	r3, r2
 80165fe:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8016600:	883a      	ldrh	r2, [r7, #0]
 8016602:	4913      	ldr	r1, [pc, #76]	; (8016650 <LCD_LOG_UpdateDisplay+0x104>)
 8016604:	4613      	mov	r3, r2
 8016606:	015b      	lsls	r3, r3, #5
 8016608:	4413      	add	r3, r2
 801660a:	009b      	lsls	r3, r3, #2
 801660c:	440b      	add	r3, r1
 801660e:	3380      	adds	r3, #128	; 0x80
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	4618      	mov	r0, r3
 8016614:	f7ef fad4 	bl	8005bc0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8016618:	79fb      	ldrb	r3, [r7, #7]
 801661a:	b29b      	uxth	r3, r3
 801661c:	3304      	adds	r3, #4
 801661e:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8016620:	883a      	ldrh	r2, [r7, #0]
 8016622:	4613      	mov	r3, r2
 8016624:	015b      	lsls	r3, r3, #5
 8016626:	4413      	add	r3, r2
 8016628:	009b      	lsls	r3, r3, #2
 801662a:	4a09      	ldr	r2, [pc, #36]	; (8016650 <LCD_LOG_UpdateDisplay+0x104>)
 801662c:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 801662e:	4619      	mov	r1, r3
 8016630:	f7ef fc58 	bl	8005ee4 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8016634:	79fb      	ldrb	r3, [r7, #7]
 8016636:	3301      	adds	r3, #1
 8016638:	71fb      	strb	r3, [r7, #7]
 801663a:	79fb      	ldrb	r3, [r7, #7]
 801663c:	2b10      	cmp	r3, #16
 801663e:	d9cf      	bls.n	80165e0 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8016640:	bf00      	nop
 8016642:	3708      	adds	r7, #8
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}
 8016648:	2001c0c4 	.word	0x2001c0c4
 801664c:	2001c0cc 	.word	0x2001c0cc
 8016650:	2001c0d0 	.word	0x2001c0d0
 8016654:	8c08c08d 	.word	0x8c08c08d

08016658 <__errno>:
 8016658:	4b01      	ldr	r3, [pc, #4]	; (8016660 <__errno+0x8>)
 801665a:	6818      	ldr	r0, [r3, #0]
 801665c:	4770      	bx	lr
 801665e:	bf00      	nop
 8016660:	20000080 	.word	0x20000080

08016664 <__libc_init_array>:
 8016664:	b570      	push	{r4, r5, r6, lr}
 8016666:	4e0d      	ldr	r6, [pc, #52]	; (801669c <__libc_init_array+0x38>)
 8016668:	4c0d      	ldr	r4, [pc, #52]	; (80166a0 <__libc_init_array+0x3c>)
 801666a:	1ba4      	subs	r4, r4, r6
 801666c:	10a4      	asrs	r4, r4, #2
 801666e:	2500      	movs	r5, #0
 8016670:	42a5      	cmp	r5, r4
 8016672:	d109      	bne.n	8016688 <__libc_init_array+0x24>
 8016674:	4e0b      	ldr	r6, [pc, #44]	; (80166a4 <__libc_init_array+0x40>)
 8016676:	4c0c      	ldr	r4, [pc, #48]	; (80166a8 <__libc_init_array+0x44>)
 8016678:	f001 faa0 	bl	8017bbc <_init>
 801667c:	1ba4      	subs	r4, r4, r6
 801667e:	10a4      	asrs	r4, r4, #2
 8016680:	2500      	movs	r5, #0
 8016682:	42a5      	cmp	r5, r4
 8016684:	d105      	bne.n	8016692 <__libc_init_array+0x2e>
 8016686:	bd70      	pop	{r4, r5, r6, pc}
 8016688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801668c:	4798      	blx	r3
 801668e:	3501      	adds	r5, #1
 8016690:	e7ee      	b.n	8016670 <__libc_init_array+0xc>
 8016692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016696:	4798      	blx	r3
 8016698:	3501      	adds	r5, #1
 801669a:	e7f2      	b.n	8016682 <__libc_init_array+0x1e>
 801669c:	0801aa18 	.word	0x0801aa18
 80166a0:	0801aa18 	.word	0x0801aa18
 80166a4:	0801aa18 	.word	0x0801aa18
 80166a8:	0801aa1c 	.word	0x0801aa1c

080166ac <malloc>:
 80166ac:	4b02      	ldr	r3, [pc, #8]	; (80166b8 <malloc+0xc>)
 80166ae:	4601      	mov	r1, r0
 80166b0:	6818      	ldr	r0, [r3, #0]
 80166b2:	f000 b86d 	b.w	8016790 <_malloc_r>
 80166b6:	bf00      	nop
 80166b8:	20000080 	.word	0x20000080

080166bc <free>:
 80166bc:	4b02      	ldr	r3, [pc, #8]	; (80166c8 <free+0xc>)
 80166be:	4601      	mov	r1, r0
 80166c0:	6818      	ldr	r0, [r3, #0]
 80166c2:	f000 b817 	b.w	80166f4 <_free_r>
 80166c6:	bf00      	nop
 80166c8:	20000080 	.word	0x20000080

080166cc <memcpy>:
 80166cc:	b510      	push	{r4, lr}
 80166ce:	1e43      	subs	r3, r0, #1
 80166d0:	440a      	add	r2, r1
 80166d2:	4291      	cmp	r1, r2
 80166d4:	d100      	bne.n	80166d8 <memcpy+0xc>
 80166d6:	bd10      	pop	{r4, pc}
 80166d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166e0:	e7f7      	b.n	80166d2 <memcpy+0x6>

080166e2 <memset>:
 80166e2:	4402      	add	r2, r0
 80166e4:	4603      	mov	r3, r0
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d100      	bne.n	80166ec <memset+0xa>
 80166ea:	4770      	bx	lr
 80166ec:	f803 1b01 	strb.w	r1, [r3], #1
 80166f0:	e7f9      	b.n	80166e6 <memset+0x4>
	...

080166f4 <_free_r>:
 80166f4:	b538      	push	{r3, r4, r5, lr}
 80166f6:	4605      	mov	r5, r0
 80166f8:	2900      	cmp	r1, #0
 80166fa:	d045      	beq.n	8016788 <_free_r+0x94>
 80166fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016700:	1f0c      	subs	r4, r1, #4
 8016702:	2b00      	cmp	r3, #0
 8016704:	bfb8      	it	lt
 8016706:	18e4      	addlt	r4, r4, r3
 8016708:	f000 f9ae 	bl	8016a68 <__malloc_lock>
 801670c:	4a1f      	ldr	r2, [pc, #124]	; (801678c <_free_r+0x98>)
 801670e:	6813      	ldr	r3, [r2, #0]
 8016710:	4610      	mov	r0, r2
 8016712:	b933      	cbnz	r3, 8016722 <_free_r+0x2e>
 8016714:	6063      	str	r3, [r4, #4]
 8016716:	6014      	str	r4, [r2, #0]
 8016718:	4628      	mov	r0, r5
 801671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801671e:	f000 b9a4 	b.w	8016a6a <__malloc_unlock>
 8016722:	42a3      	cmp	r3, r4
 8016724:	d90c      	bls.n	8016740 <_free_r+0x4c>
 8016726:	6821      	ldr	r1, [r4, #0]
 8016728:	1862      	adds	r2, r4, r1
 801672a:	4293      	cmp	r3, r2
 801672c:	bf04      	itt	eq
 801672e:	681a      	ldreq	r2, [r3, #0]
 8016730:	685b      	ldreq	r3, [r3, #4]
 8016732:	6063      	str	r3, [r4, #4]
 8016734:	bf04      	itt	eq
 8016736:	1852      	addeq	r2, r2, r1
 8016738:	6022      	streq	r2, [r4, #0]
 801673a:	6004      	str	r4, [r0, #0]
 801673c:	e7ec      	b.n	8016718 <_free_r+0x24>
 801673e:	4613      	mov	r3, r2
 8016740:	685a      	ldr	r2, [r3, #4]
 8016742:	b10a      	cbz	r2, 8016748 <_free_r+0x54>
 8016744:	42a2      	cmp	r2, r4
 8016746:	d9fa      	bls.n	801673e <_free_r+0x4a>
 8016748:	6819      	ldr	r1, [r3, #0]
 801674a:	1858      	adds	r0, r3, r1
 801674c:	42a0      	cmp	r0, r4
 801674e:	d10b      	bne.n	8016768 <_free_r+0x74>
 8016750:	6820      	ldr	r0, [r4, #0]
 8016752:	4401      	add	r1, r0
 8016754:	1858      	adds	r0, r3, r1
 8016756:	4282      	cmp	r2, r0
 8016758:	6019      	str	r1, [r3, #0]
 801675a:	d1dd      	bne.n	8016718 <_free_r+0x24>
 801675c:	6810      	ldr	r0, [r2, #0]
 801675e:	6852      	ldr	r2, [r2, #4]
 8016760:	605a      	str	r2, [r3, #4]
 8016762:	4401      	add	r1, r0
 8016764:	6019      	str	r1, [r3, #0]
 8016766:	e7d7      	b.n	8016718 <_free_r+0x24>
 8016768:	d902      	bls.n	8016770 <_free_r+0x7c>
 801676a:	230c      	movs	r3, #12
 801676c:	602b      	str	r3, [r5, #0]
 801676e:	e7d3      	b.n	8016718 <_free_r+0x24>
 8016770:	6820      	ldr	r0, [r4, #0]
 8016772:	1821      	adds	r1, r4, r0
 8016774:	428a      	cmp	r2, r1
 8016776:	bf04      	itt	eq
 8016778:	6811      	ldreq	r1, [r2, #0]
 801677a:	6852      	ldreq	r2, [r2, #4]
 801677c:	6062      	str	r2, [r4, #4]
 801677e:	bf04      	itt	eq
 8016780:	1809      	addeq	r1, r1, r0
 8016782:	6021      	streq	r1, [r4, #0]
 8016784:	605c      	str	r4, [r3, #4]
 8016786:	e7c7      	b.n	8016718 <_free_r+0x24>
 8016788:	bd38      	pop	{r3, r4, r5, pc}
 801678a:	bf00      	nop
 801678c:	20009e34 	.word	0x20009e34

08016790 <_malloc_r>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	1ccd      	adds	r5, r1, #3
 8016794:	f025 0503 	bic.w	r5, r5, #3
 8016798:	3508      	adds	r5, #8
 801679a:	2d0c      	cmp	r5, #12
 801679c:	bf38      	it	cc
 801679e:	250c      	movcc	r5, #12
 80167a0:	2d00      	cmp	r5, #0
 80167a2:	4606      	mov	r6, r0
 80167a4:	db01      	blt.n	80167aa <_malloc_r+0x1a>
 80167a6:	42a9      	cmp	r1, r5
 80167a8:	d903      	bls.n	80167b2 <_malloc_r+0x22>
 80167aa:	230c      	movs	r3, #12
 80167ac:	6033      	str	r3, [r6, #0]
 80167ae:	2000      	movs	r0, #0
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
 80167b2:	f000 f959 	bl	8016a68 <__malloc_lock>
 80167b6:	4a21      	ldr	r2, [pc, #132]	; (801683c <_malloc_r+0xac>)
 80167b8:	6814      	ldr	r4, [r2, #0]
 80167ba:	4621      	mov	r1, r4
 80167bc:	b991      	cbnz	r1, 80167e4 <_malloc_r+0x54>
 80167be:	4c20      	ldr	r4, [pc, #128]	; (8016840 <_malloc_r+0xb0>)
 80167c0:	6823      	ldr	r3, [r4, #0]
 80167c2:	b91b      	cbnz	r3, 80167cc <_malloc_r+0x3c>
 80167c4:	4630      	mov	r0, r6
 80167c6:	f000 f855 	bl	8016874 <_sbrk_r>
 80167ca:	6020      	str	r0, [r4, #0]
 80167cc:	4629      	mov	r1, r5
 80167ce:	4630      	mov	r0, r6
 80167d0:	f000 f850 	bl	8016874 <_sbrk_r>
 80167d4:	1c43      	adds	r3, r0, #1
 80167d6:	d124      	bne.n	8016822 <_malloc_r+0x92>
 80167d8:	230c      	movs	r3, #12
 80167da:	6033      	str	r3, [r6, #0]
 80167dc:	4630      	mov	r0, r6
 80167de:	f000 f944 	bl	8016a6a <__malloc_unlock>
 80167e2:	e7e4      	b.n	80167ae <_malloc_r+0x1e>
 80167e4:	680b      	ldr	r3, [r1, #0]
 80167e6:	1b5b      	subs	r3, r3, r5
 80167e8:	d418      	bmi.n	801681c <_malloc_r+0x8c>
 80167ea:	2b0b      	cmp	r3, #11
 80167ec:	d90f      	bls.n	801680e <_malloc_r+0x7e>
 80167ee:	600b      	str	r3, [r1, #0]
 80167f0:	50cd      	str	r5, [r1, r3]
 80167f2:	18cc      	adds	r4, r1, r3
 80167f4:	4630      	mov	r0, r6
 80167f6:	f000 f938 	bl	8016a6a <__malloc_unlock>
 80167fa:	f104 000b 	add.w	r0, r4, #11
 80167fe:	1d23      	adds	r3, r4, #4
 8016800:	f020 0007 	bic.w	r0, r0, #7
 8016804:	1ac3      	subs	r3, r0, r3
 8016806:	d0d3      	beq.n	80167b0 <_malloc_r+0x20>
 8016808:	425a      	negs	r2, r3
 801680a:	50e2      	str	r2, [r4, r3]
 801680c:	e7d0      	b.n	80167b0 <_malloc_r+0x20>
 801680e:	428c      	cmp	r4, r1
 8016810:	684b      	ldr	r3, [r1, #4]
 8016812:	bf16      	itet	ne
 8016814:	6063      	strne	r3, [r4, #4]
 8016816:	6013      	streq	r3, [r2, #0]
 8016818:	460c      	movne	r4, r1
 801681a:	e7eb      	b.n	80167f4 <_malloc_r+0x64>
 801681c:	460c      	mov	r4, r1
 801681e:	6849      	ldr	r1, [r1, #4]
 8016820:	e7cc      	b.n	80167bc <_malloc_r+0x2c>
 8016822:	1cc4      	adds	r4, r0, #3
 8016824:	f024 0403 	bic.w	r4, r4, #3
 8016828:	42a0      	cmp	r0, r4
 801682a:	d005      	beq.n	8016838 <_malloc_r+0xa8>
 801682c:	1a21      	subs	r1, r4, r0
 801682e:	4630      	mov	r0, r6
 8016830:	f000 f820 	bl	8016874 <_sbrk_r>
 8016834:	3001      	adds	r0, #1
 8016836:	d0cf      	beq.n	80167d8 <_malloc_r+0x48>
 8016838:	6025      	str	r5, [r4, #0]
 801683a:	e7db      	b.n	80167f4 <_malloc_r+0x64>
 801683c:	20009e34 	.word	0x20009e34
 8016840:	20009e38 	.word	0x20009e38

08016844 <iprintf>:
 8016844:	b40f      	push	{r0, r1, r2, r3}
 8016846:	4b0a      	ldr	r3, [pc, #40]	; (8016870 <iprintf+0x2c>)
 8016848:	b513      	push	{r0, r1, r4, lr}
 801684a:	681c      	ldr	r4, [r3, #0]
 801684c:	b124      	cbz	r4, 8016858 <iprintf+0x14>
 801684e:	69a3      	ldr	r3, [r4, #24]
 8016850:	b913      	cbnz	r3, 8016858 <iprintf+0x14>
 8016852:	4620      	mov	r0, r4
 8016854:	f000 f87e 	bl	8016954 <__sinit>
 8016858:	ab05      	add	r3, sp, #20
 801685a:	9a04      	ldr	r2, [sp, #16]
 801685c:	68a1      	ldr	r1, [r4, #8]
 801685e:	9301      	str	r3, [sp, #4]
 8016860:	4620      	mov	r0, r4
 8016862:	f000 fa7f 	bl	8016d64 <_vfiprintf_r>
 8016866:	b002      	add	sp, #8
 8016868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801686c:	b004      	add	sp, #16
 801686e:	4770      	bx	lr
 8016870:	20000080 	.word	0x20000080

08016874 <_sbrk_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	4c06      	ldr	r4, [pc, #24]	; (8016890 <_sbrk_r+0x1c>)
 8016878:	2300      	movs	r3, #0
 801687a:	4605      	mov	r5, r0
 801687c:	4608      	mov	r0, r1
 801687e:	6023      	str	r3, [r4, #0]
 8016880:	f7ec fff6 	bl	8003870 <_sbrk>
 8016884:	1c43      	adds	r3, r0, #1
 8016886:	d102      	bne.n	801688e <_sbrk_r+0x1a>
 8016888:	6823      	ldr	r3, [r4, #0]
 801688a:	b103      	cbz	r3, 801688e <_sbrk_r+0x1a>
 801688c:	602b      	str	r3, [r5, #0]
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	2001fd2c 	.word	0x2001fd2c

08016894 <siprintf>:
 8016894:	b40e      	push	{r1, r2, r3}
 8016896:	b500      	push	{lr}
 8016898:	b09c      	sub	sp, #112	; 0x70
 801689a:	ab1d      	add	r3, sp, #116	; 0x74
 801689c:	9002      	str	r0, [sp, #8]
 801689e:	9006      	str	r0, [sp, #24]
 80168a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80168a4:	4809      	ldr	r0, [pc, #36]	; (80168cc <siprintf+0x38>)
 80168a6:	9107      	str	r1, [sp, #28]
 80168a8:	9104      	str	r1, [sp, #16]
 80168aa:	4909      	ldr	r1, [pc, #36]	; (80168d0 <siprintf+0x3c>)
 80168ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80168b0:	9105      	str	r1, [sp, #20]
 80168b2:	6800      	ldr	r0, [r0, #0]
 80168b4:	9301      	str	r3, [sp, #4]
 80168b6:	a902      	add	r1, sp, #8
 80168b8:	f000 f932 	bl	8016b20 <_svfiprintf_r>
 80168bc:	9b02      	ldr	r3, [sp, #8]
 80168be:	2200      	movs	r2, #0
 80168c0:	701a      	strb	r2, [r3, #0]
 80168c2:	b01c      	add	sp, #112	; 0x70
 80168c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168c8:	b003      	add	sp, #12
 80168ca:	4770      	bx	lr
 80168cc:	20000080 	.word	0x20000080
 80168d0:	ffff0208 	.word	0xffff0208

080168d4 <std>:
 80168d4:	2300      	movs	r3, #0
 80168d6:	b510      	push	{r4, lr}
 80168d8:	4604      	mov	r4, r0
 80168da:	e9c0 3300 	strd	r3, r3, [r0]
 80168de:	6083      	str	r3, [r0, #8]
 80168e0:	8181      	strh	r1, [r0, #12]
 80168e2:	6643      	str	r3, [r0, #100]	; 0x64
 80168e4:	81c2      	strh	r2, [r0, #14]
 80168e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168ea:	6183      	str	r3, [r0, #24]
 80168ec:	4619      	mov	r1, r3
 80168ee:	2208      	movs	r2, #8
 80168f0:	305c      	adds	r0, #92	; 0x5c
 80168f2:	f7ff fef6 	bl	80166e2 <memset>
 80168f6:	4b05      	ldr	r3, [pc, #20]	; (801690c <std+0x38>)
 80168f8:	6263      	str	r3, [r4, #36]	; 0x24
 80168fa:	4b05      	ldr	r3, [pc, #20]	; (8016910 <std+0x3c>)
 80168fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80168fe:	4b05      	ldr	r3, [pc, #20]	; (8016914 <std+0x40>)
 8016900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016902:	4b05      	ldr	r3, [pc, #20]	; (8016918 <std+0x44>)
 8016904:	6224      	str	r4, [r4, #32]
 8016906:	6323      	str	r3, [r4, #48]	; 0x30
 8016908:	bd10      	pop	{r4, pc}
 801690a:	bf00      	nop
 801690c:	080172a1 	.word	0x080172a1
 8016910:	080172c3 	.word	0x080172c3
 8016914:	080172fb 	.word	0x080172fb
 8016918:	0801731f 	.word	0x0801731f

0801691c <_cleanup_r>:
 801691c:	4901      	ldr	r1, [pc, #4]	; (8016924 <_cleanup_r+0x8>)
 801691e:	f000 b885 	b.w	8016a2c <_fwalk_reent>
 8016922:	bf00      	nop
 8016924:	080175f9 	.word	0x080175f9

08016928 <__sfmoreglue>:
 8016928:	b570      	push	{r4, r5, r6, lr}
 801692a:	1e4a      	subs	r2, r1, #1
 801692c:	2568      	movs	r5, #104	; 0x68
 801692e:	4355      	muls	r5, r2
 8016930:	460e      	mov	r6, r1
 8016932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016936:	f7ff ff2b 	bl	8016790 <_malloc_r>
 801693a:	4604      	mov	r4, r0
 801693c:	b140      	cbz	r0, 8016950 <__sfmoreglue+0x28>
 801693e:	2100      	movs	r1, #0
 8016940:	e9c0 1600 	strd	r1, r6, [r0]
 8016944:	300c      	adds	r0, #12
 8016946:	60a0      	str	r0, [r4, #8]
 8016948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801694c:	f7ff fec9 	bl	80166e2 <memset>
 8016950:	4620      	mov	r0, r4
 8016952:	bd70      	pop	{r4, r5, r6, pc}

08016954 <__sinit>:
 8016954:	6983      	ldr	r3, [r0, #24]
 8016956:	b510      	push	{r4, lr}
 8016958:	4604      	mov	r4, r0
 801695a:	bb33      	cbnz	r3, 80169aa <__sinit+0x56>
 801695c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016960:	6503      	str	r3, [r0, #80]	; 0x50
 8016962:	4b12      	ldr	r3, [pc, #72]	; (80169ac <__sinit+0x58>)
 8016964:	4a12      	ldr	r2, [pc, #72]	; (80169b0 <__sinit+0x5c>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	6282      	str	r2, [r0, #40]	; 0x28
 801696a:	4298      	cmp	r0, r3
 801696c:	bf04      	itt	eq
 801696e:	2301      	moveq	r3, #1
 8016970:	6183      	streq	r3, [r0, #24]
 8016972:	f000 f81f 	bl	80169b4 <__sfp>
 8016976:	6060      	str	r0, [r4, #4]
 8016978:	4620      	mov	r0, r4
 801697a:	f000 f81b 	bl	80169b4 <__sfp>
 801697e:	60a0      	str	r0, [r4, #8]
 8016980:	4620      	mov	r0, r4
 8016982:	f000 f817 	bl	80169b4 <__sfp>
 8016986:	2200      	movs	r2, #0
 8016988:	60e0      	str	r0, [r4, #12]
 801698a:	2104      	movs	r1, #4
 801698c:	6860      	ldr	r0, [r4, #4]
 801698e:	f7ff ffa1 	bl	80168d4 <std>
 8016992:	2201      	movs	r2, #1
 8016994:	2109      	movs	r1, #9
 8016996:	68a0      	ldr	r0, [r4, #8]
 8016998:	f7ff ff9c 	bl	80168d4 <std>
 801699c:	2202      	movs	r2, #2
 801699e:	2112      	movs	r1, #18
 80169a0:	68e0      	ldr	r0, [r4, #12]
 80169a2:	f7ff ff97 	bl	80168d4 <std>
 80169a6:	2301      	movs	r3, #1
 80169a8:	61a3      	str	r3, [r4, #24]
 80169aa:	bd10      	pop	{r4, pc}
 80169ac:	0801a970 	.word	0x0801a970
 80169b0:	0801691d 	.word	0x0801691d

080169b4 <__sfp>:
 80169b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169b6:	4b1b      	ldr	r3, [pc, #108]	; (8016a24 <__sfp+0x70>)
 80169b8:	681e      	ldr	r6, [r3, #0]
 80169ba:	69b3      	ldr	r3, [r6, #24]
 80169bc:	4607      	mov	r7, r0
 80169be:	b913      	cbnz	r3, 80169c6 <__sfp+0x12>
 80169c0:	4630      	mov	r0, r6
 80169c2:	f7ff ffc7 	bl	8016954 <__sinit>
 80169c6:	3648      	adds	r6, #72	; 0x48
 80169c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80169cc:	3b01      	subs	r3, #1
 80169ce:	d503      	bpl.n	80169d8 <__sfp+0x24>
 80169d0:	6833      	ldr	r3, [r6, #0]
 80169d2:	b133      	cbz	r3, 80169e2 <__sfp+0x2e>
 80169d4:	6836      	ldr	r6, [r6, #0]
 80169d6:	e7f7      	b.n	80169c8 <__sfp+0x14>
 80169d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80169dc:	b16d      	cbz	r5, 80169fa <__sfp+0x46>
 80169de:	3468      	adds	r4, #104	; 0x68
 80169e0:	e7f4      	b.n	80169cc <__sfp+0x18>
 80169e2:	2104      	movs	r1, #4
 80169e4:	4638      	mov	r0, r7
 80169e6:	f7ff ff9f 	bl	8016928 <__sfmoreglue>
 80169ea:	6030      	str	r0, [r6, #0]
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d1f1      	bne.n	80169d4 <__sfp+0x20>
 80169f0:	230c      	movs	r3, #12
 80169f2:	603b      	str	r3, [r7, #0]
 80169f4:	4604      	mov	r4, r0
 80169f6:	4620      	mov	r0, r4
 80169f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169fa:	4b0b      	ldr	r3, [pc, #44]	; (8016a28 <__sfp+0x74>)
 80169fc:	6665      	str	r5, [r4, #100]	; 0x64
 80169fe:	e9c4 5500 	strd	r5, r5, [r4]
 8016a02:	60a5      	str	r5, [r4, #8]
 8016a04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016a08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016a0c:	2208      	movs	r2, #8
 8016a0e:	4629      	mov	r1, r5
 8016a10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a14:	f7ff fe65 	bl	80166e2 <memset>
 8016a18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a20:	e7e9      	b.n	80169f6 <__sfp+0x42>
 8016a22:	bf00      	nop
 8016a24:	0801a970 	.word	0x0801a970
 8016a28:	ffff0001 	.word	0xffff0001

08016a2c <_fwalk_reent>:
 8016a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a30:	4680      	mov	r8, r0
 8016a32:	4689      	mov	r9, r1
 8016a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a38:	2600      	movs	r6, #0
 8016a3a:	b914      	cbnz	r4, 8016a42 <_fwalk_reent+0x16>
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016a46:	3f01      	subs	r7, #1
 8016a48:	d501      	bpl.n	8016a4e <_fwalk_reent+0x22>
 8016a4a:	6824      	ldr	r4, [r4, #0]
 8016a4c:	e7f5      	b.n	8016a3a <_fwalk_reent+0xe>
 8016a4e:	89ab      	ldrh	r3, [r5, #12]
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d907      	bls.n	8016a64 <_fwalk_reent+0x38>
 8016a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	d003      	beq.n	8016a64 <_fwalk_reent+0x38>
 8016a5c:	4629      	mov	r1, r5
 8016a5e:	4640      	mov	r0, r8
 8016a60:	47c8      	blx	r9
 8016a62:	4306      	orrs	r6, r0
 8016a64:	3568      	adds	r5, #104	; 0x68
 8016a66:	e7ee      	b.n	8016a46 <_fwalk_reent+0x1a>

08016a68 <__malloc_lock>:
 8016a68:	4770      	bx	lr

08016a6a <__malloc_unlock>:
 8016a6a:	4770      	bx	lr

08016a6c <__ssputs_r>:
 8016a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a70:	688e      	ldr	r6, [r1, #8]
 8016a72:	429e      	cmp	r6, r3
 8016a74:	4682      	mov	sl, r0
 8016a76:	460c      	mov	r4, r1
 8016a78:	4690      	mov	r8, r2
 8016a7a:	4699      	mov	r9, r3
 8016a7c:	d837      	bhi.n	8016aee <__ssputs_r+0x82>
 8016a7e:	898a      	ldrh	r2, [r1, #12]
 8016a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a84:	d031      	beq.n	8016aea <__ssputs_r+0x7e>
 8016a86:	6825      	ldr	r5, [r4, #0]
 8016a88:	6909      	ldr	r1, [r1, #16]
 8016a8a:	1a6f      	subs	r7, r5, r1
 8016a8c:	6965      	ldr	r5, [r4, #20]
 8016a8e:	2302      	movs	r3, #2
 8016a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a94:	fb95 f5f3 	sdiv	r5, r5, r3
 8016a98:	f109 0301 	add.w	r3, r9, #1
 8016a9c:	443b      	add	r3, r7
 8016a9e:	429d      	cmp	r5, r3
 8016aa0:	bf38      	it	cc
 8016aa2:	461d      	movcc	r5, r3
 8016aa4:	0553      	lsls	r3, r2, #21
 8016aa6:	d530      	bpl.n	8016b0a <__ssputs_r+0x9e>
 8016aa8:	4629      	mov	r1, r5
 8016aaa:	f7ff fe71 	bl	8016790 <_malloc_r>
 8016aae:	4606      	mov	r6, r0
 8016ab0:	b950      	cbnz	r0, 8016ac8 <__ssputs_r+0x5c>
 8016ab2:	230c      	movs	r3, #12
 8016ab4:	f8ca 3000 	str.w	r3, [sl]
 8016ab8:	89a3      	ldrh	r3, [r4, #12]
 8016aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016abe:	81a3      	strh	r3, [r4, #12]
 8016ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ac8:	463a      	mov	r2, r7
 8016aca:	6921      	ldr	r1, [r4, #16]
 8016acc:	f7ff fdfe 	bl	80166cc <memcpy>
 8016ad0:	89a3      	ldrh	r3, [r4, #12]
 8016ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ada:	81a3      	strh	r3, [r4, #12]
 8016adc:	6126      	str	r6, [r4, #16]
 8016ade:	6165      	str	r5, [r4, #20]
 8016ae0:	443e      	add	r6, r7
 8016ae2:	1bed      	subs	r5, r5, r7
 8016ae4:	6026      	str	r6, [r4, #0]
 8016ae6:	60a5      	str	r5, [r4, #8]
 8016ae8:	464e      	mov	r6, r9
 8016aea:	454e      	cmp	r6, r9
 8016aec:	d900      	bls.n	8016af0 <__ssputs_r+0x84>
 8016aee:	464e      	mov	r6, r9
 8016af0:	4632      	mov	r2, r6
 8016af2:	4641      	mov	r1, r8
 8016af4:	6820      	ldr	r0, [r4, #0]
 8016af6:	f000 fe1f 	bl	8017738 <memmove>
 8016afa:	68a3      	ldr	r3, [r4, #8]
 8016afc:	1b9b      	subs	r3, r3, r6
 8016afe:	60a3      	str	r3, [r4, #8]
 8016b00:	6823      	ldr	r3, [r4, #0]
 8016b02:	441e      	add	r6, r3
 8016b04:	6026      	str	r6, [r4, #0]
 8016b06:	2000      	movs	r0, #0
 8016b08:	e7dc      	b.n	8016ac4 <__ssputs_r+0x58>
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	f000 fe2d 	bl	801776a <_realloc_r>
 8016b10:	4606      	mov	r6, r0
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d1e2      	bne.n	8016adc <__ssputs_r+0x70>
 8016b16:	6921      	ldr	r1, [r4, #16]
 8016b18:	4650      	mov	r0, sl
 8016b1a:	f7ff fdeb 	bl	80166f4 <_free_r>
 8016b1e:	e7c8      	b.n	8016ab2 <__ssputs_r+0x46>

08016b20 <_svfiprintf_r>:
 8016b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b24:	461d      	mov	r5, r3
 8016b26:	898b      	ldrh	r3, [r1, #12]
 8016b28:	061f      	lsls	r7, r3, #24
 8016b2a:	b09d      	sub	sp, #116	; 0x74
 8016b2c:	4680      	mov	r8, r0
 8016b2e:	460c      	mov	r4, r1
 8016b30:	4616      	mov	r6, r2
 8016b32:	d50f      	bpl.n	8016b54 <_svfiprintf_r+0x34>
 8016b34:	690b      	ldr	r3, [r1, #16]
 8016b36:	b96b      	cbnz	r3, 8016b54 <_svfiprintf_r+0x34>
 8016b38:	2140      	movs	r1, #64	; 0x40
 8016b3a:	f7ff fe29 	bl	8016790 <_malloc_r>
 8016b3e:	6020      	str	r0, [r4, #0]
 8016b40:	6120      	str	r0, [r4, #16]
 8016b42:	b928      	cbnz	r0, 8016b50 <_svfiprintf_r+0x30>
 8016b44:	230c      	movs	r3, #12
 8016b46:	f8c8 3000 	str.w	r3, [r8]
 8016b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b4e:	e0c8      	b.n	8016ce2 <_svfiprintf_r+0x1c2>
 8016b50:	2340      	movs	r3, #64	; 0x40
 8016b52:	6163      	str	r3, [r4, #20]
 8016b54:	2300      	movs	r3, #0
 8016b56:	9309      	str	r3, [sp, #36]	; 0x24
 8016b58:	2320      	movs	r3, #32
 8016b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b5e:	2330      	movs	r3, #48	; 0x30
 8016b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b64:	9503      	str	r5, [sp, #12]
 8016b66:	f04f 0b01 	mov.w	fp, #1
 8016b6a:	4637      	mov	r7, r6
 8016b6c:	463d      	mov	r5, r7
 8016b6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b72:	b10b      	cbz	r3, 8016b78 <_svfiprintf_r+0x58>
 8016b74:	2b25      	cmp	r3, #37	; 0x25
 8016b76:	d13e      	bne.n	8016bf6 <_svfiprintf_r+0xd6>
 8016b78:	ebb7 0a06 	subs.w	sl, r7, r6
 8016b7c:	d00b      	beq.n	8016b96 <_svfiprintf_r+0x76>
 8016b7e:	4653      	mov	r3, sl
 8016b80:	4632      	mov	r2, r6
 8016b82:	4621      	mov	r1, r4
 8016b84:	4640      	mov	r0, r8
 8016b86:	f7ff ff71 	bl	8016a6c <__ssputs_r>
 8016b8a:	3001      	adds	r0, #1
 8016b8c:	f000 80a4 	beq.w	8016cd8 <_svfiprintf_r+0x1b8>
 8016b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b92:	4453      	add	r3, sl
 8016b94:	9309      	str	r3, [sp, #36]	; 0x24
 8016b96:	783b      	ldrb	r3, [r7, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 809d 	beq.w	8016cd8 <_svfiprintf_r+0x1b8>
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ba8:	9304      	str	r3, [sp, #16]
 8016baa:	9307      	str	r3, [sp, #28]
 8016bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8016bb2:	462f      	mov	r7, r5
 8016bb4:	2205      	movs	r2, #5
 8016bb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016bba:	4850      	ldr	r0, [pc, #320]	; (8016cfc <_svfiprintf_r+0x1dc>)
 8016bbc:	f7e9 fb28 	bl	8000210 <memchr>
 8016bc0:	9b04      	ldr	r3, [sp, #16]
 8016bc2:	b9d0      	cbnz	r0, 8016bfa <_svfiprintf_r+0xda>
 8016bc4:	06d9      	lsls	r1, r3, #27
 8016bc6:	bf44      	itt	mi
 8016bc8:	2220      	movmi	r2, #32
 8016bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bce:	071a      	lsls	r2, r3, #28
 8016bd0:	bf44      	itt	mi
 8016bd2:	222b      	movmi	r2, #43	; 0x2b
 8016bd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bd8:	782a      	ldrb	r2, [r5, #0]
 8016bda:	2a2a      	cmp	r2, #42	; 0x2a
 8016bdc:	d015      	beq.n	8016c0a <_svfiprintf_r+0xea>
 8016bde:	9a07      	ldr	r2, [sp, #28]
 8016be0:	462f      	mov	r7, r5
 8016be2:	2000      	movs	r0, #0
 8016be4:	250a      	movs	r5, #10
 8016be6:	4639      	mov	r1, r7
 8016be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bec:	3b30      	subs	r3, #48	; 0x30
 8016bee:	2b09      	cmp	r3, #9
 8016bf0:	d94d      	bls.n	8016c8e <_svfiprintf_r+0x16e>
 8016bf2:	b1b8      	cbz	r0, 8016c24 <_svfiprintf_r+0x104>
 8016bf4:	e00f      	b.n	8016c16 <_svfiprintf_r+0xf6>
 8016bf6:	462f      	mov	r7, r5
 8016bf8:	e7b8      	b.n	8016b6c <_svfiprintf_r+0x4c>
 8016bfa:	4a40      	ldr	r2, [pc, #256]	; (8016cfc <_svfiprintf_r+0x1dc>)
 8016bfc:	1a80      	subs	r0, r0, r2
 8016bfe:	fa0b f000 	lsl.w	r0, fp, r0
 8016c02:	4318      	orrs	r0, r3
 8016c04:	9004      	str	r0, [sp, #16]
 8016c06:	463d      	mov	r5, r7
 8016c08:	e7d3      	b.n	8016bb2 <_svfiprintf_r+0x92>
 8016c0a:	9a03      	ldr	r2, [sp, #12]
 8016c0c:	1d11      	adds	r1, r2, #4
 8016c0e:	6812      	ldr	r2, [r2, #0]
 8016c10:	9103      	str	r1, [sp, #12]
 8016c12:	2a00      	cmp	r2, #0
 8016c14:	db01      	blt.n	8016c1a <_svfiprintf_r+0xfa>
 8016c16:	9207      	str	r2, [sp, #28]
 8016c18:	e004      	b.n	8016c24 <_svfiprintf_r+0x104>
 8016c1a:	4252      	negs	r2, r2
 8016c1c:	f043 0302 	orr.w	r3, r3, #2
 8016c20:	9207      	str	r2, [sp, #28]
 8016c22:	9304      	str	r3, [sp, #16]
 8016c24:	783b      	ldrb	r3, [r7, #0]
 8016c26:	2b2e      	cmp	r3, #46	; 0x2e
 8016c28:	d10c      	bne.n	8016c44 <_svfiprintf_r+0x124>
 8016c2a:	787b      	ldrb	r3, [r7, #1]
 8016c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8016c2e:	d133      	bne.n	8016c98 <_svfiprintf_r+0x178>
 8016c30:	9b03      	ldr	r3, [sp, #12]
 8016c32:	1d1a      	adds	r2, r3, #4
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	9203      	str	r2, [sp, #12]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	bfb8      	it	lt
 8016c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c40:	3702      	adds	r7, #2
 8016c42:	9305      	str	r3, [sp, #20]
 8016c44:	4d2e      	ldr	r5, [pc, #184]	; (8016d00 <_svfiprintf_r+0x1e0>)
 8016c46:	7839      	ldrb	r1, [r7, #0]
 8016c48:	2203      	movs	r2, #3
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	f7e9 fae0 	bl	8000210 <memchr>
 8016c50:	b138      	cbz	r0, 8016c62 <_svfiprintf_r+0x142>
 8016c52:	2340      	movs	r3, #64	; 0x40
 8016c54:	1b40      	subs	r0, r0, r5
 8016c56:	fa03 f000 	lsl.w	r0, r3, r0
 8016c5a:	9b04      	ldr	r3, [sp, #16]
 8016c5c:	4303      	orrs	r3, r0
 8016c5e:	3701      	adds	r7, #1
 8016c60:	9304      	str	r3, [sp, #16]
 8016c62:	7839      	ldrb	r1, [r7, #0]
 8016c64:	4827      	ldr	r0, [pc, #156]	; (8016d04 <_svfiprintf_r+0x1e4>)
 8016c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c6a:	2206      	movs	r2, #6
 8016c6c:	1c7e      	adds	r6, r7, #1
 8016c6e:	f7e9 facf 	bl	8000210 <memchr>
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d038      	beq.n	8016ce8 <_svfiprintf_r+0x1c8>
 8016c76:	4b24      	ldr	r3, [pc, #144]	; (8016d08 <_svfiprintf_r+0x1e8>)
 8016c78:	bb13      	cbnz	r3, 8016cc0 <_svfiprintf_r+0x1a0>
 8016c7a:	9b03      	ldr	r3, [sp, #12]
 8016c7c:	3307      	adds	r3, #7
 8016c7e:	f023 0307 	bic.w	r3, r3, #7
 8016c82:	3308      	adds	r3, #8
 8016c84:	9303      	str	r3, [sp, #12]
 8016c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c88:	444b      	add	r3, r9
 8016c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c8c:	e76d      	b.n	8016b6a <_svfiprintf_r+0x4a>
 8016c8e:	fb05 3202 	mla	r2, r5, r2, r3
 8016c92:	2001      	movs	r0, #1
 8016c94:	460f      	mov	r7, r1
 8016c96:	e7a6      	b.n	8016be6 <_svfiprintf_r+0xc6>
 8016c98:	2300      	movs	r3, #0
 8016c9a:	3701      	adds	r7, #1
 8016c9c:	9305      	str	r3, [sp, #20]
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	250a      	movs	r5, #10
 8016ca2:	4638      	mov	r0, r7
 8016ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ca8:	3a30      	subs	r2, #48	; 0x30
 8016caa:	2a09      	cmp	r2, #9
 8016cac:	d903      	bls.n	8016cb6 <_svfiprintf_r+0x196>
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d0c8      	beq.n	8016c44 <_svfiprintf_r+0x124>
 8016cb2:	9105      	str	r1, [sp, #20]
 8016cb4:	e7c6      	b.n	8016c44 <_svfiprintf_r+0x124>
 8016cb6:	fb05 2101 	mla	r1, r5, r1, r2
 8016cba:	2301      	movs	r3, #1
 8016cbc:	4607      	mov	r7, r0
 8016cbe:	e7f0      	b.n	8016ca2 <_svfiprintf_r+0x182>
 8016cc0:	ab03      	add	r3, sp, #12
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	4622      	mov	r2, r4
 8016cc6:	4b11      	ldr	r3, [pc, #68]	; (8016d0c <_svfiprintf_r+0x1ec>)
 8016cc8:	a904      	add	r1, sp, #16
 8016cca:	4640      	mov	r0, r8
 8016ccc:	f3af 8000 	nop.w
 8016cd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016cd4:	4681      	mov	r9, r0
 8016cd6:	d1d6      	bne.n	8016c86 <_svfiprintf_r+0x166>
 8016cd8:	89a3      	ldrh	r3, [r4, #12]
 8016cda:	065b      	lsls	r3, r3, #25
 8016cdc:	f53f af35 	bmi.w	8016b4a <_svfiprintf_r+0x2a>
 8016ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ce2:	b01d      	add	sp, #116	; 0x74
 8016ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce8:	ab03      	add	r3, sp, #12
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	4622      	mov	r2, r4
 8016cee:	4b07      	ldr	r3, [pc, #28]	; (8016d0c <_svfiprintf_r+0x1ec>)
 8016cf0:	a904      	add	r1, sp, #16
 8016cf2:	4640      	mov	r0, r8
 8016cf4:	f000 f9c2 	bl	801707c <_printf_i>
 8016cf8:	e7ea      	b.n	8016cd0 <_svfiprintf_r+0x1b0>
 8016cfa:	bf00      	nop
 8016cfc:	0801a9d4 	.word	0x0801a9d4
 8016d00:	0801a9da 	.word	0x0801a9da
 8016d04:	0801a9de 	.word	0x0801a9de
 8016d08:	00000000 	.word	0x00000000
 8016d0c:	08016a6d 	.word	0x08016a6d

08016d10 <__sfputc_r>:
 8016d10:	6893      	ldr	r3, [r2, #8]
 8016d12:	3b01      	subs	r3, #1
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	b410      	push	{r4}
 8016d18:	6093      	str	r3, [r2, #8]
 8016d1a:	da08      	bge.n	8016d2e <__sfputc_r+0x1e>
 8016d1c:	6994      	ldr	r4, [r2, #24]
 8016d1e:	42a3      	cmp	r3, r4
 8016d20:	db01      	blt.n	8016d26 <__sfputc_r+0x16>
 8016d22:	290a      	cmp	r1, #10
 8016d24:	d103      	bne.n	8016d2e <__sfputc_r+0x1e>
 8016d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d2a:	f000 bafd 	b.w	8017328 <__swbuf_r>
 8016d2e:	6813      	ldr	r3, [r2, #0]
 8016d30:	1c58      	adds	r0, r3, #1
 8016d32:	6010      	str	r0, [r2, #0]
 8016d34:	7019      	strb	r1, [r3, #0]
 8016d36:	4608      	mov	r0, r1
 8016d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d3c:	4770      	bx	lr

08016d3e <__sfputs_r>:
 8016d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d40:	4606      	mov	r6, r0
 8016d42:	460f      	mov	r7, r1
 8016d44:	4614      	mov	r4, r2
 8016d46:	18d5      	adds	r5, r2, r3
 8016d48:	42ac      	cmp	r4, r5
 8016d4a:	d101      	bne.n	8016d50 <__sfputs_r+0x12>
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	e007      	b.n	8016d60 <__sfputs_r+0x22>
 8016d50:	463a      	mov	r2, r7
 8016d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d56:	4630      	mov	r0, r6
 8016d58:	f7ff ffda 	bl	8016d10 <__sfputc_r>
 8016d5c:	1c43      	adds	r3, r0, #1
 8016d5e:	d1f3      	bne.n	8016d48 <__sfputs_r+0xa>
 8016d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d64 <_vfiprintf_r>:
 8016d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d68:	460c      	mov	r4, r1
 8016d6a:	b09d      	sub	sp, #116	; 0x74
 8016d6c:	4617      	mov	r7, r2
 8016d6e:	461d      	mov	r5, r3
 8016d70:	4606      	mov	r6, r0
 8016d72:	b118      	cbz	r0, 8016d7c <_vfiprintf_r+0x18>
 8016d74:	6983      	ldr	r3, [r0, #24]
 8016d76:	b90b      	cbnz	r3, 8016d7c <_vfiprintf_r+0x18>
 8016d78:	f7ff fdec 	bl	8016954 <__sinit>
 8016d7c:	4b7c      	ldr	r3, [pc, #496]	; (8016f70 <_vfiprintf_r+0x20c>)
 8016d7e:	429c      	cmp	r4, r3
 8016d80:	d158      	bne.n	8016e34 <_vfiprintf_r+0xd0>
 8016d82:	6874      	ldr	r4, [r6, #4]
 8016d84:	89a3      	ldrh	r3, [r4, #12]
 8016d86:	0718      	lsls	r0, r3, #28
 8016d88:	d55e      	bpl.n	8016e48 <_vfiprintf_r+0xe4>
 8016d8a:	6923      	ldr	r3, [r4, #16]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d05b      	beq.n	8016e48 <_vfiprintf_r+0xe4>
 8016d90:	2300      	movs	r3, #0
 8016d92:	9309      	str	r3, [sp, #36]	; 0x24
 8016d94:	2320      	movs	r3, #32
 8016d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d9a:	2330      	movs	r3, #48	; 0x30
 8016d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016da0:	9503      	str	r5, [sp, #12]
 8016da2:	f04f 0b01 	mov.w	fp, #1
 8016da6:	46b8      	mov	r8, r7
 8016da8:	4645      	mov	r5, r8
 8016daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016dae:	b10b      	cbz	r3, 8016db4 <_vfiprintf_r+0x50>
 8016db0:	2b25      	cmp	r3, #37	; 0x25
 8016db2:	d154      	bne.n	8016e5e <_vfiprintf_r+0xfa>
 8016db4:	ebb8 0a07 	subs.w	sl, r8, r7
 8016db8:	d00b      	beq.n	8016dd2 <_vfiprintf_r+0x6e>
 8016dba:	4653      	mov	r3, sl
 8016dbc:	463a      	mov	r2, r7
 8016dbe:	4621      	mov	r1, r4
 8016dc0:	4630      	mov	r0, r6
 8016dc2:	f7ff ffbc 	bl	8016d3e <__sfputs_r>
 8016dc6:	3001      	adds	r0, #1
 8016dc8:	f000 80c2 	beq.w	8016f50 <_vfiprintf_r+0x1ec>
 8016dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dce:	4453      	add	r3, sl
 8016dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd2:	f898 3000 	ldrb.w	r3, [r8]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f000 80ba 	beq.w	8016f50 <_vfiprintf_r+0x1ec>
 8016ddc:	2300      	movs	r3, #0
 8016dde:	f04f 32ff 	mov.w	r2, #4294967295
 8016de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016de6:	9304      	str	r3, [sp, #16]
 8016de8:	9307      	str	r3, [sp, #28]
 8016dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dee:	931a      	str	r3, [sp, #104]	; 0x68
 8016df0:	46a8      	mov	r8, r5
 8016df2:	2205      	movs	r2, #5
 8016df4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016df8:	485e      	ldr	r0, [pc, #376]	; (8016f74 <_vfiprintf_r+0x210>)
 8016dfa:	f7e9 fa09 	bl	8000210 <memchr>
 8016dfe:	9b04      	ldr	r3, [sp, #16]
 8016e00:	bb78      	cbnz	r0, 8016e62 <_vfiprintf_r+0xfe>
 8016e02:	06d9      	lsls	r1, r3, #27
 8016e04:	bf44      	itt	mi
 8016e06:	2220      	movmi	r2, #32
 8016e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e0c:	071a      	lsls	r2, r3, #28
 8016e0e:	bf44      	itt	mi
 8016e10:	222b      	movmi	r2, #43	; 0x2b
 8016e12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e16:	782a      	ldrb	r2, [r5, #0]
 8016e18:	2a2a      	cmp	r2, #42	; 0x2a
 8016e1a:	d02a      	beq.n	8016e72 <_vfiprintf_r+0x10e>
 8016e1c:	9a07      	ldr	r2, [sp, #28]
 8016e1e:	46a8      	mov	r8, r5
 8016e20:	2000      	movs	r0, #0
 8016e22:	250a      	movs	r5, #10
 8016e24:	4641      	mov	r1, r8
 8016e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e2a:	3b30      	subs	r3, #48	; 0x30
 8016e2c:	2b09      	cmp	r3, #9
 8016e2e:	d969      	bls.n	8016f04 <_vfiprintf_r+0x1a0>
 8016e30:	b360      	cbz	r0, 8016e8c <_vfiprintf_r+0x128>
 8016e32:	e024      	b.n	8016e7e <_vfiprintf_r+0x11a>
 8016e34:	4b50      	ldr	r3, [pc, #320]	; (8016f78 <_vfiprintf_r+0x214>)
 8016e36:	429c      	cmp	r4, r3
 8016e38:	d101      	bne.n	8016e3e <_vfiprintf_r+0xda>
 8016e3a:	68b4      	ldr	r4, [r6, #8]
 8016e3c:	e7a2      	b.n	8016d84 <_vfiprintf_r+0x20>
 8016e3e:	4b4f      	ldr	r3, [pc, #316]	; (8016f7c <_vfiprintf_r+0x218>)
 8016e40:	429c      	cmp	r4, r3
 8016e42:	bf08      	it	eq
 8016e44:	68f4      	ldreq	r4, [r6, #12]
 8016e46:	e79d      	b.n	8016d84 <_vfiprintf_r+0x20>
 8016e48:	4621      	mov	r1, r4
 8016e4a:	4630      	mov	r0, r6
 8016e4c:	f000 fad0 	bl	80173f0 <__swsetup_r>
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d09d      	beq.n	8016d90 <_vfiprintf_r+0x2c>
 8016e54:	f04f 30ff 	mov.w	r0, #4294967295
 8016e58:	b01d      	add	sp, #116	; 0x74
 8016e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5e:	46a8      	mov	r8, r5
 8016e60:	e7a2      	b.n	8016da8 <_vfiprintf_r+0x44>
 8016e62:	4a44      	ldr	r2, [pc, #272]	; (8016f74 <_vfiprintf_r+0x210>)
 8016e64:	1a80      	subs	r0, r0, r2
 8016e66:	fa0b f000 	lsl.w	r0, fp, r0
 8016e6a:	4318      	orrs	r0, r3
 8016e6c:	9004      	str	r0, [sp, #16]
 8016e6e:	4645      	mov	r5, r8
 8016e70:	e7be      	b.n	8016df0 <_vfiprintf_r+0x8c>
 8016e72:	9a03      	ldr	r2, [sp, #12]
 8016e74:	1d11      	adds	r1, r2, #4
 8016e76:	6812      	ldr	r2, [r2, #0]
 8016e78:	9103      	str	r1, [sp, #12]
 8016e7a:	2a00      	cmp	r2, #0
 8016e7c:	db01      	blt.n	8016e82 <_vfiprintf_r+0x11e>
 8016e7e:	9207      	str	r2, [sp, #28]
 8016e80:	e004      	b.n	8016e8c <_vfiprintf_r+0x128>
 8016e82:	4252      	negs	r2, r2
 8016e84:	f043 0302 	orr.w	r3, r3, #2
 8016e88:	9207      	str	r2, [sp, #28]
 8016e8a:	9304      	str	r3, [sp, #16]
 8016e8c:	f898 3000 	ldrb.w	r3, [r8]
 8016e90:	2b2e      	cmp	r3, #46	; 0x2e
 8016e92:	d10e      	bne.n	8016eb2 <_vfiprintf_r+0x14e>
 8016e94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e98:	2b2a      	cmp	r3, #42	; 0x2a
 8016e9a:	d138      	bne.n	8016f0e <_vfiprintf_r+0x1aa>
 8016e9c:	9b03      	ldr	r3, [sp, #12]
 8016e9e:	1d1a      	adds	r2, r3, #4
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	9203      	str	r2, [sp, #12]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	bfb8      	it	lt
 8016ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eac:	f108 0802 	add.w	r8, r8, #2
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	4d33      	ldr	r5, [pc, #204]	; (8016f80 <_vfiprintf_r+0x21c>)
 8016eb4:	f898 1000 	ldrb.w	r1, [r8]
 8016eb8:	2203      	movs	r2, #3
 8016eba:	4628      	mov	r0, r5
 8016ebc:	f7e9 f9a8 	bl	8000210 <memchr>
 8016ec0:	b140      	cbz	r0, 8016ed4 <_vfiprintf_r+0x170>
 8016ec2:	2340      	movs	r3, #64	; 0x40
 8016ec4:	1b40      	subs	r0, r0, r5
 8016ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8016eca:	9b04      	ldr	r3, [sp, #16]
 8016ecc:	4303      	orrs	r3, r0
 8016ece:	f108 0801 	add.w	r8, r8, #1
 8016ed2:	9304      	str	r3, [sp, #16]
 8016ed4:	f898 1000 	ldrb.w	r1, [r8]
 8016ed8:	482a      	ldr	r0, [pc, #168]	; (8016f84 <_vfiprintf_r+0x220>)
 8016eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ede:	2206      	movs	r2, #6
 8016ee0:	f108 0701 	add.w	r7, r8, #1
 8016ee4:	f7e9 f994 	bl	8000210 <memchr>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d037      	beq.n	8016f5c <_vfiprintf_r+0x1f8>
 8016eec:	4b26      	ldr	r3, [pc, #152]	; (8016f88 <_vfiprintf_r+0x224>)
 8016eee:	bb1b      	cbnz	r3, 8016f38 <_vfiprintf_r+0x1d4>
 8016ef0:	9b03      	ldr	r3, [sp, #12]
 8016ef2:	3307      	adds	r3, #7
 8016ef4:	f023 0307 	bic.w	r3, r3, #7
 8016ef8:	3308      	adds	r3, #8
 8016efa:	9303      	str	r3, [sp, #12]
 8016efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efe:	444b      	add	r3, r9
 8016f00:	9309      	str	r3, [sp, #36]	; 0x24
 8016f02:	e750      	b.n	8016da6 <_vfiprintf_r+0x42>
 8016f04:	fb05 3202 	mla	r2, r5, r2, r3
 8016f08:	2001      	movs	r0, #1
 8016f0a:	4688      	mov	r8, r1
 8016f0c:	e78a      	b.n	8016e24 <_vfiprintf_r+0xc0>
 8016f0e:	2300      	movs	r3, #0
 8016f10:	f108 0801 	add.w	r8, r8, #1
 8016f14:	9305      	str	r3, [sp, #20]
 8016f16:	4619      	mov	r1, r3
 8016f18:	250a      	movs	r5, #10
 8016f1a:	4640      	mov	r0, r8
 8016f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f20:	3a30      	subs	r2, #48	; 0x30
 8016f22:	2a09      	cmp	r2, #9
 8016f24:	d903      	bls.n	8016f2e <_vfiprintf_r+0x1ca>
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d0c3      	beq.n	8016eb2 <_vfiprintf_r+0x14e>
 8016f2a:	9105      	str	r1, [sp, #20]
 8016f2c:	e7c1      	b.n	8016eb2 <_vfiprintf_r+0x14e>
 8016f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8016f32:	2301      	movs	r3, #1
 8016f34:	4680      	mov	r8, r0
 8016f36:	e7f0      	b.n	8016f1a <_vfiprintf_r+0x1b6>
 8016f38:	ab03      	add	r3, sp, #12
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	4622      	mov	r2, r4
 8016f3e:	4b13      	ldr	r3, [pc, #76]	; (8016f8c <_vfiprintf_r+0x228>)
 8016f40:	a904      	add	r1, sp, #16
 8016f42:	4630      	mov	r0, r6
 8016f44:	f3af 8000 	nop.w
 8016f48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f4c:	4681      	mov	r9, r0
 8016f4e:	d1d5      	bne.n	8016efc <_vfiprintf_r+0x198>
 8016f50:	89a3      	ldrh	r3, [r4, #12]
 8016f52:	065b      	lsls	r3, r3, #25
 8016f54:	f53f af7e 	bmi.w	8016e54 <_vfiprintf_r+0xf0>
 8016f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f5a:	e77d      	b.n	8016e58 <_vfiprintf_r+0xf4>
 8016f5c:	ab03      	add	r3, sp, #12
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	4622      	mov	r2, r4
 8016f62:	4b0a      	ldr	r3, [pc, #40]	; (8016f8c <_vfiprintf_r+0x228>)
 8016f64:	a904      	add	r1, sp, #16
 8016f66:	4630      	mov	r0, r6
 8016f68:	f000 f888 	bl	801707c <_printf_i>
 8016f6c:	e7ec      	b.n	8016f48 <_vfiprintf_r+0x1e4>
 8016f6e:	bf00      	nop
 8016f70:	0801a994 	.word	0x0801a994
 8016f74:	0801a9d4 	.word	0x0801a9d4
 8016f78:	0801a9b4 	.word	0x0801a9b4
 8016f7c:	0801a974 	.word	0x0801a974
 8016f80:	0801a9da 	.word	0x0801a9da
 8016f84:	0801a9de 	.word	0x0801a9de
 8016f88:	00000000 	.word	0x00000000
 8016f8c:	08016d3f 	.word	0x08016d3f

08016f90 <_printf_common>:
 8016f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f94:	4691      	mov	r9, r2
 8016f96:	461f      	mov	r7, r3
 8016f98:	688a      	ldr	r2, [r1, #8]
 8016f9a:	690b      	ldr	r3, [r1, #16]
 8016f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	bfb8      	it	lt
 8016fa4:	4613      	movlt	r3, r2
 8016fa6:	f8c9 3000 	str.w	r3, [r9]
 8016faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fae:	4606      	mov	r6, r0
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	b112      	cbz	r2, 8016fba <_printf_common+0x2a>
 8016fb4:	3301      	adds	r3, #1
 8016fb6:	f8c9 3000 	str.w	r3, [r9]
 8016fba:	6823      	ldr	r3, [r4, #0]
 8016fbc:	0699      	lsls	r1, r3, #26
 8016fbe:	bf42      	ittt	mi
 8016fc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016fc4:	3302      	addmi	r3, #2
 8016fc6:	f8c9 3000 	strmi.w	r3, [r9]
 8016fca:	6825      	ldr	r5, [r4, #0]
 8016fcc:	f015 0506 	ands.w	r5, r5, #6
 8016fd0:	d107      	bne.n	8016fe2 <_printf_common+0x52>
 8016fd2:	f104 0a19 	add.w	sl, r4, #25
 8016fd6:	68e3      	ldr	r3, [r4, #12]
 8016fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8016fdc:	1a9b      	subs	r3, r3, r2
 8016fde:	42ab      	cmp	r3, r5
 8016fe0:	dc28      	bgt.n	8017034 <_printf_common+0xa4>
 8016fe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016fe6:	6822      	ldr	r2, [r4, #0]
 8016fe8:	3300      	adds	r3, #0
 8016fea:	bf18      	it	ne
 8016fec:	2301      	movne	r3, #1
 8016fee:	0692      	lsls	r2, r2, #26
 8016ff0:	d42d      	bmi.n	801704e <_printf_common+0xbe>
 8016ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ff6:	4639      	mov	r1, r7
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	47c0      	blx	r8
 8016ffc:	3001      	adds	r0, #1
 8016ffe:	d020      	beq.n	8017042 <_printf_common+0xb2>
 8017000:	6823      	ldr	r3, [r4, #0]
 8017002:	68e5      	ldr	r5, [r4, #12]
 8017004:	f8d9 2000 	ldr.w	r2, [r9]
 8017008:	f003 0306 	and.w	r3, r3, #6
 801700c:	2b04      	cmp	r3, #4
 801700e:	bf08      	it	eq
 8017010:	1aad      	subeq	r5, r5, r2
 8017012:	68a3      	ldr	r3, [r4, #8]
 8017014:	6922      	ldr	r2, [r4, #16]
 8017016:	bf0c      	ite	eq
 8017018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801701c:	2500      	movne	r5, #0
 801701e:	4293      	cmp	r3, r2
 8017020:	bfc4      	itt	gt
 8017022:	1a9b      	subgt	r3, r3, r2
 8017024:	18ed      	addgt	r5, r5, r3
 8017026:	f04f 0900 	mov.w	r9, #0
 801702a:	341a      	adds	r4, #26
 801702c:	454d      	cmp	r5, r9
 801702e:	d11a      	bne.n	8017066 <_printf_common+0xd6>
 8017030:	2000      	movs	r0, #0
 8017032:	e008      	b.n	8017046 <_printf_common+0xb6>
 8017034:	2301      	movs	r3, #1
 8017036:	4652      	mov	r2, sl
 8017038:	4639      	mov	r1, r7
 801703a:	4630      	mov	r0, r6
 801703c:	47c0      	blx	r8
 801703e:	3001      	adds	r0, #1
 8017040:	d103      	bne.n	801704a <_printf_common+0xba>
 8017042:	f04f 30ff 	mov.w	r0, #4294967295
 8017046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801704a:	3501      	adds	r5, #1
 801704c:	e7c3      	b.n	8016fd6 <_printf_common+0x46>
 801704e:	18e1      	adds	r1, r4, r3
 8017050:	1c5a      	adds	r2, r3, #1
 8017052:	2030      	movs	r0, #48	; 0x30
 8017054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017058:	4422      	add	r2, r4
 801705a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801705e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017062:	3302      	adds	r3, #2
 8017064:	e7c5      	b.n	8016ff2 <_printf_common+0x62>
 8017066:	2301      	movs	r3, #1
 8017068:	4622      	mov	r2, r4
 801706a:	4639      	mov	r1, r7
 801706c:	4630      	mov	r0, r6
 801706e:	47c0      	blx	r8
 8017070:	3001      	adds	r0, #1
 8017072:	d0e6      	beq.n	8017042 <_printf_common+0xb2>
 8017074:	f109 0901 	add.w	r9, r9, #1
 8017078:	e7d8      	b.n	801702c <_printf_common+0x9c>
	...

0801707c <_printf_i>:
 801707c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017080:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017084:	460c      	mov	r4, r1
 8017086:	7e09      	ldrb	r1, [r1, #24]
 8017088:	b085      	sub	sp, #20
 801708a:	296e      	cmp	r1, #110	; 0x6e
 801708c:	4617      	mov	r7, r2
 801708e:	4606      	mov	r6, r0
 8017090:	4698      	mov	r8, r3
 8017092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017094:	f000 80b3 	beq.w	80171fe <_printf_i+0x182>
 8017098:	d822      	bhi.n	80170e0 <_printf_i+0x64>
 801709a:	2963      	cmp	r1, #99	; 0x63
 801709c:	d036      	beq.n	801710c <_printf_i+0x90>
 801709e:	d80a      	bhi.n	80170b6 <_printf_i+0x3a>
 80170a0:	2900      	cmp	r1, #0
 80170a2:	f000 80b9 	beq.w	8017218 <_printf_i+0x19c>
 80170a6:	2958      	cmp	r1, #88	; 0x58
 80170a8:	f000 8083 	beq.w	80171b2 <_printf_i+0x136>
 80170ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80170b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80170b4:	e032      	b.n	801711c <_printf_i+0xa0>
 80170b6:	2964      	cmp	r1, #100	; 0x64
 80170b8:	d001      	beq.n	80170be <_printf_i+0x42>
 80170ba:	2969      	cmp	r1, #105	; 0x69
 80170bc:	d1f6      	bne.n	80170ac <_printf_i+0x30>
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	6813      	ldr	r3, [r2, #0]
 80170c2:	0605      	lsls	r5, r0, #24
 80170c4:	f103 0104 	add.w	r1, r3, #4
 80170c8:	d52a      	bpl.n	8017120 <_printf_i+0xa4>
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	6011      	str	r1, [r2, #0]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	da03      	bge.n	80170da <_printf_i+0x5e>
 80170d2:	222d      	movs	r2, #45	; 0x2d
 80170d4:	425b      	negs	r3, r3
 80170d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80170da:	486f      	ldr	r0, [pc, #444]	; (8017298 <_printf_i+0x21c>)
 80170dc:	220a      	movs	r2, #10
 80170de:	e039      	b.n	8017154 <_printf_i+0xd8>
 80170e0:	2973      	cmp	r1, #115	; 0x73
 80170e2:	f000 809d 	beq.w	8017220 <_printf_i+0x1a4>
 80170e6:	d808      	bhi.n	80170fa <_printf_i+0x7e>
 80170e8:	296f      	cmp	r1, #111	; 0x6f
 80170ea:	d020      	beq.n	801712e <_printf_i+0xb2>
 80170ec:	2970      	cmp	r1, #112	; 0x70
 80170ee:	d1dd      	bne.n	80170ac <_printf_i+0x30>
 80170f0:	6823      	ldr	r3, [r4, #0]
 80170f2:	f043 0320 	orr.w	r3, r3, #32
 80170f6:	6023      	str	r3, [r4, #0]
 80170f8:	e003      	b.n	8017102 <_printf_i+0x86>
 80170fa:	2975      	cmp	r1, #117	; 0x75
 80170fc:	d017      	beq.n	801712e <_printf_i+0xb2>
 80170fe:	2978      	cmp	r1, #120	; 0x78
 8017100:	d1d4      	bne.n	80170ac <_printf_i+0x30>
 8017102:	2378      	movs	r3, #120	; 0x78
 8017104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017108:	4864      	ldr	r0, [pc, #400]	; (801729c <_printf_i+0x220>)
 801710a:	e055      	b.n	80171b8 <_printf_i+0x13c>
 801710c:	6813      	ldr	r3, [r2, #0]
 801710e:	1d19      	adds	r1, r3, #4
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	6011      	str	r1, [r2, #0]
 8017114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801711c:	2301      	movs	r3, #1
 801711e:	e08c      	b.n	801723a <_printf_i+0x1be>
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	6011      	str	r1, [r2, #0]
 8017124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017128:	bf18      	it	ne
 801712a:	b21b      	sxthne	r3, r3
 801712c:	e7cf      	b.n	80170ce <_printf_i+0x52>
 801712e:	6813      	ldr	r3, [r2, #0]
 8017130:	6825      	ldr	r5, [r4, #0]
 8017132:	1d18      	adds	r0, r3, #4
 8017134:	6010      	str	r0, [r2, #0]
 8017136:	0628      	lsls	r0, r5, #24
 8017138:	d501      	bpl.n	801713e <_printf_i+0xc2>
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	e002      	b.n	8017144 <_printf_i+0xc8>
 801713e:	0668      	lsls	r0, r5, #25
 8017140:	d5fb      	bpl.n	801713a <_printf_i+0xbe>
 8017142:	881b      	ldrh	r3, [r3, #0]
 8017144:	4854      	ldr	r0, [pc, #336]	; (8017298 <_printf_i+0x21c>)
 8017146:	296f      	cmp	r1, #111	; 0x6f
 8017148:	bf14      	ite	ne
 801714a:	220a      	movne	r2, #10
 801714c:	2208      	moveq	r2, #8
 801714e:	2100      	movs	r1, #0
 8017150:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017154:	6865      	ldr	r5, [r4, #4]
 8017156:	60a5      	str	r5, [r4, #8]
 8017158:	2d00      	cmp	r5, #0
 801715a:	f2c0 8095 	blt.w	8017288 <_printf_i+0x20c>
 801715e:	6821      	ldr	r1, [r4, #0]
 8017160:	f021 0104 	bic.w	r1, r1, #4
 8017164:	6021      	str	r1, [r4, #0]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d13d      	bne.n	80171e6 <_printf_i+0x16a>
 801716a:	2d00      	cmp	r5, #0
 801716c:	f040 808e 	bne.w	801728c <_printf_i+0x210>
 8017170:	4665      	mov	r5, ip
 8017172:	2a08      	cmp	r2, #8
 8017174:	d10b      	bne.n	801718e <_printf_i+0x112>
 8017176:	6823      	ldr	r3, [r4, #0]
 8017178:	07db      	lsls	r3, r3, #31
 801717a:	d508      	bpl.n	801718e <_printf_i+0x112>
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	6862      	ldr	r2, [r4, #4]
 8017180:	429a      	cmp	r2, r3
 8017182:	bfde      	ittt	le
 8017184:	2330      	movle	r3, #48	; 0x30
 8017186:	f805 3c01 	strble.w	r3, [r5, #-1]
 801718a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801718e:	ebac 0305 	sub.w	r3, ip, r5
 8017192:	6123      	str	r3, [r4, #16]
 8017194:	f8cd 8000 	str.w	r8, [sp]
 8017198:	463b      	mov	r3, r7
 801719a:	aa03      	add	r2, sp, #12
 801719c:	4621      	mov	r1, r4
 801719e:	4630      	mov	r0, r6
 80171a0:	f7ff fef6 	bl	8016f90 <_printf_common>
 80171a4:	3001      	adds	r0, #1
 80171a6:	d14d      	bne.n	8017244 <_printf_i+0x1c8>
 80171a8:	f04f 30ff 	mov.w	r0, #4294967295
 80171ac:	b005      	add	sp, #20
 80171ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171b2:	4839      	ldr	r0, [pc, #228]	; (8017298 <_printf_i+0x21c>)
 80171b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80171b8:	6813      	ldr	r3, [r2, #0]
 80171ba:	6821      	ldr	r1, [r4, #0]
 80171bc:	1d1d      	adds	r5, r3, #4
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	6015      	str	r5, [r2, #0]
 80171c2:	060a      	lsls	r2, r1, #24
 80171c4:	d50b      	bpl.n	80171de <_printf_i+0x162>
 80171c6:	07ca      	lsls	r2, r1, #31
 80171c8:	bf44      	itt	mi
 80171ca:	f041 0120 	orrmi.w	r1, r1, #32
 80171ce:	6021      	strmi	r1, [r4, #0]
 80171d0:	b91b      	cbnz	r3, 80171da <_printf_i+0x15e>
 80171d2:	6822      	ldr	r2, [r4, #0]
 80171d4:	f022 0220 	bic.w	r2, r2, #32
 80171d8:	6022      	str	r2, [r4, #0]
 80171da:	2210      	movs	r2, #16
 80171dc:	e7b7      	b.n	801714e <_printf_i+0xd2>
 80171de:	064d      	lsls	r5, r1, #25
 80171e0:	bf48      	it	mi
 80171e2:	b29b      	uxthmi	r3, r3
 80171e4:	e7ef      	b.n	80171c6 <_printf_i+0x14a>
 80171e6:	4665      	mov	r5, ip
 80171e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80171ec:	fb02 3311 	mls	r3, r2, r1, r3
 80171f0:	5cc3      	ldrb	r3, [r0, r3]
 80171f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80171f6:	460b      	mov	r3, r1
 80171f8:	2900      	cmp	r1, #0
 80171fa:	d1f5      	bne.n	80171e8 <_printf_i+0x16c>
 80171fc:	e7b9      	b.n	8017172 <_printf_i+0xf6>
 80171fe:	6813      	ldr	r3, [r2, #0]
 8017200:	6825      	ldr	r5, [r4, #0]
 8017202:	6961      	ldr	r1, [r4, #20]
 8017204:	1d18      	adds	r0, r3, #4
 8017206:	6010      	str	r0, [r2, #0]
 8017208:	0628      	lsls	r0, r5, #24
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	d501      	bpl.n	8017212 <_printf_i+0x196>
 801720e:	6019      	str	r1, [r3, #0]
 8017210:	e002      	b.n	8017218 <_printf_i+0x19c>
 8017212:	066a      	lsls	r2, r5, #25
 8017214:	d5fb      	bpl.n	801720e <_printf_i+0x192>
 8017216:	8019      	strh	r1, [r3, #0]
 8017218:	2300      	movs	r3, #0
 801721a:	6123      	str	r3, [r4, #16]
 801721c:	4665      	mov	r5, ip
 801721e:	e7b9      	b.n	8017194 <_printf_i+0x118>
 8017220:	6813      	ldr	r3, [r2, #0]
 8017222:	1d19      	adds	r1, r3, #4
 8017224:	6011      	str	r1, [r2, #0]
 8017226:	681d      	ldr	r5, [r3, #0]
 8017228:	6862      	ldr	r2, [r4, #4]
 801722a:	2100      	movs	r1, #0
 801722c:	4628      	mov	r0, r5
 801722e:	f7e8 ffef 	bl	8000210 <memchr>
 8017232:	b108      	cbz	r0, 8017238 <_printf_i+0x1bc>
 8017234:	1b40      	subs	r0, r0, r5
 8017236:	6060      	str	r0, [r4, #4]
 8017238:	6863      	ldr	r3, [r4, #4]
 801723a:	6123      	str	r3, [r4, #16]
 801723c:	2300      	movs	r3, #0
 801723e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017242:	e7a7      	b.n	8017194 <_printf_i+0x118>
 8017244:	6923      	ldr	r3, [r4, #16]
 8017246:	462a      	mov	r2, r5
 8017248:	4639      	mov	r1, r7
 801724a:	4630      	mov	r0, r6
 801724c:	47c0      	blx	r8
 801724e:	3001      	adds	r0, #1
 8017250:	d0aa      	beq.n	80171a8 <_printf_i+0x12c>
 8017252:	6823      	ldr	r3, [r4, #0]
 8017254:	079b      	lsls	r3, r3, #30
 8017256:	d413      	bmi.n	8017280 <_printf_i+0x204>
 8017258:	68e0      	ldr	r0, [r4, #12]
 801725a:	9b03      	ldr	r3, [sp, #12]
 801725c:	4298      	cmp	r0, r3
 801725e:	bfb8      	it	lt
 8017260:	4618      	movlt	r0, r3
 8017262:	e7a3      	b.n	80171ac <_printf_i+0x130>
 8017264:	2301      	movs	r3, #1
 8017266:	464a      	mov	r2, r9
 8017268:	4639      	mov	r1, r7
 801726a:	4630      	mov	r0, r6
 801726c:	47c0      	blx	r8
 801726e:	3001      	adds	r0, #1
 8017270:	d09a      	beq.n	80171a8 <_printf_i+0x12c>
 8017272:	3501      	adds	r5, #1
 8017274:	68e3      	ldr	r3, [r4, #12]
 8017276:	9a03      	ldr	r2, [sp, #12]
 8017278:	1a9b      	subs	r3, r3, r2
 801727a:	42ab      	cmp	r3, r5
 801727c:	dcf2      	bgt.n	8017264 <_printf_i+0x1e8>
 801727e:	e7eb      	b.n	8017258 <_printf_i+0x1dc>
 8017280:	2500      	movs	r5, #0
 8017282:	f104 0919 	add.w	r9, r4, #25
 8017286:	e7f5      	b.n	8017274 <_printf_i+0x1f8>
 8017288:	2b00      	cmp	r3, #0
 801728a:	d1ac      	bne.n	80171e6 <_printf_i+0x16a>
 801728c:	7803      	ldrb	r3, [r0, #0]
 801728e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017292:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017296:	e76c      	b.n	8017172 <_printf_i+0xf6>
 8017298:	0801a9e5 	.word	0x0801a9e5
 801729c:	0801a9f6 	.word	0x0801a9f6

080172a0 <__sread>:
 80172a0:	b510      	push	{r4, lr}
 80172a2:	460c      	mov	r4, r1
 80172a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a8:	f000 fa86 	bl	80177b8 <_read_r>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	bfab      	itete	ge
 80172b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80172b2:	89a3      	ldrhlt	r3, [r4, #12]
 80172b4:	181b      	addge	r3, r3, r0
 80172b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80172ba:	bfac      	ite	ge
 80172bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80172be:	81a3      	strhlt	r3, [r4, #12]
 80172c0:	bd10      	pop	{r4, pc}

080172c2 <__swrite>:
 80172c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c6:	461f      	mov	r7, r3
 80172c8:	898b      	ldrh	r3, [r1, #12]
 80172ca:	05db      	lsls	r3, r3, #23
 80172cc:	4605      	mov	r5, r0
 80172ce:	460c      	mov	r4, r1
 80172d0:	4616      	mov	r6, r2
 80172d2:	d505      	bpl.n	80172e0 <__swrite+0x1e>
 80172d4:	2302      	movs	r3, #2
 80172d6:	2200      	movs	r2, #0
 80172d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172dc:	f000 f9b6 	bl	801764c <_lseek_r>
 80172e0:	89a3      	ldrh	r3, [r4, #12]
 80172e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172ea:	81a3      	strh	r3, [r4, #12]
 80172ec:	4632      	mov	r2, r6
 80172ee:	463b      	mov	r3, r7
 80172f0:	4628      	mov	r0, r5
 80172f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f6:	f000 b869 	b.w	80173cc <_write_r>

080172fa <__sseek>:
 80172fa:	b510      	push	{r4, lr}
 80172fc:	460c      	mov	r4, r1
 80172fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017302:	f000 f9a3 	bl	801764c <_lseek_r>
 8017306:	1c43      	adds	r3, r0, #1
 8017308:	89a3      	ldrh	r3, [r4, #12]
 801730a:	bf15      	itete	ne
 801730c:	6560      	strne	r0, [r4, #84]	; 0x54
 801730e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017316:	81a3      	strheq	r3, [r4, #12]
 8017318:	bf18      	it	ne
 801731a:	81a3      	strhne	r3, [r4, #12]
 801731c:	bd10      	pop	{r4, pc}

0801731e <__sclose>:
 801731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017322:	f000 b8d3 	b.w	80174cc <_close_r>
	...

08017328 <__swbuf_r>:
 8017328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732a:	460e      	mov	r6, r1
 801732c:	4614      	mov	r4, r2
 801732e:	4605      	mov	r5, r0
 8017330:	b118      	cbz	r0, 801733a <__swbuf_r+0x12>
 8017332:	6983      	ldr	r3, [r0, #24]
 8017334:	b90b      	cbnz	r3, 801733a <__swbuf_r+0x12>
 8017336:	f7ff fb0d 	bl	8016954 <__sinit>
 801733a:	4b21      	ldr	r3, [pc, #132]	; (80173c0 <__swbuf_r+0x98>)
 801733c:	429c      	cmp	r4, r3
 801733e:	d12a      	bne.n	8017396 <__swbuf_r+0x6e>
 8017340:	686c      	ldr	r4, [r5, #4]
 8017342:	69a3      	ldr	r3, [r4, #24]
 8017344:	60a3      	str	r3, [r4, #8]
 8017346:	89a3      	ldrh	r3, [r4, #12]
 8017348:	071a      	lsls	r2, r3, #28
 801734a:	d52e      	bpl.n	80173aa <__swbuf_r+0x82>
 801734c:	6923      	ldr	r3, [r4, #16]
 801734e:	b363      	cbz	r3, 80173aa <__swbuf_r+0x82>
 8017350:	6923      	ldr	r3, [r4, #16]
 8017352:	6820      	ldr	r0, [r4, #0]
 8017354:	1ac0      	subs	r0, r0, r3
 8017356:	6963      	ldr	r3, [r4, #20]
 8017358:	b2f6      	uxtb	r6, r6
 801735a:	4283      	cmp	r3, r0
 801735c:	4637      	mov	r7, r6
 801735e:	dc04      	bgt.n	801736a <__swbuf_r+0x42>
 8017360:	4621      	mov	r1, r4
 8017362:	4628      	mov	r0, r5
 8017364:	f000 f948 	bl	80175f8 <_fflush_r>
 8017368:	bb28      	cbnz	r0, 80173b6 <__swbuf_r+0x8e>
 801736a:	68a3      	ldr	r3, [r4, #8]
 801736c:	3b01      	subs	r3, #1
 801736e:	60a3      	str	r3, [r4, #8]
 8017370:	6823      	ldr	r3, [r4, #0]
 8017372:	1c5a      	adds	r2, r3, #1
 8017374:	6022      	str	r2, [r4, #0]
 8017376:	701e      	strb	r6, [r3, #0]
 8017378:	6963      	ldr	r3, [r4, #20]
 801737a:	3001      	adds	r0, #1
 801737c:	4283      	cmp	r3, r0
 801737e:	d004      	beq.n	801738a <__swbuf_r+0x62>
 8017380:	89a3      	ldrh	r3, [r4, #12]
 8017382:	07db      	lsls	r3, r3, #31
 8017384:	d519      	bpl.n	80173ba <__swbuf_r+0x92>
 8017386:	2e0a      	cmp	r6, #10
 8017388:	d117      	bne.n	80173ba <__swbuf_r+0x92>
 801738a:	4621      	mov	r1, r4
 801738c:	4628      	mov	r0, r5
 801738e:	f000 f933 	bl	80175f8 <_fflush_r>
 8017392:	b190      	cbz	r0, 80173ba <__swbuf_r+0x92>
 8017394:	e00f      	b.n	80173b6 <__swbuf_r+0x8e>
 8017396:	4b0b      	ldr	r3, [pc, #44]	; (80173c4 <__swbuf_r+0x9c>)
 8017398:	429c      	cmp	r4, r3
 801739a:	d101      	bne.n	80173a0 <__swbuf_r+0x78>
 801739c:	68ac      	ldr	r4, [r5, #8]
 801739e:	e7d0      	b.n	8017342 <__swbuf_r+0x1a>
 80173a0:	4b09      	ldr	r3, [pc, #36]	; (80173c8 <__swbuf_r+0xa0>)
 80173a2:	429c      	cmp	r4, r3
 80173a4:	bf08      	it	eq
 80173a6:	68ec      	ldreq	r4, [r5, #12]
 80173a8:	e7cb      	b.n	8017342 <__swbuf_r+0x1a>
 80173aa:	4621      	mov	r1, r4
 80173ac:	4628      	mov	r0, r5
 80173ae:	f000 f81f 	bl	80173f0 <__swsetup_r>
 80173b2:	2800      	cmp	r0, #0
 80173b4:	d0cc      	beq.n	8017350 <__swbuf_r+0x28>
 80173b6:	f04f 37ff 	mov.w	r7, #4294967295
 80173ba:	4638      	mov	r0, r7
 80173bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173be:	bf00      	nop
 80173c0:	0801a994 	.word	0x0801a994
 80173c4:	0801a9b4 	.word	0x0801a9b4
 80173c8:	0801a974 	.word	0x0801a974

080173cc <_write_r>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4c07      	ldr	r4, [pc, #28]	; (80173ec <_write_r+0x20>)
 80173d0:	4605      	mov	r5, r0
 80173d2:	4608      	mov	r0, r1
 80173d4:	4611      	mov	r1, r2
 80173d6:	2200      	movs	r2, #0
 80173d8:	6022      	str	r2, [r4, #0]
 80173da:	461a      	mov	r2, r3
 80173dc:	f7ec f9f7 	bl	80037ce <_write>
 80173e0:	1c43      	adds	r3, r0, #1
 80173e2:	d102      	bne.n	80173ea <_write_r+0x1e>
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	b103      	cbz	r3, 80173ea <_write_r+0x1e>
 80173e8:	602b      	str	r3, [r5, #0]
 80173ea:	bd38      	pop	{r3, r4, r5, pc}
 80173ec:	2001fd2c 	.word	0x2001fd2c

080173f0 <__swsetup_r>:
 80173f0:	4b32      	ldr	r3, [pc, #200]	; (80174bc <__swsetup_r+0xcc>)
 80173f2:	b570      	push	{r4, r5, r6, lr}
 80173f4:	681d      	ldr	r5, [r3, #0]
 80173f6:	4606      	mov	r6, r0
 80173f8:	460c      	mov	r4, r1
 80173fa:	b125      	cbz	r5, 8017406 <__swsetup_r+0x16>
 80173fc:	69ab      	ldr	r3, [r5, #24]
 80173fe:	b913      	cbnz	r3, 8017406 <__swsetup_r+0x16>
 8017400:	4628      	mov	r0, r5
 8017402:	f7ff faa7 	bl	8016954 <__sinit>
 8017406:	4b2e      	ldr	r3, [pc, #184]	; (80174c0 <__swsetup_r+0xd0>)
 8017408:	429c      	cmp	r4, r3
 801740a:	d10f      	bne.n	801742c <__swsetup_r+0x3c>
 801740c:	686c      	ldr	r4, [r5, #4]
 801740e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017412:	b29a      	uxth	r2, r3
 8017414:	0715      	lsls	r5, r2, #28
 8017416:	d42c      	bmi.n	8017472 <__swsetup_r+0x82>
 8017418:	06d0      	lsls	r0, r2, #27
 801741a:	d411      	bmi.n	8017440 <__swsetup_r+0x50>
 801741c:	2209      	movs	r2, #9
 801741e:	6032      	str	r2, [r6, #0]
 8017420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017424:	81a3      	strh	r3, [r4, #12]
 8017426:	f04f 30ff 	mov.w	r0, #4294967295
 801742a:	e03e      	b.n	80174aa <__swsetup_r+0xba>
 801742c:	4b25      	ldr	r3, [pc, #148]	; (80174c4 <__swsetup_r+0xd4>)
 801742e:	429c      	cmp	r4, r3
 8017430:	d101      	bne.n	8017436 <__swsetup_r+0x46>
 8017432:	68ac      	ldr	r4, [r5, #8]
 8017434:	e7eb      	b.n	801740e <__swsetup_r+0x1e>
 8017436:	4b24      	ldr	r3, [pc, #144]	; (80174c8 <__swsetup_r+0xd8>)
 8017438:	429c      	cmp	r4, r3
 801743a:	bf08      	it	eq
 801743c:	68ec      	ldreq	r4, [r5, #12]
 801743e:	e7e6      	b.n	801740e <__swsetup_r+0x1e>
 8017440:	0751      	lsls	r1, r2, #29
 8017442:	d512      	bpl.n	801746a <__swsetup_r+0x7a>
 8017444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017446:	b141      	cbz	r1, 801745a <__swsetup_r+0x6a>
 8017448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801744c:	4299      	cmp	r1, r3
 801744e:	d002      	beq.n	8017456 <__swsetup_r+0x66>
 8017450:	4630      	mov	r0, r6
 8017452:	f7ff f94f 	bl	80166f4 <_free_r>
 8017456:	2300      	movs	r3, #0
 8017458:	6363      	str	r3, [r4, #52]	; 0x34
 801745a:	89a3      	ldrh	r3, [r4, #12]
 801745c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017460:	81a3      	strh	r3, [r4, #12]
 8017462:	2300      	movs	r3, #0
 8017464:	6063      	str	r3, [r4, #4]
 8017466:	6923      	ldr	r3, [r4, #16]
 8017468:	6023      	str	r3, [r4, #0]
 801746a:	89a3      	ldrh	r3, [r4, #12]
 801746c:	f043 0308 	orr.w	r3, r3, #8
 8017470:	81a3      	strh	r3, [r4, #12]
 8017472:	6923      	ldr	r3, [r4, #16]
 8017474:	b94b      	cbnz	r3, 801748a <__swsetup_r+0x9a>
 8017476:	89a3      	ldrh	r3, [r4, #12]
 8017478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801747c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017480:	d003      	beq.n	801748a <__swsetup_r+0x9a>
 8017482:	4621      	mov	r1, r4
 8017484:	4630      	mov	r0, r6
 8017486:	f000 f917 	bl	80176b8 <__smakebuf_r>
 801748a:	89a2      	ldrh	r2, [r4, #12]
 801748c:	f012 0301 	ands.w	r3, r2, #1
 8017490:	d00c      	beq.n	80174ac <__swsetup_r+0xbc>
 8017492:	2300      	movs	r3, #0
 8017494:	60a3      	str	r3, [r4, #8]
 8017496:	6963      	ldr	r3, [r4, #20]
 8017498:	425b      	negs	r3, r3
 801749a:	61a3      	str	r3, [r4, #24]
 801749c:	6923      	ldr	r3, [r4, #16]
 801749e:	b953      	cbnz	r3, 80174b6 <__swsetup_r+0xc6>
 80174a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80174a8:	d1ba      	bne.n	8017420 <__swsetup_r+0x30>
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	0792      	lsls	r2, r2, #30
 80174ae:	bf58      	it	pl
 80174b0:	6963      	ldrpl	r3, [r4, #20]
 80174b2:	60a3      	str	r3, [r4, #8]
 80174b4:	e7f2      	b.n	801749c <__swsetup_r+0xac>
 80174b6:	2000      	movs	r0, #0
 80174b8:	e7f7      	b.n	80174aa <__swsetup_r+0xba>
 80174ba:	bf00      	nop
 80174bc:	20000080 	.word	0x20000080
 80174c0:	0801a994 	.word	0x0801a994
 80174c4:	0801a9b4 	.word	0x0801a9b4
 80174c8:	0801a974 	.word	0x0801a974

080174cc <_close_r>:
 80174cc:	b538      	push	{r3, r4, r5, lr}
 80174ce:	4c06      	ldr	r4, [pc, #24]	; (80174e8 <_close_r+0x1c>)
 80174d0:	2300      	movs	r3, #0
 80174d2:	4605      	mov	r5, r0
 80174d4:	4608      	mov	r0, r1
 80174d6:	6023      	str	r3, [r4, #0]
 80174d8:	f7ec f995 	bl	8003806 <_close>
 80174dc:	1c43      	adds	r3, r0, #1
 80174de:	d102      	bne.n	80174e6 <_close_r+0x1a>
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	b103      	cbz	r3, 80174e6 <_close_r+0x1a>
 80174e4:	602b      	str	r3, [r5, #0]
 80174e6:	bd38      	pop	{r3, r4, r5, pc}
 80174e8:	2001fd2c 	.word	0x2001fd2c

080174ec <__sflush_r>:
 80174ec:	898a      	ldrh	r2, [r1, #12]
 80174ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f2:	4605      	mov	r5, r0
 80174f4:	0710      	lsls	r0, r2, #28
 80174f6:	460c      	mov	r4, r1
 80174f8:	d458      	bmi.n	80175ac <__sflush_r+0xc0>
 80174fa:	684b      	ldr	r3, [r1, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	dc05      	bgt.n	801750c <__sflush_r+0x20>
 8017500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017502:	2b00      	cmp	r3, #0
 8017504:	dc02      	bgt.n	801750c <__sflush_r+0x20>
 8017506:	2000      	movs	r0, #0
 8017508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801750e:	2e00      	cmp	r6, #0
 8017510:	d0f9      	beq.n	8017506 <__sflush_r+0x1a>
 8017512:	2300      	movs	r3, #0
 8017514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017518:	682f      	ldr	r7, [r5, #0]
 801751a:	6a21      	ldr	r1, [r4, #32]
 801751c:	602b      	str	r3, [r5, #0]
 801751e:	d032      	beq.n	8017586 <__sflush_r+0x9a>
 8017520:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017522:	89a3      	ldrh	r3, [r4, #12]
 8017524:	075a      	lsls	r2, r3, #29
 8017526:	d505      	bpl.n	8017534 <__sflush_r+0x48>
 8017528:	6863      	ldr	r3, [r4, #4]
 801752a:	1ac0      	subs	r0, r0, r3
 801752c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801752e:	b10b      	cbz	r3, 8017534 <__sflush_r+0x48>
 8017530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017532:	1ac0      	subs	r0, r0, r3
 8017534:	2300      	movs	r3, #0
 8017536:	4602      	mov	r2, r0
 8017538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801753a:	6a21      	ldr	r1, [r4, #32]
 801753c:	4628      	mov	r0, r5
 801753e:	47b0      	blx	r6
 8017540:	1c43      	adds	r3, r0, #1
 8017542:	89a3      	ldrh	r3, [r4, #12]
 8017544:	d106      	bne.n	8017554 <__sflush_r+0x68>
 8017546:	6829      	ldr	r1, [r5, #0]
 8017548:	291d      	cmp	r1, #29
 801754a:	d848      	bhi.n	80175de <__sflush_r+0xf2>
 801754c:	4a29      	ldr	r2, [pc, #164]	; (80175f4 <__sflush_r+0x108>)
 801754e:	40ca      	lsrs	r2, r1
 8017550:	07d6      	lsls	r6, r2, #31
 8017552:	d544      	bpl.n	80175de <__sflush_r+0xf2>
 8017554:	2200      	movs	r2, #0
 8017556:	6062      	str	r2, [r4, #4]
 8017558:	04d9      	lsls	r1, r3, #19
 801755a:	6922      	ldr	r2, [r4, #16]
 801755c:	6022      	str	r2, [r4, #0]
 801755e:	d504      	bpl.n	801756a <__sflush_r+0x7e>
 8017560:	1c42      	adds	r2, r0, #1
 8017562:	d101      	bne.n	8017568 <__sflush_r+0x7c>
 8017564:	682b      	ldr	r3, [r5, #0]
 8017566:	b903      	cbnz	r3, 801756a <__sflush_r+0x7e>
 8017568:	6560      	str	r0, [r4, #84]	; 0x54
 801756a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801756c:	602f      	str	r7, [r5, #0]
 801756e:	2900      	cmp	r1, #0
 8017570:	d0c9      	beq.n	8017506 <__sflush_r+0x1a>
 8017572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017576:	4299      	cmp	r1, r3
 8017578:	d002      	beq.n	8017580 <__sflush_r+0x94>
 801757a:	4628      	mov	r0, r5
 801757c:	f7ff f8ba 	bl	80166f4 <_free_r>
 8017580:	2000      	movs	r0, #0
 8017582:	6360      	str	r0, [r4, #52]	; 0x34
 8017584:	e7c0      	b.n	8017508 <__sflush_r+0x1c>
 8017586:	2301      	movs	r3, #1
 8017588:	4628      	mov	r0, r5
 801758a:	47b0      	blx	r6
 801758c:	1c41      	adds	r1, r0, #1
 801758e:	d1c8      	bne.n	8017522 <__sflush_r+0x36>
 8017590:	682b      	ldr	r3, [r5, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d0c5      	beq.n	8017522 <__sflush_r+0x36>
 8017596:	2b1d      	cmp	r3, #29
 8017598:	d001      	beq.n	801759e <__sflush_r+0xb2>
 801759a:	2b16      	cmp	r3, #22
 801759c:	d101      	bne.n	80175a2 <__sflush_r+0xb6>
 801759e:	602f      	str	r7, [r5, #0]
 80175a0:	e7b1      	b.n	8017506 <__sflush_r+0x1a>
 80175a2:	89a3      	ldrh	r3, [r4, #12]
 80175a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175a8:	81a3      	strh	r3, [r4, #12]
 80175aa:	e7ad      	b.n	8017508 <__sflush_r+0x1c>
 80175ac:	690f      	ldr	r7, [r1, #16]
 80175ae:	2f00      	cmp	r7, #0
 80175b0:	d0a9      	beq.n	8017506 <__sflush_r+0x1a>
 80175b2:	0793      	lsls	r3, r2, #30
 80175b4:	680e      	ldr	r6, [r1, #0]
 80175b6:	bf08      	it	eq
 80175b8:	694b      	ldreq	r3, [r1, #20]
 80175ba:	600f      	str	r7, [r1, #0]
 80175bc:	bf18      	it	ne
 80175be:	2300      	movne	r3, #0
 80175c0:	eba6 0807 	sub.w	r8, r6, r7
 80175c4:	608b      	str	r3, [r1, #8]
 80175c6:	f1b8 0f00 	cmp.w	r8, #0
 80175ca:	dd9c      	ble.n	8017506 <__sflush_r+0x1a>
 80175cc:	4643      	mov	r3, r8
 80175ce:	463a      	mov	r2, r7
 80175d0:	6a21      	ldr	r1, [r4, #32]
 80175d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175d4:	4628      	mov	r0, r5
 80175d6:	47b0      	blx	r6
 80175d8:	2800      	cmp	r0, #0
 80175da:	dc06      	bgt.n	80175ea <__sflush_r+0xfe>
 80175dc:	89a3      	ldrh	r3, [r4, #12]
 80175de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175e2:	81a3      	strh	r3, [r4, #12]
 80175e4:	f04f 30ff 	mov.w	r0, #4294967295
 80175e8:	e78e      	b.n	8017508 <__sflush_r+0x1c>
 80175ea:	4407      	add	r7, r0
 80175ec:	eba8 0800 	sub.w	r8, r8, r0
 80175f0:	e7e9      	b.n	80175c6 <__sflush_r+0xda>
 80175f2:	bf00      	nop
 80175f4:	20400001 	.word	0x20400001

080175f8 <_fflush_r>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	690b      	ldr	r3, [r1, #16]
 80175fc:	4605      	mov	r5, r0
 80175fe:	460c      	mov	r4, r1
 8017600:	b1db      	cbz	r3, 801763a <_fflush_r+0x42>
 8017602:	b118      	cbz	r0, 801760c <_fflush_r+0x14>
 8017604:	6983      	ldr	r3, [r0, #24]
 8017606:	b90b      	cbnz	r3, 801760c <_fflush_r+0x14>
 8017608:	f7ff f9a4 	bl	8016954 <__sinit>
 801760c:	4b0c      	ldr	r3, [pc, #48]	; (8017640 <_fflush_r+0x48>)
 801760e:	429c      	cmp	r4, r3
 8017610:	d109      	bne.n	8017626 <_fflush_r+0x2e>
 8017612:	686c      	ldr	r4, [r5, #4]
 8017614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017618:	b17b      	cbz	r3, 801763a <_fflush_r+0x42>
 801761a:	4621      	mov	r1, r4
 801761c:	4628      	mov	r0, r5
 801761e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017622:	f7ff bf63 	b.w	80174ec <__sflush_r>
 8017626:	4b07      	ldr	r3, [pc, #28]	; (8017644 <_fflush_r+0x4c>)
 8017628:	429c      	cmp	r4, r3
 801762a:	d101      	bne.n	8017630 <_fflush_r+0x38>
 801762c:	68ac      	ldr	r4, [r5, #8]
 801762e:	e7f1      	b.n	8017614 <_fflush_r+0x1c>
 8017630:	4b05      	ldr	r3, [pc, #20]	; (8017648 <_fflush_r+0x50>)
 8017632:	429c      	cmp	r4, r3
 8017634:	bf08      	it	eq
 8017636:	68ec      	ldreq	r4, [r5, #12]
 8017638:	e7ec      	b.n	8017614 <_fflush_r+0x1c>
 801763a:	2000      	movs	r0, #0
 801763c:	bd38      	pop	{r3, r4, r5, pc}
 801763e:	bf00      	nop
 8017640:	0801a994 	.word	0x0801a994
 8017644:	0801a9b4 	.word	0x0801a9b4
 8017648:	0801a974 	.word	0x0801a974

0801764c <_lseek_r>:
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	4c07      	ldr	r4, [pc, #28]	; (801766c <_lseek_r+0x20>)
 8017650:	4605      	mov	r5, r0
 8017652:	4608      	mov	r0, r1
 8017654:	4611      	mov	r1, r2
 8017656:	2200      	movs	r2, #0
 8017658:	6022      	str	r2, [r4, #0]
 801765a:	461a      	mov	r2, r3
 801765c:	f7ec f8fa 	bl	8003854 <_lseek>
 8017660:	1c43      	adds	r3, r0, #1
 8017662:	d102      	bne.n	801766a <_lseek_r+0x1e>
 8017664:	6823      	ldr	r3, [r4, #0]
 8017666:	b103      	cbz	r3, 801766a <_lseek_r+0x1e>
 8017668:	602b      	str	r3, [r5, #0]
 801766a:	bd38      	pop	{r3, r4, r5, pc}
 801766c:	2001fd2c 	.word	0x2001fd2c

08017670 <__swhatbuf_r>:
 8017670:	b570      	push	{r4, r5, r6, lr}
 8017672:	460e      	mov	r6, r1
 8017674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017678:	2900      	cmp	r1, #0
 801767a:	b096      	sub	sp, #88	; 0x58
 801767c:	4614      	mov	r4, r2
 801767e:	461d      	mov	r5, r3
 8017680:	da07      	bge.n	8017692 <__swhatbuf_r+0x22>
 8017682:	2300      	movs	r3, #0
 8017684:	602b      	str	r3, [r5, #0]
 8017686:	89b3      	ldrh	r3, [r6, #12]
 8017688:	061a      	lsls	r2, r3, #24
 801768a:	d410      	bmi.n	80176ae <__swhatbuf_r+0x3e>
 801768c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017690:	e00e      	b.n	80176b0 <__swhatbuf_r+0x40>
 8017692:	466a      	mov	r2, sp
 8017694:	f000 f8a2 	bl	80177dc <_fstat_r>
 8017698:	2800      	cmp	r0, #0
 801769a:	dbf2      	blt.n	8017682 <__swhatbuf_r+0x12>
 801769c:	9a01      	ldr	r2, [sp, #4]
 801769e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80176a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80176a6:	425a      	negs	r2, r3
 80176a8:	415a      	adcs	r2, r3
 80176aa:	602a      	str	r2, [r5, #0]
 80176ac:	e7ee      	b.n	801768c <__swhatbuf_r+0x1c>
 80176ae:	2340      	movs	r3, #64	; 0x40
 80176b0:	2000      	movs	r0, #0
 80176b2:	6023      	str	r3, [r4, #0]
 80176b4:	b016      	add	sp, #88	; 0x58
 80176b6:	bd70      	pop	{r4, r5, r6, pc}

080176b8 <__smakebuf_r>:
 80176b8:	898b      	ldrh	r3, [r1, #12]
 80176ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80176bc:	079d      	lsls	r5, r3, #30
 80176be:	4606      	mov	r6, r0
 80176c0:	460c      	mov	r4, r1
 80176c2:	d507      	bpl.n	80176d4 <__smakebuf_r+0x1c>
 80176c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80176c8:	6023      	str	r3, [r4, #0]
 80176ca:	6123      	str	r3, [r4, #16]
 80176cc:	2301      	movs	r3, #1
 80176ce:	6163      	str	r3, [r4, #20]
 80176d0:	b002      	add	sp, #8
 80176d2:	bd70      	pop	{r4, r5, r6, pc}
 80176d4:	ab01      	add	r3, sp, #4
 80176d6:	466a      	mov	r2, sp
 80176d8:	f7ff ffca 	bl	8017670 <__swhatbuf_r>
 80176dc:	9900      	ldr	r1, [sp, #0]
 80176de:	4605      	mov	r5, r0
 80176e0:	4630      	mov	r0, r6
 80176e2:	f7ff f855 	bl	8016790 <_malloc_r>
 80176e6:	b948      	cbnz	r0, 80176fc <__smakebuf_r+0x44>
 80176e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176ec:	059a      	lsls	r2, r3, #22
 80176ee:	d4ef      	bmi.n	80176d0 <__smakebuf_r+0x18>
 80176f0:	f023 0303 	bic.w	r3, r3, #3
 80176f4:	f043 0302 	orr.w	r3, r3, #2
 80176f8:	81a3      	strh	r3, [r4, #12]
 80176fa:	e7e3      	b.n	80176c4 <__smakebuf_r+0xc>
 80176fc:	4b0d      	ldr	r3, [pc, #52]	; (8017734 <__smakebuf_r+0x7c>)
 80176fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017700:	89a3      	ldrh	r3, [r4, #12]
 8017702:	6020      	str	r0, [r4, #0]
 8017704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017708:	81a3      	strh	r3, [r4, #12]
 801770a:	9b00      	ldr	r3, [sp, #0]
 801770c:	6163      	str	r3, [r4, #20]
 801770e:	9b01      	ldr	r3, [sp, #4]
 8017710:	6120      	str	r0, [r4, #16]
 8017712:	b15b      	cbz	r3, 801772c <__smakebuf_r+0x74>
 8017714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017718:	4630      	mov	r0, r6
 801771a:	f000 f871 	bl	8017800 <_isatty_r>
 801771e:	b128      	cbz	r0, 801772c <__smakebuf_r+0x74>
 8017720:	89a3      	ldrh	r3, [r4, #12]
 8017722:	f023 0303 	bic.w	r3, r3, #3
 8017726:	f043 0301 	orr.w	r3, r3, #1
 801772a:	81a3      	strh	r3, [r4, #12]
 801772c:	89a3      	ldrh	r3, [r4, #12]
 801772e:	431d      	orrs	r5, r3
 8017730:	81a5      	strh	r5, [r4, #12]
 8017732:	e7cd      	b.n	80176d0 <__smakebuf_r+0x18>
 8017734:	0801691d 	.word	0x0801691d

08017738 <memmove>:
 8017738:	4288      	cmp	r0, r1
 801773a:	b510      	push	{r4, lr}
 801773c:	eb01 0302 	add.w	r3, r1, r2
 8017740:	d807      	bhi.n	8017752 <memmove+0x1a>
 8017742:	1e42      	subs	r2, r0, #1
 8017744:	4299      	cmp	r1, r3
 8017746:	d00a      	beq.n	801775e <memmove+0x26>
 8017748:	f811 4b01 	ldrb.w	r4, [r1], #1
 801774c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017750:	e7f8      	b.n	8017744 <memmove+0xc>
 8017752:	4283      	cmp	r3, r0
 8017754:	d9f5      	bls.n	8017742 <memmove+0xa>
 8017756:	1881      	adds	r1, r0, r2
 8017758:	1ad2      	subs	r2, r2, r3
 801775a:	42d3      	cmn	r3, r2
 801775c:	d100      	bne.n	8017760 <memmove+0x28>
 801775e:	bd10      	pop	{r4, pc}
 8017760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017764:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017768:	e7f7      	b.n	801775a <memmove+0x22>

0801776a <_realloc_r>:
 801776a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801776c:	4607      	mov	r7, r0
 801776e:	4614      	mov	r4, r2
 8017770:	460e      	mov	r6, r1
 8017772:	b921      	cbnz	r1, 801777e <_realloc_r+0x14>
 8017774:	4611      	mov	r1, r2
 8017776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801777a:	f7ff b809 	b.w	8016790 <_malloc_r>
 801777e:	b922      	cbnz	r2, 801778a <_realloc_r+0x20>
 8017780:	f7fe ffb8 	bl	80166f4 <_free_r>
 8017784:	4625      	mov	r5, r4
 8017786:	4628      	mov	r0, r5
 8017788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801778a:	f000 f849 	bl	8017820 <_malloc_usable_size_r>
 801778e:	42a0      	cmp	r0, r4
 8017790:	d20f      	bcs.n	80177b2 <_realloc_r+0x48>
 8017792:	4621      	mov	r1, r4
 8017794:	4638      	mov	r0, r7
 8017796:	f7fe fffb 	bl	8016790 <_malloc_r>
 801779a:	4605      	mov	r5, r0
 801779c:	2800      	cmp	r0, #0
 801779e:	d0f2      	beq.n	8017786 <_realloc_r+0x1c>
 80177a0:	4631      	mov	r1, r6
 80177a2:	4622      	mov	r2, r4
 80177a4:	f7fe ff92 	bl	80166cc <memcpy>
 80177a8:	4631      	mov	r1, r6
 80177aa:	4638      	mov	r0, r7
 80177ac:	f7fe ffa2 	bl	80166f4 <_free_r>
 80177b0:	e7e9      	b.n	8017786 <_realloc_r+0x1c>
 80177b2:	4635      	mov	r5, r6
 80177b4:	e7e7      	b.n	8017786 <_realloc_r+0x1c>
	...

080177b8 <_read_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4c07      	ldr	r4, [pc, #28]	; (80177d8 <_read_r+0x20>)
 80177bc:	4605      	mov	r5, r0
 80177be:	4608      	mov	r0, r1
 80177c0:	4611      	mov	r1, r2
 80177c2:	2200      	movs	r2, #0
 80177c4:	6022      	str	r2, [r4, #0]
 80177c6:	461a      	mov	r2, r3
 80177c8:	f7eb ffe4 	bl	8003794 <_read>
 80177cc:	1c43      	adds	r3, r0, #1
 80177ce:	d102      	bne.n	80177d6 <_read_r+0x1e>
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	b103      	cbz	r3, 80177d6 <_read_r+0x1e>
 80177d4:	602b      	str	r3, [r5, #0]
 80177d6:	bd38      	pop	{r3, r4, r5, pc}
 80177d8:	2001fd2c 	.word	0x2001fd2c

080177dc <_fstat_r>:
 80177dc:	b538      	push	{r3, r4, r5, lr}
 80177de:	4c07      	ldr	r4, [pc, #28]	; (80177fc <_fstat_r+0x20>)
 80177e0:	2300      	movs	r3, #0
 80177e2:	4605      	mov	r5, r0
 80177e4:	4608      	mov	r0, r1
 80177e6:	4611      	mov	r1, r2
 80177e8:	6023      	str	r3, [r4, #0]
 80177ea:	f7ec f818 	bl	800381e <_fstat>
 80177ee:	1c43      	adds	r3, r0, #1
 80177f0:	d102      	bne.n	80177f8 <_fstat_r+0x1c>
 80177f2:	6823      	ldr	r3, [r4, #0]
 80177f4:	b103      	cbz	r3, 80177f8 <_fstat_r+0x1c>
 80177f6:	602b      	str	r3, [r5, #0]
 80177f8:	bd38      	pop	{r3, r4, r5, pc}
 80177fa:	bf00      	nop
 80177fc:	2001fd2c 	.word	0x2001fd2c

08017800 <_isatty_r>:
 8017800:	b538      	push	{r3, r4, r5, lr}
 8017802:	4c06      	ldr	r4, [pc, #24]	; (801781c <_isatty_r+0x1c>)
 8017804:	2300      	movs	r3, #0
 8017806:	4605      	mov	r5, r0
 8017808:	4608      	mov	r0, r1
 801780a:	6023      	str	r3, [r4, #0]
 801780c:	f7ec f817 	bl	800383e <_isatty>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	d102      	bne.n	801781a <_isatty_r+0x1a>
 8017814:	6823      	ldr	r3, [r4, #0]
 8017816:	b103      	cbz	r3, 801781a <_isatty_r+0x1a>
 8017818:	602b      	str	r3, [r5, #0]
 801781a:	bd38      	pop	{r3, r4, r5, pc}
 801781c:	2001fd2c 	.word	0x2001fd2c

08017820 <_malloc_usable_size_r>:
 8017820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017824:	1f18      	subs	r0, r3, #4
 8017826:	2b00      	cmp	r3, #0
 8017828:	bfbc      	itt	lt
 801782a:	580b      	ldrlt	r3, [r1, r0]
 801782c:	18c0      	addlt	r0, r0, r3
 801782e:	4770      	bx	lr

08017830 <log10f>:
 8017830:	b510      	push	{r4, lr}
 8017832:	ed2d 8b02 	vpush	{d8}
 8017836:	b08a      	sub	sp, #40	; 0x28
 8017838:	eeb0 8a40 	vmov.f32	s16, s0
 801783c:	f000 f86e 	bl	801791c <__ieee754_log10f>
 8017840:	4b31      	ldr	r3, [pc, #196]	; (8017908 <log10f+0xd8>)
 8017842:	f993 4000 	ldrsb.w	r4, [r3]
 8017846:	1c63      	adds	r3, r4, #1
 8017848:	d059      	beq.n	80178fe <log10f+0xce>
 801784a:	eeb4 8a48 	vcmp.f32	s16, s16
 801784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017852:	d654      	bvs.n	80178fe <log10f+0xce>
 8017854:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785c:	d84f      	bhi.n	80178fe <log10f+0xce>
 801785e:	4b2b      	ldr	r3, [pc, #172]	; (801790c <log10f+0xdc>)
 8017860:	9301      	str	r3, [sp, #4]
 8017862:	ee18 0a10 	vmov	r0, s16
 8017866:	2300      	movs	r3, #0
 8017868:	9308      	str	r3, [sp, #32]
 801786a:	f7e8 fe85 	bl	8000578 <__aeabi_f2d>
 801786e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017876:	b994      	cbnz	r4, 801789e <log10f+0x6e>
 8017878:	4b25      	ldr	r3, [pc, #148]	; (8017910 <log10f+0xe0>)
 801787a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801787e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017886:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801788a:	d025      	beq.n	80178d8 <log10f+0xa8>
 801788c:	2301      	movs	r3, #1
 801788e:	2c02      	cmp	r4, #2
 8017890:	9300      	str	r3, [sp, #0]
 8017892:	d116      	bne.n	80178c2 <log10f+0x92>
 8017894:	f7fe fee0 	bl	8016658 <__errno>
 8017898:	2321      	movs	r3, #33	; 0x21
 801789a:	6003      	str	r3, [r0, #0]
 801789c:	e016      	b.n	80178cc <log10f+0x9c>
 801789e:	4b1d      	ldr	r3, [pc, #116]	; (8017914 <log10f+0xe4>)
 80178a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80178a4:	2200      	movs	r2, #0
 80178a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80178ae:	d1ed      	bne.n	801788c <log10f+0x5c>
 80178b0:	2302      	movs	r3, #2
 80178b2:	429c      	cmp	r4, r3
 80178b4:	9300      	str	r3, [sp, #0]
 80178b6:	d111      	bne.n	80178dc <log10f+0xac>
 80178b8:	f7fe fece 	bl	8016658 <__errno>
 80178bc:	2322      	movs	r3, #34	; 0x22
 80178be:	6003      	str	r3, [r0, #0]
 80178c0:	e011      	b.n	80178e6 <log10f+0xb6>
 80178c2:	4668      	mov	r0, sp
 80178c4:	f000 f880 	bl	80179c8 <matherr>
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d0e3      	beq.n	8017894 <log10f+0x64>
 80178cc:	4812      	ldr	r0, [pc, #72]	; (8017918 <log10f+0xe8>)
 80178ce:	f000 f87f 	bl	80179d0 <nan>
 80178d2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80178d6:	e006      	b.n	80178e6 <log10f+0xb6>
 80178d8:	2302      	movs	r3, #2
 80178da:	9300      	str	r3, [sp, #0]
 80178dc:	4668      	mov	r0, sp
 80178de:	f000 f873 	bl	80179c8 <matherr>
 80178e2:	2800      	cmp	r0, #0
 80178e4:	d0e8      	beq.n	80178b8 <log10f+0x88>
 80178e6:	9b08      	ldr	r3, [sp, #32]
 80178e8:	b11b      	cbz	r3, 80178f2 <log10f+0xc2>
 80178ea:	f7fe feb5 	bl	8016658 <__errno>
 80178ee:	9b08      	ldr	r3, [sp, #32]
 80178f0:	6003      	str	r3, [r0, #0]
 80178f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80178f6:	f7e8 fe97 	bl	8000628 <__aeabi_d2f>
 80178fa:	ee00 0a10 	vmov	s0, r0
 80178fe:	b00a      	add	sp, #40	; 0x28
 8017900:	ecbd 8b02 	vpop	{d8}
 8017904:	bd10      	pop	{r4, pc}
 8017906:	bf00      	nop
 8017908:	200000e4 	.word	0x200000e4
 801790c:	0801aa07 	.word	0x0801aa07
 8017910:	c7efffff 	.word	0xc7efffff
 8017914:	fff00000 	.word	0xfff00000
 8017918:	0801a9d9 	.word	0x0801a9d9

0801791c <__ieee754_log10f>:
 801791c:	b508      	push	{r3, lr}
 801791e:	ee10 2a10 	vmov	r2, s0
 8017922:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017926:	ed2d 8b02 	vpush	{d8}
 801792a:	d108      	bne.n	801793e <__ieee754_log10f+0x22>
 801792c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80179b0 <__ieee754_log10f+0x94>
 8017930:	eddf 7a20 	vldr	s15, [pc, #128]	; 80179b4 <__ieee754_log10f+0x98>
 8017934:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017938:	ecbd 8b02 	vpop	{d8}
 801793c:	bd08      	pop	{r3, pc}
 801793e:	2a00      	cmp	r2, #0
 8017940:	da02      	bge.n	8017948 <__ieee754_log10f+0x2c>
 8017942:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017946:	e7f3      	b.n	8017930 <__ieee754_log10f+0x14>
 8017948:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801794c:	db02      	blt.n	8017954 <__ieee754_log10f+0x38>
 801794e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017952:	e7f1      	b.n	8017938 <__ieee754_log10f+0x1c>
 8017954:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8017958:	bfbf      	itttt	lt
 801795a:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 80179b8 <__ieee754_log10f+0x9c>
 801795e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017962:	f06f 0118 	mvnlt.w	r1, #24
 8017966:	ee17 2a90 	vmovlt	r2, s15
 801796a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801796e:	bfa8      	it	ge
 8017970:	2100      	movge	r1, #0
 8017972:	3b7f      	subs	r3, #127	; 0x7f
 8017974:	440b      	add	r3, r1
 8017976:	0fd9      	lsrs	r1, r3, #31
 8017978:	440b      	add	r3, r1
 801797a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801797e:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8017982:	ee07 3a90 	vmov	s15, r3
 8017986:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 801798a:	ee00 3a10 	vmov	s0, r3
 801798e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017992:	f000 f825 	bl	80179e0 <__ieee754_logf>
 8017996:	eddf 7a09 	vldr	s15, [pc, #36]	; 80179bc <__ieee754_log10f+0xa0>
 801799a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801799e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80179c0 <__ieee754_log10f+0xa4>
 80179a2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80179a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80179c4 <__ieee754_log10f+0xa8>
 80179aa:	eea8 0a27 	vfma.f32	s0, s16, s15
 80179ae:	e7c3      	b.n	8017938 <__ieee754_log10f+0x1c>
 80179b0:	cc000000 	.word	0xcc000000
 80179b4:	00000000 	.word	0x00000000
 80179b8:	4c000000 	.word	0x4c000000
 80179bc:	3ede5bd9 	.word	0x3ede5bd9
 80179c0:	355427db 	.word	0x355427db
 80179c4:	3e9a2080 	.word	0x3e9a2080

080179c8 <matherr>:
 80179c8:	2000      	movs	r0, #0
 80179ca:	4770      	bx	lr
 80179cc:	0000      	movs	r0, r0
	...

080179d0 <nan>:
 80179d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80179d8 <nan+0x8>
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	00000000 	.word	0x00000000
 80179dc:	7ff80000 	.word	0x7ff80000

080179e0 <__ieee754_logf>:
 80179e0:	ee10 3a10 	vmov	r3, s0
 80179e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80179e8:	d106      	bne.n	80179f8 <__ieee754_logf+0x18>
 80179ea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017b80 <__ieee754_logf+0x1a0>
 80179ee:	eddf 7a65 	vldr	s15, [pc, #404]	; 8017b84 <__ieee754_logf+0x1a4>
 80179f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80179f6:	4770      	bx	lr
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	da02      	bge.n	8017a02 <__ieee754_logf+0x22>
 80179fc:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017a00:	e7f5      	b.n	80179ee <__ieee754_logf+0xe>
 8017a02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a06:	db02      	blt.n	8017a0e <__ieee754_logf+0x2e>
 8017a08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a0c:	4770      	bx	lr
 8017a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017a12:	bfbf      	itttt	lt
 8017a14:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8017b88 <__ieee754_logf+0x1a8>
 8017a18:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017a1c:	f06f 0118 	mvnlt.w	r1, #24
 8017a20:	ee17 3a90 	vmovlt	r3, s15
 8017a24:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8017a28:	bfa8      	it	ge
 8017a2a:	2100      	movge	r1, #0
 8017a2c:	3a7f      	subs	r2, #127	; 0x7f
 8017a2e:	440a      	add	r2, r1
 8017a30:	4956      	ldr	r1, [pc, #344]	; (8017b8c <__ieee754_logf+0x1ac>)
 8017a32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a36:	4419      	add	r1, r3
 8017a38:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8017a3c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8017a40:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8017a44:	4319      	orrs	r1, r3
 8017a46:	ee07 1a90 	vmov	s15, r1
 8017a4a:	f103 010f 	add.w	r1, r3, #15
 8017a4e:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8017a52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017a56:	290f      	cmp	r1, #15
 8017a58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017a5c:	dc31      	bgt.n	8017ac2 <__ieee754_logf+0xe2>
 8017a5e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a66:	d10f      	bne.n	8017a88 <__ieee754_logf+0xa8>
 8017a68:	2a00      	cmp	r2, #0
 8017a6a:	f000 8085 	beq.w	8017b78 <__ieee754_logf+0x198>
 8017a6e:	ee07 2a90 	vmov	s15, r2
 8017a72:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8017b90 <__ieee754_logf+0x1b0>
 8017a76:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8017b94 <__ieee754_logf+0x1b4>
 8017a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017a82:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017a86:	4770      	bx	lr
 8017a88:	eddf 7a43 	vldr	s15, [pc, #268]	; 8017b98 <__ieee754_logf+0x1b8>
 8017a8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017a90:	eea0 7a67 	vfms.f32	s14, s0, s15
 8017a94:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017a9c:	b912      	cbnz	r2, 8017aa4 <__ieee754_logf+0xc4>
 8017a9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017aa2:	4770      	bx	lr
 8017aa4:	ee07 2a90 	vmov	s15, r2
 8017aa8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8017b90 <__ieee754_logf+0x1b0>
 8017aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ab0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017ab4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8017ab8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017b94 <__ieee754_logf+0x1b4>
 8017abc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8017ac0:	4770      	bx	lr
 8017ac2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017ac6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017aca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8017b9c <__ieee754_logf+0x1bc>
 8017ace:	eddf 4a34 	vldr	s9, [pc, #208]	; 8017ba0 <__ieee754_logf+0x1c0>
 8017ad2:	4934      	ldr	r1, [pc, #208]	; (8017ba4 <__ieee754_logf+0x1c4>)
 8017ad4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8017ad8:	4419      	add	r1, r3
 8017ada:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8017ade:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017ae2:	430b      	orrs	r3, r1
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	ee07 2a90 	vmov	s15, r2
 8017aea:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017aee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017af2:	ee25 7a05 	vmul.f32	s14, s10, s10
 8017af6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8017ba8 <__ieee754_logf+0x1c8>
 8017afa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017afe:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8017bac <__ieee754_logf+0x1cc>
 8017b02:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017b06:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8017bb0 <__ieee754_logf+0x1d0>
 8017b0a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8017b0e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8017bb4 <__ieee754_logf+0x1d4>
 8017b12:	eee7 4a87 	vfma.f32	s9, s15, s14
 8017b16:	eddf 7a28 	vldr	s15, [pc, #160]	; 8017bb8 <__ieee754_logf+0x1d8>
 8017b1a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8017b1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017b22:	eee5 7a87 	vfma.f32	s15, s11, s14
 8017b26:	dd1c      	ble.n	8017b62 <__ieee754_logf+0x182>
 8017b28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017b2c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017b30:	ee27 7a00 	vmul.f32	s14, s14, s0
 8017b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017b38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b3c:	b922      	cbnz	r2, 8017b48 <__ieee754_logf+0x168>
 8017b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017b46:	4770      	bx	lr
 8017b48:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8017b90 <__ieee754_logf+0x1b0>
 8017b4c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017b58:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8017b94 <__ieee754_logf+0x1b4>
 8017b5c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8017b60:	4770      	bx	lr
 8017b62:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017b66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b6a:	2a00      	cmp	r2, #0
 8017b6c:	d0e9      	beq.n	8017b42 <__ieee754_logf+0x162>
 8017b6e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8017b90 <__ieee754_logf+0x1b0>
 8017b72:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8017b76:	e7ed      	b.n	8017b54 <__ieee754_logf+0x174>
 8017b78:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8017b84 <__ieee754_logf+0x1a4>
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop
 8017b80:	cc000000 	.word	0xcc000000
 8017b84:	00000000 	.word	0x00000000
 8017b88:	4c000000 	.word	0x4c000000
 8017b8c:	004afb20 	.word	0x004afb20
 8017b90:	3717f7d1 	.word	0x3717f7d1
 8017b94:	3f317180 	.word	0x3f317180
 8017b98:	3eaaaaab 	.word	0x3eaaaaab
 8017b9c:	3e1cd04f 	.word	0x3e1cd04f
 8017ba0:	3e178897 	.word	0x3e178897
 8017ba4:	ffcf5c30 	.word	0xffcf5c30
 8017ba8:	3e638e29 	.word	0x3e638e29
 8017bac:	3ecccccd 	.word	0x3ecccccd
 8017bb0:	3e3a3325 	.word	0x3e3a3325
 8017bb4:	3e924925 	.word	0x3e924925
 8017bb8:	3f2aaaab 	.word	0x3f2aaaab

08017bbc <_init>:
 8017bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bbe:	bf00      	nop
 8017bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bc2:	bc08      	pop	{r3}
 8017bc4:	469e      	mov	lr, r3
 8017bc6:	4770      	bx	lr

08017bc8 <_fini>:
 8017bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bca:	bf00      	nop
 8017bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bce:	bc08      	pop	{r3}
 8017bd0:	469e      	mov	lr, r3
 8017bd2:	4770      	bx	lr
