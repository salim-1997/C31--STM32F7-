
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013714  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d08  080138e4  080138e4  000238e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165ec  080165ec  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  080165ec  080165ec  000265ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165f4  080165f4  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165f4  080165f4  000265f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080165f8  080165f8  000265f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080165fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f3dc  200000b0  080166ac  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f48c  080166ac  0003f48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045551  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b51  00000000  00000000  00075631  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003100  00000000  00000000  0007d188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da0  00000000  00000000  00080288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035893  00000000  00000000  00083028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f51a  00000000  00000000  000b88bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00129c09  00000000  00000000  000e7dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002119de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d690  00000000  00000000  00211a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080138cc 	.word	0x080138cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	080138cc 	.word	0x080138cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <StartTask1>:
void BSP_AUDIO_IN_Error_CallBack(void)
{

}
void StartTask1(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {  if(osMutexAcquire(mutexLCD,osWaitForever) == osOK)
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <StartTask1+0x30>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00e fac5 	bl	800eb84 <osMutexAcquire>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f5      	bne.n	80005ec <StartTask1+0x8>
        {
	    printf("\n This is the first task being displayed \n ");
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <StartTask1+0x34>)
 8000602:	f012 fb27 	bl	8012c54 <iprintf>
	    osMutexRelease(mutexLCD);
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <StartTask1+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f00e fb18 	bl	800ec40 <osMutexRelease>
  {  if(osMutexAcquire(mutexLCD,osWaitForever) == osOK)
 8000610:	e7ec      	b.n	80005ec <StartTask1+0x8>
 8000612:	bf00      	nop
 8000614:	20009240 	.word	0x20009240
 8000618:	0801390c 	.word	0x0801390c

0800061c <StartTask2>:
        }
  }

}
void StartTask2(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
   /* Infinite loop */
  for(;;)
  {
	 if(osMutexAcquire(mutexLCD,osWaitForever) == osOK)
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <StartTask2+0x44>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f04f 31ff 	mov.w	r1, #4294967295
 800062c:	4618      	mov	r0, r3
 800062e:	f00e faa9 	bl	800eb84 <osMutexAcquire>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d107      	bne.n	8000648 <StartTask2+0x2c>
	    {

	     printf("\n Hier wird die zweite Task angezeigt \n ");
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <StartTask2+0x48>)
 800063a:	f012 fb0b 	bl	8012c54 <iprintf>
	     osMutexRelease(mutexLCD);
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <StartTask2+0x44>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f00e fafc 	bl	800ec40 <osMutexRelease>
        }
	 for (volatile int i=0; i < 1000000 ; i++);
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <StartTask2+0x38>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <StartTask2+0x4c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	ddf8      	ble.n	800064e <StartTask2+0x32>
	 if(osMutexAcquire(mutexLCD,osWaitForever) == osOK)
 800065c:	e7e2      	b.n	8000624 <StartTask2+0x8>
 800065e:	bf00      	nop
 8000660:	20009240 	.word	0x20009240
 8000664:	08013938 	.word	0x08013938
 8000668:	000f423f 	.word	0x000f423f

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8000670:	4b46      	ldr	r3, [pc, #280]	; (800078c <main+0x120>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a45      	ldr	r2, [pc, #276]	; (800078c <main+0x120>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f003 f9ce 	bl	8003a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f8a4 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f001 f87e 	bl	8001784 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000688:	f000 f95e 	bl	8000948 <MX_ADC3_Init>
  MX_CRC_Init();
 800068c:	f000 f9ae 	bl	80009ec <MX_CRC_Init>
  MX_DCMI_Init();
 8000690:	f000 f9ce 	bl	8000a30 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000694:	f000 fa00 	bl	8000a98 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000698:	f000 fa30 	bl	8000afc <MX_ETH_Init>
  MX_FMC_Init();
 800069c:	f001 f822 	bl	80016e4 <MX_FMC_Init>
  MX_I2C1_Init();
 80006a0:	f000 fa34 	bl	8000b0c <MX_I2C1_Init>
  MX_I2C3_Init();
 80006a4:	f000 fa72 	bl	8000b8c <MX_I2C3_Init>
  MX_LTDC_Init();
 80006a8:	f000 fab0 	bl	8000c0c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006ac:	f000 fb64 	bl	8000d78 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006b0:	f000 fb8e 	bl	8000dd0 <MX_RTC_Init>
  MX_SAI2_Init();
 80006b4:	f000 fc32 	bl	8000f1c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 80006b8:	f000 fcd8 	bl	800106c <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80006bc:	f000 fd06 	bl	80010cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c0:	f000 fdb0 	bl	8001224 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006c4:	f000 fe24 	bl	8001310 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006c8:	f000 fe9a 	bl	8001400 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006cc:	f000 ff10 	bl	80014f0 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006d0:	f000 ff62 	bl	8001598 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 ffa6 	bl	8001624 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006d8:	f000 ffd4 	bl	8001684 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80006dc:	f002 fa8a 	bl	8002bf4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80006e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006e4:	2000      	movs	r0, #0
 80006e6:	f002 fb1d 	bl	8002d24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80006ea:	4829      	ldr	r0, [pc, #164]	; (8000790 <main+0x124>)
 80006ec:	f002 fbdc 	bl	8002ea8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80006f0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80006f4:	f002 fb76 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80006f8:	4825      	ldr	r0, [pc, #148]	; (8000790 <main+0x124>)
 80006fa:	f002 fb8b 	bl	8002e14 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80006fe:	f002 fafd 	bl	8002cfc <BSP_LCD_GetYSize>
 8000702:	4603      	mov	r3, r0
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
 8000708:	2301      	movs	r3, #1
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <main+0x128>)
 800070c:	2000      	movs	r0, #0
 800070e:	f002 fc37 	bl	8002f80 <BSP_LCD_DisplayStringAt>


  LCD_LOG_Init();
 8000712:	f011 ff75 	bl	8012600 <LCD_LOG_Init>
  LCD_LOG_SetHeader("Header");
 8000716:	4820      	ldr	r0, [pc, #128]	; (8000798 <main+0x12c>)
 8000718:	f011 ffbc 	bl	8012694 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter("Footer");
 800071c:	481f      	ldr	r0, [pc, #124]	; (800079c <main+0x130>)
 800071e:	f011 fff5 	bl	801270c <LCD_LOG_SetFooter>
}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000722:	f00e f857 	bl	800e7d4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <main+0x134>)
 8000728:	f00e f992 	bl	800ea50 <osMutexNew>
 800072c:	4602      	mov	r2, r0
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <main+0x138>)
 8000730:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <main+0x138>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <main+0xd2>
	  Error_Handler();
 800073a:	f001 fa23 	bl	8001b84 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800073e:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <main+0x13c>)
 8000740:	2100      	movs	r1, #0
 8000742:	481a      	ldr	r0, [pc, #104]	; (80007ac <main+0x140>)
 8000744:	f00e f8b0 	bl	800e8a8 <osThreadNew>
 8000748:	4602      	mov	r2, r0
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <main+0x144>)
 800074c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  task1Handle = osThreadNew(StartTask1, NULL, &task1_attributes);
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <main+0x148>)
 8000750:	2100      	movs	r1, #0
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <main+0x14c>)
 8000754:	f00e f8a8 	bl	800e8a8 <osThreadNew>
 8000758:	4602      	mov	r2, r0
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <main+0x150>)
 800075c:	601a      	str	r2, [r3, #0]
  if (task1Handle == NULL){
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <main+0x150>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <main+0xfe>
	  Error_Handler();
 8000766:	f001 fa0d 	bl	8001b84 <Error_Handler>
  }
  task2Handle = osThreadNew(StartTask2, NULL, &task2_attributes);
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <main+0x154>)
 800076c:	2100      	movs	r1, #0
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <main+0x158>)
 8000770:	f00e f89a 	bl	800e8a8 <osThreadNew>
 8000774:	4602      	mov	r2, r0
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <main+0x15c>)
 8000778:	601a      	str	r2, [r3, #0]
  if (task2Handle == NULL){
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <main+0x15c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <main+0x11a>
	  Error_Handler();
 8000782:	f001 f9ff 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000786:	f00e f859 	bl	800e83c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078a:	e7fe      	b.n	800078a <main+0x11e>
 800078c:	e0042000 	.word	0xe0042000
 8000790:	ff0000ff 	.word	0xff0000ff
 8000794:	08013964 	.word	0x08013964
 8000798:	08013974 	.word	0x08013974
 800079c:	0801397c 	.word	0x0801397c
 80007a0:	08013a18 	.word	0x08013a18
 80007a4:	20009240 	.word	0x20009240
 80007a8:	080139ac 	.word	0x080139ac
 80007ac:	08001b4d 	.word	0x08001b4d
 80007b0:	2000906c 	.word	0x2000906c
 80007b4:	080139d0 	.word	0x080139d0
 80007b8:	080005e5 	.word	0x080005e5
 80007bc:	2000923c 	.word	0x2000923c
 80007c0:	080139f4 	.word	0x080139f4
 80007c4:	0800061d 	.word	0x0800061d
 80007c8:	2000afec 	.word	0x2000afec

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0b4      	sub	sp, #208	; 0xd0
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f012 f989 	bl	8012af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2284      	movs	r2, #132	; 0x84
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f012 f97a 	bl	8012af2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fe:	f007 f861 	bl	80078c4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b4e      	ldr	r3, [pc, #312]	; (800093c <SystemClock_Config+0x170>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a4d      	ldr	r2, [pc, #308]	; (800093c <SystemClock_Config+0x170>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <SystemClock_Config+0x170>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <SystemClock_Config+0x174>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a48      	ldr	r2, [pc, #288]	; (8000940 <SystemClock_Config+0x174>)
 8000820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	4b46      	ldr	r3, [pc, #280]	; (8000940 <SystemClock_Config+0x174>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000832:	2309      	movs	r3, #9
 8000834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000850:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000854:	2319      	movs	r3, #25
 8000856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800085a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800085e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000868:	2309      	movs	r3, #9
 800086a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000872:	4618      	mov	r0, r3
 8000874:	f007 f948 	bl	8007b08 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800087e:	f001 f981 	bl	8001b84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000882:	f007 f82f 	bl	80078e4 <HAL_PWREx_EnableOverDrive>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800088c:	f001 f97a 	bl	8001b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008b6:	2106      	movs	r1, #6
 80008b8:	4618      	mov	r0, r3
 80008ba:	f007 fbc9 	bl	8008050 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008c4:	f001 f95e 	bl	8001b84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemClock_Config+0x178>)
 80008ca:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008e2:	2305      	movs	r3, #5
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008ea:	2303      	movs	r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000902:	2300      	movs	r3, #0
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000906:	2300      	movs	r3, #0
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800090a:	2300      	movs	r3, #0
 800090c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800090e:	2300      	movs	r3, #0
 8000910:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000912:	2300      	movs	r3, #0
 8000914:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800091a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fd98 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x166>
  {
    Error_Handler();
 800092e:	f001 f929 	bl	8001b84 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	37d0      	adds	r7, #208	; 0xd0
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000
 8000944:	01314868 	.word	0x01314868

08000948 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_ADC3_Init+0x98>)
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <MX_ADC3_Init+0x9c>)
 800095e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000966:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_ADC3_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_ADC3_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_ADC3_Init+0x98>)
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_ADC3_Init+0xa0>)
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_ADC3_Init+0x98>)
 8000996:	2201      	movs	r2, #1
 8000998:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_ADC3_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC3_Init+0x98>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC3_Init+0x98>)
 80009aa:	f003 f887 	bl	8003abc <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009b4:	f001 f8e6 	bl	8001b84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2301      	movs	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC3_Init+0x98>)
 80009ca:	f003 f8bb 	bl	8003b44 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009d4:	f001 f8d6 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000936c 	.word	0x2000936c
 80009e4:	40012200 	.word	0x40012200
 80009e8:	0f000001 	.word	0x0f000001

080009ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_CRC_Init+0x3c>)
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <MX_CRC_Init+0x40>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_CRC_Init+0x3c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_CRC_Init+0x3c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_CRC_Init+0x3c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_CRC_Init+0x3c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_CRC_Init+0x3c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_CRC_Init+0x3c>)
 8000a16:	f003 fbbb 	bl	8004190 <HAL_CRC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a20:	f001 f8b0 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20009218 	.word	0x20009218
 8000a2c:	40023000 	.word	0x40023000

08000a30 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_DCMI_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_DCMI_Init+0x60>)
 8000a7e:	f003 fc71 	bl	8004364 <HAL_DCMI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f001 f87c 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200093b4 	.word	0x200093b4
 8000a94:	50050000 	.word	0x50050000

08000a98 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <MX_DMA2D_Init+0x60>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ace:	f004 f809 	bl	8004ae4 <HAL_DMA2D_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ad8:	f001 f854 	bl	8001b84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000adc:	2101      	movs	r1, #1
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_DMA2D_Init+0x5c>)
 8000ae0:	f004 fa6e 	bl	8004fc0 <HAL_DMA2D_ConfigLayer>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aea:	f001 f84b 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000ae64 	.word	0x2000ae64
 8000af8:	4002b000 	.word	0x4002b000

08000afc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
 return;
 8000b00:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <MX_I2C1_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <MX_I2C1_Init+0x7c>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b48:	f006 fa1c 	bl	8006f84 <HAL_I2C_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b52:	f001 f817 	bl	8001b84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b5a:	f006 faa3 	bl	80070a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b64:	f001 f80e 	bl	8001b84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_I2C1_Init+0x74>)
 8000b6c:	f006 fae5 	bl	800713a <HAL_I2CEx_ConfigDigitalFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f001 f805 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200091cc 	.word	0x200091cc
 8000b84:	40005400 	.word	0x40005400
 8000b88:	00c0eaff 	.word	0x00c0eaff

08000b8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <MX_I2C3_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <MX_I2C3_Init+0x7c>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bc8:	f006 f9dc 	bl	8006f84 <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bd2:	f000 ffd7 	bl	8001b84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bda:	f006 fa63 	bl	80070a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 ffce 	bl	8001b84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_I2C3_Init+0x74>)
 8000bec:	f006 faa5 	bl	800713a <HAL_I2CEx_ConfigDigitalFilter>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 ffc5 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20009070 	.word	0x20009070
 8000c04:	40005c00 	.word	0x40005c00
 8000c08:	00c0eaff 	.word	0x00c0eaff

08000c0c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b09a      	sub	sp, #104	; 0x68
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c16:	2234      	movs	r2, #52	; 0x34
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f011 ff69 	bl	8012af2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2234      	movs	r2, #52	; 0x34
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f011 ff63 	bl	8012af2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c2e:	4a51      	ldr	r2, [pc, #324]	; (8000d74 <MX_LTDC_Init+0x168>)
 8000c30:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c32:	4b4f      	ldr	r3, [pc, #316]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c3e:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c44:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c4a:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c4c:	2228      	movs	r2, #40	; 0x28
 8000c4e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c50:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c52:	2209      	movs	r2, #9
 8000c54:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c56:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c58:	2235      	movs	r2, #53	; 0x35
 8000c5a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c5c:	4b44      	ldr	r3, [pc, #272]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c5e:	220b      	movs	r2, #11
 8000c60:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c62:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c64:	f240 2215 	movw	r2, #533	; 0x215
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c6c:	f240 121b 	movw	r2, #283	; 0x11b
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c74:	f240 2235 	movw	r2, #565	; 0x235
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c7c:	f240 121d 	movw	r2, #285	; 0x11d
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c9a:	4835      	ldr	r0, [pc, #212]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000c9c:	f006 fa9a 	bl	80071d4 <HAL_LTDC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000ca6:	f000 ff6d 	bl	8001b84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000cae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000cb8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000cbc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000cc2:	23ff      	movs	r3, #255	; 0xff
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cd4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cd8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000cda:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cde:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000ce0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481b      	ldr	r0, [pc, #108]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000d02:	f006 fbf9 	bl	80074f8 <HAL_LTDC_ConfigLayer>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000d0c:	f000 ff3a 	bl	8001b84 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2201      	movs	r2, #1
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_LTDC_Init+0x164>)
 8000d58:	f006 fbce 	bl	80074f8 <HAL_LTDC_ConfigLayer>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000d62:	f000 ff0f 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3768      	adds	r7, #104	; 0x68
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200092c4 	.word	0x200092c4
 8000d74:	40016800 	.word	0x40016800

08000d78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_QUADSPI_Init+0x54>)
 8000d80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_QUADSPI_Init+0x50>)
 8000db4:	f006 fde6 	bl	8007984 <HAL_QSPI_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fee1 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000afa0 	.word	0x2000afa0
 8000dcc:	a0001000 	.word	0xa0001000

08000dd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	; 0x48
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	222c      	movs	r2, #44	; 0x2c
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f011 fe7d 	bl	8012af2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <MX_RTC_Init+0x144>)
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <MX_RTC_Init+0x148>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e06:	227f      	movs	r2, #127	; 0x7f
 8000e08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e22:	483c      	ldr	r0, [pc, #240]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e24:	f008 f83a 	bl	8008e9c <HAL_RTC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000e2e:	f000 fea9 	bl	8001b84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	482f      	ldr	r0, [pc, #188]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e56:	f008 f89d 	bl	8008f94 <HAL_RTC_SetTime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000e60:	f000 fe90 	bl	8001b84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	2201      	movs	r2, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_RTC_Init+0x144>)
 8000e86:	f008 f943 	bl	8009110 <HAL_RTC_SetDate>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000e90:	f000 fe78 	bl	8001b84 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <MX_RTC_Init+0x144>)
 8000ecc:	f008 f9c8 	bl	8009260 <HAL_RTC_SetAlarm>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ed6:	f000 fe55 	bl	8001b84 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <MX_RTC_Init+0x144>)
 8000ee8:	f008 f9ba 	bl	8009260 <HAL_RTC_SetAlarm>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000ef2:	f000 fe47 	bl	8001b84 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_RTC_Init+0x144>)
 8000efc:	f008 fb3a 	bl	8009574 <HAL_RTCEx_SetTimeStamp>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000f06:	f000 fe3d 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3748      	adds	r7, #72	; 0x48
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20009484 	.word	0x20009484
 8000f18:	40002800 	.word	0x40002800

08000f1c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f20:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <MX_SAI2_Init+0x140>)
 8000f24:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f2c:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f38:	4b47      	ldr	r3, [pc, #284]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f50:	4b41      	ldr	r3, [pc, #260]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f56:	4b40      	ldr	r3, [pc, #256]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f5e:	4a40      	ldr	r2, [pc, #256]	; (8001060 <MX_SAI2_Init+0x144>)
 8000f60:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f62:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f68:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000fb0:	4829      	ldr	r0, [pc, #164]	; (8001058 <MX_SAI2_Init+0x13c>)
 8000fb2:	f008 fb35 	bl	8009620 <HAL_SAI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000fbc:	f000 fde2 	bl	8001b84 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <MX_SAI2_Init+0x14c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fce:	2203      	movs	r2, #3
 8000fd0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fd4:	2240      	movs	r2, #64	; 0x40
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_SAI2_Init+0x148>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_SAI2_Init+0x148>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_SAI2_Init+0x148>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_SAI2_Init+0x148>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_SAI2_Init+0x148>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SAI2_Init+0x148>)
 800100a:	2200      	movs	r2, #0
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_SAI2_Init+0x148>)
 8001010:	2208      	movs	r2, #8
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_SAI2_Init+0x148>)
 8001016:	2201      	movs	r2, #1
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SAI2_Init+0x148>)
 800101c:	2200      	movs	r2, #0
 800101e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_SAI2_Init+0x148>)
 8001022:	2200      	movs	r2, #0
 8001024:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SAI2_Init+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_SAI2_Init+0x148>)
 800102e:	2200      	movs	r2, #0
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SAI2_Init+0x148>)
 8001034:	2200      	movs	r2, #0
 8001036:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SAI2_Init+0x148>)
 800103a:	2201      	movs	r2, #1
 800103c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SAI2_Init+0x148>)
 8001040:	2200      	movs	r2, #0
 8001042:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_SAI2_Init+0x148>)
 8001046:	f008 faeb 	bl	8009620 <HAL_SAI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001050:	f000 fd98 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20009148 	.word	0x20009148
 800105c:	40015c04 	.word	0x40015c04
 8001060:	0002ee00 	.word	0x0002ee00
 8001064:	20008fe8 	.word	0x20008fe8
 8001068:	40015c24 	.word	0x40015c24

0800106c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 8001072:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001076:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPDIFRX_Init+0x5c>)
 80010b6:	f008 fcdb 	bl	8009a70 <HAL_SPDIFRX_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80010c0:	f000 fd60 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200090fc 	.word	0x200090fc

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	222c      	movs	r2, #44	; 0x2c
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f011 fcf3 	bl	8012af2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <MX_TIM1_Init+0x150>)
 800110e:	4a44      	ldr	r2, [pc, #272]	; (8001220 <MX_TIM1_Init+0x154>)
 8001110:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <MX_TIM1_Init+0x150>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <MX_TIM1_Init+0x150>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800111e:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_TIM1_Init+0x150>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <MX_TIM1_Init+0x150>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_TIM1_Init+0x150>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <MX_TIM1_Init+0x150>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001138:	4838      	ldr	r0, [pc, #224]	; (800121c <MX_TIM1_Init+0x150>)
 800113a:	f008 fcf5 	bl	8009b28 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001144:	f000 fd1e 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001152:	4619      	mov	r1, r3
 8001154:	4831      	ldr	r0, [pc, #196]	; (800121c <MX_TIM1_Init+0x150>)
 8001156:	f008 ff9f 	bl	800a098 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001160:	f000 fd10 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001164:	482d      	ldr	r0, [pc, #180]	; (800121c <MX_TIM1_Init+0x150>)
 8001166:	f008 fd35 	bl	8009bd4 <HAL_TIM_PWM_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001170:	f000 fd08 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001184:	4619      	mov	r1, r3
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <MX_TIM1_Init+0x150>)
 8001188:	f009 fc00 	bl	800a98c <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001192:	f000 fcf7 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	2200      	movs	r2, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <MX_TIM1_Init+0x150>)
 80011bc:	f008 fe54 	bl	8009e68 <HAL_TIM_PWM_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011c6:	f000 fcdd 	bl	8001b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM1_Init+0x150>)
 8001200:	f009 fc52 	bl	800aaa8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800120a:	f000 fcbb 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM1_Init+0x150>)
 8001210:	f001 f900 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3768      	adds	r7, #104	; 0x68
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200094a4 	.word	0x200094a4
 8001220:	40010000 	.word	0x40010000

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_TIM2_Init+0xe8>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <MX_TIM2_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_TIM2_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_TIM2_Init+0xe8>)
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_TIM2_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_TIM2_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_TIM2_Init+0xe8>)
 8001280:	f008 fc52 	bl	8009b28 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800128a:	f000 fc7b 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001298:	4619      	mov	r1, r3
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_TIM2_Init+0xe8>)
 800129c:	f008 fefc 	bl	800a098 <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012a6:	f000 fc6d 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_TIM2_Init+0xe8>)
 80012ac:	f008 fc92 	bl	8009bd4 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012b6:	f000 fc65 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_TIM2_Init+0xe8>)
 80012ca:	f009 fb5f 	bl	800a98c <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012d4:	f000 fc56 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM2_Init+0xe8>)
 80012f0:	f008 fdba 	bl	8009e68 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012fa:	f000 fc43 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM2_Init+0xe8>)
 8001300:	f001 f888 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3738      	adds	r7, #56	; 0x38
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000aea4 	.word	0x2000aea4

08001310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <MX_TIM3_Init+0xec>)
 8001346:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MX_TIM3_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <MX_TIM3_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001368:	4823      	ldr	r0, [pc, #140]	; (80013f8 <MX_TIM3_Init+0xe8>)
 800136a:	f008 fbdd 	bl	8009b28 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001374:	f000 fc06 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	4619      	mov	r1, r3
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001386:	f008 fe87 	bl	800a098 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001390:	f000 fbf8 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001396:	f008 fc1d 	bl	8009bd4 <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013a0:	f000 fbf0 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <MX_TIM3_Init+0xe8>)
 80013b4:	f009 faea 	bl	800a98c <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013be:	f000 fbe1 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM3_Init+0xe8>)
 80013da:	f008 fd45 	bl	8009e68 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013e4:	f000 fbce 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM3_Init+0xe8>)
 80013ea:	f001 f813 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80013ee:	bf00      	nop
 80013f0:	3738      	adds	r7, #56	; 0x38
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20009284 	.word	0x20009284
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001434:	4a2d      	ldr	r2, [pc, #180]	; (80014ec <MX_TIM5_Init+0xec>)
 8001436:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_TIM5_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001446:	f04f 32ff 	mov.w	r2, #4294967295
 800144a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_TIM5_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_TIM5_Init+0xe8>)
 800145a:	f008 fb65 	bl	8009b28 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001464:	f000 fb8e 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001476:	f008 fe0f 	bl	800a098 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001480:	f000 fb80 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM5_Init+0xe8>)
 8001486:	f008 fba5 	bl	8009bd4 <HAL_TIM_PWM_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001490:	f000 fb78 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_TIM5_Init+0xe8>)
 80014a4:	f009 fa72 	bl	800a98c <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014ae:	f000 fb69 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b2:	2360      	movs	r3, #96	; 0x60
 80014b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	220c      	movs	r2, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM5_Init+0xe8>)
 80014ca:	f008 fccd 	bl	8009e68 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014d4:	f000 fb56 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM5_Init+0xe8>)
 80014da:	f000 ff9b 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	; 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20009244 	.word	0x20009244
 80014ec:	40000c00 	.word	0x40000c00

080014f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001510:	4a20      	ldr	r2, [pc, #128]	; (8001594 <MX_TIM8_Init+0xa4>)
 8001512:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM8_Init+0xa0>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001526:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_TIM8_Init+0xa0>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800153a:	4815      	ldr	r0, [pc, #84]	; (8001590 <MX_TIM8_Init+0xa0>)
 800153c:	f008 faf4 	bl	8009b28 <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001546:	f000 fb1d 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001558:	f008 fd9e 	bl	800a098 <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001562:	f000 fb0f 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_TIM8_Init+0xa0>)
 8001578:	f009 fa08 	bl	800a98c <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001582:	f000 faff 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200090bc 	.word	0x200090bc
 8001594:	40010400 	.word	0x40010400

08001598 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM12_Init+0x84>)
 80015b2:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <MX_TIM12_Init+0x88>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM12_Init+0x84>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM12_Init+0x84>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_TIM12_Init+0x84>)
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_TIM12_Init+0x84>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_TIM12_Init+0x84>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <MX_TIM12_Init+0x84>)
 80015d8:	f008 fafc 	bl	8009bd4 <HAL_TIM_PWM_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015e2:	f000 facf 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e6:	2360      	movs	r3, #96	; 0x60
 80015e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM12_Init+0x84>)
 80015fe:	f008 fc33 	bl	8009e68 <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001608:	f000 fabc 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM12_Init+0x84>)
 800160e:	f000 ff01 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000aee4 	.word	0x2000aee4
 8001620:	40001800 	.word	0x40001800

08001624 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART1_UART_Init+0x58>)
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <MX_USART1_UART_Init+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_USART1_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART1_UART_Init+0x58>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART1_UART_Init+0x58>)
 8001668:	f009 faba 	bl	800abe0 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001672:	f000 fa87 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20009404 	.word	0x20009404
 8001680:	40011000 	.word	0x40011000

08001684 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_USART6_UART_Init+0x58>)
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <MX_USART6_UART_Init+0x5c>)
 800168c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_USART6_UART_Init+0x58>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART6_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_USART6_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART6_UART_Init+0x58>)
 80016c8:	f009 fa8a 	bl	800abe0 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016d2:	f000 fa57 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000ade4 	.word	0x2000ade4
 80016e0:	40011400 	.word	0x40011400

080016e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_FMC_Init+0x98>)
 80016fe:	4a20      	ldr	r2, [pc, #128]	; (8001780 <MX_FMC_Init+0x9c>)
 8001700:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_FMC_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_FMC_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_FMC_Init+0x98>)
 8001710:	2204      	movs	r2, #4
 8001712:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_FMC_Init+0x98>)
 8001716:	2210      	movs	r2, #16
 8001718:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_FMC_Init+0x98>)
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_FMC_Init+0x98>)
 8001722:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001726:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_FMC_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_FMC_Init+0x98>)
 8001730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001734:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_FMC_Init+0x98>)
 8001738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_FMC_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001744:	2302      	movs	r3, #2
 8001746:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001748:	2307      	movs	r3, #7
 800174a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001750:	2307      	movs	r3, #7
 8001752:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001754:	2303      	movs	r3, #3
 8001756:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_FMC_Init+0x98>)
 8001766:	f008 f903 	bl	8009970 <HAL_SDRAM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001770:	f000 fa08 	bl	8001b84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000af24 	.word	0x2000af24
 8001780:	a0000140 	.word	0xa0000140

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b090      	sub	sp, #64	; 0x40
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4aae      	ldr	r2, [pc, #696]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4bac      	ldr	r3, [pc, #688]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b2:	4ba9      	ldr	r3, [pc, #676]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4aa8      	ldr	r2, [pc, #672]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4ba6      	ldr	r3, [pc, #664]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4ba3      	ldr	r3, [pc, #652]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4aa2      	ldr	r2, [pc, #648]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4ba0      	ldr	r3, [pc, #640]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b9d      	ldr	r3, [pc, #628]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a9c      	ldr	r2, [pc, #624]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b9a      	ldr	r3, [pc, #616]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a96      	ldr	r2, [pc, #600]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a8a      	ldr	r2, [pc, #552]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001842:	4b85      	ldr	r3, [pc, #532]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a84      	ldr	r2, [pc, #528]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b82      	ldr	r3, [pc, #520]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a7e      	ldr	r2, [pc, #504]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a78      	ldr	r2, [pc, #480]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188a:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <MX_GPIO_Init+0x2d4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2120      	movs	r1, #32
 80018a6:	486d      	ldr	r0, [pc, #436]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80018a8:	f003 fe62 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	210e      	movs	r1, #14
 80018b0:	486b      	ldr	r0, [pc, #428]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 80018b2:	f003 fe5d 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2108      	movs	r1, #8
 80018ba:	486a      	ldr	r0, [pc, #424]	; (8001a64 <MX_GPIO_Init+0x2e0>)
 80018bc:	f003 fe58 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c6:	4866      	ldr	r0, [pc, #408]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 80018c8:	f003 fe52 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4865      	ldr	r0, [pc, #404]	; (8001a68 <MX_GPIO_Init+0x2e4>)
 80018d4:	f003 fe4c 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	21c8      	movs	r1, #200	; 0xc8
 80018dc:	4863      	ldr	r0, [pc, #396]	; (8001a6c <MX_GPIO_Init+0x2e8>)
 80018de:	f003 fe47 	bl	8005570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018e2:	2308      	movs	r3, #8
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	4619      	mov	r1, r3
 80018f4:	485e      	ldr	r0, [pc, #376]	; (8001a70 <MX_GPIO_Init+0x2ec>)
 80018f6:	f003 fc91 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018fa:	f643 4323 	movw	r3, #15395	; 0x3c23
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800190c:	230a      	movs	r3, #10
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001914:	4619      	mov	r1, r3
 8001916:	4857      	ldr	r0, [pc, #348]	; (8001a74 <MX_GPIO_Init+0x2f0>)
 8001918:	f003 fc80 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800191c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800192e:	230c      	movs	r3, #12
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001936:	4619      	mov	r1, r3
 8001938:	484f      	ldr	r0, [pc, #316]	; (8001a78 <MX_GPIO_Init+0x2f4>)
 800193a:	f003 fc6f 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	484a      	ldr	r0, [pc, #296]	; (8001a7c <MX_GPIO_Init+0x2f8>)
 8001954:	f003 fc62 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001958:	2340      	movs	r3, #64	; 0x40
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195c:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <MX_GPIO_Init+0x2fc>)
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001968:	4619      	mov	r1, r3
 800196a:	483c      	ldr	r0, [pc, #240]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 800196c:	f003 fc56 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001970:	2320      	movs	r3, #32
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4835      	ldr	r0, [pc, #212]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001988:	f003 fc48 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800198c:	f241 030e 	movw	r3, #4110	; 0x100e
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	482e      	ldr	r0, [pc, #184]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 80019a6:	f003 fc39 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019bc:	4619      	mov	r1, r3
 80019be:	482e      	ldr	r0, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x2f4>)
 80019c0:	f003 fc2c 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019c4:	2308      	movs	r3, #8
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d8:	4619      	mov	r1, r3
 80019da:	4822      	ldr	r0, [pc, #136]	; (8001a64 <MX_GPIO_Init+0x2e0>)
 80019dc:	f003 fc1e 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019e0:	2310      	movs	r3, #16
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	481a      	ldr	r0, [pc, #104]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80019f4:	f003 fc12 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019f8:	f248 0304 	movw	r3, #32772	; 0x8004
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4816      	ldr	r0, [pc, #88]	; (8001a68 <MX_GPIO_Init+0x2e4>)
 8001a0e:	f003 fc05 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <MX_GPIO_Init+0x2e4>)
 8001a2c:	f003 fbf6 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_GPIO_Init+0x2fc>)
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 8001a46:	f003 fbe9 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e016      	b.n	8001a84 <MX_GPIO_Init+0x300>
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40022800 	.word	0x40022800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40021800 	.word	0x40021800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40022400 	.word	0x40022400
 8001a80:	10120000 	.word	0x10120000
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4828      	ldr	r0, [pc, #160]	; (8001b38 <MX_GPIO_Init+0x3b4>)
 8001a96:	f003 fbc1 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a9a:	23c8      	movs	r3, #200	; 0xc8
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4822      	ldr	r0, [pc, #136]	; (8001b3c <MX_GPIO_Init+0x3b8>)
 8001ab2:	f003 fbb3 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481b      	ldr	r0, [pc, #108]	; (8001b40 <MX_GPIO_Init+0x3bc>)
 8001ad2:	f003 fba3 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_GPIO_Init+0x3b8>)
 8001aea:	f003 fb97 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001aee:	2328      	movs	r3, #40	; 0x28
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001afe:	230a      	movs	r3, #10
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	480e      	ldr	r0, [pc, #56]	; (8001b44 <MX_GPIO_Init+0x3c0>)
 8001b0a:	f003 fb87 	bl	800521c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001b0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b20:	2305      	movs	r3, #5
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_GPIO_Init+0x3c4>)
 8001b2c:	f003 fb76 	bl	800521c <HAL_GPIO_Init>

}
 8001b30:	bf00      	nop
 8001b32:	3740      	adds	r7, #64	; 0x40
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400

08001b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001b54:	f010 fa5e 	bl	8012014 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f00c ff4b 	bl	800e9f4 <osDelay>
 8001b5e:	e7fb      	b.n	8001b58 <StartDefaultTask+0xc>

08001b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b72:	f001 ff61 	bl	8003a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40001000 	.word	0x40001000

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	210f      	movs	r1, #15
 8001bce:	f06f 0001 	mvn.w	r0, #1
 8001bd2:	f002 fab3 	bl	800413c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <HAL_ADC_MspInit+0xa4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d13c      	bne.n	8001c80 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c24:	f043 0320 	orr.w	r3, r3, #32
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_ADC_MspInit+0xa8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001c4e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c52:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c54:	2303      	movs	r3, #3
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <HAL_ADC_MspInit+0xac>)
 8001c64:	f003 fada 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <HAL_ADC_MspInit+0xb0>)
 8001c7c:	f003 face 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40012200 	.word	0x40012200
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_CRC_MspInit+0x38>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_CRC_MspInit+0x3c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_CRC_MspInit+0x3c>)
 8001cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_CRC_MspInit+0x3c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023000 	.word	0x40023000
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_DCMI_MspInit+0x160>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f040 809a 	bne.w	8001e30 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	4a4e      	ldr	r2, [pc, #312]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6353      	str	r3, [r2, #52]	; 0x34
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
 8001d12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d44:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a3c      	ldr	r2, [pc, #240]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	6313      	str	r3, [r2, #48]	; 0x30
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_DCMI_MspInit+0x164>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d8c:	2360      	movs	r3, #96	; 0x60
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d9c:	230d      	movs	r3, #13
 8001d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	4826      	ldr	r0, [pc, #152]	; (8001e40 <HAL_DCMI_MspInit+0x168>)
 8001da8:	f003 fa38 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001dac:	2308      	movs	r3, #8
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dbc:	230d      	movs	r3, #13
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481f      	ldr	r0, [pc, #124]	; (8001e44 <HAL_DCMI_MspInit+0x16c>)
 8001dc8:	f003 fa28 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dde:	230d      	movs	r3, #13
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4817      	ldr	r0, [pc, #92]	; (8001e48 <HAL_DCMI_MspInit+0x170>)
 8001dea:	f003 fa17 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001dee:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e00:	230d      	movs	r3, #13
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4810      	ldr	r0, [pc, #64]	; (8001e4c <HAL_DCMI_MspInit+0x174>)
 8001e0c:	f003 fa06 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001e10:	2350      	movs	r3, #80	; 0x50
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e20:	230d      	movs	r3, #13
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <HAL_DCMI_MspInit+0x178>)
 8001e2c:	f003 f9f6 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	50050000 	.word	0x50050000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40021c00 	.word	0x40021c00
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_DMA2D_MspInit+0x44>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d113      	bne.n	8001e8e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_DMA2D_MspInit+0x48>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_DMA2D_MspInit+0x48>)
 8001e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_DMA2D_MspInit+0x48>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	205a      	movs	r0, #90	; 0x5a
 8001e84:	f002 f95a 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e88:	205a      	movs	r0, #90	; 0x5a
 8001e8a:	f002 f973 	bl	8004174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	4002b000 	.word	0x4002b000
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <HAL_I2C_MspInit+0xdc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d129      	bne.n	8001f16 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4823      	ldr	r0, [pc, #140]	; (8001f84 <HAL_I2C_MspInit+0xe4>)
 8001ef8:	f003 f990 	bl	800521c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f14:	e02d      	b.n	8001f72 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_I2C_MspInit+0xe8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d128      	bne.n	8001f72 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <HAL_I2C_MspInit+0xec>)
 8001f56:	f003 f961 	bl	800521c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_I2C_MspInit+0xe0>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40005c00 	.word	0x40005c00
 8001f8c:	40021c00 	.word	0x40021c00

08001f90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	; 0x38
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a55      	ldr	r2, [pc, #340]	; (8002104 <HAL_LTDC_MspInit+0x174>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	f040 80a3 	bne.w	80020fa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc0:	4b51      	ldr	r3, [pc, #324]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6313      	str	r3, [r2, #48]	; 0x30
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a35      	ldr	r2, [pc, #212]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_LTDC_MspInit+0x178>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002044:	2310      	movs	r3, #16
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002054:	230e      	movs	r3, #14
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	482b      	ldr	r0, [pc, #172]	; (800210c <HAL_LTDC_MspInit+0x17c>)
 8002060:	f003 f8dc 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002064:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002076:	230e      	movs	r3, #14
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4823      	ldr	r0, [pc, #140]	; (8002110 <HAL_LTDC_MspInit+0x180>)
 8002082:	f003 f8cb 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002086:	23f7      	movs	r3, #247	; 0xf7
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002096:	230e      	movs	r3, #14
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	481c      	ldr	r0, [pc, #112]	; (8002114 <HAL_LTDC_MspInit+0x184>)
 80020a2:	f003 f8bb 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020b8:	2309      	movs	r3, #9
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4815      	ldr	r0, [pc, #84]	; (8002118 <HAL_LTDC_MspInit+0x188>)
 80020c4:	f003 f8aa 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80020c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020da:	230e      	movs	r3, #14
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <HAL_LTDC_MspInit+0x18c>)
 80020e6:	f003 f899 	bl	800521c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2058      	movs	r0, #88	; 0x58
 80020f0:	f002 f824 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020f4:	2058      	movs	r0, #88	; 0x58
 80020f6:	f002 f83d 	bl	8004174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3738      	adds	r7, #56	; 0x38
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40016800 	.word	0x40016800
 8002108:	40023800 	.word	0x40023800
 800210c:	40021000 	.word	0x40021000
 8002110:	40022400 	.word	0x40022400
 8002114:	40022800 	.word	0x40022800
 8002118:	40021800 	.word	0x40021800
 800211c:	40022000 	.word	0x40022000

08002120 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_QSPI_MspInit+0x10c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d170      	bne.n	8002224 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6393      	str	r3, [r2, #56]	; 0x38
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215a:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_QSPI_MspInit+0x110>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021a2:	2304      	movs	r3, #4
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021b2:	2309      	movs	r3, #9
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	481d      	ldr	r0, [pc, #116]	; (8002234 <HAL_QSPI_MspInit+0x114>)
 80021be:	f003 f82d 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021d2:	230a      	movs	r3, #10
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	4816      	ldr	r0, [pc, #88]	; (8002238 <HAL_QSPI_MspInit+0x118>)
 80021de:	f003 f81d 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e2:	2304      	movs	r3, #4
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021f2:	2309      	movs	r3, #9
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	480e      	ldr	r0, [pc, #56]	; (8002238 <HAL_QSPI_MspInit+0x118>)
 80021fe:	f003 f80d 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002202:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002214:	2309      	movs	r3, #9
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <HAL_QSPI_MspInit+0x11c>)
 8002220:	f002 fffc 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3730      	adds	r7, #48	; 0x30
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	a0001000 	.word	0xa0001000
 8002230:	40023800 	.word	0x40023800
 8002234:	40021000 	.word	0x40021000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020c00 	.word	0x40020c00

08002240 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_RTC_MspInit+0x2c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d105      	bne.n	800225e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_RTC_MspInit+0x30>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_RTC_MspInit+0x30>)
 8002258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40002800 	.word	0x40002800
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002294:	d127      	bne.n	80022e6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80022d6:	2308      	movs	r3, #8
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <HAL_SPDIFRX_MspInit+0x80>)
 80022e2:	f002 ff9b 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020c00 	.word	0x40020c00

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_TIM_Base_MspInit+0xc8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10c      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002322:	e046      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d10c      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
}
 8002346:	e034      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_Base_MspInit+0xd0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10c      	bne.n	800236c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
}
 800236a:	e022      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIM_Base_MspInit+0xd4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
}
 800238e:	e010      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_TIM_Base_MspInit+0xd8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_TIM_PWM_MspInit+0x38>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10b      	bne.n	80023fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40001800 	.word	0x40001800
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_TIM_MspPostInit+0x178>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11d      	bne.n	8002472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	484a      	ldr	r0, [pc, #296]	; (8002594 <HAL_TIM_MspPostInit+0x180>)
 800246c:	f002 fed6 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002470:	e087      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d11d      	bne.n	80024b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a43      	ldr	r2, [pc, #268]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024a6:	2301      	movs	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	4619      	mov	r1, r3
 80024b0:	4838      	ldr	r0, [pc, #224]	; (8002594 <HAL_TIM_MspPostInit+0x180>)
 80024b2:	f002 feb3 	bl	800521c <HAL_GPIO_Init>
}
 80024b6:	e064      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_TIM_MspPostInit+0x184>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11c      	bne.n	80024fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80024da:	2310      	movs	r3, #16
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4829      	ldr	r0, [pc, #164]	; (800259c <HAL_TIM_MspPostInit+0x188>)
 80024f6:	f002 fe91 	bl	800521c <HAL_GPIO_Init>
}
 80024fa:	e042      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_TIM_MspPostInit+0x18c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d11c      	bne.n	8002540 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800251e:	2301      	movs	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800252e:	2302      	movs	r3, #2
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <HAL_TIM_MspPostInit+0x190>)
 800253a:	f002 fe6f 	bl	800521c <HAL_GPIO_Init>
}
 800253e:	e020      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_TIM_MspPostInit+0x194>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11b      	bne.n	8002582 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002572:	2309      	movs	r3, #9
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	480b      	ldr	r0, [pc, #44]	; (80025ac <HAL_TIM_MspPostInit+0x198>)
 800257e:	f002 fe4d 	bl	800521c <HAL_GPIO_Init>
}
 8002582:	bf00      	nop
 8002584:	3730      	adds	r7, #48	; 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40023800 	.word	0x40023800
 8002594:	40020000 	.word	0x40020000
 8002598:	40000400 	.word	0x40000400
 800259c:	40020400 	.word	0x40020400
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40001800 	.word	0x40001800
 80025ac:	40021c00 	.word	0x40021c00

080025b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <HAL_UART_MspInit+0x110>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d145      	bne.n	800265e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a35      	ldr	r2, [pc, #212]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262a:	2307      	movs	r3, #7
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4824      	ldr	r0, [pc, #144]	; (80026c8 <HAL_UART_MspInit+0x118>)
 8002636:	f002 fdf1 	bl	800521c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800263a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800264c:	2307      	movs	r3, #7
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	481d      	ldr	r0, [pc, #116]	; (80026cc <HAL_UART_MspInit+0x11c>)
 8002658:	f002 fde0 	bl	800521c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800265c:	e02c      	b.n	80026b8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0x120>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d127      	bne.n	80026b8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6453      	str	r3, [r2, #68]	; 0x44
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6313      	str	r3, [r2, #48]	; 0x30
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026a8:	2308      	movs	r3, #8
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4808      	ldr	r0, [pc, #32]	; (80026d4 <HAL_UART_MspInit+0x124>)
 80026b4:	f002 fdb2 	bl	800521c <HAL_GPIO_Init>
}
 80026b8:	bf00      	nop
 80026ba:	3730      	adds	r7, #48	; 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40020800 	.word	0x40020800

080026d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_FMC_MspInit+0x100>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d16d      	bne.n	80027d0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_FMC_MspInit+0x100>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_FMC_MspInit+0x104>)
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_FMC_MspInit+0x104>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6393      	str	r3, [r2, #56]	; 0x38
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_FMC_MspInit+0x104>)
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002712:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002716:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002724:	230c      	movs	r3, #12
 8002726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	4619      	mov	r1, r3
 800272c:	482c      	ldr	r0, [pc, #176]	; (80027e0 <HAL_FMC_MspInit+0x108>)
 800272e:	f002 fd75 	bl	800521c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002732:	f248 1333 	movw	r3, #33075	; 0x8133
 8002736:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002744:	230c      	movs	r3, #12
 8002746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4825      	ldr	r0, [pc, #148]	; (80027e4 <HAL_FMC_MspInit+0x10c>)
 800274e:	f002 fd65 	bl	800521c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002752:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002756:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002764:	230c      	movs	r3, #12
 8002766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <HAL_FMC_MspInit+0x110>)
 800276e:	f002 fd55 	bl	800521c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002772:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002776:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002784:	230c      	movs	r3, #12
 8002786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4817      	ldr	r0, [pc, #92]	; (80027ec <HAL_FMC_MspInit+0x114>)
 800278e:	f002 fd45 	bl	800521c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002792:	2328      	movs	r3, #40	; 0x28
 8002794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a2:	230c      	movs	r3, #12
 80027a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <HAL_FMC_MspInit+0x118>)
 80027ac:	f002 fd36 	bl	800521c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80027b0:	2308      	movs	r3, #8
 80027b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c0:	230c      	movs	r3, #12
 80027c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <HAL_FMC_MspInit+0x11c>)
 80027ca:	f002 fd27 	bl	800521c <HAL_GPIO_Init>
 80027ce:	e000      	b.n	80027d2 <HAL_FMC_MspInit+0xfa>
    return;
 80027d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200000cc 	.word	0x200000cc
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40021c00 	.word	0x40021c00
 80027f4:	40020800 	.word	0x40020800

080027f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002800:	f7ff ff6a 	bl	80026d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_SAI_MspInit+0xbc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d124      	bne.n	8002868 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 800282c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002846:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002848:	23f0      	movs	r3, #240	; 0xf0
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002858:	230a      	movs	r3, #10
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	481c      	ldr	r0, [pc, #112]	; (80028d4 <HAL_SAI_MspInit+0xc8>)
 8002864:	f002 fcda 	bl	800521c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_SAI_MspInit+0xcc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d125      	bne.n	80028be <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 800289a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800289c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028ae:	230a      	movs	r3, #10
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <HAL_SAI_MspInit+0xd0>)
 80028ba:	f002 fcaf 	bl	800521c <HAL_GPIO_Init>

    }
}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40015c04 	.word	0x40015c04
 80028cc:	200000d0 	.word	0x200000d0
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40015c24 	.word	0x40015c24
 80028dc:	40021800 	.word	0x40021800

080028e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	2036      	movs	r0, #54	; 0x36
 80028f6:	f001 fc21 	bl	800413c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028fa:	2036      	movs	r0, #54	; 0x36
 80028fc:	f001 fc3a 	bl	8004174 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_InitTick+0xa0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_InitTick+0xa0>)
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_InitTick+0xa0>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f005 fd66 	bl	80083f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002928:	f005 fd3c 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800292c:	4603      	mov	r3, r0
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_InitTick+0xa4>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	3b01      	subs	r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_InitTick+0xa8>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_InitTick+0xac>)
 8002944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_InitTick+0xa8>)
 8002948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800294c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_InitTick+0xa8>)
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_InitTick+0xa8>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_InitTick+0xa8>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <HAL_InitTick+0xa8>)
 8002962:	f007 f8e1 	bl	8009b28 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <HAL_InitTick+0xa8>)
 800296e:	f007 f907 	bl	8009b80 <HAL_TIM_Base_Start_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3730      	adds	r7, #48	; 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	431bde83 	.word	0x431bde83
 8002988:	2000aff0 	.word	0x2000aff0
 800298c:	40001000 	.word	0x40001000

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <MemManage_Handler+0x4>

080029aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <BusFault_Handler+0x4>

080029b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <UsageFault_Handler+0x4>

080029b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <TIM6_DAC_IRQHandler+0x10>)
 80029ca:	f007 f92e 	bl	8009c2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000aff0 	.word	0x2000aff0

080029d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <OTG_FS_IRQHandler+0x10>)
 80029de:	f003 f86f 	bl	8005ac0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000b558 	.word	0x2000b558

080029ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <LTDC_IRQHandler+0x10>)
 80029f2:	f004 fcbf 	bl	8007374 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200092c4 	.word	0x200092c4

08002a00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA2D_IRQHandler+0x10>)
 8002a06:	f002 f9cb 	bl	8004da0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000ae64 	.word	0x2000ae64

08002a14 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <DMA2_Stream7_IRQHandler+0x14>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fe27 	bl	8004670 <HAL_DMA_IRQHandler>
 }
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200000d8 	.word	0x200000d8

08002a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e00a      	b.n	8002a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a3e:	f3af 8000 	nop.w
 8002a42:	4601      	mov	r1, r0
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	60ba      	str	r2, [r7, #8]
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dbf0      	blt.n	8002a3e <_read+0x12>
	}

return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e009      	b.n	8002a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00f fe8b 	bl	801279c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf1      	blt.n	8002a78 <_write+0x12>
	}
	return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_close>:

int _close(int file)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_isatty>:

int _isatty(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	return 1;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f00f ff96 	bl	8012a68 <__errno>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	230c      	movs	r3, #12
 8002b40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20050000 	.word	0x20050000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	200000d4 	.word	0x200000d4
 8002b70:	2000f490 	.word	0x2000f490

08002b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SystemInit+0x28>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <SystemInit+0x28>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SystemInit+0x28>)
 8002b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ba6:	e003      	b.n	8002bb0 <LoopCopyDataInit>

08002ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bae:	3104      	adds	r1, #4

08002bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bb8:	d3f6      	bcc.n	8002ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bbc:	e002      	b.n	8002bc4 <LoopFillZerobss>

08002bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bc0:	f842 3b04 	str.w	r3, [r2], #4

08002bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bc8:	d3f9      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bca:	f7ff ffd3 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f00f ff51 	bl	8012a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd2:	f7fd fd4b 	bl	800066c <main>
  bx  lr    
 8002bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002bdc:	080165fc 	.word	0x080165fc
  ldr  r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002be4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8002be8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002bec:	2000f48c 	.word	0x2000f48c

08002bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC_IRQHandler>
	...

08002bf4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002bfa:	2228      	movs	r2, #40	; 0x28
 8002bfc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002bfe:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c00:	2209      	movs	r2, #9
 8002c02:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c04:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c06:	2235      	movs	r2, #53	; 0x35
 8002c08:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c0c:	220b      	movs	r2, #11
 8002c0e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c12:	f240 121b 	movw	r2, #283	; 0x11b
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c1a:	f240 2215 	movw	r2, #533	; 0x215
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c22:	f240 121d 	movw	r2, #285	; 0x11d
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c2a:	f240 2235 	movw	r2, #565	; 0x235
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002c30:	2100      	movs	r1, #0
 8002c32:	4823      	ldr	r0, [pc, #140]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c34:	f000 fc1c 	bl	8003470 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c42:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002c46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <BSP_LCD_Init+0xd0>)
 8002c7c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002c7e:	4810      	ldr	r0, [pc, #64]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c80:	f004 fc78 	bl	8007574 <HAL_LTDC_GetState>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c8e:	f000 fb15 	bl	80032bc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <BSP_LCD_Init+0xcc>)
 8002c94:	f004 fa9e 	bl	80071d4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c9e:	480a      	ldr	r0, [pc, #40]	; (8002cc8 <BSP_LCD_Init+0xd4>)
 8002ca0:	f002 fc66 	bl	8005570 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2108      	movs	r1, #8
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <BSP_LCD_Init+0xd8>)
 8002caa:	f002 fc61 	bl	8005570 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002cae:	f000 fcff 	bl	80036b0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cb2:	4807      	ldr	r0, [pc, #28]	; (8002cd0 <BSP_LCD_Init+0xdc>)
 8002cb4:	f000 f8c8 	bl	8002e48 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000b030 	.word	0x2000b030
 8002cc4:	40016800 	.word	0x40016800
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40022800 	.word	0x40022800
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <BSP_LCD_GetXSize+0x20>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <BSP_LCD_GetXSize+0x24>)
 8002cde:	2134      	movs	r1, #52	; 0x34
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3360      	adds	r3, #96	; 0x60
 8002ce8:	681b      	ldr	r3, [r3, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	2000019c 	.word	0x2000019c
 8002cf8:	2000b030 	.word	0x2000b030

08002cfc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <BSP_LCD_GetYSize+0x20>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <BSP_LCD_GetYSize+0x24>)
 8002d06:	2134      	movs	r1, #52	; 0x34
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3364      	adds	r3, #100	; 0x64
 8002d10:	681b      	ldr	r3, [r3, #0]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	2000019c 	.word	0x2000019c
 8002d20:	2000b030 	.word	0x2000b030

08002d24 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b090      	sub	sp, #64	; 0x40
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002d34:	f7ff ffce 	bl	8002cd4 <BSP_LCD_GetXSize>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d40:	f7ff ffdc 	bl	8002cfc <BSP_LCD_GetYSize>
 8002d44:	4603      	mov	r3, r0
 8002d46:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002d50:	23ff      	movs	r3, #255	; 0xff
 8002d52:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d70:	2307      	movs	r3, #7
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002d74:	f7ff ffae 	bl	8002cd4 <BSP_LCD_GetXSize>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002d7c:	f7ff ffbe 	bl	8002cfc <BSP_LCD_GetYSize>
 8002d80:	4603      	mov	r3, r0
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4812      	ldr	r0, [pc, #72]	; (8002dd8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002d8e:	f004 fbb3 	bl	80074f8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	4911      	ldr	r1, [pc, #68]	; (8002ddc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3304      	adds	r3, #4
 8002da2:	f04f 32ff 	mov.w	r2, #4294967295
 8002da6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	490c      	ldr	r1, [pc, #48]	; (8002ddc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3308      	adds	r3, #8
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002dba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	4907      	ldr	r1, [pc, #28]	; (8002ddc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002dce:	601a      	str	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3740      	adds	r7, #64	; 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000b030 	.word	0x2000b030
 8002ddc:	200001a0 	.word	0x200001a0
 8002de0:	20000004 	.word	0x20000004

08002de4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <BSP_LCD_SetTextColor+0x28>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <BSP_LCD_SetTextColor+0x2c>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	2000019c 	.word	0x2000019c
 8002e10:	200001a0 	.word	0x200001a0

08002e14 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <BSP_LCD_SetBackColor+0x2c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4908      	ldr	r1, [pc, #32]	; (8002e44 <BSP_LCD_SetBackColor+0x30>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000019c 	.word	0x2000019c
 8002e44:	200001a0 	.word	0x200001a0

08002e48 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <BSP_LCD_SetFont+0x2c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4908      	ldr	r1, [pc, #32]	; (8002e78 <BSP_LCD_SetFont+0x30>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3308      	adds	r3, #8
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000019c 	.word	0x2000019c
 8002e78:	200001a0 	.word	0x200001a0

08002e7c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <BSP_LCD_GetFont+0x24>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <BSP_LCD_GetFont+0x28>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3308      	adds	r3, #8
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000019c 	.word	0x2000019c
 8002ea4:	200001a0 	.word	0x200001a0

08002ea8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <BSP_LCD_Clear+0x48>)
 8002eb2:	681c      	ldr	r4, [r3, #0]
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <BSP_LCD_Clear+0x48>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <BSP_LCD_Clear+0x4c>)
 8002eba:	2134      	movs	r1, #52	; 0x34
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	f7ff ff04 	bl	8002cd4 <BSP_LCD_GetXSize>
 8002ecc:	4606      	mov	r6, r0
 8002ece:	f7ff ff15 	bl	8002cfc <BSP_LCD_GetYSize>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	4632      	mov	r2, r6
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 fb98 	bl	8003618 <LL_FillBuffer>
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef0:	2000019c 	.word	0x2000019c
 8002ef4:	2000b030 	.word	0x2000b030

08002ef8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
 8002f02:	460b      	mov	r3, r1
 8002f04:	80bb      	strh	r3, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <BSP_LCD_DisplayChar+0x80>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	491b      	ldr	r1, [pc, #108]	; (8002f7c <BSP_LCD_DisplayChar+0x84>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <BSP_LCD_DisplayChar+0x80>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4c14      	ldr	r4, [pc, #80]	; (8002f7c <BSP_LCD_DisplayChar+0x84>)
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4423      	add	r3, r4
 8002f36:	3308      	adds	r3, #8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f3c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <BSP_LCD_DisplayChar+0x80>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <BSP_LCD_DisplayChar+0x84>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4423      	add	r3, r4
 8002f50:	3308      	adds	r3, #8
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	889b      	ldrh	r3, [r3, #4]
 8002f56:	3307      	adds	r3, #7
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da00      	bge.n	8002f5e <BSP_LCD_DisplayChar+0x66>
 8002f5c:	3307      	adds	r3, #7
 8002f5e:	10db      	asrs	r3, r3, #3
 8002f60:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f64:	18ca      	adds	r2, r1, r3
 8002f66:	88b9      	ldrh	r1, [r7, #4]
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa9c 	bl	80034a8 <DrawChar>
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	2000019c 	.word	0x2000019c
 8002f7c:	200001a0 	.word	0x200001a0

08002f80 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60ba      	str	r2, [r7, #8]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	81fb      	strh	r3, [r7, #14]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	81bb      	strh	r3, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002f96:	2301      	movs	r3, #1
 8002f98:	83fb      	strh	r3, [r7, #30]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002faa:	e002      	b.n	8002fb2 <BSP_LCD_DisplayStringAt+0x32>
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	617a      	str	r2, [r7, #20]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f6      	bne.n	8002fac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002fbe:	f7ff fe89 	bl	8002cd4 <BSP_LCD_GetXSize>
 8002fc2:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	494f      	ldr	r1, [pc, #316]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	889b      	ldrh	r3, [r3, #4]
 8002fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fdc:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d01c      	beq.n	800301e <BSP_LCD_DisplayStringAt+0x9e>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d017      	beq.n	8003018 <BSP_LCD_DisplayStringAt+0x98>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d12e      	bne.n	800304a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad1      	subs	r1, r2, r3
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4843      	ldr	r0, [pc, #268]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4403      	add	r3, r0
 8003002:	3308      	adds	r3, #8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	889b      	ldrh	r3, [r3, #4]
 8003008:	fb03 f301 	mul.w	r3, r3, r1
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	4413      	add	r3, r2
 8003014:	83fb      	strh	r3, [r7, #30]
      break;
 8003016:	e01b      	b.n	8003050 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	83fb      	strh	r3, [r7, #30]
      break;
 800301c:	e018      	b.n	8003050 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b299      	uxth	r1, r3
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4836      	ldr	r0, [pc, #216]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4403      	add	r3, r0
 8003036:	3308      	adds	r3, #8
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	889b      	ldrh	r3, [r3, #4]
 800303c:	fb11 f303 	smulbb	r3, r1, r3
 8003040:	b29a      	uxth	r2, r3
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	83fb      	strh	r3, [r7, #30]
      break;
 8003048:	e002      	b.n	8003050 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	83fb      	strh	r3, [r7, #30]
      break;
 800304e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003050:	8bfb      	ldrh	r3, [r7, #30]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <BSP_LCD_DisplayStringAt+0xde>
 8003056:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da1d      	bge.n	800309a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003062:	e01a      	b.n	800309a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	89b9      	ldrh	r1, [r7, #12]
 800306a:	8bfb      	ldrh	r3, [r7, #30]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff43 	bl	8002ef8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4923      	ldr	r1, [pc, #140]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3308      	adds	r3, #8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	889a      	ldrh	r2, [r3, #4]
 8003088:	8bfb      	ldrh	r3, [r7, #30]
 800308a:	4413      	add	r3, r2
 800308c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
    i++;
 8003094:	8bbb      	ldrh	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2dc      	uxtb	r4, r3
 80030a8:	f7ff fe14 	bl	8002cd4 <BSP_LCD_GetXSize>
 80030ac:	4605      	mov	r5, r0
 80030ae:	8bb9      	ldrh	r1, [r7, #28]
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4813      	ldr	r0, [pc, #76]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4403      	add	r3, r0
 80030c0:	3308      	adds	r3, #8
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	fb03 f301 	mul.w	r3, r3, r1
 80030ca:	1aeb      	subs	r3, r5, r3
 80030cc:	b299      	uxth	r1, r3
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <BSP_LCD_DisplayStringAt+0x180>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <BSP_LCD_DisplayStringAt+0x184>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4403      	add	r3, r0
 80030de:	3308      	adds	r3, #8
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	889b      	ldrh	r3, [r3, #4]
 80030e4:	4299      	cmp	r1, r3
 80030e6:	bf2c      	ite	cs
 80030e8:	2301      	movcs	r3, #1
 80030ea:	2300      	movcc	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4023      	ands	r3, r4
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1b6      	bne.n	8003064 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80030f6:	bf00      	nop
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bdb0      	pop	{r4, r5, r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000019c 	.word	0x2000019c
 8003104:	200001a0 	.word	0x200001a0

08003108 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003114:	f7ff feb2 	bl	8002e7c <BSP_LCD_GetFont>
 8003118:	4603      	mov	r3, r0
 800311a:	88db      	ldrh	r3, [r3, #6]
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	fb12 f303 	smulbb	r3, r2, r3
 8003122:	b299      	uxth	r1, r3
 8003124:	2303      	movs	r3, #3
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	2000      	movs	r0, #0
 800312a:	f7ff ff29 	bl	8002f80 <BSP_LCD_DisplayStringAt>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	603a      	str	r2, [r7, #0]
 8003142:	80fb      	strh	r3, [r7, #6]
 8003144:	460b      	mov	r3, r1
 8003146:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <BSP_LCD_DrawPixel+0x88>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <BSP_LCD_DrawPixel+0x8c>)
 800314e:	2134      	movs	r1, #52	; 0x34
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3348      	adds	r3, #72	; 0x48
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d116      	bne.n	800318c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <BSP_LCD_DrawPixel+0x88>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <BSP_LCD_DrawPixel+0x8c>)
 8003164:	2134      	movs	r1, #52	; 0x34
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	335c      	adds	r3, #92	; 0x5c
 800316e:	681c      	ldr	r4, [r3, #0]
 8003170:	88bd      	ldrh	r5, [r7, #4]
 8003172:	f7ff fdaf 	bl	8002cd4 <BSP_LCD_GetXSize>
 8003176:	4603      	mov	r3, r0
 8003178:	fb03 f205 	mul.w	r2, r3, r5
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4423      	add	r3, r4
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b292      	uxth	r2, r2
 8003188:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800318a:	e015      	b.n	80031b8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <BSP_LCD_DrawPixel+0x88>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <BSP_LCD_DrawPixel+0x8c>)
 8003192:	2134      	movs	r1, #52	; 0x34
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	335c      	adds	r3, #92	; 0x5c
 800319c:	681c      	ldr	r4, [r3, #0]
 800319e:	88bd      	ldrh	r5, [r7, #4]
 80031a0:	f7ff fd98 	bl	8002cd4 <BSP_LCD_GetXSize>
 80031a4:	4603      	mov	r3, r0
 80031a6:	fb03 f205 	mul.w	r2, r3, r5
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4423      	add	r3, r4
 80031b2:	461a      	mov	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6013      	str	r3, [r2, #0]
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	2000019c 	.word	0x2000019c
 80031c4:	2000b030 	.word	0x2000b030

080031c8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af02      	add	r7, sp, #8
 80031d0:	4604      	mov	r4, r0
 80031d2:	4608      	mov	r0, r1
 80031d4:	4611      	mov	r1, r2
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	80fb      	strh	r3, [r7, #6]
 80031dc:	4603      	mov	r3, r0
 80031de:	80bb      	strh	r3, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031ec:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4930      	ldr	r1, [pc, #192]	; (80032b4 <BSP_LCD_FillRect+0xec>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fdf0 	bl	8002de4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <BSP_LCD_FillRect+0xf0>)
 800320a:	2134      	movs	r1, #52	; 0x34
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3348      	adds	r3, #72	; 0x48
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d114      	bne.n	8003244 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <BSP_LCD_FillRect+0xf0>)
 8003220:	2134      	movs	r1, #52	; 0x34
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	335c      	adds	r3, #92	; 0x5c
 800322a:	681c      	ldr	r4, [r3, #0]
 800322c:	f7ff fd52 	bl	8002cd4 <BSP_LCD_GetXSize>
 8003230:	4602      	mov	r2, r0
 8003232:	88bb      	ldrh	r3, [r7, #4]
 8003234:	fb03 f202 	mul.w	r2, r3, r2
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4423      	add	r3, r4
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e013      	b.n	800326c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <BSP_LCD_FillRect+0xf0>)
 800324a:	2134      	movs	r1, #52	; 0x34
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	335c      	adds	r3, #92	; 0x5c
 8003254:	681c      	ldr	r4, [r3, #0]
 8003256:	f7ff fd3d 	bl	8002cd4 <BSP_LCD_GetXSize>
 800325a:	4602      	mov	r2, r0
 800325c:	88bb      	ldrh	r3, [r7, #4]
 800325e:	fb03 f202 	mul.w	r2, r3, r2
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4423      	add	r3, r4
 800326a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 800326e:	681c      	ldr	r4, [r3, #0]
 8003270:	68fd      	ldr	r5, [r7, #12]
 8003272:	887e      	ldrh	r6, [r7, #2]
 8003274:	f8b7 8000 	ldrh.w	r8, [r7]
 8003278:	f7ff fd2c 	bl	8002cd4 <BSP_LCD_GetXSize>
 800327c:	4602      	mov	r2, r0
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	1ad1      	subs	r1, r2, r3
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <BSP_LCD_FillRect+0xe8>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	480b      	ldr	r0, [pc, #44]	; (80032b4 <BSP_LCD_FillRect+0xec>)
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4403      	add	r3, r0
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	9100      	str	r1, [sp, #0]
 8003298:	4643      	mov	r3, r8
 800329a:	4632      	mov	r2, r6
 800329c:	4629      	mov	r1, r5
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 f9ba 	bl	8003618 <LL_FillBuffer>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032ae:	bf00      	nop
 80032b0:	2000019c 	.word	0x2000019c
 80032b4:	200001a0 	.word	0x200001a0
 80032b8:	2000b030 	.word	0x2000b030

080032bc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b090      	sub	sp, #64	; 0x40
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032c6:	4b64      	ldr	r3, [pc, #400]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a63      	ldr	r2, [pc, #396]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80032de:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f6:	4b58      	ldr	r3, [pc, #352]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a57      	ldr	r2, [pc, #348]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 80032fc:	f043 0310 	orr.w	r3, r3, #16
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800330e:	4b52      	ldr	r3, [pc, #328]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a45      	ldr	r2, [pc, #276]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800335c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a39      	ldr	r2, [pc, #228]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003386:	4b34      	ldr	r3, [pc, #208]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a33      	ldr	r2, [pc, #204]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 800338c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b31      	ldr	r3, [pc, #196]	; (8003458 <BSP_LCD_MspInit+0x19c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800339e:	2310      	movs	r3, #16
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80033aa:	2302      	movs	r3, #2
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80033ae:	230e      	movs	r3, #14
 80033b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80033b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b6:	4619      	mov	r1, r3
 80033b8:	4828      	ldr	r0, [pc, #160]	; (800345c <BSP_LCD_MspInit+0x1a0>)
 80033ba:	f001 ff2f 	bl	800521c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80033be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80033c8:	2309      	movs	r3, #9
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033d0:	4619      	mov	r1, r3
 80033d2:	4823      	ldr	r0, [pc, #140]	; (8003460 <BSP_LCD_MspInit+0x1a4>)
 80033d4:	f001 ff22 	bl	800521c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80033d8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033e2:	230e      	movs	r3, #14
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ea:	4619      	mov	r1, r3
 80033ec:	481d      	ldr	r0, [pc, #116]	; (8003464 <BSP_LCD_MspInit+0x1a8>)
 80033ee:	f001 ff15 	bl	800521c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80033f2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033fc:	230e      	movs	r3, #14
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003404:	4619      	mov	r1, r3
 8003406:	4818      	ldr	r0, [pc, #96]	; (8003468 <BSP_LCD_MspInit+0x1ac>)
 8003408:	f001 ff08 	bl	800521c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800340c:	23f7      	movs	r3, #247	; 0xf7
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003414:	230e      	movs	r3, #14
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4813      	ldr	r0, [pc, #76]	; (800346c <BSP_LCD_MspInit+0x1b0>)
 8003420:	f001 fefc 	bl	800521c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800342a:	2301      	movs	r3, #1
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800342e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003432:	4619      	mov	r1, r3
 8003434:	480b      	ldr	r0, [pc, #44]	; (8003464 <BSP_LCD_MspInit+0x1a8>)
 8003436:	f001 fef1 	bl	800521c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800343a:	2308      	movs	r3, #8
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800343e:	2301      	movs	r3, #1
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003446:	4619      	mov	r1, r3
 8003448:	4808      	ldr	r0, [pc, #32]	; (800346c <BSP_LCD_MspInit+0x1b0>)
 800344a:	f001 fee7 	bl	800521c <HAL_GPIO_Init>
}
 800344e:	bf00      	nop
 8003450:	3740      	adds	r7, #64	; 0x40
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40021000 	.word	0x40021000
 8003460:	40021800 	.word	0x40021800
 8003464:	40022000 	.word	0x40022000
 8003468:	40022400 	.word	0x40022400
 800346c:	40022800 	.word	0x40022800

08003470 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <BSP_LCD_ClockConfig+0x34>)
 800347c:	2208      	movs	r2, #8
 800347e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <BSP_LCD_ClockConfig+0x34>)
 8003482:	22c0      	movs	r2, #192	; 0xc0
 8003484:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <BSP_LCD_ClockConfig+0x34>)
 8003488:	2205      	movs	r2, #5
 800348a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <BSP_LCD_ClockConfig+0x34>)
 800348e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003494:	4803      	ldr	r0, [pc, #12]	; (80034a4 <BSP_LCD_ClockConfig+0x34>)
 8003496:	f004 ffdf 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200001b8 	.word	0x200001b8

080034a8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	603a      	str	r2, [r7, #0]
 80034b2:	80fb      	strh	r3, [r7, #6]
 80034b4:	460b      	mov	r3, r1
 80034b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80034c0:	4b53      	ldr	r3, [pc, #332]	; (8003610 <DrawChar+0x168>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4953      	ldr	r1, [pc, #332]	; (8003614 <DrawChar+0x16c>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3308      	adds	r3, #8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	88db      	ldrh	r3, [r3, #6]
 80034d6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034d8:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <DrawChar+0x168>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	494d      	ldr	r1, [pc, #308]	; (8003614 <DrawChar+0x16c>)
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3308      	adds	r3, #8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	889b      	ldrh	r3, [r3, #4]
 80034ee:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80034f0:	8a3b      	ldrh	r3, [r7, #16]
 80034f2:	3307      	adds	r3, #7
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da00      	bge.n	80034fa <DrawChar+0x52>
 80034f8:	3307      	adds	r3, #7
 80034fa:	10db      	asrs	r3, r3, #3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	b2da      	uxtb	r2, r3
 8003502:	8a3b      	ldrh	r3, [r7, #16]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e076      	b.n	80035fe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003510:	8a3b      	ldrh	r3, [r7, #16]
 8003512:	3307      	adds	r3, #7
 8003514:	2b00      	cmp	r3, #0
 8003516:	da00      	bge.n	800351a <DrawChar+0x72>
 8003518:	3307      	adds	r3, #7
 800351a:	10db      	asrs	r3, r3, #3
 800351c:	461a      	mov	r2, r3
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fb03 f302 	mul.w	r3, r3, r2
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	4413      	add	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800352a:	8a3b      	ldrh	r3, [r7, #16]
 800352c:	3307      	adds	r3, #7
 800352e:	2b00      	cmp	r3, #0
 8003530:	da00      	bge.n	8003534 <DrawChar+0x8c>
 8003532:	3307      	adds	r3, #7
 8003534:	10db      	asrs	r3, r3, #3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <DrawChar+0x98>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <DrawChar+0xa0>
 800353e:	e00c      	b.n	800355a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	617b      	str	r3, [r7, #20]
      break;
 8003546:	e016      	b.n	8003576 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	3201      	adds	r2, #1
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
      break;
 8003558:	e00d      	b.n	8003576 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	041a      	lsls	r2, r3, #16
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3301      	adds	r3, #1
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	4313      	orrs	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	3202      	adds	r2, #2
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
      break;
 8003574:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e036      	b.n	80035ea <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800357c:	8a3a      	ldrh	r2, [r7, #16]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	4413      	add	r3, r2
 8003586:	3b01      	subs	r3, #1
 8003588:	2201      	movs	r2, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	461a      	mov	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	b29a      	uxth	r2, r3
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4413      	add	r3, r2
 80035a0:	b298      	uxth	r0, r3
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <DrawChar+0x168>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	491b      	ldr	r1, [pc, #108]	; (8003614 <DrawChar+0x16c>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7ff fdbe 	bl	8003138 <BSP_LCD_DrawPixel>
 80035bc:	e012      	b.n	80035e4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	4413      	add	r3, r2
 80035c6:	b298      	uxth	r0, r3
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <DrawChar+0x168>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4911      	ldr	r1, [pc, #68]	; (8003614 <DrawChar+0x16c>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3304      	adds	r3, #4
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	4619      	mov	r1, r3
 80035e0:	f7ff fdaa 	bl	8003138 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	3301      	adds	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	8a3b      	ldrh	r3, [r7, #16]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3c4      	bcc.n	800357c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80035f2:	88bb      	ldrh	r3, [r7, #4]
 80035f4:	3301      	adds	r3, #1
 80035f6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	8a7b      	ldrh	r3, [r7, #18]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	429a      	cmp	r2, r3
 8003604:	d384      	bcc.n	8003510 <DrawChar+0x68>
  }
}
 8003606:	bf00      	nop
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000019c 	.word	0x2000019c
 8003614:	200001a0 	.word	0x200001a0

08003618 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <LL_FillBuffer+0x88>)
 8003628:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800362c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <LL_FillBuffer+0x8c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <LL_FillBuffer+0x90>)
 8003634:	2134      	movs	r1, #52	; 0x34
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3348      	adds	r3, #72	; 0x48
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d103      	bne.n	800364c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <LL_FillBuffer+0x88>)
 8003646:	2202      	movs	r2, #2
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e002      	b.n	8003652 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <LL_FillBuffer+0x88>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <LL_FillBuffer+0x88>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <LL_FillBuffer+0x88>)
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <LL_FillBuffer+0x94>)
 800365c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800365e:	4810      	ldr	r0, [pc, #64]	; (80036a0 <LL_FillBuffer+0x88>)
 8003660:	f001 fa40 	bl	8004ae4 <HAL_DMA2D_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <LL_FillBuffer+0x88>)
 800366e:	f001 fca7 	bl	8004fc0 <HAL_DMA2D_ConfigLayer>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	4807      	ldr	r0, [pc, #28]	; (80036a0 <LL_FillBuffer+0x88>)
 8003684:	f001 fa78 	bl	8004b78 <HAL_DMA2D_Start>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800368e:	210a      	movs	r1, #10
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <LL_FillBuffer+0x88>)
 8003692:	f001 fa9c 	bl	8004bce <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2000015c 	.word	0x2000015c
 80036a4:	2000019c 	.word	0x2000019c
 80036a8:	2000b030 	.word	0x2000b030
 80036ac:	4002b000 	.word	0x4002b000

080036b0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036b6:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <BSP_SDRAM_Init+0xb0>)
 80036b8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036bc:	2202      	movs	r2, #2
 80036be:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80036c0:	4b28      	ldr	r3, [pc, #160]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036c2:	2207      	movs	r2, #7
 80036c4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036c8:	2204      	movs	r2, #4
 80036ca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036ce:	2207      	movs	r2, #7
 80036d0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036da:	2202      	movs	r2, #2
 80036dc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036f2:	2204      	movs	r2, #4
 80036f4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036f8:	2210      	movs	r2, #16
 80036fa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <BSP_SDRAM_Init+0xac>)
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <BSP_SDRAM_Init+0xac>)
 8003704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003708:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <BSP_SDRAM_Init+0xac>)
 800370c:	2200      	movs	r2, #0
 800370e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <BSP_SDRAM_Init+0xac>)
 8003712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003716:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <BSP_SDRAM_Init+0xac>)
 800371a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <BSP_SDRAM_Init+0xac>)
 8003722:	2200      	movs	r2, #0
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003726:	2100      	movs	r1, #0
 8003728:	480c      	ldr	r0, [pc, #48]	; (800375c <BSP_SDRAM_Init+0xac>)
 800372a:	f000 f87f 	bl	800382c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <BSP_SDRAM_Init+0xb4>)
 8003730:	480a      	ldr	r0, [pc, #40]	; (800375c <BSP_SDRAM_Init+0xac>)
 8003732:	f006 f91d 	bl	8009970 <HAL_SDRAM_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <BSP_SDRAM_Init+0xb8>)
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e002      	b.n	800374a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <BSP_SDRAM_Init+0xb8>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800374a:	f240 6003 	movw	r0, #1539	; 0x603
 800374e:	f000 f80d 	bl	800376c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <BSP_SDRAM_Init+0xb8>)
 8003754:	781b      	ldrb	r3, [r3, #0]
}
 8003756:	4618      	mov	r0, r3
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000b0d8 	.word	0x2000b0d8
 8003760:	a0000140 	.word	0xa0000140
 8003764:	2000023c 	.word	0x2000023c
 8003768:	2000001c 	.word	0x2000001c

0800376c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800377e:	4b29      	ldr	r3, [pc, #164]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003780:	2210      	movs	r2, #16
 8003782:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	2201      	movs	r2, #1
 8003788:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800378a:	4b26      	ldr	r3, [pc, #152]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003794:	4923      	ldr	r1, [pc, #140]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003796:	4824      	ldr	r0, [pc, #144]	; (8003828 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003798:	f006 f91e 	bl	80099d8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800379c:	2001      	movs	r0, #1
 800379e:	f000 f96b 	bl	8003a78 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a4:	2202      	movs	r2, #2
 80037a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037a8:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037aa:	2210      	movs	r2, #16
 80037ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	4919      	ldr	r1, [pc, #100]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c0:	4819      	ldr	r0, [pc, #100]	; (8003828 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037c2:	f006 f909 	bl	80099d8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c8:	2203      	movs	r2, #3
 80037ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ce:	2210      	movs	r2, #16
 80037d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d4:	2208      	movs	r2, #8
 80037d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e2:	4910      	ldr	r1, [pc, #64]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e4:	4810      	ldr	r0, [pc, #64]	; (8003828 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037e6:	f006 f8f7 	bl	80099d8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80037ea:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037ee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f2:	2204      	movs	r2, #4
 80037f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f8:	2210      	movs	r2, #16
 80037fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fe:	2201      	movs	r2, #1
 8003800:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003806:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380c:	4905      	ldr	r1, [pc, #20]	; (8003824 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380e:	4806      	ldr	r0, [pc, #24]	; (8003828 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003810:	f006 f8e2 	bl	80099d8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4804      	ldr	r0, [pc, #16]	; (8003828 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003818:	f006 f909 	bl	8009a2e <HAL_SDRAM_ProgramRefreshRate>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000258 	.word	0x20000258
 8003828:	2000b0d8 	.word	0x2000b0d8

0800382c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800382c:	b580      	push	{r7, lr}
 800382e:	b090      	sub	sp, #64	; 0x40
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	4a6f      	ldr	r2, [pc, #444]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6393      	str	r3, [r2, #56]	; 0x38
 8003842:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003866:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800387e:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 800389c:	f043 0310 	orr.w	r3, r3, #16
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038ae:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a51      	ldr	r2, [pc, #324]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <BSP_SDRAM_MspInit+0x1cc>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038fa:	2301      	movs	r3, #1
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80038fe:	2302      	movs	r3, #2
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003902:	230c      	movs	r3, #12
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003906:	2308      	movs	r3, #8
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800390a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390e:	4619      	mov	r1, r3
 8003910:	483a      	ldr	r0, [pc, #232]	; (80039fc <BSP_SDRAM_MspInit+0x1d0>)
 8003912:	f001 fc83 	bl	800521c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003916:	f24c 7303 	movw	r3, #50947	; 0xc703
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800391c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003920:	4619      	mov	r1, r3
 8003922:	4837      	ldr	r0, [pc, #220]	; (8003a00 <BSP_SDRAM_MspInit+0x1d4>)
 8003924:	f001 fc7a 	bl	800521c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003928:	f64f 7383 	movw	r3, #65411	; 0xff83
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800392e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003932:	4619      	mov	r1, r3
 8003934:	4833      	ldr	r0, [pc, #204]	; (8003a04 <BSP_SDRAM_MspInit+0x1d8>)
 8003936:	f001 fc71 	bl	800521c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800393a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003944:	4619      	mov	r1, r3
 8003946:	4830      	ldr	r0, [pc, #192]	; (8003a08 <BSP_SDRAM_MspInit+0x1dc>)
 8003948:	f001 fc68 	bl	800521c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800394c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003956:	4619      	mov	r1, r3
 8003958:	482c      	ldr	r0, [pc, #176]	; (8003a0c <BSP_SDRAM_MspInit+0x1e0>)
 800395a:	f001 fc5f 	bl	800521c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800395e:	2328      	movs	r3, #40	; 0x28
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003966:	4619      	mov	r1, r3
 8003968:	4829      	ldr	r0, [pc, #164]	; (8003a10 <BSP_SDRAM_MspInit+0x1e4>)
 800396a:	f001 fc57 	bl	800521c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 800397c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003980:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 8003984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003988:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 800398c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003990:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 8003994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003998:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 800399c:	2200      	movs	r2, #0
 800399e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039a6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039b0:	2203      	movs	r2, #3
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <BSP_SDRAM_MspInit+0x1ec>)
 80039c4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039d4:	f000 fdee 	bl	80045b4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80039d8:	480e      	ldr	r0, [pc, #56]	; (8003a14 <BSP_SDRAM_MspInit+0x1e8>)
 80039da:	f000 fd3d 	bl	8004458 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	210f      	movs	r1, #15
 80039e2:	2038      	movs	r0, #56	; 0x38
 80039e4:	f000 fbaa 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039e8:	2038      	movs	r0, #56	; 0x38
 80039ea:	f000 fbc3 	bl	8004174 <HAL_NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3740      	adds	r7, #64	; 0x40
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40021400 	.word	0x40021400
 8003a0c:	40021800 	.word	0x40021800
 8003a10:	40021c00 	.word	0x40021c00
 8003a14:	20000268 	.word	0x20000268
 8003a18:	40026410 	.word	0x40026410

08003a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a20:	2003      	movs	r0, #3
 8003a22:	f000 fb80 	bl	8004126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7fe ff5a 	bl	80028e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a2c:	f7fe f8b2 	bl	8001b94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_IncTick+0x20>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x24>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_IncTick+0x24>)
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000024 	.word	0x20000024
 8003a5c:	2000b10c 	.word	0x2000b10c

08003a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return uwTick;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_GetTick+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2000b10c 	.word	0x2000b10c

08003a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff ffee 	bl	8003a60 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d005      	beq.n	8003a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_Delay+0x40>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a9e:	bf00      	nop
 8003aa0:	f7ff ffde 	bl	8003a60 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d8f7      	bhi.n	8003aa0 <HAL_Delay+0x28>
  {
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000024 	.word	0x20000024

08003abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e031      	b.n	8003b36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe f882 	bl	8001be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_ADC_Init+0x84>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f964 	bl	8003dd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	ffffeefd 	.word	0xffffeefd

08003b44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x1c>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e12a      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x272>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b09      	cmp	r3, #9
 8003b6e:	d93a      	bls.n	8003be6 <HAL_ADC_ConfigChannel+0xa2>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b78:	d035      	beq.n	8003be6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68d9      	ldr	r1, [r3, #12]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3b1e      	subs	r3, #30
 8003b90:	2207      	movs	r2, #7
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <HAL_ADC_ConfigChannel+0x280>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68d9      	ldr	r1, [r3, #12]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	061a      	lsls	r2, r3, #24
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bbe:	e035      	b.n	8003c2c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4403      	add	r3, r0
 8003bd8:	3b1e      	subs	r3, #30
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003be4:	e022      	b.n	8003c2c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6919      	ldr	r1, [r3, #16]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43da      	mvns	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	400a      	ands	r2, r1
 8003c08:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6919      	ldr	r1, [r3, #16]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4403      	add	r3, r0
 8003c22:	409a      	lsls	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d824      	bhi.n	8003c7e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	3b05      	subs	r3, #5
 8003c46:	221f      	movs	r2, #31
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	400a      	ands	r2, r1
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3b05      	subs	r3, #5
 8003c70:	fa00 f203 	lsl.w	r2, r0, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7c:	e04c      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d824      	bhi.n	8003cd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	3b23      	subs	r3, #35	; 0x23
 8003c98:	221f      	movs	r2, #31
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b23      	subs	r3, #35	; 0x23
 8003cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cce:	e023      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	3b41      	subs	r3, #65	; 0x41
 8003ce2:	221f      	movs	r2, #31
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	400a      	ands	r2, r1
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	3b41      	subs	r3, #65	; 0x41
 8003d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <HAL_ADC_ConfigChannel+0x284>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10a      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1f4>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d36:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_ADC_ConfigChannel+0x284>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d109      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x212>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b12      	cmp	r3, #18
 8003d48:	d105      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d54:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_ADC_ConfigChannel+0x284>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d125      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x268>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_ADC_ConfigChannel+0x280>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x22e>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b11      	cmp	r3, #17
 8003d70:	d11c      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_ADC_ConfigChannel+0x288>)
 8003d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_ADC_ConfigChannel+0x280>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_ADC_ConfigChannel+0x28c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_ADC_ConfigChannel+0x290>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9a      	lsrs	r2, r3, #18
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d9e:	e002      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f9      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	10000012 	.word	0x10000012
 8003dc8:	40012000 	.word	0x40012000
 8003dcc:	40012300 	.word	0x40012300
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	431bde83 	.word	0x431bde83

08003dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <ADC_Init+0x1ec>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <ADC_Init+0x1ec>)
 8003de6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003dec:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <ADC_Init+0x1ec>)
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4973      	ldr	r1, [pc, #460]	; (8003fc4 <ADC_Init+0x1ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <ADC_Init+0x1f0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e00f      	b.n	8003ed2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0202 	bic.w	r2, r2, #2
 8003ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	005a      	lsls	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	035a      	lsls	r2, r3, #13
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e007      	b.n	8003f48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	051a      	lsls	r2, r3, #20
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f8a:	025a      	lsls	r2, r3, #9
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	029a      	lsls	r2, r3, #10
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40012300 	.word	0x40012300
 8003fc8:	0f000001 	.word	0x0f000001

08003fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00
 8004010:	05fa0000 	.word	0x05fa0000

08004014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	; (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
         );
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff4c 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800414e:	f7ff ff61 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f7ff ffb1 	bl	80040c0 <NVIC_EncodePriority>
 800415e:	4602      	mov	r2, r0
 8004160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ff80 	bl	800406c <__NVIC_SetPriority>
}
 800416c:	bf00      	nop
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ff54 	bl	8004030 <__NVIC_EnableIRQ>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e054      	b.n	800424c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7f5b      	ldrb	r3, [r3, #29]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fd70 	bl	8001c98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a22      	ldr	r2, [pc, #136]	; (8004254 <HAL_CRC_Init+0xc4>)
 80041cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0218 	bic.w	r2, r2, #24
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e00c      	b.n	80041fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6899      	ldr	r1, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f834 	bl	8004258 <HAL_CRCEx_Polynomial_Set>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e028      	b.n	800424c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	795b      	ldrb	r3, [r3, #5]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f04f 32ff 	mov.w	r2, #4294967295
 800420a:	611a      	str	r2, [r3, #16]
 800420c:	e004      	b.n	8004218 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6912      	ldr	r2, [r2, #16]
 8004216:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	04c11db7 	.word	0x04c11db7

08004258 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004268:	231f      	movs	r3, #31
 800426a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800426c:	bf00      	nop
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	613a      	str	r2, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_CRCEx_Polynomial_Set+0x34>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b18      	cmp	r3, #24
 8004290:	d846      	bhi.n	8004320 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	08004327 	.word	0x08004327
 800429c:	08004321 	.word	0x08004321
 80042a0:	08004321 	.word	0x08004321
 80042a4:	08004321 	.word	0x08004321
 80042a8:	08004321 	.word	0x08004321
 80042ac:	08004321 	.word	0x08004321
 80042b0:	08004321 	.word	0x08004321
 80042b4:	08004321 	.word	0x08004321
 80042b8:	08004315 	.word	0x08004315
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004321 	.word	0x08004321
 80042c4:	08004321 	.word	0x08004321
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004321 	.word	0x08004321
 80042d0:	08004321 	.word	0x08004321
 80042d4:	08004321 	.word	0x08004321
 80042d8:	08004309 	.word	0x08004309
 80042dc:	08004321 	.word	0x08004321
 80042e0:	08004321 	.word	0x08004321
 80042e4:	08004321 	.word	0x08004321
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004321 	.word	0x08004321
 80042f4:	08004321 	.word	0x08004321
 80042f8:	080042fd 	.word	0x080042fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d913      	bls.n	800432a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004306:	e010      	b.n	800432a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b07      	cmp	r3, #7
 800430c:	d90f      	bls.n	800432e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004312:	e00c      	b.n	800432e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d90b      	bls.n	8004332 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800431e:	e008      	b.n	8004332 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e006      	b.n	8004334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004332:	bf00      	nop
  }
  if (status == HAL_OK)
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 0118 	bic.w	r1, r3, #24
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e069      	b.n	800444a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fca8 	bl	8001cd8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_DCMI_Init+0xf0>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043da:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043f2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d112      	bne.n	800442a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7f1b      	ldrb	r3, [r3, #28]
 8004408:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	7f5b      	ldrb	r3, [r3, #29]
 800440e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004410:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7f9b      	ldrb	r3, [r3, #30]
 8004416:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004418:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7fdb      	ldrb	r3, [r3, #31]
 8004420:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004426:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004428:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 021e 	orr.w	r2, r2, #30
 8004438:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	ffe0f007 	.word	0xffe0f007

08004458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff fafc 	bl	8003a60 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e099      	b.n	80045a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	e00f      	b.n	80044b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004496:	f7ff fae3 	bl	8003a60 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d908      	bls.n	80044b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e078      	b.n	80045a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e8      	bne.n	8004496 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4b38      	ldr	r3, [pc, #224]	; (80045b0 <HAL_DMA_Init+0x158>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	2b04      	cmp	r3, #4
 800450e:	d107      	bne.n	8004520 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4313      	orrs	r3, r2
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b04      	cmp	r3, #4
 8004548:	d117      	bne.n	800457a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa47 	bl	80049f0 <DMA_CheckFifoParam>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004576:	2301      	movs	r3, #1
 8004578:	e016      	b.n	80045a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9fe 	bl	8004984 <DMA_CalcBaseAndBitshift>
 8004588:	4603      	mov	r3, r0
 800458a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	223f      	movs	r2, #63	; 0x3f
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	f010803f 	.word	0xf010803f

080045b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e050      	b.n	8004668 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
 80045d4:	e048      	b.n	8004668 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2221      	movs	r2, #33	; 0x21
 8004614:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9b4 	bl	8004984 <DMA_CalcBaseAndBitshift>
 800461c:	4603      	mov	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	223f      	movs	r2, #63	; 0x3f
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800467c:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <HAL_DMA_IRQHandler+0x258>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a92      	ldr	r2, [pc, #584]	; (80048cc <HAL_DMA_IRQHandler+0x25c>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	2208      	movs	r2, #8
 800469c:	409a      	lsls	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01a      	beq.n	80046dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0204 	bic.w	r2, r2, #4
 80046c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	2208      	movs	r2, #8
 80046ca:	409a      	lsls	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2201      	movs	r2, #1
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	2201      	movs	r2, #1
 8004700:	409a      	lsls	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f043 0202 	orr.w	r2, r3, #2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2204      	movs	r2, #4
 8004718:	409a      	lsls	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d012      	beq.n	8004748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	2204      	movs	r2, #4
 8004736:	409a      	lsls	r2, r3
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	f043 0204 	orr.w	r2, r3, #4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	2210      	movs	r2, #16
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d043      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03c      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	2210      	movs	r2, #16
 800476c:	409a      	lsls	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d018      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d108      	bne.n	80047a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d024      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	e01f      	b.n	80047e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
 80047b0:	e016      	b.n	80047e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0208 	bic.w	r2, r2, #8
 80047ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	2220      	movs	r2, #32
 80047e6:	409a      	lsls	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 808e 	beq.w	800490e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8086 	beq.w	800490e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	2220      	movs	r2, #32
 8004808:	409a      	lsls	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b05      	cmp	r3, #5
 8004818:	d136      	bne.n	8004888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0216 	bic.w	r2, r2, #22
 8004828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_DMA_IRQHandler+0x1da>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0208 	bic.w	r2, r2, #8
 8004858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	223f      	movs	r2, #63	; 0x3f
 8004860:	409a      	lsls	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	2b00      	cmp	r3, #0
 800487c:	d07d      	beq.n	800497a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
        }
        return;
 8004886:	e078      	b.n	800497a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01c      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d030      	beq.n	800490e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
 80048b4:	e02b      	b.n	800490e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d027      	beq.n	800490e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e022      	b.n	800490e <HAL_DMA_IRQHandler+0x29e>
 80048c8:	20000000 	.word	0x20000000
 80048cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10f      	bne.n	80048fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0210 	bic.w	r2, r2, #16
 80048ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	2b00      	cmp	r3, #0
 8004914:	d032      	beq.n	800497c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d022      	beq.n	8004968 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2205      	movs	r2, #5
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	429a      	cmp	r2, r3
 8004944:	d307      	bcc.n	8004956 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f2      	bne.n	800493a <HAL_DMA_IRQHandler+0x2ca>
 8004954:	e000      	b.n	8004958 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004956:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e000      	b.n	800497c <HAL_DMA_IRQHandler+0x30c>
        return;
 800497a:	bf00      	nop
    }
  }
}
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	3b10      	subs	r3, #16
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <DMA_CalcBaseAndBitshift+0x60>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800499e:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <DMA_CalcBaseAndBitshift+0x64>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d908      	bls.n	80049c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <DMA_CalcBaseAndBitshift+0x68>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58
 80049c2:	e006      	b.n	80049d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <DMA_CalcBaseAndBitshift+0x68>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	aaaaaaab 	.word	0xaaaaaaab
 80049e8:	0801654c 	.word	0x0801654c
 80049ec:	fffffc00 	.word	0xfffffc00

080049f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11f      	bne.n	8004a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d855      	bhi.n	8004abc <DMA_CheckFifoParam+0xcc>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <DMA_CheckFifoParam+0x28>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a3b 	.word	0x08004a3b
 8004a20:	08004a29 	.word	0x08004a29
 8004a24:	08004abd 	.word	0x08004abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d045      	beq.n	8004ac0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a38:	e042      	b.n	8004ac0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a42:	d13f      	bne.n	8004ac4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a48:	e03c      	b.n	8004ac4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a52:	d121      	bne.n	8004a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d836      	bhi.n	8004ac8 <DMA_CheckFifoParam+0xd8>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <DMA_CheckFifoParam+0x70>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a77 	.word	0x08004a77
 8004a68:	08004a71 	.word	0x08004a71
 8004a6c:	08004a89 	.word	0x08004a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      break;
 8004a74:	e02f      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d024      	beq.n	8004acc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a86:	e021      	b.n	8004acc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a90:	d11e      	bne.n	8004ad0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a96:	e01b      	b.n	8004ad0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <DMA_CheckFifoParam+0xb4>
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d003      	beq.n	8004aaa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004aa2:	e018      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e015      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aba:	e00b      	b.n	8004ad4 <DMA_CheckFifoParam+0xe4>
      break;
 8004abc:	bf00      	nop
 8004abe:	e00a      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ac0:	bf00      	nop
 8004ac2:	e008      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e006      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e004      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8004acc:	bf00      	nop
 8004ace:	e002      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;   
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ad4:	bf00      	nop
    }
  } 
  
  return status; 
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e039      	b.n	8004b6a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd f9a2 	bl	8001e54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	f023 0107 	bic.w	r1, r3, #7
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_DMA2D_Init+0x90>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68d1      	ldr	r1, [r2, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	ffffc000 	.word	0xffffc000

08004b78 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_DMA2D_Start+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e018      	b.n	8004bc6 <HAL_DMA2D_Start+0x4e>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fa98 	bl	80050e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d056      	beq.n	8004c98 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004bea:	f7fe ff39 	bl	8003a60 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004bf0:	e04b      	b.n	8004c8a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d023      	beq.n	8004c4c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a5      	b.n	8004d98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d01a      	beq.n	8004c8a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004c54:	f7fe ff04 	bl	8003a60 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <HAL_DMA2D_PollForTransfer+0x9c>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e086      	b.n	8004d98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ac      	beq.n	8004bf2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d061      	beq.n	8004d7e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fe fed1 	bl	8003a60 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004cc0:	e056      	b.n	8004d70 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02e      	beq.n	8004d32 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	f043 0202 	orr.w	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2229      	movs	r2, #41	; 0x29
 8004d1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2204      	movs	r2, #4
 8004d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e032      	b.n	8004d98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d01a      	beq.n	8004d70 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004d3a:	f7fe fe91 	bl	8003a60 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <HAL_DMA2D_PollForTransfer+0x182>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e013      	b.n	8004d98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0a1      	beq.n	8004cc2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2212      	movs	r2, #18
 8004d84:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d026      	beq.n	8004e10 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d021      	beq.n	8004e10 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dda:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d026      	beq.n	8004e68 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d021      	beq.n	8004e68 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e32:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	f043 0202 	orr.w	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d026      	beq.n	8004ec0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d021      	beq.n	8004ec0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2208      	movs	r2, #8
 8004e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2204      	movs	r2, #4
 8004ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d013      	beq.n	8004ef2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f853 	bl	8004f98 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d024      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01f      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f14:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01f      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01a      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2210      	movs	r2, #16
 8004f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f80e 	bl	8004fac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_DMA2D_ConfigLayer+0x20>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e079      	b.n	80050d4 <HAL_DMA2D_ConfigLayer+0x114>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	3318      	adds	r3, #24
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800500c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b0a      	cmp	r3, #10
 8005014:	d003      	beq.n	800501e <HAL_DMA2D_ConfigLayer+0x5e>
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b09      	cmp	r3, #9
 800501c:	d107      	bne.n	800502e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e005      	b.n	800503a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d120      	bne.n	8005082 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	ea02 0103 	and.w	r1, r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	430a      	orrs	r2, r1
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b0a      	cmp	r3, #10
 8005068:	d003      	beq.n	8005072 <HAL_DMA2D_ConfigLayer+0xb2>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b09      	cmp	r3, #9
 8005070:	d127      	bne.n	80050c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
 8005080:	e01f      	b.n	80050c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	43db      	mvns	r3, r3
 800508c:	ea02 0103 	and.w	r1, r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	430a      	orrs	r2, r1
 8005098:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b0a      	cmp	r3, #10
 80050aa:	d003      	beq.n	80050b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d106      	bne.n	80050c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80050c0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	ff03000f 	.word	0xff03000f

080050e4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b08b      	sub	sp, #44	; 0x2c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	041a      	lsls	r2, r3, #16
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800511c:	d174      	bne.n	8005208 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005124:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800512c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005134:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	431a      	orrs	r2, r3
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	4313      	orrs	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
 8005154:	e053      	b.n	80051fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d106      	bne.n	800516c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4313      	orrs	r3, r2
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e048      	b.n	80051fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d111      	bne.n	8005198 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	0cdb      	lsrs	r3, r3, #19
 8005178:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	0a9b      	lsrs	r3, r3, #10
 800517e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	02db      	lsls	r3, r3, #11
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
 8005196:	e032      	b.n	80051fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d117      	bne.n	80051d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	0fdb      	lsrs	r3, r3, #31
 80051a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	0cdb      	lsrs	r3, r3, #19
 80051aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	431a      	orrs	r2, r3
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	03db      	lsls	r3, r3, #15
 80051c6:	4313      	orrs	r3, r2
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e016      	b.n	80051fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	0f1b      	lsrs	r3, r3, #28
 80051d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	0d1b      	lsrs	r3, r3, #20
 80051da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	0b1b      	lsrs	r3, r3, #12
 80051e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	011a      	lsls	r2, r3, #4
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	431a      	orrs	r2, r3
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	4313      	orrs	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005206:	e003      	b.n	8005210 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	60da      	str	r2, [r3, #12]
}
 8005210:	bf00      	nop
 8005212:	372c      	adds	r7, #44	; 0x2c
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e175      	b.n	8005528 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800523c:	2201      	movs	r2, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4013      	ands	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	f040 8164 	bne.w	8005522 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d00b      	beq.n	800527a <HAL_GPIO_Init+0x5e>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d007      	beq.n	800527a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800526e:	2b11      	cmp	r3, #17
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b12      	cmp	r3, #18
 8005278:	d130      	bne.n	80052dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052b0:	2201      	movs	r2, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 0201 	and.w	r2, r3, #1
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2203      	movs	r2, #3
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x100>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b12      	cmp	r3, #18
 800531a:	d123      	bne.n	8005364 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	08da      	lsrs	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3208      	adds	r2, #8
 8005324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	220f      	movs	r2, #15
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	08da      	lsrs	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3208      	adds	r2, #8
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	2203      	movs	r2, #3
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0203 	and.w	r2, r3, #3
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80be 	beq.w	8005522 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a6:	4b65      	ldr	r3, [pc, #404]	; (800553c <HAL_GPIO_Init+0x320>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	4a64      	ldr	r2, [pc, #400]	; (800553c <HAL_GPIO_Init+0x320>)
 80053ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b0:	6453      	str	r3, [r2, #68]	; 0x44
 80053b2:	4b62      	ldr	r3, [pc, #392]	; (800553c <HAL_GPIO_Init+0x320>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80053be:	4a60      	ldr	r2, [pc, #384]	; (8005540 <HAL_GPIO_Init+0x324>)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	3302      	adds	r3, #2
 80053c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	220f      	movs	r2, #15
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a57      	ldr	r2, [pc, #348]	; (8005544 <HAL_GPIO_Init+0x328>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d037      	beq.n	800545a <HAL_GPIO_Init+0x23e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a56      	ldr	r2, [pc, #344]	; (8005548 <HAL_GPIO_Init+0x32c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_GPIO_Init+0x23a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a55      	ldr	r2, [pc, #340]	; (800554c <HAL_GPIO_Init+0x330>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <HAL_GPIO_Init+0x236>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a54      	ldr	r2, [pc, #336]	; (8005550 <HAL_GPIO_Init+0x334>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d025      	beq.n	800544e <HAL_GPIO_Init+0x232>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a53      	ldr	r2, [pc, #332]	; (8005554 <HAL_GPIO_Init+0x338>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01f      	beq.n	800544a <HAL_GPIO_Init+0x22e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a52      	ldr	r2, [pc, #328]	; (8005558 <HAL_GPIO_Init+0x33c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d019      	beq.n	8005446 <HAL_GPIO_Init+0x22a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a51      	ldr	r2, [pc, #324]	; (800555c <HAL_GPIO_Init+0x340>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_GPIO_Init+0x226>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_GPIO_Init+0x344>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_GPIO_Init+0x222>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <HAL_GPIO_Init+0x348>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <HAL_GPIO_Init+0x21e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a4e      	ldr	r2, [pc, #312]	; (8005568 <HAL_GPIO_Init+0x34c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_GPIO_Init+0x21a>
 8005432:	2309      	movs	r3, #9
 8005434:	e012      	b.n	800545c <HAL_GPIO_Init+0x240>
 8005436:	230a      	movs	r3, #10
 8005438:	e010      	b.n	800545c <HAL_GPIO_Init+0x240>
 800543a:	2308      	movs	r3, #8
 800543c:	e00e      	b.n	800545c <HAL_GPIO_Init+0x240>
 800543e:	2307      	movs	r3, #7
 8005440:	e00c      	b.n	800545c <HAL_GPIO_Init+0x240>
 8005442:	2306      	movs	r3, #6
 8005444:	e00a      	b.n	800545c <HAL_GPIO_Init+0x240>
 8005446:	2305      	movs	r3, #5
 8005448:	e008      	b.n	800545c <HAL_GPIO_Init+0x240>
 800544a:	2304      	movs	r3, #4
 800544c:	e006      	b.n	800545c <HAL_GPIO_Init+0x240>
 800544e:	2303      	movs	r3, #3
 8005450:	e004      	b.n	800545c <HAL_GPIO_Init+0x240>
 8005452:	2302      	movs	r3, #2
 8005454:	e002      	b.n	800545c <HAL_GPIO_Init+0x240>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_GPIO_Init+0x240>
 800545a:	2300      	movs	r3, #0
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	f002 0203 	and.w	r2, r2, #3
 8005462:	0092      	lsls	r2, r2, #2
 8005464:	4093      	lsls	r3, r2
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4313      	orrs	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800546c:	4934      	ldr	r1, [pc, #208]	; (8005540 <HAL_GPIO_Init+0x324>)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800547a:	4b3c      	ldr	r3, [pc, #240]	; (800556c <HAL_GPIO_Init+0x350>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	43db      	mvns	r3, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800549e:	4a33      	ldr	r2, [pc, #204]	; (800556c <HAL_GPIO_Init+0x350>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054a4:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_GPIO_Init+0x350>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_GPIO_Init+0x350>)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <HAL_GPIO_Init+0x350>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_GPIO_Init+0x350>)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <HAL_GPIO_Init+0x350>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800551c:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_GPIO_Init+0x350>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	f67f ae86 	bls.w	800523c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005530:	bf00      	nop
 8005532:	3724      	adds	r7, #36	; 0x24
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40023800 	.word	0x40023800
 8005540:	40013800 	.word	0x40013800
 8005544:	40020000 	.word	0x40020000
 8005548:	40020400 	.word	0x40020400
 800554c:	40020800 	.word	0x40020800
 8005550:	40020c00 	.word	0x40020c00
 8005554:	40021000 	.word	0x40021000
 8005558:	40021400 	.word	0x40021400
 800555c:	40021800 	.word	0x40021800
 8005560:	40021c00 	.word	0x40021c00
 8005564:	40022000 	.word	0x40022000
 8005568:	40022400 	.word	0x40022400
 800556c:	40013c00 	.word	0x40013c00

08005570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
 800557c:	4613      	mov	r3, r2
 800557e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005580:	787b      	ldrb	r3, [r7, #1]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005586:	887a      	ldrh	r2, [r7, #2]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800558c:	e003      	b.n	8005596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800558e:	887b      	ldrh	r3, [r7, #2]
 8005590:	041a      	lsls	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	619a      	str	r2, [r3, #24]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80055a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a4:	b08f      	sub	sp, #60	; 0x3c
 80055a6:	af0a      	add	r7, sp, #40	; 0x28
 80055a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e054      	b.n	800565e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f00c fd74 	bl	80120bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2203      	movs	r2, #3
 80055d8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f006 f8c7 	bl	800b786 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	687e      	ldr	r6, [r7, #4]
 8005600:	466d      	mov	r5, sp
 8005602:	f106 0410 	add.w	r4, r6, #16
 8005606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800560a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800560c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800560e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005612:	e885 0003 	stmia.w	r5, {r0, r1}
 8005616:	1d33      	adds	r3, r6, #4
 8005618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800561a:	6838      	ldr	r0, [r7, #0]
 800561c:	f006 f84a 	bl	800b6b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2101      	movs	r1, #1
 8005626:	4618      	mov	r0, r3
 8005628:	f006 f8be 	bl	800b7a8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	687e      	ldr	r6, [r7, #4]
 8005634:	466d      	mov	r5, sp
 8005636:	f106 0410 	add.w	r4, r6, #16
 800563a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800563e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005646:	e885 0003 	stmia.w	r5, {r0, r1}
 800564a:	1d33      	adds	r3, r6, #4
 800564c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	f006 f9d0 	bl	800b9f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005666 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005666:	b590      	push	{r4, r7, lr}
 8005668:	b089      	sub	sp, #36	; 0x24
 800566a:	af04      	add	r7, sp, #16
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	461a      	mov	r2, r3
 8005674:	4603      	mov	r3, r0
 8005676:	70fb      	strb	r3, [r7, #3]
 8005678:	460b      	mov	r3, r1
 800567a:	70bb      	strb	r3, [r7, #2]
 800567c:	4613      	mov	r3, r2
 800567e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_HCD_HC_Init+0x28>
 800568a:	2302      	movs	r3, #2
 800568c:	e07f      	b.n	800578e <HAL_HCD_HC_Init+0x128>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	333d      	adds	r3, #61	; 0x3d
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	3338      	adds	r3, #56	; 0x38
 80056ba:	787a      	ldrb	r2, [r7, #1]
 80056bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	3340      	adds	r3, #64	; 0x40
 80056ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80056d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	440b      	add	r3, r1
 80056e0:	3339      	adds	r3, #57	; 0x39
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	333f      	adds	r3, #63	; 0x3f
 80056f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80056fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	78bb      	ldrb	r3, [r7, #2]
 8005700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005704:	b2d8      	uxtb	r0, r3
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	333a      	adds	r3, #58	; 0x3a
 8005714:	4602      	mov	r2, r0
 8005716:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005718:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da0a      	bge.n	8005736 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	333b      	adds	r3, #59	; 0x3b
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e009      	b.n	800574a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	333b      	adds	r3, #59	; 0x3b
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	333c      	adds	r3, #60	; 0x3c
 800575a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800575e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	787c      	ldrb	r4, [r7, #1]
 8005766:	78ba      	ldrb	r2, [r7, #2]
 8005768:	78f9      	ldrb	r1, [r7, #3]
 800576a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800576c:	9302      	str	r3, [sp, #8]
 800576e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4623      	mov	r3, r4
 800577c:	f006 fab0 	bl	800bce0 <USB_HC_Init>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}

08005796 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_HCD_HC_Halt+0x1e>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e00f      	b.n	80057d4 <HAL_HCD_HC_Halt+0x3e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f006 fcea 	bl	800c19e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	70fb      	strb	r3, [r7, #3]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70bb      	strb	r3, [r7, #2]
 80057f2:	4613      	mov	r3, r2
 80057f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	333b      	adds	r3, #59	; 0x3b
 8005806:	78ba      	ldrb	r2, [r7, #2]
 8005808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	333f      	adds	r3, #63	; 0x3f
 800581a:	787a      	ldrb	r2, [r7, #1]
 800581c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800581e:	7c3b      	ldrb	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d114      	bne.n	800584e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	440b      	add	r3, r1
 8005832:	3342      	adds	r3, #66	; 0x42
 8005834:	2203      	movs	r2, #3
 8005836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	440b      	add	r3, r1
 8005846:	333d      	adds	r3, #61	; 0x3d
 8005848:	7f3a      	ldrb	r2, [r7, #28]
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e009      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	440b      	add	r3, r1
 800585c:	3342      	adds	r3, #66	; 0x42
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005862:	787b      	ldrb	r3, [r7, #1]
 8005864:	2b03      	cmp	r3, #3
 8005866:	f200 80d6 	bhi.w	8005a16 <HAL_HCD_HC_SubmitRequest+0x23a>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_HCD_HC_SubmitRequest+0x94>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	08005a01 	.word	0x08005a01
 8005878:	080058ed 	.word	0x080058ed
 800587c:	08005977 	.word	0x08005977
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005880:	7c3b      	ldrb	r3, [r7, #16]
 8005882:	2b01      	cmp	r3, #1
 8005884:	f040 80c9 	bne.w	8005a1a <HAL_HCD_HC_SubmitRequest+0x23e>
 8005888:	78bb      	ldrb	r3, [r7, #2]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 80c5 	bne.w	8005a1a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005890:	8b3b      	ldrh	r3, [r7, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005896:	78fa      	ldrb	r2, [r7, #3]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	3351      	adds	r3, #81	; 0x51
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	440b      	add	r3, r1
 80058b8:	3351      	adds	r3, #81	; 0x51
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	3342      	adds	r3, #66	; 0x42
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80058d4:	e0a1      	b.n	8005a1a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	3342      	adds	r3, #66	; 0x42
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
      break;
 80058ea:	e096      	b.n	8005a1a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80058ec:	78bb      	ldrb	r3, [r7, #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d120      	bne.n	8005934 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	3351      	adds	r3, #81	; 0x51
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	3342      	adds	r3, #66	; 0x42
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800591c:	e07e      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	3342      	adds	r3, #66	; 0x42
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
      break;
 8005932:	e073      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	440b      	add	r3, r1
 8005942:	3350      	adds	r3, #80	; 0x50
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	440b      	add	r3, r1
 8005958:	3342      	adds	r3, #66	; 0x42
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
      break;
 800595e:	e05d      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	3342      	adds	r3, #66	; 0x42
 8005970:	2202      	movs	r2, #2
 8005972:	701a      	strb	r2, [r3, #0]
      break;
 8005974:	e052      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005976:	78bb      	ldrb	r3, [r7, #2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d120      	bne.n	80059be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	440b      	add	r3, r1
 800598a:	3351      	adds	r3, #81	; 0x51
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	440b      	add	r3, r1
 80059a0:	3342      	adds	r3, #66	; 0x42
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80059a6:	e039      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	3342      	adds	r3, #66	; 0x42
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
      break;
 80059bc:	e02e      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	3350      	adds	r3, #80	; 0x50
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	3342      	adds	r3, #66	; 0x42
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
      break;
 80059e8:	e018      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	3342      	adds	r3, #66	; 0x42
 80059fa:	2202      	movs	r2, #2
 80059fc:	701a      	strb	r2, [r3, #0]
      break;
 80059fe:	e00d      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3342      	adds	r3, #66	; 0x42
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
      break;
 8005a14:	e002      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005a1a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	440b      	add	r3, r1
 8005a2a:	3344      	adds	r3, #68	; 0x44
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	8b39      	ldrh	r1, [r7, #24]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4403      	add	r3, r0
 8005a40:	3348      	adds	r3, #72	; 0x48
 8005a42:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	440b      	add	r3, r1
 8005a52:	335c      	adds	r3, #92	; 0x5c
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	334c      	adds	r3, #76	; 0x4c
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	3339      	adds	r3, #57	; 0x39
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	440b      	add	r3, r1
 8005a8e:	335d      	adds	r3, #93	; 0x5d
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	3338      	adds	r3, #56	; 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	18d1      	adds	r1, r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f006 fa20 	bl	800bef4 <USB_HC_StartXfer>
 8005ab4:	4603      	mov	r3, r0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop

08005ac0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f005 ff49 	bl	800b96e <USB_GetMode>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	f040 80ef 	bne.w	8005cc2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f005 ff2d 	bl	800b948 <USB_ReadInterrupts>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80e5 	beq.w	8005cc0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f005 ff24 	bl	800b948 <USB_ReadInterrupts>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b0a:	d104      	bne.n	8005b16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f005 ff14 	bl	800b948 <USB_ReadInterrupts>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b2a:	d104      	bne.n	8005b36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 ff04 	bl	800b948 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b4a:	d104      	bne.n	8005b56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f005 fef4 	bl	800b948 <USB_ReadInterrupts>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f005 fee6 	bl	800b948 <USB_ReadInterrupts>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b86:	d115      	bne.n	8005bb4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d108      	bne.n	8005bb4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f00c fafc 	bl	80121a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f005 ffd0 	bl	800bb54 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f005 fec5 	bl	800b948 <USB_ReadInterrupts>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc8:	d102      	bne.n	8005bd0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f966 	bl	8006e9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f005 feb7 	bl	800b948 <USB_ReadInterrupts>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d106      	bne.n	8005bf2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f00c fabf 	bl	8012168 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f005 fea6 	bl	800b948 <USB_ReadInterrupts>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c06:	d138      	bne.n	8005c7a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f006 fab5 	bl	800c17c <USB_HC_ReadInterrupt>
 8005c12:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e025      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d018      	beq.n	8005c60 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c44:	d106      	bne.n	8005c54 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8cf 	bl	8005df0 <HCD_HC_IN_IRQHandler>
 8005c52:	e005      	b.n	8005c60 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fcfd 	bl	800665a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3301      	adds	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d3d4      	bcc.n	8005c1a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f005 fe62 	bl	800b948 <USB_ReadInterrupts>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d101      	bne.n	8005c92 <HAL_HCD_IRQHandler+0x1d2>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_HCD_IRQHandler+0x1d4>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d014      	beq.n	8005cc2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0210 	bic.w	r2, r2, #16
 8005ca6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f84b 	bl	8006d44 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0210 	orr.w	r2, r2, #16
 8005cbc:	619a      	str	r2, [r3, #24]
 8005cbe:	e000      	b.n	8005cc2 <HAL_HCD_IRQHandler+0x202>
      return;
 8005cc0:	bf00      	nop
    }
  }
}
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_HCD_Start+0x16>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e013      	b.n	8005d06 <HAL_HCD_Start+0x3e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f005 fd3a 	bl	800b764 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f005 ff90 	bl	800bc1c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_HCD_Stop+0x16>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e00d      	b.n	8005d40 <HAL_HCD_Stop+0x32>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f006 fb6f 	bl	800c414 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f005 ff37 	bl	800bbc8 <USB_ResetPort>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	440b      	add	r3, r1
 8005d7e:	335c      	adds	r3, #92	; 0x5c
 8005d80:	781b      	ldrb	r3, [r3, #0]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	440b      	add	r3, r1
 8005da8:	334c      	adds	r3, #76	; 0x4c
 8005daa:	681b      	ldr	r3, [r3, #0]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f005 ff79 	bl	800bcbc <USB_GetCurrentFrame>
 8005dca:	4603      	mov	r3, r0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f005 ff54 	bl	800bc8e <USB_GetHostSpeed>
 8005de6:	4603      	mov	r3, r0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d119      	bne.n	8005e54 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2304      	movs	r3, #4
 8005e30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	60d3      	str	r3, [r2, #12]
 8005e52:	e0ce      	b.n	8005ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d12c      	bne.n	8005ec6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	440b      	add	r3, r1
 8005e8e:	335d      	adds	r3, #93	; 0x5d
 8005e90:	2207      	movs	r2, #7
 8005e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eae:	f043 0302 	orr.w	r3, r3, #2
 8005eb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f006 f96d 	bl	800c19e <USB_HC_Halt>
 8005ec4:	e095      	b.n	8005ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d109      	bne.n	8005ef0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2320      	movs	r3, #32
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	e080      	b.n	8005ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d134      	bne.n	8005f70 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	440b      	add	r3, r1
 8005f34:	335d      	adds	r3, #93	; 0x5d
 8005f36:	2205      	movs	r2, #5
 8005f38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	461a      	mov	r2, r3
 8005f48:	2310      	movs	r3, #16
 8005f4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f006 f918 	bl	800c19e <USB_HC_Halt>
 8005f6e:	e040      	b.n	8005ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f86:	d134      	bne.n	8005ff2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f006 f8f3 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	440b      	add	r3, r1
 8005fd8:	335d      	adds	r3, #93	; 0x5d
 8005fda:	2208      	movs	r2, #8
 8005fdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	461a      	mov	r2, r3
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d122      	bne.n	8006050 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	4611      	mov	r1, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f006 f8b2 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006046:	461a      	mov	r2, r3
 8006048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800604e:	e300      	b.n	8006652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b01      	cmp	r3, #1
 8006064:	f040 80fd 	bne.w	8006262 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	3348      	adds	r3, #72	; 0x48
 8006080:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	0159      	lsls	r1, r3, #5
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	440b      	add	r3, r1
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006094:	1ad1      	subs	r1, r2, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4403      	add	r3, r0
 80060a4:	334c      	adds	r3, #76	; 0x4c
 80060a6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335d      	adds	r3, #93	; 0x5d
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3358      	adds	r3, #88	; 0x58
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	461a      	mov	r2, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	440b      	add	r3, r1
 80060f0:	333f      	adds	r3, #63	; 0x3f
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	333f      	adds	r3, #63	; 0x3f
 8006108:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800610a:	2b02      	cmp	r3, #2
 800610c:	d121      	bne.n	8006152 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f043 0302 	orr.w	r3, r3, #2
 800612c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f006 f830 	bl	800c19e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	461a      	mov	r2, r3
 800614c:	2310      	movs	r3, #16
 800614e:	6093      	str	r3, [r2, #8]
 8006150:	e070      	b.n	8006234 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	333f      	adds	r3, #63	; 0x3f
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d12a      	bne.n	80061be <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	440a      	add	r2, r1
 800617e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006186:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	335c      	adds	r3, #92	; 0x5c
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	b2d8      	uxtb	r0, r3
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	335c      	adds	r3, #92	; 0x5c
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	4601      	mov	r1, r0
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f00c f800 	bl	80121bc <HAL_HCD_HC_NotifyURBChange_Callback>
 80061bc:	e03a      	b.n	8006234 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	440b      	add	r3, r1
 80061cc:	333f      	adds	r3, #63	; 0x3f
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d12f      	bne.n	8006234 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	440b      	add	r3, r1
 80061e2:	335c      	adds	r3, #92	; 0x5c
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	3350      	adds	r3, #80	; 0x50
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f083 0301 	eor.w	r3, r3, #1
 80061fe:	b2d8      	uxtb	r0, r3
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	440b      	add	r3, r1
 800620e:	3350      	adds	r3, #80	; 0x50
 8006210:	4602      	mov	r2, r0
 8006212:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	b2d8      	uxtb	r0, r3
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	335c      	adds	r3, #92	; 0x5c
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4601      	mov	r1, r0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f00b ffc4 	bl	80121bc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	440b      	add	r3, r1
 8006242:	3350      	adds	r3, #80	; 0x50
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	f083 0301 	eor.w	r3, r3, #1
 800624a:	b2d8      	uxtb	r0, r3
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	3350      	adds	r3, #80	; 0x50
 800625c:	4602      	mov	r2, r0
 800625e:	701a      	strb	r2, [r3, #0]
}
 8006260:	e1f7      	b.n	8006652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	f040 811a 	bne.w	80064ae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006294:	f023 0302 	bic.w	r3, r3, #2
 8006298:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	440b      	add	r3, r1
 80062a8:	335d      	adds	r3, #93	; 0x5d
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10a      	bne.n	80062c6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	440b      	add	r3, r1
 80062be:	335c      	adds	r3, #92	; 0x5c
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e0d9      	b.n	800647a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	440b      	add	r3, r1
 80062d4:	335d      	adds	r3, #93	; 0x5d
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d10a      	bne.n	80062f2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	440b      	add	r3, r1
 80062ea:	335c      	adds	r3, #92	; 0x5c
 80062ec:	2205      	movs	r2, #5
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e0c3      	b.n	800647a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	440b      	add	r3, r1
 8006300:	335d      	adds	r3, #93	; 0x5d
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b06      	cmp	r3, #6
 8006306:	d00a      	beq.n	800631e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	440b      	add	r3, r1
 8006316:	335d      	adds	r3, #93	; 0x5d
 8006318:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800631a:	2b08      	cmp	r3, #8
 800631c:	d156      	bne.n	80063cc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	440b      	add	r3, r1
 800632c:	3358      	adds	r3, #88	; 0x58
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4403      	add	r3, r0
 8006340:	3358      	adds	r3, #88	; 0x58
 8006342:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	3358      	adds	r3, #88	; 0x58
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d914      	bls.n	8006384 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	440b      	add	r3, r1
 8006368:	3358      	adds	r3, #88	; 0x58
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	440b      	add	r3, r1
 800637c:	335c      	adds	r3, #92	; 0x5c
 800637e:	2204      	movs	r2, #4
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e009      	b.n	8006398 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	440b      	add	r3, r1
 8006392:	335c      	adds	r3, #92	; 0x5c
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e056      	b.n	800647a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	440b      	add	r3, r1
 80063da:	335d      	adds	r3, #93	; 0x5d
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d123      	bne.n	800642a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	440b      	add	r3, r1
 80063f0:	335c      	adds	r3, #92	; 0x5c
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800640c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006414:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4413      	add	r3, r2
 800641e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e027      	b.n	800647a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	440b      	add	r3, r1
 8006438:	335d      	adds	r3, #93	; 0x5d
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b07      	cmp	r3, #7
 800643e:	d11c      	bne.n	800647a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	3358      	adds	r3, #88	; 0x58
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4403      	add	r3, r0
 8006462:	3358      	adds	r3, #88	; 0x58
 8006464:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	335c      	adds	r3, #92	; 0x5c
 8006476:	2204      	movs	r2, #4
 8006478:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	461a      	mov	r2, r3
 8006488:	2302      	movs	r3, #2
 800648a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	b2d8      	uxtb	r0, r3
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	440b      	add	r3, r1
 800649e:	335c      	adds	r3, #92	; 0x5c
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	4601      	mov	r1, r0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f00b fe88 	bl	80121bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80064ac:	e0d1      	b.n	8006652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d13e      	bne.n	8006542 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3358      	adds	r3, #88	; 0x58
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4403      	add	r3, r0
 8006506:	3358      	adds	r3, #88	; 0x58
 8006508:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	440b      	add	r3, r1
 8006518:	335d      	adds	r3, #93	; 0x5d
 800651a:	2206      	movs	r2, #6
 800651c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f005 fe38 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	6093      	str	r3, [r2, #8]
}
 8006540:	e087      	b.n	8006652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d17c      	bne.n	8006652 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	440b      	add	r3, r1
 8006566:	333f      	adds	r3, #63	; 0x3f
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d122      	bne.n	80065b4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	440b      	add	r3, r1
 800657c:	3358      	adds	r3, #88	; 0x58
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	440a      	add	r2, r1
 8006598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f005 fdf6 	bl	800c19e <USB_HC_Halt>
 80065b2:	e045      	b.n	8006640 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	440b      	add	r3, r1
 80065c2:	333f      	adds	r3, #63	; 0x3f
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	440b      	add	r3, r1
 80065d8:	333f      	adds	r3, #63	; 0x3f
 80065da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d12f      	bne.n	8006640 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	440b      	add	r3, r1
 80065ee:	3358      	adds	r3, #88	; 0x58
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d121      	bne.n	8006640 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	335d      	adds	r3, #93	; 0x5d
 800660c:	2203      	movs	r2, #3
 800660e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662a:	f043 0302 	orr.w	r3, r3, #2
 800662e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f005 fdaf 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	461a      	mov	r2, r3
 800664e:	2310      	movs	r3, #16
 8006650:	6093      	str	r3, [r2, #8]
}
 8006652:	bf00      	nop
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d119      	bne.n	80066be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	461a      	mov	r2, r3
 8006698:	2304      	movs	r3, #4
 800669a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b6:	f043 0302 	orr.w	r3, r3, #2
 80066ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80066bc:	e33e      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d141      	bne.n	8006758 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	461a      	mov	r2, r3
 80066e2:	2320      	movs	r3, #32
 80066e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	440b      	add	r3, r1
 80066f4:	333d      	adds	r3, #61	; 0x3d
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	f040 831f 	bne.w	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	440b      	add	r3, r1
 800670c:	333d      	adds	r3, #61	; 0x3d
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	440b      	add	r3, r1
 8006720:	335c      	adds	r3, #92	; 0x5c
 8006722:	2202      	movs	r2, #2
 8006724:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	440a      	add	r2, r1
 800673c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f005 fd24 	bl	800c19e <USB_HC_Halt>
}
 8006756:	e2f1      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d13f      	bne.n	80067ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	440b      	add	r3, r1
 800677c:	335d      	adds	r3, #93	; 0x5d
 800677e:	2204      	movs	r2, #4
 8006780:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	440b      	add	r3, r1
 8006790:	333d      	adds	r3, #61	; 0x3d
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	440b      	add	r3, r1
 80067a4:	3358      	adds	r3, #88	; 0x58
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f005 fce2 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	461a      	mov	r2, r3
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	6093      	str	r3, [r2, #8]
}
 80067ec:	e2a6      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006804:	d122      	bne.n	800684c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	440a      	add	r2, r1
 800681c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f005 fcb4 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006848:	6093      	str	r3, [r2, #8]
}
 800684a:	e277      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b01      	cmp	r3, #1
 8006860:	d135      	bne.n	80068ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	440b      	add	r3, r1
 8006870:	3358      	adds	r3, #88	; 0x58
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f005 fc7c 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	461a      	mov	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	440b      	add	r3, r1
 80068c6:	335d      	adds	r3, #93	; 0x5d
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
}
 80068cc:	e236      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d12b      	bne.n	800693c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	461a      	mov	r2, r3
 80068f2:	2308      	movs	r3, #8
 80068f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	440a      	add	r2, r1
 800690c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006910:	f043 0302 	orr.w	r3, r3, #2
 8006914:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	4611      	mov	r1, r2
 8006920:	4618      	mov	r0, r3
 8006922:	f005 fc3c 	bl	800c19e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	440b      	add	r3, r1
 8006934:	335d      	adds	r3, #93	; 0x5d
 8006936:	2205      	movs	r2, #5
 8006938:	701a      	strb	r2, [r3, #0]
}
 800693a:	e1ff      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b10      	cmp	r3, #16
 8006950:	d155      	bne.n	80069fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	440b      	add	r3, r1
 8006960:	3358      	adds	r3, #88	; 0x58
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	335d      	adds	r3, #93	; 0x5d
 8006976:	2203      	movs	r2, #3
 8006978:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	440b      	add	r3, r1
 8006988:	333d      	adds	r3, #61	; 0x3d
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d114      	bne.n	80069ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	440b      	add	r3, r1
 800699e:	333c      	adds	r3, #60	; 0x3c
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	440b      	add	r3, r1
 80069b4:	333d      	adds	r3, #61	; 0x3d
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d4:	f043 0302 	orr.w	r3, r3, #2
 80069d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f005 fbda 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f6:	461a      	mov	r2, r3
 80069f8:	2310      	movs	r3, #16
 80069fa:	6093      	str	r3, [r2, #8]
}
 80069fc:	e19e      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d12b      	bne.n	8006a6c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f043 0302 	orr.w	r3, r3, #2
 8006a32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f005 fbad 	bl	800c19e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	440b      	add	r3, r1
 8006a52:	335d      	adds	r3, #93	; 0x5d
 8006a54:	2206      	movs	r2, #6
 8006a56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	461a      	mov	r2, r3
 8006a66:	2380      	movs	r3, #128	; 0x80
 8006a68:	6093      	str	r3, [r2, #8]
}
 8006a6a:	e167      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d135      	bne.n	8006af0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a9e:	f043 0302 	orr.w	r3, r3, #2
 8006aa2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f005 fb75 	bl	800c19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	440b      	add	r3, r1
 8006ae8:	335d      	adds	r3, #93	; 0x5d
 8006aea:	2208      	movs	r2, #8
 8006aec:	701a      	strb	r2, [r3, #0]
}
 8006aee:	e125      	b.n	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	f040 811a 	bne.w	8006d3c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b22:	f023 0302 	bic.w	r3, r3, #2
 8006b26:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	440b      	add	r3, r1
 8006b36:	335d      	adds	r3, #93	; 0x5d
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d137      	bne.n	8006bae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	440b      	add	r3, r1
 8006b4c:	335c      	adds	r3, #92	; 0x5c
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	440b      	add	r3, r1
 8006b60:	333f      	adds	r3, #63	; 0x3f
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d00b      	beq.n	8006b80 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	440b      	add	r3, r1
 8006b76:	333f      	adds	r3, #63	; 0x3f
 8006b78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	f040 80c5 	bne.w	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3351      	adds	r3, #81	; 0x51
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f083 0301 	eor.w	r3, r3, #1
 8006b96:	b2d8      	uxtb	r0, r3
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	440b      	add	r3, r1
 8006ba6:	3351      	adds	r3, #81	; 0x51
 8006ba8:	4602      	mov	r2, r0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e0ad      	b.n	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	440b      	add	r3, r1
 8006bbc:	335d      	adds	r3, #93	; 0x5d
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d10a      	bne.n	8006bda <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	440b      	add	r3, r1
 8006bd2:	335c      	adds	r3, #92	; 0x5c
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e097      	b.n	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	440b      	add	r3, r1
 8006be8:	335d      	adds	r3, #93	; 0x5d
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d10a      	bne.n	8006c06 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	440b      	add	r3, r1
 8006bfe:	335c      	adds	r3, #92	; 0x5c
 8006c00:	2202      	movs	r2, #2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e081      	b.n	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	440b      	add	r3, r1
 8006c14:	335d      	adds	r3, #93	; 0x5d
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	d10a      	bne.n	8006c32 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	440b      	add	r3, r1
 8006c2a:	335c      	adds	r3, #92	; 0x5c
 8006c2c:	2205      	movs	r2, #5
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e06b      	b.n	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	440b      	add	r3, r1
 8006c40:	335d      	adds	r3, #93	; 0x5d
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d00a      	beq.n	8006c5e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	440b      	add	r3, r1
 8006c56:	335d      	adds	r3, #93	; 0x5d
 8006c58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d155      	bne.n	8006d0a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3358      	adds	r3, #88	; 0x58
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	4403      	add	r3, r0
 8006c80:	3358      	adds	r3, #88	; 0x58
 8006c82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	440b      	add	r3, r1
 8006c92:	3358      	adds	r3, #88	; 0x58
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d914      	bls.n	8006cc4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3358      	adds	r3, #88	; 0x58
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	335c      	adds	r3, #92	; 0x5c
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e009      	b.n	8006cd8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	335c      	adds	r3, #92	; 0x5c
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	461a      	mov	r2, r3
 8006d18:	2302      	movs	r3, #2
 8006d1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	b2d8      	uxtb	r0, r3
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	440b      	add	r3, r1
 8006d2e:	335c      	adds	r3, #92	; 0x5c
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	4601      	mov	r1, r0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f00b fa40 	bl	80121bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006d3c:	bf00      	nop
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	0c5b      	lsrs	r3, r3, #17
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	091b      	lsrs	r3, r3, #4
 8006d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d78:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d003      	beq.n	8006d88 <HCD_RXQLVL_IRQHandler+0x44>
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	f000 8082 	beq.w	8006e8a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006d86:	e083      	b.n	8006e90 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d07f      	beq.n	8006e8e <HCD_RXQLVL_IRQHandler+0x14a>
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3344      	adds	r3, #68	; 0x44
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d074      	beq.n	8006e8e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	440b      	add	r3, r1
 8006db6:	3344      	adds	r3, #68	; 0x44
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	f004 fd99 	bl	800b8f6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3344      	adds	r3, #68	; 0x44
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	18d1      	adds	r1, r2, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4403      	add	r3, r0
 8006de8:	3344      	adds	r3, #68	; 0x44
 8006dea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	440b      	add	r3, r1
 8006dfa:	334c      	adds	r3, #76	; 0x4c
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	18d1      	adds	r1, r2, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4403      	add	r3, r0
 8006e10:	334c      	adds	r3, #76	; 0x4c
 8006e12:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <HCD_RXQLVL_IRQHandler+0x154>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d031      	beq.n	8006e8e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	461a      	mov	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	440b      	add	r3, r1
 8006e6a:	3350      	adds	r3, #80	; 0x50
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	f083 0301 	eor.w	r3, r3, #1
 8006e72:	b2d8      	uxtb	r0, r3
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	440b      	add	r3, r1
 8006e82:	3350      	adds	r3, #80	; 0x50
 8006e84:	4602      	mov	r2, r0
 8006e86:	701a      	strb	r2, [r3, #0]
      break;
 8006e88:	e001      	b.n	8006e8e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e000      	b.n	8006e90 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006e8e:	bf00      	nop
  }
}
 8006e90:	bf00      	nop
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	1ff80000 	.word	0x1ff80000

08006e9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ec8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d10b      	bne.n	8006eec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d102      	bne.n	8006ee4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f00b f950 	bl	8012184 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d132      	bne.n	8006f5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f043 0308 	orr.w	r3, r3, #8
 8006efc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d126      	bne.n	8006f56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d113      	bne.n	8006f38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f1a:	d106      	bne.n	8006f2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2102      	movs	r1, #2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f004 fe16 	bl	800bb54 <USB_InitFSLSPClkSel>
 8006f28:	e011      	b.n	8006f4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4618      	mov	r0, r3
 8006f32:	f004 fe0f 	bl	800bb54 <USB_InitFSLSPClkSel>
 8006f36:	e00a      	b.n	8006f4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f46:	461a      	mov	r2, r3
 8006f48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006f4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f00b f946 	bl	80121e0 <HAL_HCD_PortEnabled_Callback>
 8006f54:	e002      	b.n	8006f5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f00b f950 	bl	80121fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d103      	bne.n	8006f6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f043 0320 	orr.w	r3, r3, #32
 8006f6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f74:	461a      	mov	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6013      	str	r3, [r2, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e07f      	b.n	8007096 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa ff78 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2224      	movs	r2, #36	; 0x24
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	e006      	b.n	800700c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800700a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d104      	bne.n	800701e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800701c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6859      	ldr	r1, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <HAL_I2C_Init+0x11c>)
 800702a:	430b      	orrs	r3, r1
 800702c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800703c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691a      	ldr	r2, [r3, #16]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	ea42 0103 	orr.w	r1, r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69d9      	ldr	r1, [r3, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	02008000 	.word	0x02008000

080070a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d138      	bne.n	800712c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e032      	b.n	800712e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2224      	movs	r2, #36	; 0x24
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6819      	ldr	r1, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e000      	b.n	800712e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b20      	cmp	r3, #32
 800714e:	d139      	bne.n	80071c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800715a:	2302      	movs	r3, #2
 800715c:	e033      	b.n	80071c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2224      	movs	r2, #36	; 0x24
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800718c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e0bf      	b.n	8007366 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fa fec8 	bl	8001f90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007216:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800722c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6899      	ldr	r1, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b4a      	ldr	r3, [pc, #296]	; (8007370 <HAL_LTDC_Init+0x19c>)
 8007248:	400b      	ands	r3, r1
 800724a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68d9      	ldr	r1, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <HAL_LTDC_Init+0x19c>)
 8007276:	400b      	ands	r3, r1
 8007278:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68d9      	ldr	r1, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1a      	ldr	r2, [r3, #32]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6919      	ldr	r1, [r3, #16]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4b33      	ldr	r3, [pc, #204]	; (8007370 <HAL_LTDC_Init+0x19c>)
 80072a4:	400b      	ands	r3, r1
 80072a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	041b      	lsls	r3, r3, #16
 80072ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6919      	ldr	r1, [r3, #16]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6959      	ldr	r1, [r3, #20]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4b27      	ldr	r3, [pc, #156]	; (8007370 <HAL_LTDC_Init+0x19c>)
 80072d2:	400b      	ands	r3, r1
 80072d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	041b      	lsls	r3, r3, #16
 80072dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6959      	ldr	r1, [r3, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0206 	orr.w	r2, r2, #6
 8007342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	f000f800 	.word	0xf000f800

08007374 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d023      	beq.n	80073de <HAL_LTDC_IRQHandler+0x6a>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01e      	beq.n	80073de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0204 	bic.w	r2, r2, #4
 80073ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2204      	movs	r2, #4
 80073b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2204      	movs	r2, #4
 80073cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f86f 	bl	80074bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d023      	beq.n	8007430 <HAL_LTDC_IRQHandler+0xbc>
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01e      	beq.n	8007430 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0202 	bic.w	r2, r2, #2
 8007400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2202      	movs	r2, #2
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007410:	f043 0202 	orr.w	r2, r3, #2
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2204      	movs	r2, #4
 800741e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f846 	bl	80074bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <HAL_LTDC_IRQHandler+0xfe>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d016      	beq.n	8007472 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2201      	movs	r2, #1
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f82f 	bl	80074d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <HAL_LTDC_IRQHandler+0x140>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0208 	bic.w	r2, r2, #8
 8007494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f818 	bl	80074e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074f8:	b5b0      	push	{r4, r5, r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_LTDC_ConfigLayer+0x1a>
 800750e:	2302      	movs	r3, #2
 8007510:	e02c      	b.n	800756c <HAL_LTDC_ConfigLayer+0x74>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2134      	movs	r1, #52	; 0x34
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	4413      	add	r3, r2
 800752e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4614      	mov	r4, r2
 8007536:	461d      	mov	r5, r3
 8007538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800753a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800753e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f81f 	bl	8007590 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2201      	movs	r2, #1
 8007558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bdb0      	pop	{r4, r5, r7, pc}

08007574 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007582:	b2db      	uxtb	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	4413      	add	r3, r2
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	01db      	lsls	r3, r3, #7
 80075bc:	4413      	add	r3, r2
 80075be:	3384      	adds	r3, #132	; 0x84
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	4611      	mov	r1, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	01d2      	lsls	r2, r2, #7
 80075cc:	440a      	add	r2, r1
 80075ce:	3284      	adds	r2, #132	; 0x84
 80075d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	0c1b      	lsrs	r3, r3, #16
 80075e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e6:	4413      	add	r3, r2
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	01db      	lsls	r3, r3, #7
 80075f4:	440b      	add	r3, r1
 80075f6:	3384      	adds	r3, #132	; 0x84
 80075f8:	4619      	mov	r1, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800760e:	4413      	add	r3, r2
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	01db      	lsls	r3, r3, #7
 800761e:	4413      	add	r3, r2
 8007620:	3384      	adds	r3, #132	; 0x84
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	4611      	mov	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	01d2      	lsls	r2, r2, #7
 800762e:	440a      	add	r2, r1
 8007630:	3284      	adds	r2, #132	; 0x84
 8007632:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007636:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007646:	4413      	add	r3, r2
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4619      	mov	r1, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	01db      	lsls	r3, r3, #7
 8007654:	440b      	add	r3, r1
 8007656:	3384      	adds	r3, #132	; 0x84
 8007658:	4619      	mov	r1, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4313      	orrs	r3, r2
 800765e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	01db      	lsls	r3, r3, #7
 800766a:	4413      	add	r3, r2
 800766c:	3384      	adds	r3, #132	; 0x84
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	4611      	mov	r1, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	01d2      	lsls	r2, r2, #7
 800767a:	440a      	add	r2, r1
 800767c:	3284      	adds	r2, #132	; 0x84
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	01db      	lsls	r3, r3, #7
 800768e:	4413      	add	r3, r2
 8007690:	3384      	adds	r3, #132	; 0x84
 8007692:	461a      	mov	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	061b      	lsls	r3, r3, #24
 80076b4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	01db      	lsls	r3, r3, #7
 80076c0:	4413      	add	r3, r2
 80076c2:	3384      	adds	r3, #132	; 0x84
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	4413      	add	r3, r2
 80076d2:	3384      	adds	r3, #132	; 0x84
 80076d4:	461a      	mov	r2, r3
 80076d6:	2300      	movs	r3, #0
 80076d8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076e0:	461a      	mov	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4619      	mov	r1, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	440b      	add	r3, r1
 80076f6:	3384      	adds	r3, #132	; 0x84
 80076f8:	4619      	mov	r1, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	01db      	lsls	r3, r3, #7
 800770a:	4413      	add	r3, r2
 800770c:	3384      	adds	r3, #132	; 0x84
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	4611      	mov	r1, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	01d2      	lsls	r2, r2, #7
 800771a:	440a      	add	r2, r1
 800771c:	3284      	adds	r2, #132	; 0x84
 800771e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007722:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	01db      	lsls	r3, r3, #7
 800772e:	4413      	add	r3, r2
 8007730:	3384      	adds	r3, #132	; 0x84
 8007732:	461a      	mov	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	01db      	lsls	r3, r3, #7
 8007744:	4413      	add	r3, r2
 8007746:	3384      	adds	r3, #132	; 0x84
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	01db      	lsls	r3, r3, #7
 8007754:	440b      	add	r3, r1
 8007756:	3384      	adds	r3, #132	; 0x84
 8007758:	4619      	mov	r1, r3
 800775a:	4b58      	ldr	r3, [pc, #352]	; (80078bc <LTDC_SetConfig+0x32c>)
 800775c:	4013      	ands	r3, r2
 800775e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	6809      	ldr	r1, [r1, #0]
 800776c:	4608      	mov	r0, r1
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	01c9      	lsls	r1, r1, #7
 8007772:	4401      	add	r1, r0
 8007774:	3184      	adds	r1, #132	; 0x84
 8007776:	4313      	orrs	r3, r2
 8007778:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	01db      	lsls	r3, r3, #7
 8007784:	4413      	add	r3, r2
 8007786:	3384      	adds	r3, #132	; 0x84
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	4413      	add	r3, r2
 8007796:	3384      	adds	r3, #132	; 0x84
 8007798:	461a      	mov	r2, r3
 800779a:	2300      	movs	r3, #0
 800779c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	4413      	add	r3, r2
 80077aa:	3384      	adds	r3, #132	; 0x84
 80077ac:	461a      	mov	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80077bc:	2304      	movs	r3, #4
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e01b      	b.n	80077fa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d102      	bne.n	80077d0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80077ca:	2303      	movs	r3, #3
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e014      	b.n	80077fa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d00b      	beq.n	80077f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d007      	beq.n	80077f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d003      	beq.n	80077f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	d102      	bne.n	80077f6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80077f0:	2302      	movs	r3, #2
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e001      	b.n	80077fa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80077f6:	2301      	movs	r3, #1
 80077f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	01db      	lsls	r3, r3, #7
 8007804:	4413      	add	r3, r2
 8007806:	3384      	adds	r3, #132	; 0x84
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	4611      	mov	r1, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	01d2      	lsls	r2, r2, #7
 8007814:	440a      	add	r2, r1
 8007816:	3284      	adds	r2, #132	; 0x84
 8007818:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800781c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	041a      	lsls	r2, r3, #16
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6859      	ldr	r1, [r3, #4]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	1acb      	subs	r3, r1, r3
 8007834:	69f9      	ldr	r1, [r7, #28]
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	3303      	adds	r3, #3
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	6809      	ldr	r1, [r1, #0]
 8007840:	4608      	mov	r0, r1
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	01c9      	lsls	r1, r1, #7
 8007846:	4401      	add	r1, r0
 8007848:	3184      	adds	r1, #132	; 0x84
 800784a:	4313      	orrs	r3, r2
 800784c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	4413      	add	r3, r2
 800785a:	3384      	adds	r3, #132	; 0x84
 800785c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4619      	mov	r1, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	440b      	add	r3, r1
 800786a:	3384      	adds	r3, #132	; 0x84
 800786c:	4619      	mov	r1, r3
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <LTDC_SetConfig+0x330>)
 8007870:	4013      	ands	r3, r2
 8007872:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	01db      	lsls	r3, r3, #7
 800787e:	4413      	add	r3, r2
 8007880:	3384      	adds	r3, #132	; 0x84
 8007882:	461a      	mov	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	01db      	lsls	r3, r3, #7
 8007894:	4413      	add	r3, r2
 8007896:	3384      	adds	r3, #132	; 0x84
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	4611      	mov	r1, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	01d2      	lsls	r2, r2, #7
 80078a4:	440a      	add	r2, r1
 80078a6:	3284      	adds	r2, #132	; 0x84
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6013      	str	r3, [r2, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3724      	adds	r7, #36	; 0x24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	fffff8f8 	.word	0xfffff8f8
 80078c0:	fffff800 	.word	0xfffff800

080078c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a04      	ldr	r2, [pc, #16]	; (80078e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d2:	6013      	str	r3, [r2, #0]
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40007000 	.word	0x40007000

080078e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078ee:	4b23      	ldr	r3, [pc, #140]	; (800797c <HAL_PWREx_EnableOverDrive+0x98>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	4a22      	ldr	r2, [pc, #136]	; (800797c <HAL_PWREx_EnableOverDrive+0x98>)
 80078f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f8:	6413      	str	r3, [r2, #64]	; 0x40
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <HAL_PWREx_EnableOverDrive+0x98>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007906:	4b1e      	ldr	r3, [pc, #120]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800790c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007910:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007912:	f7fc f8a5 	bl	8003a60 <HAL_GetTick>
 8007916:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007918:	e009      	b.n	800792e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800791a:	f7fc f8a1 	bl	8003a60 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007928:	d901      	bls.n	800792e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e022      	b.n	8007974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793a:	d1ee      	bne.n	800791a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800793c:	4b10      	ldr	r3, [pc, #64]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a0f      	ldr	r2, [pc, #60]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007946:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007948:	f7fc f88a 	bl	8003a60 <HAL_GetTick>
 800794c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800794e:	e009      	b.n	8007964 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007950:	f7fc f886 	bl	8003a60 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800795e:	d901      	bls.n	8007964 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e007      	b.n	8007974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007970:	d1ee      	bne.n	8007950 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40023800 	.word	0x40023800
 8007980:	40007000 	.word	0x40007000

08007984 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af02      	add	r7, sp, #8
 800798a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800798c:	f7fc f868 	bl	8003a60 <HAL_GetTick>
 8007990:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e067      	b.n	8007a6c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fa fbb5 	bl	8002120 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80079b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f85e 	bl	8007a7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	021a      	lsls	r2, r3, #8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	2120      	movs	r1, #32
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f856 	bl	8007a98 <QSPI_WaitFlagStateUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d135      	bne.n	8007a62 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <HAL_QSPI_Init+0xf0>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6852      	ldr	r2, [r2, #4]
 8007a04:	0611      	lsls	r1, r2, #24
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68d2      	ldr	r2, [r2, #12]
 8007a0a:	4311      	orrs	r1, r2
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	69d2      	ldr	r2, [r2, #28]
 8007a10:	4311      	orrs	r1, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6a12      	ldr	r2, [r2, #32]
 8007a16:	4311      	orrs	r1, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <HAL_QSPI_Init+0xf4>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6912      	ldr	r2, [r2, #16]
 8007a2e:	0411      	lsls	r1, r2, #16
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6952      	ldr	r2, [r2, #20]
 8007a34:	4311      	orrs	r1, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6992      	ldr	r2, [r2, #24]
 8007a3a:	4311      	orrs	r1, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	00ffff2f 	.word	0x00ffff2f
 8007a78:	ffe0f8fe 	.word	0xffe0f8fe

08007a7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007aa8:	e01a      	b.n	8007ae0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d016      	beq.n	8007ae0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab2:	f7fb ffd5 	bl	8003a60 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2204      	movs	r2, #4
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad4:	f043 0201 	orr.w	r2, r3, #1
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e00e      	b.n	8007afe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d1d6      	bne.n	8007aaa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007b10:	2300      	movs	r3, #0
 8007b12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e291      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8087 	beq.w	8007c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b2c:	4b96      	ldr	r3, [pc, #600]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d00c      	beq.n	8007b52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b38:	4b93      	ldr	r3, [pc, #588]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 030c 	and.w	r3, r3, #12
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d112      	bne.n	8007b6a <HAL_RCC_OscConfig+0x62>
 8007b44:	4b90      	ldr	r3, [pc, #576]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b50:	d10b      	bne.n	8007b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b52:	4b8d      	ldr	r3, [pc, #564]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d06c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x130>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d168      	bne.n	8007c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e26b      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b72:	d106      	bne.n	8007b82 <HAL_RCC_OscConfig+0x7a>
 8007b74:	4b84      	ldr	r3, [pc, #528]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a83      	ldr	r2, [pc, #524]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e02e      	b.n	8007be0 <HAL_RCC_OscConfig+0xd8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10c      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x9c>
 8007b8a:	4b7f      	ldr	r3, [pc, #508]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a7e      	ldr	r2, [pc, #504]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	4b7c      	ldr	r3, [pc, #496]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7b      	ldr	r2, [pc, #492]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e01d      	b.n	8007be0 <HAL_RCC_OscConfig+0xd8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCC_OscConfig+0xc0>
 8007bae:	4b76      	ldr	r3, [pc, #472]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a75      	ldr	r2, [pc, #468]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	4b73      	ldr	r3, [pc, #460]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a72      	ldr	r2, [pc, #456]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	e00b      	b.n	8007be0 <HAL_RCC_OscConfig+0xd8>
 8007bc8:	4b6f      	ldr	r3, [pc, #444]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6e      	ldr	r2, [pc, #440]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	4b6c      	ldr	r3, [pc, #432]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6b      	ldr	r2, [pc, #428]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d013      	beq.n	8007c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fb ff3a 	bl	8003a60 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bf0:	f7fb ff36 	bl	8003a60 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b64      	cmp	r3, #100	; 0x64
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e21f      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c02:	4b61      	ldr	r3, [pc, #388]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0xe8>
 8007c0e:	e014      	b.n	8007c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fb ff26 	bl	8003a60 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c18:	f7fb ff22 	bl	8003a60 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b64      	cmp	r3, #100	; 0x64
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e20b      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c2a:	4b57      	ldr	r3, [pc, #348]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x110>
 8007c36:	e000      	b.n	8007c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d069      	beq.n	8007d1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c46:	4b50      	ldr	r3, [pc, #320]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c52:	4b4d      	ldr	r3, [pc, #308]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 030c 	and.w	r3, r3, #12
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d11c      	bne.n	8007c98 <HAL_RCC_OscConfig+0x190>
 8007c5e:	4b4a      	ldr	r3, [pc, #296]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d116      	bne.n	8007c98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c6a:	4b47      	ldr	r3, [pc, #284]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_RCC_OscConfig+0x17a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d001      	beq.n	8007c82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e1df      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c82:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	493d      	ldr	r1, [pc, #244]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c96:	e040      	b.n	8007d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d023      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ca0:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a38      	ldr	r2, [pc, #224]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cac:	f7fb fed8 	bl	8003a60 <HAL_GetTick>
 8007cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cb4:	f7fb fed4 	bl	8003a60 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e1bd      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cc6:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0f0      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd2:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	4929      	ldr	r1, [pc, #164]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	600b      	str	r3, [r1, #0]
 8007ce6:	e018      	b.n	8007d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce8:	4b27      	ldr	r3, [pc, #156]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a26      	ldr	r2, [pc, #152]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf4:	f7fb feb4 	bl	8003a60 <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cfc:	f7fb feb0 	bl	8003a60 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e199      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d0e:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f0      	bne.n	8007cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d038      	beq.n	8007d98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d019      	beq.n	8007d62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d2e:	4b16      	ldr	r3, [pc, #88]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d3a:	f7fb fe91 	bl	8003a60 <HAL_GetTick>
 8007d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d40:	e008      	b.n	8007d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d42:	f7fb fe8d 	bl	8003a60 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e176      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <HAL_RCC_OscConfig+0x23a>
 8007d60:	e01a      	b.n	8007d98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d66:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <HAL_RCC_OscConfig+0x280>)
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6e:	f7fb fe77 	bl	8003a60 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d74:	e00a      	b.n	8007d8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d76:	f7fb fe73 	bl	8003a60 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d903      	bls.n	8007d8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e15c      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
 8007d88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d8c:	4b91      	ldr	r3, [pc, #580]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1ee      	bne.n	8007d76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80a4 	beq.w	8007eee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007da6:	4b8b      	ldr	r3, [pc, #556]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007db2:	4b88      	ldr	r3, [pc, #544]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	4a87      	ldr	r2, [pc, #540]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8007dbe:	4b85      	ldr	r3, [pc, #532]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dce:	4b82      	ldr	r3, [pc, #520]	; (8007fd8 <HAL_RCC_OscConfig+0x4d0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d118      	bne.n	8007e0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007dda:	4b7f      	ldr	r3, [pc, #508]	; (8007fd8 <HAL_RCC_OscConfig+0x4d0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a7e      	ldr	r2, [pc, #504]	; (8007fd8 <HAL_RCC_OscConfig+0x4d0>)
 8007de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007de6:	f7fb fe3b 	bl	8003a60 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dee:	f7fb fe37 	bl	8003a60 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b64      	cmp	r3, #100	; 0x64
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e120      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e00:	4b75      	ldr	r3, [pc, #468]	; (8007fd8 <HAL_RCC_OscConfig+0x4d0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f0      	beq.n	8007dee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d106      	bne.n	8007e22 <HAL_RCC_OscConfig+0x31a>
 8007e14:	4b6f      	ldr	r3, [pc, #444]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e18:	4a6e      	ldr	r2, [pc, #440]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e20:	e02d      	b.n	8007e7e <HAL_RCC_OscConfig+0x376>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10c      	bne.n	8007e44 <HAL_RCC_OscConfig+0x33c>
 8007e2a:	4b6a      	ldr	r3, [pc, #424]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2e:	4a69      	ldr	r2, [pc, #420]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	6713      	str	r3, [r2, #112]	; 0x70
 8007e36:	4b67      	ldr	r3, [pc, #412]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	4a66      	ldr	r2, [pc, #408]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e3c:	f023 0304 	bic.w	r3, r3, #4
 8007e40:	6713      	str	r3, [r2, #112]	; 0x70
 8007e42:	e01c      	b.n	8007e7e <HAL_RCC_OscConfig+0x376>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	d10c      	bne.n	8007e66 <HAL_RCC_OscConfig+0x35e>
 8007e4c:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e50:	4a60      	ldr	r2, [pc, #384]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e52:	f043 0304 	orr.w	r3, r3, #4
 8007e56:	6713      	str	r3, [r2, #112]	; 0x70
 8007e58:	4b5e      	ldr	r3, [pc, #376]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	4a5d      	ldr	r2, [pc, #372]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6713      	str	r3, [r2, #112]	; 0x70
 8007e64:	e00b      	b.n	8007e7e <HAL_RCC_OscConfig+0x376>
 8007e66:	4b5b      	ldr	r3, [pc, #364]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	4a5a      	ldr	r2, [pc, #360]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	6713      	str	r3, [r2, #112]	; 0x70
 8007e72:	4b58      	ldr	r3, [pc, #352]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	4a57      	ldr	r2, [pc, #348]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007e78:	f023 0304 	bic.w	r3, r3, #4
 8007e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d015      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e86:	f7fb fdeb 	bl	8003a60 <HAL_GetTick>
 8007e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8c:	e00a      	b.n	8007ea4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7fb fde7 	bl	8003a60 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e0ce      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea4:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ee      	beq.n	8007e8e <HAL_RCC_OscConfig+0x386>
 8007eb0:	e014      	b.n	8007edc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb2:	f7fb fdd5 	bl	8003a60 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb8:	e00a      	b.n	8007ed0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eba:	f7fb fdd1 	bl	8003a60 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e0b8      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ed0:	4b40      	ldr	r3, [pc, #256]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ee      	bne.n	8007eba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ee2:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	4a3b      	ldr	r2, [pc, #236]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 80a4 	beq.w	8008040 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ef8:	4b36      	ldr	r3, [pc, #216]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 030c 	and.w	r3, r3, #12
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d06b      	beq.n	8007fdc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d149      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0c:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a30      	ldr	r2, [pc, #192]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f18:	f7fb fda2 	bl	8003a60 <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1e:	e008      	b.n	8007f32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f20:	f7fb fd9e 	bl	8003a60 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e087      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f32:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f0      	bne.n	8007f20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69da      	ldr	r2, [r3, #28]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	019b      	lsls	r3, r3, #6
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	3b01      	subs	r3, #1
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	4313      	orrs	r3, r2
 8007f64:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fb fd72 	bl	8003a60 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f80:	f7fb fd6e 	bl	8003a60 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e057      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f92:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x478>
 8007f9e:	e04f      	b.n	8008040 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa0:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fb fd58 	bl	8003a60 <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb4:	f7fb fd54 	bl	8003a60 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e03d      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <HAL_RCC_OscConfig+0x4cc>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f0      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4ac>
 8007fd2:	e035      	b.n	8008040 <HAL_RCC_OscConfig+0x538>
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <HAL_RCC_OscConfig+0x544>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d028      	beq.n	800803c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d121      	bne.n	800803c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008002:	429a      	cmp	r2, r3
 8008004:	d11a      	bne.n	800803c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800800c:	4013      	ands	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008012:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008014:	4293      	cmp	r3, r2
 8008016:	d111      	bne.n	800803c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	3b01      	subs	r3, #1
 8008026:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008028:	429a      	cmp	r2, r3
 800802a:	d107      	bne.n	800803c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008038:	429a      	cmp	r2, r3
 800803a:	d001      	beq.n	8008040 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e000      	b.n	8008042 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	40023800 	.word	0x40023800

08008050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e0d0      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008068:	4b6a      	ldr	r3, [pc, #424]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d910      	bls.n	8008098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008076:	4b67      	ldr	r3, [pc, #412]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f023 020f 	bic.w	r2, r3, #15
 800807e:	4965      	ldr	r1, [pc, #404]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008086:	4b63      	ldr	r3, [pc, #396]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d001      	beq.n	8008098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e0b8      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d020      	beq.n	80080e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080b0:	4b59      	ldr	r3, [pc, #356]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4a58      	ldr	r2, [pc, #352]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080c8:	4b53      	ldr	r3, [pc, #332]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	4a52      	ldr	r2, [pc, #328]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d4:	4b50      	ldr	r3, [pc, #320]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	494d      	ldr	r1, [pc, #308]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d040      	beq.n	8008174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d107      	bne.n	800810a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080fa:	4b47      	ldr	r3, [pc, #284]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d115      	bne.n	8008132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e07f      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d107      	bne.n	8008122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008112:	4b41      	ldr	r3, [pc, #260]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e073      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008122:	4b3d      	ldr	r3, [pc, #244]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e06b      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008132:	4b39      	ldr	r3, [pc, #228]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f023 0203 	bic.w	r2, r3, #3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4936      	ldr	r1, [pc, #216]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 8008140:	4313      	orrs	r3, r2
 8008142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008144:	f7fb fc8c 	bl	8003a60 <HAL_GetTick>
 8008148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800814a:	e00a      	b.n	8008162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800814c:	f7fb fc88 	bl	8003a60 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	f241 3288 	movw	r2, #5000	; 0x1388
 800815a:	4293      	cmp	r3, r2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e053      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008162:	4b2d      	ldr	r3, [pc, #180]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 020c 	and.w	r2, r3, #12
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	429a      	cmp	r2, r3
 8008172:	d1eb      	bne.n	800814c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008174:	4b27      	ldr	r3, [pc, #156]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d210      	bcs.n	80081a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f023 020f 	bic.w	r2, r3, #15
 800818a:	4922      	ldr	r1, [pc, #136]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4313      	orrs	r3, r2
 8008190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008192:	4b20      	ldr	r3, [pc, #128]	; (8008214 <HAL_RCC_ClockConfig+0x1c4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 030f 	and.w	r3, r3, #15
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d001      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e032      	b.n	800820a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081b0:	4b19      	ldr	r3, [pc, #100]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	4916      	ldr	r1, [pc, #88]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	490e      	ldr	r1, [pc, #56]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081e2:	f000 f821 	bl	8008228 <HAL_RCC_GetSysClockFreq>
 80081e6:	4601      	mov	r1, r0
 80081e8:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <HAL_RCC_ClockConfig+0x1c8>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	091b      	lsrs	r3, r3, #4
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <HAL_RCC_ClockConfig+0x1cc>)
 80081f4:	5cd3      	ldrb	r3, [r2, r3]
 80081f6:	fa21 f303 	lsr.w	r3, r1, r3
 80081fa:	4a09      	ldr	r2, [pc, #36]	; (8008220 <HAL_RCC_ClockConfig+0x1d0>)
 80081fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <HAL_RCC_ClockConfig+0x1d4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f7fa fb6c 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40023c00 	.word	0x40023c00
 8008218:	40023800 	.word	0x40023800
 800821c:	08013a28 	.word	0x08013a28
 8008220:	20000000 	.word	0x20000000
 8008224:	20000020 	.word	0x20000020

08008228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	2300      	movs	r3, #0
 8008238:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800823e:	4b50      	ldr	r3, [pc, #320]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b04      	cmp	r3, #4
 8008248:	d007      	beq.n	800825a <HAL_RCC_GetSysClockFreq+0x32>
 800824a:	2b08      	cmp	r3, #8
 800824c:	d008      	beq.n	8008260 <HAL_RCC_GetSysClockFreq+0x38>
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 808d 	bne.w	800836e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008254:	4b4b      	ldr	r3, [pc, #300]	; (8008384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008256:	60bb      	str	r3, [r7, #8]
      break;
 8008258:	e08c      	b.n	8008374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800825a:	4b4b      	ldr	r3, [pc, #300]	; (8008388 <HAL_RCC_GetSysClockFreq+0x160>)
 800825c:	60bb      	str	r3, [r7, #8]
      break;
 800825e:	e089      	b.n	8008374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008260:	4b47      	ldr	r3, [pc, #284]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008268:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800826a:	4b45      	ldr	r3, [pc, #276]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d023      	beq.n	80082be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008276:	4b42      	ldr	r3, [pc, #264]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	099b      	lsrs	r3, r3, #6
 800827c:	f04f 0400 	mov.w	r4, #0
 8008280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	ea03 0501 	and.w	r5, r3, r1
 800828c:	ea04 0602 	and.w	r6, r4, r2
 8008290:	4a3d      	ldr	r2, [pc, #244]	; (8008388 <HAL_RCC_GetSysClockFreq+0x160>)
 8008292:	fb02 f106 	mul.w	r1, r2, r6
 8008296:	2200      	movs	r2, #0
 8008298:	fb02 f205 	mul.w	r2, r2, r5
 800829c:	440a      	add	r2, r1
 800829e:	493a      	ldr	r1, [pc, #232]	; (8008388 <HAL_RCC_GetSysClockFreq+0x160>)
 80082a0:	fba5 0101 	umull	r0, r1, r5, r1
 80082a4:	1853      	adds	r3, r2, r1
 80082a6:	4619      	mov	r1, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	461a      	mov	r2, r3
 80082b0:	4623      	mov	r3, r4
 80082b2:	f7f7 fffd 	bl	80002b0 <__aeabi_uldivmod>
 80082b6:	4603      	mov	r3, r0
 80082b8:	460c      	mov	r4, r1
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	e049      	b.n	8008352 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082be:	4b30      	ldr	r3, [pc, #192]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	099b      	lsrs	r3, r3, #6
 80082c4:	f04f 0400 	mov.w	r4, #0
 80082c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	ea03 0501 	and.w	r5, r3, r1
 80082d4:	ea04 0602 	and.w	r6, r4, r2
 80082d8:	4629      	mov	r1, r5
 80082da:	4632      	mov	r2, r6
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	f04f 0400 	mov.w	r4, #0
 80082e4:	0154      	lsls	r4, r2, #5
 80082e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082ea:	014b      	lsls	r3, r1, #5
 80082ec:	4619      	mov	r1, r3
 80082ee:	4622      	mov	r2, r4
 80082f0:	1b49      	subs	r1, r1, r5
 80082f2:	eb62 0206 	sbc.w	r2, r2, r6
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	f04f 0400 	mov.w	r4, #0
 80082fe:	0194      	lsls	r4, r2, #6
 8008300:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008304:	018b      	lsls	r3, r1, #6
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	eb64 0402 	sbc.w	r4, r4, r2
 800830c:	f04f 0100 	mov.w	r1, #0
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	00e2      	lsls	r2, r4, #3
 8008316:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800831a:	00d9      	lsls	r1, r3, #3
 800831c:	460b      	mov	r3, r1
 800831e:	4614      	mov	r4, r2
 8008320:	195b      	adds	r3, r3, r5
 8008322:	eb44 0406 	adc.w	r4, r4, r6
 8008326:	f04f 0100 	mov.w	r1, #0
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	02a2      	lsls	r2, r4, #10
 8008330:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008334:	0299      	lsls	r1, r3, #10
 8008336:	460b      	mov	r3, r1
 8008338:	4614      	mov	r4, r2
 800833a:	4618      	mov	r0, r3
 800833c:	4621      	mov	r1, r4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f04f 0400 	mov.w	r4, #0
 8008344:	461a      	mov	r2, r3
 8008346:	4623      	mov	r3, r4
 8008348:	f7f7 ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800834c:	4603      	mov	r3, r0
 800834e:	460c      	mov	r4, r1
 8008350:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_GetSysClockFreq+0x158>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	3301      	adds	r3, #1
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	fbb2 f3f3 	udiv	r3, r2, r3
 800836a:	60bb      	str	r3, [r7, #8]
      break;
 800836c:	e002      	b.n	8008374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008370:	60bb      	str	r3, [r7, #8]
      break;
 8008372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008374:	68bb      	ldr	r3, [r7, #8]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837e:	bf00      	nop
 8008380:	40023800 	.word	0x40023800
 8008384:	00f42400 	.word	0x00f42400
 8008388:	017d7840 	.word	0x017d7840

0800838c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000000 	.word	0x20000000

080083a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083a8:	f7ff fff0 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083ac:	4601      	mov	r1, r0
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	0a9b      	lsrs	r3, r3, #10
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	4a03      	ldr	r2, [pc, #12]	; (80083c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ba:	5cd3      	ldrb	r3, [r2, r3]
 80083bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40023800 	.word	0x40023800
 80083c8:	08013a38 	.word	0x08013a38

080083cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083d0:	f7ff ffdc 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	0b5b      	lsrs	r3, r3, #13
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083e2:	5cd3      	ldrb	r3, [r2, r3]
 80083e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40023800 	.word	0x40023800
 80083f0:	08013a38 	.word	0x08013a38

080083f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220f      	movs	r2, #15
 8008402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008404:	4b12      	ldr	r3, [pc, #72]	; (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0203 	and.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008428:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	08db      	lsrs	r3, r3, #3
 800842e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <HAL_RCC_GetClockConfig+0x60>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 020f 	and.w	r2, r3, #15
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40023800 	.word	0x40023800
 8008454:	40023c00 	.word	0x40023c00

08008458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d012      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008480:	4b69      	ldr	r3, [pc, #420]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4a68      	ldr	r2, [pc, #416]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800848a:	6093      	str	r3, [r2, #8]
 800848c:	4b66      	ldr	r3, [pc, #408]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	4964      	ldr	r1, [pc, #400]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008496:	4313      	orrs	r3, r2
 8008498:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d017      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084b2:	4b5d      	ldr	r3, [pc, #372]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c0:	4959      	ldr	r1, [pc, #356]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d0:	d101      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80084d2:	2301      	movs	r3, #1
 80084d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80084de:	2301      	movs	r3, #1
 80084e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d017      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084ee:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	494a      	ldr	r1, [pc, #296]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850c:	d101      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800850e:	2301      	movs	r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800851a:	2301      	movs	r3, #1
 800851c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800852a:	2301      	movs	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 808b 	beq.w	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800853c:	4b3a      	ldr	r3, [pc, #232]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	4a39      	ldr	r2, [pc, #228]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008546:	6413      	str	r3, [r2, #64]	; 0x40
 8008548:	4b37      	ldr	r3, [pc, #220]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008550:	60bb      	str	r3, [r7, #8]
 8008552:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008554:	4b35      	ldr	r3, [pc, #212]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a34      	ldr	r2, [pc, #208]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800855a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008560:	f7fb fa7e 	bl	8003a60 <HAL_GetTick>
 8008564:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008566:	e008      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008568:	f7fb fa7a 	bl	8003a60 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b64      	cmp	r3, #100	; 0x64
 8008574:	d901      	bls.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e355      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800857a:	4b2c      	ldr	r3, [pc, #176]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008586:	4b28      	ldr	r3, [pc, #160]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800858e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d035      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d02e      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085a4:	4b20      	ldr	r3, [pc, #128]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085ae:	4b1e      	ldr	r3, [pc, #120]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4a1d      	ldr	r2, [pc, #116]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085ba:	4b1b      	ldr	r3, [pc, #108]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085be:	4a1a      	ldr	r2, [pc, #104]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085cc:	4b16      	ldr	r3, [pc, #88]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d114      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7fb fa42 	bl	8003a60 <HAL_GetTick>
 80085dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085de:	e00a      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085e0:	f7fb fa3e 	bl	8003a60 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e317      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0ee      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800860a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800860e:	d111      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800861c:	4b04      	ldr	r3, [pc, #16]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800861e:	400b      	ands	r3, r1
 8008620:	4901      	ldr	r1, [pc, #4]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008622:	4313      	orrs	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
 8008626:	e00b      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008628:	40023800 	.word	0x40023800
 800862c:	40007000 	.word	0x40007000
 8008630:	0ffffcff 	.word	0x0ffffcff
 8008634:	4bb0      	ldr	r3, [pc, #704]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	4aaf      	ldr	r2, [pc, #700]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800863a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800863e:	6093      	str	r3, [r2, #8]
 8008640:	4bad      	ldr	r3, [pc, #692]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800864c:	49aa      	ldr	r1, [pc, #680]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800864e:	4313      	orrs	r3, r2
 8008650:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	d010      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800865e:	4ba6      	ldr	r3, [pc, #664]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008664:	4aa4      	ldr	r2, [pc, #656]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800866a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800866e:	4ba2      	ldr	r3, [pc, #648]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008670:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	499f      	ldr	r1, [pc, #636]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800868c:	4b9a      	ldr	r3, [pc, #616]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008692:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800869a:	4997      	ldr	r1, [pc, #604]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086ae:	4b92      	ldr	r3, [pc, #584]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086bc:	498e      	ldr	r1, [pc, #568]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086d0:	4b89      	ldr	r3, [pc, #548]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086de:	4986      	ldr	r1, [pc, #536]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086f2:	4b81      	ldr	r3, [pc, #516]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	497d      	ldr	r1, [pc, #500]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008714:	4b78      	ldr	r3, [pc, #480]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f023 0203 	bic.w	r2, r3, #3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	4975      	ldr	r1, [pc, #468]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008736:	4b70      	ldr	r3, [pc, #448]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873c:	f023 020c 	bic.w	r2, r3, #12
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008744:	496c      	ldr	r1, [pc, #432]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008746:	4313      	orrs	r3, r2
 8008748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008758:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008766:	4964      	ldr	r1, [pc, #400]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800877a:	4b5f      	ldr	r3, [pc, #380]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800877c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008780:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008788:	495b      	ldr	r1, [pc, #364]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800879c:	4b56      	ldr	r3, [pc, #344]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087aa:	4953      	ldr	r1, [pc, #332]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80087be:	4b4e      	ldr	r3, [pc, #312]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087cc:	494a      	ldr	r1, [pc, #296]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80087e0:	4b45      	ldr	r3, [pc, #276]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ee:	4942      	ldr	r1, [pc, #264]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008802:	4b3d      	ldr	r3, [pc, #244]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008810:	4939      	ldr	r1, [pc, #228]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008824:	4b34      	ldr	r3, [pc, #208]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008832:	4931      	ldr	r1, [pc, #196]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d011      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008846:	4b2c      	ldr	r3, [pc, #176]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008854:	4928      	ldr	r1, [pc, #160]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008864:	d101      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008866:	2301      	movs	r3, #1
 8008868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008876:	2301      	movs	r3, #1
 8008878:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008894:	4918      	ldr	r1, [pc, #96]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008896:	4313      	orrs	r3, r2
 8008898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b8:	490f      	ldr	r1, [pc, #60]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d005      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ce:	f040 80d8 	bne.w	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088de:	f7fb f8bf 	bl	8003a60 <HAL_GetTick>
 80088e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088e4:	e00a      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088e6:	f7fb f8bb 	bl	8003a60 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b64      	cmp	r3, #100	; 0x64
 80088f2:	d903      	bls.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e196      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80088f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088fc:	4b6c      	ldr	r3, [pc, #432]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1ee      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d021      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11d      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800891c:	4b64      	ldr	r3, [pc, #400]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800891e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800892a:	4b61      	ldr	r3, [pc, #388]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800892c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008930:	0e1b      	lsrs	r3, r3, #24
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	019a      	lsls	r2, r3, #6
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	431a      	orrs	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	061b      	lsls	r3, r3, #24
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	071b      	lsls	r3, r3, #28
 8008950:	4957      	ldr	r1, [pc, #348]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800896c:	d00a      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008976:	2b00      	cmp	r3, #0
 8008978:	d02e      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008982:	d129      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008984:	4b4a      	ldr	r3, [pc, #296]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800898a:	0c1b      	lsrs	r3, r3, #16
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008992:	4b47      	ldr	r3, [pc, #284]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008998:	0f1b      	lsrs	r3, r3, #28
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	019a      	lsls	r2, r3, #6
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	061b      	lsls	r3, r3, #24
 80089b2:	431a      	orrs	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	071b      	lsls	r3, r3, #28
 80089b8:	493d      	ldr	r1, [pc, #244]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80089c0:	4b3b      	ldr	r3, [pc, #236]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c6:	f023 021f 	bic.w	r2, r3, #31
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	3b01      	subs	r3, #1
 80089d0:	4937      	ldr	r1, [pc, #220]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01d      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80089e4:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ea:	0e1b      	lsrs	r3, r3, #24
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089f2:	4b2f      	ldr	r3, [pc, #188]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f8:	0f1b      	lsrs	r3, r3, #28
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	019a      	lsls	r2, r3, #6
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	061b      	lsls	r3, r3, #24
 8008a12:	431a      	orrs	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	071b      	lsls	r3, r3, #28
 8008a18:	4925      	ldr	r1, [pc, #148]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d011      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	019a      	lsls	r2, r3, #6
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	061b      	lsls	r3, r3, #24
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	071b      	lsls	r3, r3, #28
 8008a48:	4919      	ldr	r1, [pc, #100]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a5c:	f7fb f800 	bl	8003a60 <HAL_GetTick>
 8008a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a62:	e008      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a64:	f7fa fffc 	bl	8003a60 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b64      	cmp	r3, #100	; 0x64
 8008a70:	d901      	bls.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e0d7      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0f0      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	f040 80cd 	bne.w	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a96:	f7fa ffe3 	bl	8003a60 <HAL_GetTick>
 8008a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a9c:	e00a      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a9e:	f7fa ffdf 	bl	8003a60 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b64      	cmp	r3, #100	; 0x64
 8008aaa:	d903      	bls.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e0ba      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008ab0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ab4:	4b5e      	ldr	r3, [pc, #376]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac0:	d0ed      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d02e      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d12a      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008aea:	4b51      	ldr	r3, [pc, #324]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	f003 0303 	and.w	r3, r3, #3
 8008af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008af8:	4b4d      	ldr	r3, [pc, #308]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afe:	0f1b      	lsrs	r3, r3, #28
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	019a      	lsls	r2, r3, #6
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	041b      	lsls	r3, r3, #16
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	061b      	lsls	r3, r3, #24
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	071b      	lsls	r3, r3, #28
 8008b1e:	4944      	ldr	r1, [pc, #272]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b26:	4b42      	ldr	r3, [pc, #264]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	3b01      	subs	r3, #1
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	493d      	ldr	r1, [pc, #244]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d022      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b54:	d11d      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b56:	4b36      	ldr	r3, [pc, #216]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5c:	0e1b      	lsrs	r3, r3, #24
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b64:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	019a      	lsls	r2, r3, #6
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	041b      	lsls	r3, r3, #16
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	061b      	lsls	r3, r3, #24
 8008b84:	431a      	orrs	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	071b      	lsls	r3, r3, #28
 8008b8a:	4929      	ldr	r1, [pc, #164]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d028      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba4:	0e1b      	lsrs	r3, r3, #24
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bac:	4b20      	ldr	r3, [pc, #128]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	0c1b      	lsrs	r3, r3, #16
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	019a      	lsls	r2, r3, #6
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	041b      	lsls	r3, r3, #16
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	061b      	lsls	r3, r3, #24
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	071b      	lsls	r3, r3, #28
 8008bd2:	4917      	ldr	r1, [pc, #92]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	4911      	ldr	r1, [pc, #68]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008bf0:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a0e      	ldr	r2, [pc, #56]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfc:	f7fa ff30 	bl	8003a60 <HAL_GetTick>
 8008c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c04:	f7fa ff2c 	bl	8003a60 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b64      	cmp	r3, #100	; 0x64
 8008c10:	d901      	bls.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e007      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c22:	d1ef      	bne.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800

08008c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c52:	f040 8086 	bne.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008c56:	4b8d      	ldr	r3, [pc, #564]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008c64:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c6c:	d03e      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c72:	d073      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d000      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008c78:	e074      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008c7a:	4b84      	ldr	r3, [pc, #528]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c86:	4b81      	ldr	r3, [pc, #516]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c8e:	4a80      	ldr	r2, [pc, #512]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	e007      	b.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008c98:	4b7c      	ldr	r3, [pc, #496]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ca0:	4a7c      	ldr	r2, [pc, #496]	; (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008ca8:	4b78      	ldr	r3, [pc, #480]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cae:	0e1b      	lsrs	r3, r3, #24
 8008cb0:	f003 030f 	and.w	r3, r3, #15
 8008cb4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008cb6:	4b75      	ldr	r3, [pc, #468]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbc:	099b      	lsrs	r3, r3, #6
 8008cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	fb02 f203 	mul.w	r2, r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008cd0:	4b6e      	ldr	r3, [pc, #440]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cd6:	0a1b      	lsrs	r3, r3, #8
 8008cd8:	f003 031f 	and.w	r3, r3, #31
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	617b      	str	r3, [r7, #20]
        break;
 8008cea:	e03b      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008cec:	4b67      	ldr	r3, [pc, #412]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d108      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008cf8:	4b64      	ldr	r3, [pc, #400]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d00:	4a63      	ldr	r2, [pc, #396]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	e007      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008d0a:	4b60      	ldr	r3, [pc, #384]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d12:	4a60      	ldr	r2, [pc, #384]	; (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d18:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008d1a:	4b5c      	ldr	r3, [pc, #368]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d20:	0e1b      	lsrs	r3, r3, #24
 8008d22:	f003 030f 	and.w	r3, r3, #15
 8008d26:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008d28:	4b58      	ldr	r3, [pc, #352]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2e:	099b      	lsrs	r3, r3, #6
 8008d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	fb02 f203 	mul.w	r2, r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d40:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008d42:	4b52      	ldr	r3, [pc, #328]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d58:	617b      	str	r3, [r7, #20]
        break;
 8008d5a:	e003      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d5c:	4b4e      	ldr	r3, [pc, #312]	; (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008d5e:	617b      	str	r3, [r7, #20]
        break;
 8008d60:	e000      	b.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008d62:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6a:	f040 8086 	bne.w	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008d6e:	4b47      	ldr	r3, [pc, #284]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d74:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008d7c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d84:	d03e      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d8a:	d073      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d000      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008d90:	e074      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008d92:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d108      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da6:	4a3a      	ldr	r2, [pc, #232]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	e007      	b.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008db0:	4b36      	ldr	r3, [pc, #216]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008db8:	4a36      	ldr	r2, [pc, #216]	; (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008dc0:	4b32      	ldr	r3, [pc, #200]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc6:	0e1b      	lsrs	r3, r3, #24
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008dce:	4b2f      	ldr	r3, [pc, #188]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	099b      	lsrs	r3, r3, #6
 8008dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	fb02 f203 	mul.w	r2, r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008de8:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	3301      	adds	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	617b      	str	r3, [r7, #20]
        break;
 8008e02:	e03b      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008e04:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d108      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e10:	4b1e      	ldr	r3, [pc, #120]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e18:	4a1d      	ldr	r2, [pc, #116]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	e007      	b.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e2a:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e30:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e38:	0e1b      	lsrs	r3, r3, #24
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008e40:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e46:	099b      	lsrs	r3, r3, #6
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	fb02 f203 	mul.w	r2, r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e60:	f003 031f 	and.w	r3, r3, #31
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e70:	617b      	str	r3, [r7, #20]
        break;
 8008e72:	e003      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008e76:	617b      	str	r3, [r7, #20]
        break;
 8008e78:	e000      	b.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8008e7a:	bf00      	nop

  return frequency;
 8008e7c:	697b      	ldr	r3, [r7, #20]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	00f42400 	.word	0x00f42400
 8008e94:	017d7840 	.word	0x017d7840
 8008e98:	00bb8000 	.word	0x00bb8000

08008e9c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e06b      	b.n	8008f86 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7f5b      	ldrb	r3, [r3, #29]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7f9 f9be 	bl	8002240 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ca      	movs	r2, #202	; 0xca
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2253      	movs	r2, #83	; 0x53
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fb00 	bl	80094e0 <RTC_EnterInitMode>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d008      	beq.n	8008ef8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	22ff      	movs	r2, #255	; 0xff
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e046      	b.n	8008f86 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6899      	ldr	r1, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b23      	ldr	r3, [pc, #140]	; (8008f90 <HAL_RTC_Init+0xf4>)
 8008f04:	400b      	ands	r3, r1
 8008f06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6899      	ldr	r1, [r3, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68d2      	ldr	r2, [r2, #12]
 8008f2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6919      	ldr	r1, [r3, #16]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	041a      	lsls	r2, r3, #16
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f52:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0208 	bic.w	r2, r2, #8
 8008f62:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	22ff      	movs	r2, #255	; 0xff
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008f84:	2300      	movs	r3, #0
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	ff8fffbf 	.word	0xff8fffbf

08008f94 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	7f1b      	ldrb	r3, [r3, #28]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_RTC_SetTime+0x1c>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e0a8      	b.n	8009102 <HAL_RTC_SetTime+0x16e>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d126      	bne.n	8009010 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 faac 	bl	8009538 <RTC_ByteToBcd2>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 faa5 	bl	8009538 <RTC_ByteToBcd2>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ff2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fa9d 	bl	8009538 <RTC_ByteToBcd2>
 8008ffe:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009000:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	7b1b      	ldrb	r3, [r3, #12]
 8009008:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	e018      	b.n	8009042 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	785b      	ldrb	r3, [r3, #1]
 800902e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009030:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009036:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	7b1b      	ldrb	r3, [r3, #12]
 800903c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	22ca      	movs	r2, #202	; 0xca
 8009048:	625a      	str	r2, [r3, #36]	; 0x24
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2253      	movs	r2, #83	; 0x53
 8009050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fa44 	bl	80094e0 <RTC_EnterInitMode>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	22ff      	movs	r2, #255	; 0xff
 8009064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2204      	movs	r2, #4
 800906a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e045      	b.n	8009102 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	6979      	ldr	r1, [r7, #20]
 800907c:	4b23      	ldr	r3, [pc, #140]	; (800910c <HAL_RTC_SetTime+0x178>)
 800907e:	400b      	ands	r3, r1
 8009080:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009090:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6899      	ldr	r1, [r3, #8]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	691a      	ldr	r2, [r3, #16]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	431a      	orrs	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d111      	bne.n	80090ec <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f9e1 	bl	8009490 <HAL_RTC_WaitForSynchro>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	22ff      	movs	r2, #255	; 0xff
 80090da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2204      	movs	r2, #4
 80090e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e00a      	b.n	8009102 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009100:	2300      	movs	r3, #0
  }
}
 8009102:	4618      	mov	r0, r3
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	bd90      	pop	{r4, r7, pc}
 800910a:	bf00      	nop
 800910c:	007f7f7f 	.word	0x007f7f7f

08009110 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	7f1b      	ldrb	r3, [r3, #28]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_RTC_SetDate+0x1c>
 8009128:	2302      	movs	r3, #2
 800912a:	e092      	b.n	8009252 <HAL_RTC_SetDate+0x142>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2202      	movs	r2, #2
 8009136:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10e      	bne.n	800915c <HAL_RTC_SetDate+0x4c>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	785b      	ldrb	r3, [r3, #1]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	f023 0310 	bic.w	r3, r3, #16
 8009152:	b2db      	uxtb	r3, r3
 8009154:	330a      	adds	r3, #10
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d11c      	bne.n	800919c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	78db      	ldrb	r3, [r3, #3]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f9e6 	bl	8009538 <RTC_ByteToBcd2>
 800916c:	4603      	mov	r3, r0
 800916e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f9df 	bl	8009538 <RTC_ByteToBcd2>
 800917a:	4603      	mov	r3, r0
 800917c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800917e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	789b      	ldrb	r3, [r3, #2]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f9d7 	bl	8009538 <RTC_ByteToBcd2>
 800918a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800918c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	e00e      	b.n	80091ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80091ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	22ca      	movs	r2, #202	; 0xca
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2253      	movs	r2, #83	; 0x53
 80091c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f988 	bl	80094e0 <RTC_EnterInitMode>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2204      	movs	r2, #4
 80091e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e031      	b.n	8009252 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	6979      	ldr	r1, [r7, #20]
 80091f4:	4b19      	ldr	r3, [pc, #100]	; (800925c <HAL_RTC_SetDate+0x14c>)
 80091f6:	400b      	ands	r3, r1
 80091f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009208:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d111      	bne.n	800923c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f939 	bl	8009490 <HAL_RTC_WaitForSynchro>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	22ff      	movs	r2, #255	; 0xff
 800922a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2204      	movs	r2, #4
 8009230:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e00a      	b.n	8009252 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	22ff      	movs	r2, #255	; 0xff
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009250:	2300      	movs	r3, #0
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	bd90      	pop	{r4, r7, pc}
 800925a:	bf00      	nop
 800925c:	00ffff3f 	.word	0x00ffff3f

08009260 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b089      	sub	sp, #36	; 0x24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	7f1b      	ldrb	r3, [r3, #28]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d101      	bne.n	8009284 <HAL_RTC_SetAlarm+0x24>
 8009280:	2302      	movs	r3, #2
 8009282:	e101      	b.n	8009488 <HAL_RTC_SetAlarm+0x228>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2202      	movs	r2, #2
 800928e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d137      	bne.n	8009306 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2200      	movs	r2, #0
 80092a8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f942 	bl	8009538 <RTC_ByteToBcd2>
 80092b4:	4603      	mov	r3, r0
 80092b6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f93b 	bl	8009538 <RTC_ByteToBcd2>
 80092c2:	4603      	mov	r3, r0
 80092c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80092c6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	789b      	ldrb	r3, [r3, #2]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f933 	bl	8009538 <RTC_ByteToBcd2>
 80092d2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80092d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80092de:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f925 	bl	8009538 <RTC_ByteToBcd2>
 80092ee:	4603      	mov	r3, r0
 80092f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80092f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80092fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009300:	4313      	orrs	r3, r2
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	e023      	b.n	800934e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2200      	movs	r2, #0
 8009318:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009326:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800932c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	7b1b      	ldrb	r3, [r3, #12]
 8009332:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009334:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800933c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800933e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009344:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800934a:	4313      	orrs	r3, r2
 800934c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	4313      	orrs	r3, r2
 8009358:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	22ca      	movs	r2, #202	; 0xca
 8009360:	625a      	str	r2, [r3, #36]	; 0x24
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2253      	movs	r2, #83	; 0x53
 8009368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009372:	d13f      	bne.n	80093f4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009382:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009392:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009394:	f7fa fb64 	bl	8003a60 <HAL_GetTick>
 8009398:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800939a:	e013      	b.n	80093c4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800939c:	f7fa fb60 	bl	8003a60 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093aa:	d90b      	bls.n	80093c4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	22ff      	movs	r2, #255	; 0xff
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2203      	movs	r2, #3
 80093b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e061      	b.n	8009488 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0e4      	beq.n	800939c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093f0:	609a      	str	r2, [r3, #8]
 80093f2:	e03e      	b.n	8009472 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009402:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009412:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009414:	f7fa fb24 	bl	8003a60 <HAL_GetTick>
 8009418:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800941a:	e013      	b.n	8009444 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800941c:	f7fa fb20 	bl	8003a60 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800942a:	d90b      	bls.n	8009444 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	22ff      	movs	r2, #255	; 0xff
 8009432:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2203      	movs	r2, #3
 8009438:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e021      	b.n	8009488 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0e4      	beq.n	800941c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009470:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	22ff      	movs	r2, #255	; 0xff
 8009478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3724      	adds	r7, #36	; 0x24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd90      	pop	{r4, r7, pc}

08009490 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094ac:	f7fa fad8 	bl	8003a60 <HAL_GetTick>
 80094b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80094b2:	e009      	b.n	80094c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80094b4:	f7fa fad4 	bl	8003a60 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c2:	d901      	bls.n	80094c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e007      	b.n	80094d8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0ee      	beq.n	80094b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d119      	bne.n	800952e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009504:	f7fa faac 	bl	8003a60 <HAL_GetTick>
 8009508:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800950a:	e009      	b.n	8009520 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800950c:	f7fa faa8 	bl	8003a60 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800951a:	d901      	bls.n	8009520 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e007      	b.n	8009530 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0ee      	beq.n	800950c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009546:	e005      	b.n	8009554 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	3b0a      	subs	r3, #10
 8009552:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b09      	cmp	r3, #9
 8009558:	d8f6      	bhi.n	8009548 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	b2da      	uxtb	r2, r3
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	4313      	orrs	r3, r2
 8009566:	b2db      	uxtb	r3, r3
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	7f1b      	ldrb	r3, [r3, #28]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_RTCEx_SetTimeStamp+0x1c>
 800958c:	2302      	movs	r3, #2
 800958e:	e03e      	b.n	800960e <HAL_RTCEx_SetTimeStamp+0x9a>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2202      	movs	r2, #2
 800959a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	22ca      	movs	r2, #202	; 0xca
 80095b6:	625a      	str	r2, [r3, #36]	; 0x24
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2253      	movs	r2, #83	; 0x53
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0206 	bic.w	r2, r2, #6
 80095ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	430a      	orrs	r2, r1
 80095de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	22ff      	movs	r2, #255	; 0xff
 80095fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2201      	movs	r2, #1
 8009604:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	fffff7f7 	.word	0xfffff7f7

08009620 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e149      	b.n	80098d2 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f9 f8da 	bl	800280c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f94f 	bl	8009904 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d007      	beq.n	800967e <HAL_SAI_Init+0x5e>
 800966e:	2b01      	cmp	r3, #1
 8009670:	d302      	bcc.n	8009678 <HAL_SAI_Init+0x58>
 8009672:	2b02      	cmp	r3, #2
 8009674:	d006      	beq.n	8009684 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8009676:	e008      	b.n	800968a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	61fb      	str	r3, [r7, #28]
      break;
 800967c:	e005      	b.n	800968a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800967e:	2310      	movs	r3, #16
 8009680:	61fb      	str	r3, [r7, #28]
      break;
 8009682:	e002      	b.n	800968a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009684:	2320      	movs	r3, #32
 8009686:	61fb      	str	r3, [r7, #28]
      break;
 8009688:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2b03      	cmp	r3, #3
 8009690:	d81d      	bhi.n	80096ce <HAL_SAI_Init+0xae>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <HAL_SAI_Init+0x78>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096a9 	.word	0x080096a9
 800969c:	080096af 	.word	0x080096af
 80096a0:	080096b7 	.word	0x080096b7
 80096a4:	080096bf 	.word	0x080096bf
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80096ac:	e010      	b.n	80096d0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80096ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096b2:	617b      	str	r3, [r7, #20]
      }
      break;
 80096b4:	e00c      	b.n	80096d0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80096b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096ba:	617b      	str	r3, [r7, #20]
      }
      break;
 80096bc:	e008      	b.n	80096d0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80096be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096c2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
      }
      break;
 80096cc:	e000      	b.n	80096d0 <HAL_SAI_Init+0xb0>
  default:
    break;
 80096ce:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a81      	ldr	r2, [pc, #516]	; (80098dc <HAL_SAI_Init+0x2bc>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <HAL_SAI_Init+0xc4>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a80      	ldr	r2, [pc, #512]	; (80098e0 <HAL_SAI_Init+0x2c0>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d103      	bne.n	80096ec <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80096e4:	4a7f      	ldr	r2, [pc, #508]	; (80098e4 <HAL_SAI_Init+0x2c4>)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e002      	b.n	80096f2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80096ec:	4a7e      	ldr	r2, [pc, #504]	; (80098e8 <HAL_SAI_Init+0x2c8>)
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d043      	beq.n	8009782 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a76      	ldr	r2, [pc, #472]	; (80098dc <HAL_SAI_Init+0x2bc>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d004      	beq.n	8009712 <HAL_SAI_Init+0xf2>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a74      	ldr	r2, [pc, #464]	; (80098e0 <HAL_SAI_Init+0x2c0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d104      	bne.n	800971c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009712:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009716:	f7ff fa8d 	bl	8008c34 <HAL_RCCEx_GetPeriphCLKFreq>
 800971a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a72      	ldr	r2, [pc, #456]	; (80098ec <HAL_SAI_Init+0x2cc>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d004      	beq.n	8009730 <HAL_SAI_Init+0x110>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a71      	ldr	r2, [pc, #452]	; (80098f0 <HAL_SAI_Init+0x2d0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d104      	bne.n	800973a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009730:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009734:	f7ff fa7e 	bl	8008c34 <HAL_RCCEx_GetPeriphCLKFreq>
 8009738:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	025b      	lsls	r3, r3, #9
 800974c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009750:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4a67      	ldr	r2, [pc, #412]	; (80098f4 <HAL_SAI_Init+0x2d4>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	08da      	lsrs	r2, r3, #3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8009760:	68f9      	ldr	r1, [r7, #12]
 8009762:	4b64      	ldr	r3, [pc, #400]	; (80098f4 <HAL_SAI_Init+0x2d4>)
 8009764:	fba3 2301 	umull	r2, r3, r3, r1
 8009768:	08da      	lsrs	r2, r3, #3
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	1aca      	subs	r2, r1, r3
 8009774:	2a08      	cmp	r2, #8
 8009776:	d904      	bls.n	8009782 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <HAL_SAI_Init+0x172>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d109      	bne.n	80097a6 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_SAI_Init+0x17e>
 800979a:	2300      	movs	r3, #0
 800979c:	e001      	b.n	80097a2 <HAL_SAI_Init+0x182>
 800979e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097a2:	61bb      	str	r3, [r7, #24]
 80097a4:	e008      	b.n	80097b8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d102      	bne.n	80097b4 <HAL_SAI_Init+0x194>
 80097ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097b2:	e000      	b.n	80097b6 <HAL_SAI_Init+0x196>
 80097b4:	2300      	movs	r3, #0
 80097b6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6819      	ldr	r1, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b4d      	ldr	r3, [pc, #308]	; (80098f8 <HAL_SAI_Init+0x2d8>)
 80097c4:	400b      	ands	r3, r1
 80097c6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80097dc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	431a      	orrs	r2, r3
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80097f0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80097fc:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	051b      	lsls	r3, r3, #20
 8009804:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6859      	ldr	r1, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4b38      	ldr	r3, [pc, #224]	; (80098fc <HAL_SAI_Init+0x2dc>)
 800981a:	400b      	ands	r3, r1
 800981c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6859      	ldr	r1, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6899      	ldr	r1, [r3, #8]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <HAL_SAI_Init+0x2e0>)
 8009848:	400b      	ands	r3, r1
 800984a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6899      	ldr	r1, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800985c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8009862:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8009868:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	3b01      	subs	r3, #1
 8009870:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8009872:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68d9      	ldr	r1, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	f24f 0320 	movw	r3, #61472	; 0xf020
 800988a:	400b      	ands	r3, r1
 800988c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68d9      	ldr	r1, [r3, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098aa:	3b01      	subs	r3, #1
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40015804 	.word	0x40015804
 80098e0:	40015824 	.word	0x40015824
 80098e4:	40015800 	.word	0x40015800
 80098e8:	40015c00 	.word	0x40015c00
 80098ec:	40015c04 	.word	0x40015c04
 80098f0:	40015c24 	.word	0x40015c24
 80098f4:	cccccccd 	.word	0xcccccccd
 80098f8:	ff05c010 	.word	0xff05c010
 80098fc:	ffff1ff0 	.word	0xffff1ff0
 8009900:	fff88000 	.word	0xfff88000

08009904 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009904:	b490      	push	{r4, r7}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800990c:	4b16      	ldr	r3, [pc, #88]	; (8009968 <SAI_Disable+0x64>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a16      	ldr	r2, [pc, #88]	; (800996c <SAI_Disable+0x68>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	0b1b      	lsrs	r3, r3, #12
 8009918:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800992c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800992e:	4623      	mov	r3, r4
 8009930:	1e5c      	subs	r4, r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10a      	bne.n	800994c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800993c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	73fb      	strb	r3, [r7, #15]
      break;
 800994a:	e006      	b.n	800995a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e9      	bne.n	800992e <SAI_Disable+0x2a>

  return status;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bc90      	pop	{r4, r7}
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	20000000 	.word	0x20000000
 800996c:	95cbec1b 	.word	0x95cbec1b

08009970 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e025      	b.n	80099d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7f8 ff2d 	bl	80027f8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4619      	mov	r1, r3
 80099b0:	4610      	mov	r0, r2
 80099b2:	f001 fd59 	bl	800b468 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	461a      	mov	r2, r3
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	f001 fdc3 	bl	800b54c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d101      	bne.n	80099f4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80099f0:	2302      	movs	r3, #2
 80099f2:	e018      	b.n	8009a26 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fe21 	bl	800b64c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d104      	bne.n	8009a1c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2205      	movs	r2, #5
 8009a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009a1a:	e003      	b.n	8009a24 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d101      	bne.n	8009a48 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
 8009a46:	e00e      	b.n	8009a66 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 fe19 	bl	800b68e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e04c      	b.n	8009b1c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d106      	bne.n	8009a9c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7f8 fbec 	bl	8002274 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0203 	bic.w	r2, r2, #3
 8009ab2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <HAL_SPDIFRX_Init+0xb4>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009acc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009ad2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009ad8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009ade:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009ae4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009aea:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009af0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009af6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009afc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	fff88407 	.word	0xfff88407

08009b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e01d      	b.n	8009b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7f8 fbd2 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f000 fb78 	bl	800a25c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <HAL_TIM_Base_Start_IT+0x50>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d00b      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x42>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb0:	d007      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0201 	orr.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	00010007 	.word	0x00010007

08009bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e01d      	b.n	8009c22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7f8 fbea 	bl	80023d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f000 fb22 	bl	800a25c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d122      	bne.n	8009c86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d11b      	bne.n	8009c86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f06f 0202 	mvn.w	r2, #2
 8009c56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	f003 0303 	and.w	r3, r3, #3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fad7 	bl	800a220 <HAL_TIM_IC_CaptureCallback>
 8009c72:	e005      	b.n	8009c80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fac9 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fada 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d122      	bne.n	8009cda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d11b      	bne.n	8009cda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f06f 0204 	mvn.w	r2, #4
 8009caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 faad 	bl	800a220 <HAL_TIM_IC_CaptureCallback>
 8009cc6:	e005      	b.n	8009cd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa9f 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fab0 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d122      	bne.n	8009d2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	d11b      	bne.n	8009d2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f06f 0208 	mvn.w	r2, #8
 8009cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa83 	bl	800a220 <HAL_TIM_IC_CaptureCallback>
 8009d1a:	e005      	b.n	8009d28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa75 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa86 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f003 0310 	and.w	r3, r3, #16
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d122      	bne.n	8009d82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f003 0310 	and.w	r3, r3, #16
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d11b      	bne.n	8009d82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f06f 0210 	mvn.w	r2, #16
 8009d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2208      	movs	r2, #8
 8009d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa59 	bl	800a220 <HAL_TIM_IC_CaptureCallback>
 8009d6e:	e005      	b.n	8009d7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa4b 	bl	800a20c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fa5c 	bl	800a234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d10e      	bne.n	8009dae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d107      	bne.n	8009dae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f06f 0201 	mvn.w	r2, #1
 8009da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7f7 fed9 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db8:	2b80      	cmp	r3, #128	; 0x80
 8009dba:	d10e      	bne.n	8009dda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d107      	bne.n	8009dda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 feef 	bl	800abb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de8:	d10e      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df4:	2b80      	cmp	r3, #128	; 0x80
 8009df6:	d107      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fee2 	bl	800abcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e12:	2b40      	cmp	r3, #64	; 0x40
 8009e14:	d10e      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b40      	cmp	r3, #64	; 0x40
 8009e22:	d107      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa0a 	bl	800a248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d10e      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d107      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0220 	mvn.w	r2, #32
 8009e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fea2 	bl	800aba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e105      	b.n	800a08e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b14      	cmp	r3, #20
 8009e96:	f200 80f0 	bhi.w	800a07a <HAL_TIM_PWM_ConfigChannel+0x212>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	0800a07b 	.word	0x0800a07b
 8009ea8:	0800a07b 	.word	0x0800a07b
 8009eac:	0800a07b 	.word	0x0800a07b
 8009eb0:	08009f35 	.word	0x08009f35
 8009eb4:	0800a07b 	.word	0x0800a07b
 8009eb8:	0800a07b 	.word	0x0800a07b
 8009ebc:	0800a07b 	.word	0x0800a07b
 8009ec0:	08009f77 	.word	0x08009f77
 8009ec4:	0800a07b 	.word	0x0800a07b
 8009ec8:	0800a07b 	.word	0x0800a07b
 8009ecc:	0800a07b 	.word	0x0800a07b
 8009ed0:	08009fb7 	.word	0x08009fb7
 8009ed4:	0800a07b 	.word	0x0800a07b
 8009ed8:	0800a07b 	.word	0x0800a07b
 8009edc:	0800a07b 	.word	0x0800a07b
 8009ee0:	08009ff9 	.word	0x08009ff9
 8009ee4:	0800a07b 	.word	0x0800a07b
 8009ee8:	0800a07b 	.word	0x0800a07b
 8009eec:	0800a07b 	.word	0x0800a07b
 8009ef0:	0800a039 	.word	0x0800a039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fa4e 	bl	800a39c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0208 	orr.w	r2, r2, #8
 8009f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0204 	bic.w	r2, r2, #4
 8009f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6999      	ldr	r1, [r3, #24]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	619a      	str	r2, [r3, #24]
      break;
 8009f32:	e0a3      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 faa0 	bl	800a480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6999      	ldr	r1, [r3, #24]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	021a      	lsls	r2, r3, #8
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	619a      	str	r2, [r3, #24]
      break;
 8009f74:	e082      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 faf7 	bl	800a570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0208 	orr.w	r2, r2, #8
 8009f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 0204 	bic.w	r2, r2, #4
 8009fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69d9      	ldr	r1, [r3, #28]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	61da      	str	r2, [r3, #28]
      break;
 8009fb4:	e062      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fb4d 	bl	800a65c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69da      	ldr	r2, [r3, #28]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	69d9      	ldr	r1, [r3, #28]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	021a      	lsls	r2, r3, #8
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	61da      	str	r2, [r3, #28]
      break;
 8009ff6:	e041      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68b9      	ldr	r1, [r7, #8]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fb84 	bl	800a70c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f042 0208 	orr.w	r2, r2, #8
 800a012:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0204 	bic.w	r2, r2, #4
 800a022:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a036:	e021      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fbb6 	bl	800a7b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	021a      	lsls	r2, r3, #8
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a078:	e000      	b.n	800a07c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a07a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop

0800a098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIM_ConfigClockSource+0x18>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e0a6      	b.n	800a1fe <HAL_TIM_ConfigClockSource+0x166>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4b4f      	ldr	r3, [pc, #316]	; (800a208 <HAL_TIM_ConfigClockSource+0x170>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	d067      	beq.n	800a1b8 <HAL_TIM_ConfigClockSource+0x120>
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d80b      	bhi.n	800a104 <HAL_TIM_ConfigClockSource+0x6c>
 800a0ec:	2b10      	cmp	r3, #16
 800a0ee:	d073      	beq.n	800a1d8 <HAL_TIM_ConfigClockSource+0x140>
 800a0f0:	2b10      	cmp	r3, #16
 800a0f2:	d802      	bhi.n	800a0fa <HAL_TIM_ConfigClockSource+0x62>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d06f      	beq.n	800a1d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a0f8:	e078      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d06c      	beq.n	800a1d8 <HAL_TIM_ConfigClockSource+0x140>
 800a0fe:	2b30      	cmp	r3, #48	; 0x30
 800a100:	d06a      	beq.n	800a1d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a102:	e073      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a104:	2b70      	cmp	r3, #112	; 0x70
 800a106:	d00d      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0x8c>
 800a108:	2b70      	cmp	r3, #112	; 0x70
 800a10a:	d804      	bhi.n	800a116 <HAL_TIM_ConfigClockSource+0x7e>
 800a10c:	2b50      	cmp	r3, #80	; 0x50
 800a10e:	d033      	beq.n	800a178 <HAL_TIM_ConfigClockSource+0xe0>
 800a110:	2b60      	cmp	r3, #96	; 0x60
 800a112:	d041      	beq.n	800a198 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a114:	e06a      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11a:	d066      	beq.n	800a1ea <HAL_TIM_ConfigClockSource+0x152>
 800a11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a120:	d017      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a122:	e063      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6818      	ldr	r0, [r3, #0]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6899      	ldr	r1, [r3, #8]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f000 fc0a 	bl	800a94c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a146:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	609a      	str	r2, [r3, #8]
      break;
 800a150:	e04c      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6899      	ldr	r1, [r3, #8]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f000 fbf3 	bl	800a94c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a174:	609a      	str	r2, [r3, #8]
      break;
 800a176:	e039      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	6859      	ldr	r1, [r3, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	461a      	mov	r2, r3
 800a186:	f000 fb67 	bl	800a858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2150      	movs	r1, #80	; 0x50
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fbc0 	bl	800a916 <TIM_ITRx_SetConfig>
      break;
 800a196:	e029      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	6859      	ldr	r1, [r3, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f000 fb86 	bl	800a8b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2160      	movs	r1, #96	; 0x60
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fbb0 	bl	800a916 <TIM_ITRx_SetConfig>
      break;
 800a1b6:	e019      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	6859      	ldr	r1, [r3, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f000 fb47 	bl	800a858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2140      	movs	r1, #64	; 0x40
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 fba0 	bl	800a916 <TIM_ITRx_SetConfig>
      break;
 800a1d6:	e009      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f000 fb97 	bl	800a916 <TIM_ITRx_SetConfig>
      break;
 800a1e8:	e000      	b.n	800a1ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a1ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	fffeff88 	.word	0xfffeff88

0800a20c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a40      	ldr	r2, [pc, #256]	; (800a370 <TIM_Base_SetConfig+0x114>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d013      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27a:	d00f      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a3d      	ldr	r2, [pc, #244]	; (800a374 <TIM_Base_SetConfig+0x118>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d00b      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a3c      	ldr	r2, [pc, #240]	; (800a378 <TIM_Base_SetConfig+0x11c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d007      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a3b      	ldr	r2, [pc, #236]	; (800a37c <TIM_Base_SetConfig+0x120>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d003      	beq.n	800a29c <TIM_Base_SetConfig+0x40>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a3a      	ldr	r2, [pc, #232]	; (800a380 <TIM_Base_SetConfig+0x124>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d108      	bne.n	800a2ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a2f      	ldr	r2, [pc, #188]	; (800a370 <TIM_Base_SetConfig+0x114>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d02b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2bc:	d027      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a2c      	ldr	r2, [pc, #176]	; (800a374 <TIM_Base_SetConfig+0x118>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d023      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a2b      	ldr	r2, [pc, #172]	; (800a378 <TIM_Base_SetConfig+0x11c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d01f      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a2a      	ldr	r2, [pc, #168]	; (800a37c <TIM_Base_SetConfig+0x120>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d01b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a29      	ldr	r2, [pc, #164]	; (800a380 <TIM_Base_SetConfig+0x124>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d017      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a28      	ldr	r2, [pc, #160]	; (800a384 <TIM_Base_SetConfig+0x128>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d013      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a27      	ldr	r2, [pc, #156]	; (800a388 <TIM_Base_SetConfig+0x12c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d00f      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a26      	ldr	r2, [pc, #152]	; (800a38c <TIM_Base_SetConfig+0x130>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00b      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a25      	ldr	r2, [pc, #148]	; (800a390 <TIM_Base_SetConfig+0x134>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d007      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a24      	ldr	r2, [pc, #144]	; (800a394 <TIM_Base_SetConfig+0x138>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d003      	beq.n	800a30e <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a23      	ldr	r2, [pc, #140]	; (800a398 <TIM_Base_SetConfig+0x13c>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d108      	bne.n	800a320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <TIM_Base_SetConfig+0x114>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_Base_SetConfig+0xf8>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a0c      	ldr	r2, [pc, #48]	; (800a380 <TIM_Base_SetConfig+0x124>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d103      	bne.n	800a35c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	691a      	ldr	r2, [r3, #16]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	615a      	str	r2, [r3, #20]
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40010000 	.word	0x40010000
 800a374:	40000400 	.word	0x40000400
 800a378:	40000800 	.word	0x40000800
 800a37c:	40000c00 	.word	0x40000c00
 800a380:	40010400 	.word	0x40010400
 800a384:	40014000 	.word	0x40014000
 800a388:	40014400 	.word	0x40014400
 800a38c:	40014800 	.word	0x40014800
 800a390:	40001800 	.word	0x40001800
 800a394:	40001c00 	.word	0x40001c00
 800a398:	40002000 	.word	0x40002000

0800a39c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0201 	bic.w	r2, r3, #1
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <TIM_OC1_SetConfig+0xd8>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0303 	bic.w	r3, r3, #3
 800a3d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f023 0302 	bic.w	r3, r3, #2
 800a3e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a21      	ldr	r2, [pc, #132]	; (800a478 <TIM_OC1_SetConfig+0xdc>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_OC1_SetConfig+0x64>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a20      	ldr	r2, [pc, #128]	; (800a47c <TIM_OC1_SetConfig+0xe0>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10c      	bne.n	800a41a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f023 0308 	bic.w	r3, r3, #8
 800a406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f023 0304 	bic.w	r3, r3, #4
 800a418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a16      	ldr	r2, [pc, #88]	; (800a478 <TIM_OC1_SetConfig+0xdc>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d003      	beq.n	800a42a <TIM_OC1_SetConfig+0x8e>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a15      	ldr	r2, [pc, #84]	; (800a47c <TIM_OC1_SetConfig+0xe0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d111      	bne.n	800a44e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4313      	orrs	r3, r2
 800a442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	621a      	str	r2, [r3, #32]
}
 800a468:	bf00      	nop
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	fffeff8f 	.word	0xfffeff8f
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400

0800a480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	f023 0210 	bic.w	r2, r3, #16
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <TIM_OC2_SetConfig+0xe4>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f023 0320 	bic.w	r3, r3, #32
 800a4ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a23      	ldr	r2, [pc, #140]	; (800a568 <TIM_OC2_SetConfig+0xe8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d003      	beq.n	800a4e8 <TIM_OC2_SetConfig+0x68>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a22      	ldr	r2, [pc, #136]	; (800a56c <TIM_OC2_SetConfig+0xec>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d10d      	bne.n	800a504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a18      	ldr	r2, [pc, #96]	; (800a568 <TIM_OC2_SetConfig+0xe8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d003      	beq.n	800a514 <TIM_OC2_SetConfig+0x94>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a17      	ldr	r2, [pc, #92]	; (800a56c <TIM_OC2_SetConfig+0xec>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d113      	bne.n	800a53c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a51a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	4313      	orrs	r3, r2
 800a53a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	feff8fff 	.word	0xfeff8fff
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400

0800a570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4b2d      	ldr	r3, [pc, #180]	; (800a650 <TIM_OC3_SetConfig+0xe0>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a22      	ldr	r2, [pc, #136]	; (800a654 <TIM_OC3_SetConfig+0xe4>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d003      	beq.n	800a5d6 <TIM_OC3_SetConfig+0x66>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a21      	ldr	r2, [pc, #132]	; (800a658 <TIM_OC3_SetConfig+0xe8>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d10d      	bne.n	800a5f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a17      	ldr	r2, [pc, #92]	; (800a654 <TIM_OC3_SetConfig+0xe4>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d003      	beq.n	800a602 <TIM_OC3_SetConfig+0x92>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a16      	ldr	r2, [pc, #88]	; (800a658 <TIM_OC3_SetConfig+0xe8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d113      	bne.n	800a62a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	621a      	str	r2, [r3, #32]
}
 800a644:	bf00      	nop
 800a646:	371c      	adds	r7, #28
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	fffeff8f 	.word	0xfffeff8f
 800a654:	40010000 	.word	0x40010000
 800a658:	40010400 	.word	0x40010400

0800a65c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	4b1e      	ldr	r3, [pc, #120]	; (800a700 <TIM_OC4_SetConfig+0xa4>)
 800a688:	4013      	ands	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	031b      	lsls	r3, r3, #12
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a13      	ldr	r2, [pc, #76]	; (800a704 <TIM_OC4_SetConfig+0xa8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_OC4_SetConfig+0x68>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a12      	ldr	r2, [pc, #72]	; (800a708 <TIM_OC4_SetConfig+0xac>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d109      	bne.n	800a6d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	019b      	lsls	r3, r3, #6
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	621a      	str	r2, [r3, #32]
}
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	feff8fff 	.word	0xfeff8fff
 800a704:	40010000 	.word	0x40010000
 800a708:	40010400 	.word	0x40010400

0800a70c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4b1b      	ldr	r3, [pc, #108]	; (800a7a4 <TIM_OC5_SetConfig+0x98>)
 800a738:	4013      	ands	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a74c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	041b      	lsls	r3, r3, #16
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	4313      	orrs	r3, r2
 800a758:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a12      	ldr	r2, [pc, #72]	; (800a7a8 <TIM_OC5_SetConfig+0x9c>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d003      	beq.n	800a76a <TIM_OC5_SetConfig+0x5e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a11      	ldr	r2, [pc, #68]	; (800a7ac <TIM_OC5_SetConfig+0xa0>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d109      	bne.n	800a77e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	621a      	str	r2, [r3, #32]
}
 800a798:	bf00      	nop
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	fffeff8f 	.word	0xfffeff8f
 800a7a8:	40010000 	.word	0x40010000
 800a7ac:	40010400 	.word	0x40010400

0800a7b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <TIM_OC6_SetConfig+0x9c>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	051b      	lsls	r3, r3, #20
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a13      	ldr	r2, [pc, #76]	; (800a850 <TIM_OC6_SetConfig+0xa0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d003      	beq.n	800a810 <TIM_OC6_SetConfig+0x60>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a12      	ldr	r2, [pc, #72]	; (800a854 <TIM_OC6_SetConfig+0xa4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d109      	bne.n	800a824 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	029b      	lsls	r3, r3, #10
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	4313      	orrs	r3, r2
 800a822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	621a      	str	r2, [r3, #32]
}
 800a83e:	bf00      	nop
 800a840:	371c      	adds	r7, #28
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	feff8fff 	.word	0xfeff8fff
 800a850:	40010000 	.word	0x40010000
 800a854:	40010400 	.word	0x40010400

0800a858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f023 0201 	bic.w	r2, r3, #1
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f023 030a 	bic.w	r3, r3, #10
 800a894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	621a      	str	r2, [r3, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	371c      	adds	r7, #28
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b087      	sub	sp, #28
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	f023 0210 	bic.w	r2, r3, #16
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	031b      	lsls	r3, r3, #12
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	011b      	lsls	r3, r3, #4
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	621a      	str	r2, [r3, #32]
}
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a916:	b480      	push	{r7}
 800a918:	b085      	sub	sp, #20
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4313      	orrs	r3, r2
 800a934:	f043 0307 	orr.w	r3, r3, #7
 800a938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	609a      	str	r2, [r3, #8]
}
 800a940:	bf00      	nop
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	021a      	lsls	r2, r3, #8
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	431a      	orrs	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4313      	orrs	r3, r2
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	4313      	orrs	r3, r2
 800a978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	609a      	str	r2, [r3, #8]
}
 800a980:	bf00      	nop
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e06d      	b.n	800aa80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a30      	ldr	r2, [pc, #192]	; (800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d004      	beq.n	800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a2f      	ldr	r2, [pc, #188]	; (800aa90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d108      	bne.n	800a9ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a20      	ldr	r2, [pc, #128]	; (800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d022      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa16:	d01d      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1d      	ldr	r2, [pc, #116]	; (800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d018      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a1c      	ldr	r2, [pc, #112]	; (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d013      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a1a      	ldr	r2, [pc, #104]	; (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00e      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a15      	ldr	r2, [pc, #84]	; (800aa90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d009      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a16      	ldr	r2, [pc, #88]	; (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d004      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a15      	ldr	r2, [pc, #84]	; (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d10c      	bne.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	40010000 	.word	0x40010000
 800aa90:	40010400 	.word	0x40010400
 800aa94:	40000400 	.word	0x40000400
 800aa98:	40000800 	.word	0x40000800
 800aa9c:	40000c00 	.word	0x40000c00
 800aaa0:	40014000 	.word	0x40014000
 800aaa4:	40001800 	.word	0x40001800

0800aaa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e065      	b.n	800ab90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	041b      	lsls	r3, r3, #16
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a16      	ldr	r2, [pc, #88]	; (800ab9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d004      	beq.n	800ab52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a14      	ldr	r2, [pc, #80]	; (800aba0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d115      	bne.n	800ab7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	051b      	lsls	r3, r3, #20
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	40010000 	.word	0x40010000
 800aba0:	40010400 	.word	0x40010400

0800aba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e040      	b.n	800ac74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7f7 fcd4 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2224      	movs	r2, #36	; 0x24
 800ac0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0201 	bic.w	r2, r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f82c 	bl	800ac7c <UART_SetConfig>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d101      	bne.n	800ac2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e022      	b.n	800ac74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 faca 	bl	800b1d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fb51 	bl	800b314 <UART_CheckIdleState>
 800ac72:	4603      	mov	r3, r0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	431a      	orrs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	4bb1      	ldr	r3, [pc, #708]	; (800af70 <UART_SetConfig+0x2f4>)
 800acac:	4013      	ands	r3, r2
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	6939      	ldr	r1, [r7, #16]
 800acb4:	430b      	orrs	r3, r1
 800acb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	430a      	orrs	r2, r1
 800acf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a9f      	ldr	r2, [pc, #636]	; (800af74 <UART_SetConfig+0x2f8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d121      	bne.n	800ad40 <UART_SetConfig+0xc4>
 800acfc:	4b9e      	ldr	r3, [pc, #632]	; (800af78 <UART_SetConfig+0x2fc>)
 800acfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad02:	f003 0303 	and.w	r3, r3, #3
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d816      	bhi.n	800ad38 <UART_SetConfig+0xbc>
 800ad0a:	a201      	add	r2, pc, #4	; (adr r2, 800ad10 <UART_SetConfig+0x94>)
 800ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad10:	0800ad21 	.word	0x0800ad21
 800ad14:	0800ad2d 	.word	0x0800ad2d
 800ad18:	0800ad27 	.word	0x0800ad27
 800ad1c:	0800ad33 	.word	0x0800ad33
 800ad20:	2301      	movs	r3, #1
 800ad22:	77fb      	strb	r3, [r7, #31]
 800ad24:	e151      	b.n	800afca <UART_SetConfig+0x34e>
 800ad26:	2302      	movs	r3, #2
 800ad28:	77fb      	strb	r3, [r7, #31]
 800ad2a:	e14e      	b.n	800afca <UART_SetConfig+0x34e>
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	77fb      	strb	r3, [r7, #31]
 800ad30:	e14b      	b.n	800afca <UART_SetConfig+0x34e>
 800ad32:	2308      	movs	r3, #8
 800ad34:	77fb      	strb	r3, [r7, #31]
 800ad36:	e148      	b.n	800afca <UART_SetConfig+0x34e>
 800ad38:	2310      	movs	r3, #16
 800ad3a:	77fb      	strb	r3, [r7, #31]
 800ad3c:	bf00      	nop
 800ad3e:	e144      	b.n	800afca <UART_SetConfig+0x34e>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a8d      	ldr	r2, [pc, #564]	; (800af7c <UART_SetConfig+0x300>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d134      	bne.n	800adb4 <UART_SetConfig+0x138>
 800ad4a:	4b8b      	ldr	r3, [pc, #556]	; (800af78 <UART_SetConfig+0x2fc>)
 800ad4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad50:	f003 030c 	and.w	r3, r3, #12
 800ad54:	2b0c      	cmp	r3, #12
 800ad56:	d829      	bhi.n	800adac <UART_SetConfig+0x130>
 800ad58:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <UART_SetConfig+0xe4>)
 800ad5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5e:	bf00      	nop
 800ad60:	0800ad95 	.word	0x0800ad95
 800ad64:	0800adad 	.word	0x0800adad
 800ad68:	0800adad 	.word	0x0800adad
 800ad6c:	0800adad 	.word	0x0800adad
 800ad70:	0800ada1 	.word	0x0800ada1
 800ad74:	0800adad 	.word	0x0800adad
 800ad78:	0800adad 	.word	0x0800adad
 800ad7c:	0800adad 	.word	0x0800adad
 800ad80:	0800ad9b 	.word	0x0800ad9b
 800ad84:	0800adad 	.word	0x0800adad
 800ad88:	0800adad 	.word	0x0800adad
 800ad8c:	0800adad 	.word	0x0800adad
 800ad90:	0800ada7 	.word	0x0800ada7
 800ad94:	2300      	movs	r3, #0
 800ad96:	77fb      	strb	r3, [r7, #31]
 800ad98:	e117      	b.n	800afca <UART_SetConfig+0x34e>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e114      	b.n	800afca <UART_SetConfig+0x34e>
 800ada0:	2304      	movs	r3, #4
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e111      	b.n	800afca <UART_SetConfig+0x34e>
 800ada6:	2308      	movs	r3, #8
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e10e      	b.n	800afca <UART_SetConfig+0x34e>
 800adac:	2310      	movs	r3, #16
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	bf00      	nop
 800adb2:	e10a      	b.n	800afca <UART_SetConfig+0x34e>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a71      	ldr	r2, [pc, #452]	; (800af80 <UART_SetConfig+0x304>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d120      	bne.n	800ae00 <UART_SetConfig+0x184>
 800adbe:	4b6e      	ldr	r3, [pc, #440]	; (800af78 <UART_SetConfig+0x2fc>)
 800adc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800adc8:	2b10      	cmp	r3, #16
 800adca:	d00f      	beq.n	800adec <UART_SetConfig+0x170>
 800adcc:	2b10      	cmp	r3, #16
 800adce:	d802      	bhi.n	800add6 <UART_SetConfig+0x15a>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <UART_SetConfig+0x164>
 800add4:	e010      	b.n	800adf8 <UART_SetConfig+0x17c>
 800add6:	2b20      	cmp	r3, #32
 800add8:	d005      	beq.n	800ade6 <UART_SetConfig+0x16a>
 800adda:	2b30      	cmp	r3, #48	; 0x30
 800addc:	d009      	beq.n	800adf2 <UART_SetConfig+0x176>
 800adde:	e00b      	b.n	800adf8 <UART_SetConfig+0x17c>
 800ade0:	2300      	movs	r3, #0
 800ade2:	77fb      	strb	r3, [r7, #31]
 800ade4:	e0f1      	b.n	800afca <UART_SetConfig+0x34e>
 800ade6:	2302      	movs	r3, #2
 800ade8:	77fb      	strb	r3, [r7, #31]
 800adea:	e0ee      	b.n	800afca <UART_SetConfig+0x34e>
 800adec:	2304      	movs	r3, #4
 800adee:	77fb      	strb	r3, [r7, #31]
 800adf0:	e0eb      	b.n	800afca <UART_SetConfig+0x34e>
 800adf2:	2308      	movs	r3, #8
 800adf4:	77fb      	strb	r3, [r7, #31]
 800adf6:	e0e8      	b.n	800afca <UART_SetConfig+0x34e>
 800adf8:	2310      	movs	r3, #16
 800adfa:	77fb      	strb	r3, [r7, #31]
 800adfc:	bf00      	nop
 800adfe:	e0e4      	b.n	800afca <UART_SetConfig+0x34e>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a5f      	ldr	r2, [pc, #380]	; (800af84 <UART_SetConfig+0x308>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d120      	bne.n	800ae4c <UART_SetConfig+0x1d0>
 800ae0a:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <UART_SetConfig+0x2fc>)
 800ae0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae14:	2b40      	cmp	r3, #64	; 0x40
 800ae16:	d00f      	beq.n	800ae38 <UART_SetConfig+0x1bc>
 800ae18:	2b40      	cmp	r3, #64	; 0x40
 800ae1a:	d802      	bhi.n	800ae22 <UART_SetConfig+0x1a6>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <UART_SetConfig+0x1b0>
 800ae20:	e010      	b.n	800ae44 <UART_SetConfig+0x1c8>
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d005      	beq.n	800ae32 <UART_SetConfig+0x1b6>
 800ae26:	2bc0      	cmp	r3, #192	; 0xc0
 800ae28:	d009      	beq.n	800ae3e <UART_SetConfig+0x1c2>
 800ae2a:	e00b      	b.n	800ae44 <UART_SetConfig+0x1c8>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e0cb      	b.n	800afca <UART_SetConfig+0x34e>
 800ae32:	2302      	movs	r3, #2
 800ae34:	77fb      	strb	r3, [r7, #31]
 800ae36:	e0c8      	b.n	800afca <UART_SetConfig+0x34e>
 800ae38:	2304      	movs	r3, #4
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	e0c5      	b.n	800afca <UART_SetConfig+0x34e>
 800ae3e:	2308      	movs	r3, #8
 800ae40:	77fb      	strb	r3, [r7, #31]
 800ae42:	e0c2      	b.n	800afca <UART_SetConfig+0x34e>
 800ae44:	2310      	movs	r3, #16
 800ae46:	77fb      	strb	r3, [r7, #31]
 800ae48:	bf00      	nop
 800ae4a:	e0be      	b.n	800afca <UART_SetConfig+0x34e>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a4d      	ldr	r2, [pc, #308]	; (800af88 <UART_SetConfig+0x30c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d124      	bne.n	800aea0 <UART_SetConfig+0x224>
 800ae56:	4b48      	ldr	r3, [pc, #288]	; (800af78 <UART_SetConfig+0x2fc>)
 800ae58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae64:	d012      	beq.n	800ae8c <UART_SetConfig+0x210>
 800ae66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6a:	d802      	bhi.n	800ae72 <UART_SetConfig+0x1f6>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <UART_SetConfig+0x204>
 800ae70:	e012      	b.n	800ae98 <UART_SetConfig+0x21c>
 800ae72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae76:	d006      	beq.n	800ae86 <UART_SetConfig+0x20a>
 800ae78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae7c:	d009      	beq.n	800ae92 <UART_SetConfig+0x216>
 800ae7e:	e00b      	b.n	800ae98 <UART_SetConfig+0x21c>
 800ae80:	2300      	movs	r3, #0
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e0a1      	b.n	800afca <UART_SetConfig+0x34e>
 800ae86:	2302      	movs	r3, #2
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e09e      	b.n	800afca <UART_SetConfig+0x34e>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e09b      	b.n	800afca <UART_SetConfig+0x34e>
 800ae92:	2308      	movs	r3, #8
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e098      	b.n	800afca <UART_SetConfig+0x34e>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	bf00      	nop
 800ae9e:	e094      	b.n	800afca <UART_SetConfig+0x34e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a39      	ldr	r2, [pc, #228]	; (800af8c <UART_SetConfig+0x310>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d124      	bne.n	800aef4 <UART_SetConfig+0x278>
 800aeaa:	4b33      	ldr	r3, [pc, #204]	; (800af78 <UART_SetConfig+0x2fc>)
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb8:	d012      	beq.n	800aee0 <UART_SetConfig+0x264>
 800aeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebe:	d802      	bhi.n	800aec6 <UART_SetConfig+0x24a>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d007      	beq.n	800aed4 <UART_SetConfig+0x258>
 800aec4:	e012      	b.n	800aeec <UART_SetConfig+0x270>
 800aec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeca:	d006      	beq.n	800aeda <UART_SetConfig+0x25e>
 800aecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aed0:	d009      	beq.n	800aee6 <UART_SetConfig+0x26a>
 800aed2:	e00b      	b.n	800aeec <UART_SetConfig+0x270>
 800aed4:	2301      	movs	r3, #1
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e077      	b.n	800afca <UART_SetConfig+0x34e>
 800aeda:	2302      	movs	r3, #2
 800aedc:	77fb      	strb	r3, [r7, #31]
 800aede:	e074      	b.n	800afca <UART_SetConfig+0x34e>
 800aee0:	2304      	movs	r3, #4
 800aee2:	77fb      	strb	r3, [r7, #31]
 800aee4:	e071      	b.n	800afca <UART_SetConfig+0x34e>
 800aee6:	2308      	movs	r3, #8
 800aee8:	77fb      	strb	r3, [r7, #31]
 800aeea:	e06e      	b.n	800afca <UART_SetConfig+0x34e>
 800aeec:	2310      	movs	r3, #16
 800aeee:	77fb      	strb	r3, [r7, #31]
 800aef0:	bf00      	nop
 800aef2:	e06a      	b.n	800afca <UART_SetConfig+0x34e>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a25      	ldr	r2, [pc, #148]	; (800af90 <UART_SetConfig+0x314>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d124      	bne.n	800af48 <UART_SetConfig+0x2cc>
 800aefe:	4b1e      	ldr	r3, [pc, #120]	; (800af78 <UART_SetConfig+0x2fc>)
 800af00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af0c:	d012      	beq.n	800af34 <UART_SetConfig+0x2b8>
 800af0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af12:	d802      	bhi.n	800af1a <UART_SetConfig+0x29e>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <UART_SetConfig+0x2ac>
 800af18:	e012      	b.n	800af40 <UART_SetConfig+0x2c4>
 800af1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af1e:	d006      	beq.n	800af2e <UART_SetConfig+0x2b2>
 800af20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af24:	d009      	beq.n	800af3a <UART_SetConfig+0x2be>
 800af26:	e00b      	b.n	800af40 <UART_SetConfig+0x2c4>
 800af28:	2300      	movs	r3, #0
 800af2a:	77fb      	strb	r3, [r7, #31]
 800af2c:	e04d      	b.n	800afca <UART_SetConfig+0x34e>
 800af2e:	2302      	movs	r3, #2
 800af30:	77fb      	strb	r3, [r7, #31]
 800af32:	e04a      	b.n	800afca <UART_SetConfig+0x34e>
 800af34:	2304      	movs	r3, #4
 800af36:	77fb      	strb	r3, [r7, #31]
 800af38:	e047      	b.n	800afca <UART_SetConfig+0x34e>
 800af3a:	2308      	movs	r3, #8
 800af3c:	77fb      	strb	r3, [r7, #31]
 800af3e:	e044      	b.n	800afca <UART_SetConfig+0x34e>
 800af40:	2310      	movs	r3, #16
 800af42:	77fb      	strb	r3, [r7, #31]
 800af44:	bf00      	nop
 800af46:	e040      	b.n	800afca <UART_SetConfig+0x34e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a11      	ldr	r2, [pc, #68]	; (800af94 <UART_SetConfig+0x318>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d139      	bne.n	800afc6 <UART_SetConfig+0x34a>
 800af52:	4b09      	ldr	r3, [pc, #36]	; (800af78 <UART_SetConfig+0x2fc>)
 800af54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af60:	d027      	beq.n	800afb2 <UART_SetConfig+0x336>
 800af62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af66:	d817      	bhi.n	800af98 <UART_SetConfig+0x31c>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01c      	beq.n	800afa6 <UART_SetConfig+0x32a>
 800af6c:	e027      	b.n	800afbe <UART_SetConfig+0x342>
 800af6e:	bf00      	nop
 800af70:	efff69f3 	.word	0xefff69f3
 800af74:	40011000 	.word	0x40011000
 800af78:	40023800 	.word	0x40023800
 800af7c:	40004400 	.word	0x40004400
 800af80:	40004800 	.word	0x40004800
 800af84:	40004c00 	.word	0x40004c00
 800af88:	40005000 	.word	0x40005000
 800af8c:	40011400 	.word	0x40011400
 800af90:	40007800 	.word	0x40007800
 800af94:	40007c00 	.word	0x40007c00
 800af98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af9c:	d006      	beq.n	800afac <UART_SetConfig+0x330>
 800af9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afa2:	d009      	beq.n	800afb8 <UART_SetConfig+0x33c>
 800afa4:	e00b      	b.n	800afbe <UART_SetConfig+0x342>
 800afa6:	2300      	movs	r3, #0
 800afa8:	77fb      	strb	r3, [r7, #31]
 800afaa:	e00e      	b.n	800afca <UART_SetConfig+0x34e>
 800afac:	2302      	movs	r3, #2
 800afae:	77fb      	strb	r3, [r7, #31]
 800afb0:	e00b      	b.n	800afca <UART_SetConfig+0x34e>
 800afb2:	2304      	movs	r3, #4
 800afb4:	77fb      	strb	r3, [r7, #31]
 800afb6:	e008      	b.n	800afca <UART_SetConfig+0x34e>
 800afb8:	2308      	movs	r3, #8
 800afba:	77fb      	strb	r3, [r7, #31]
 800afbc:	e005      	b.n	800afca <UART_SetConfig+0x34e>
 800afbe:	2310      	movs	r3, #16
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	bf00      	nop
 800afc4:	e001      	b.n	800afca <UART_SetConfig+0x34e>
 800afc6:	2310      	movs	r3, #16
 800afc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd2:	d17f      	bne.n	800b0d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800afd4:	7ffb      	ldrb	r3, [r7, #31]
 800afd6:	2b08      	cmp	r3, #8
 800afd8:	d85c      	bhi.n	800b094 <UART_SetConfig+0x418>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0x364>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b005 	.word	0x0800b005
 800afe4:	0800b025 	.word	0x0800b025
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b095 	.word	0x0800b095
 800aff0:	0800b05d 	.word	0x0800b05d
 800aff4:	0800b095 	.word	0x0800b095
 800aff8:	0800b095 	.word	0x0800b095
 800affc:	0800b095 	.word	0x0800b095
 800b000:	0800b07d 	.word	0x0800b07d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b004:	f7fd f9ce 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800b008:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	005a      	lsls	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	441a      	add	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01e:	b29b      	uxth	r3, r3
 800b020:	61bb      	str	r3, [r7, #24]
        break;
 800b022:	e03a      	b.n	800b09a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b024:	f7fd f9d2 	bl	80083cc <HAL_RCC_GetPCLK2Freq>
 800b028:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	005a      	lsls	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	085b      	lsrs	r3, r3, #1
 800b034:	441a      	add	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03e:	b29b      	uxth	r3, r3
 800b040:	61bb      	str	r3, [r7, #24]
        break;
 800b042:	e02a      	b.n	800b09a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	085a      	lsrs	r2, r3, #1
 800b04a:	4b5f      	ldr	r3, [pc, #380]	; (800b1c8 <UART_SetConfig+0x54c>)
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6852      	ldr	r2, [r2, #4]
 800b052:	fbb3 f3f2 	udiv	r3, r3, r2
 800b056:	b29b      	uxth	r3, r3
 800b058:	61bb      	str	r3, [r7, #24]
        break;
 800b05a:	e01e      	b.n	800b09a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b05c:	f7fd f8e4 	bl	8008228 <HAL_RCC_GetSysClockFreq>
 800b060:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	005a      	lsls	r2, r3, #1
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	441a      	add	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	fbb2 f3f3 	udiv	r3, r2, r3
 800b076:	b29b      	uxth	r3, r3
 800b078:	61bb      	str	r3, [r7, #24]
        break;
 800b07a:	e00e      	b.n	800b09a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08e:	b29b      	uxth	r3, r3
 800b090:	61bb      	str	r3, [r7, #24]
        break;
 800b092:	e002      	b.n	800b09a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	75fb      	strb	r3, [r7, #23]
        break;
 800b098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b0f      	cmp	r3, #15
 800b09e:	d916      	bls.n	800b0ce <UART_SetConfig+0x452>
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a6:	d212      	bcs.n	800b0ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f023 030f 	bic.w	r3, r3, #15
 800b0b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	085b      	lsrs	r3, r3, #1
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f003 0307 	and.w	r3, r3, #7
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	897b      	ldrh	r3, [r7, #10]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	897a      	ldrh	r2, [r7, #10]
 800b0ca:	60da      	str	r2, [r3, #12]
 800b0cc:	e070      	b.n	800b1b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	75fb      	strb	r3, [r7, #23]
 800b0d2:	e06d      	b.n	800b1b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b0d4:	7ffb      	ldrb	r3, [r7, #31]
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	d859      	bhi.n	800b18e <UART_SetConfig+0x512>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <UART_SetConfig+0x464>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b105 	.word	0x0800b105
 800b0e4:	0800b123 	.word	0x0800b123
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b18f 	.word	0x0800b18f
 800b0f0:	0800b159 	.word	0x0800b159
 800b0f4:	0800b18f 	.word	0x0800b18f
 800b0f8:	0800b18f 	.word	0x0800b18f
 800b0fc:	0800b18f 	.word	0x0800b18f
 800b100:	0800b177 	.word	0x0800b177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b104:	f7fd f94e 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800b108:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	085a      	lsrs	r2, r3, #1
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	441a      	add	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	61bb      	str	r3, [r7, #24]
        break;
 800b120:	e038      	b.n	800b194 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b122:	f7fd f953 	bl	80083cc <HAL_RCC_GetPCLK2Freq>
 800b126:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	085a      	lsrs	r2, r3, #1
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	441a      	add	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	61bb      	str	r3, [r7, #24]
        break;
 800b13e:	e029      	b.n	800b194 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	085a      	lsrs	r2, r3, #1
 800b146:	4b21      	ldr	r3, [pc, #132]	; (800b1cc <UART_SetConfig+0x550>)
 800b148:	4413      	add	r3, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6852      	ldr	r2, [r2, #4]
 800b14e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b152:	b29b      	uxth	r3, r3
 800b154:	61bb      	str	r3, [r7, #24]
        break;
 800b156:	e01d      	b.n	800b194 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b158:	f7fd f866 	bl	8008228 <HAL_RCC_GetSysClockFreq>
 800b15c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	085a      	lsrs	r2, r3, #1
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	441a      	add	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b170:	b29b      	uxth	r3, r3
 800b172:	61bb      	str	r3, [r7, #24]
        break;
 800b174:	e00e      	b.n	800b194 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	fbb2 f3f3 	udiv	r3, r2, r3
 800b188:	b29b      	uxth	r3, r3
 800b18a:	61bb      	str	r3, [r7, #24]
        break;
 800b18c:	e002      	b.n	800b194 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]
        break;
 800b192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	2b0f      	cmp	r3, #15
 800b198:	d908      	bls.n	800b1ac <UART_SetConfig+0x530>
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a0:	d204      	bcs.n	800b1ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	60da      	str	r2, [r3, #12]
 800b1aa:	e001      	b.n	800b1b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	01e84800 	.word	0x01e84800
 800b1cc:	00f42400 	.word	0x00f42400

0800b1d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00a      	beq.n	800b1fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00a      	beq.n	800b21c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00a      	beq.n	800b23e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	430a      	orrs	r2, r1
 800b23c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	f003 0308 	and.w	r3, r3, #8
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	f003 0310 	and.w	r3, r3, #16
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00a      	beq.n	800b282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	f003 0320 	and.w	r3, r3, #32
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d01a      	beq.n	800b2e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ce:	d10a      	bne.n	800b2e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00a      	beq.n	800b308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	605a      	str	r2, [r3, #4]
  }
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af02      	add	r7, sp, #8
 800b31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b322:	f7f8 fb9d 	bl	8003a60 <HAL_GetTick>
 800b326:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b08      	cmp	r3, #8
 800b334:	d10e      	bne.n	800b354 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f814 	bl	800b372 <UART_WaitOnFlagUntilTimeout>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e00a      	b.n	800b36a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2220      	movs	r2, #32
 800b358:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	603b      	str	r3, [r7, #0]
 800b37e:	4613      	mov	r3, r2
 800b380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b382:	e05d      	b.n	800b440 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38a:	d059      	beq.n	800b440 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b38c:	f7f8 fb68 	bl	8003a60 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d302      	bcc.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d11b      	bne.n	800b3da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b3b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 0201 	bic.w	r2, r2, #1
 800b3c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e042      	b.n	800b460 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d02b      	beq.n	800b440 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3f6:	d123      	bne.n	800b440 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b400:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b410:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f022 0201 	bic.w	r2, r2, #1
 800b420:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2220      	movs	r2, #32
 800b426:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2220      	movs	r2, #32
 800b42c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e00f      	b.n	800b460 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69da      	ldr	r2, [r3, #28]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	4013      	ands	r3, r2
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	bf0c      	ite	eq
 800b450:	2301      	moveq	r3, #1
 800b452:	2300      	movne	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	461a      	mov	r2, r3
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d092      	beq.n	800b384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d027      	beq.n	800b4d2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4b2f      	ldr	r3, [pc, #188]	; (800b548 <FMC_SDRAM_Init+0xe0>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b498:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b49e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b4a4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b4aa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b4b0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b4b6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b4bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b4c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e032      	b.n	800b538 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b4ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <FMC_SDRAM_Init+0xe0>)
 800b500:	4013      	ands	r3, r2
 800b502:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b50c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b512:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b518:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b51e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b524:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	ffff8000 	.word	0xffff8000

0800b54c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d02e      	beq.n	800b5c4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b572:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	3b01      	subs	r3, #1
 800b580:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b582:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	3b01      	subs	r3, #1
 800b58a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b58c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	3b01      	subs	r3, #1
 800b594:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b596:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b5a0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b5aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	609a      	str	r2, [r3, #8]
 800b5c2:	e039      	b.n	800b638 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	4b1e      	ldr	r3, [pc, #120]	; (800b648 <FMC_SDRAM_Timing_Init+0xfc>)
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b5f6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	3b01      	subs	r3, #1
 800b604:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b606:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b610:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	3b01      	subs	r3, #1
 800b618:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b61a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	3b01      	subs	r3, #1
 800b622:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b624:	4313      	orrs	r3, r2
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	ff0f0fff 	.word	0xff0f0fff

0800b64c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b664:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b66e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b676:	4313      	orrs	r3, r2
 800b678:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b68e:	b480      	push	{r7}
 800b690:	b083      	sub	sp, #12
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	695a      	ldr	r2, [r3, #20]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	f107 001c 	add.w	r0, r7, #28
 800b6c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d120      	bne.n	800b70e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68da      	ldr	r2, [r3, #12]
 800b6dc:	4b20      	ldr	r3, [pc, #128]	; (800b760 <USB_CoreInit+0xac>)
 800b6de:	4013      	ands	r3, r2
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d105      	bne.n	800b702 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f942 	bl	800b98c <USB_CoreReset>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
 800b70c:	e010      	b.n	800b730 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f936 	bl	800b98c <USB_CoreReset>
 800b720:	4603      	mov	r3, r0
 800b722:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	2b01      	cmp	r3, #1
 800b734:	d10b      	bne.n	800b74e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f043 0206 	orr.w	r2, r3, #6
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f043 0220 	orr.w	r2, r3, #32
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b75a:	b004      	add	sp, #16
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	ffbdffbf 	.word	0xffbdffbf

0800b764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f043 0201 	orr.w	r2, r3, #1
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d106      	bne.n	800b7d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60da      	str	r2, [r3, #12]
 800b7d2:	e00b      	b.n	800b7ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60da      	str	r2, [r3, #12]
 800b7e6:	e001      	b.n	800b7ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e003      	b.n	800b7f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b7ec:	2032      	movs	r0, #50	; 0x32
 800b7ee:	f7f8 f943 	bl	8003a78 <HAL_Delay>

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	019b      	lsls	r3, r3, #6
 800b80e:	f043 0220 	orr.w	r2, r3, #32
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4a09      	ldr	r2, [pc, #36]	; (800b844 <USB_FlushTxFifo+0x48>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d901      	bls.n	800b828 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e006      	b.n	800b836 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	f003 0320 	and.w	r3, r3, #32
 800b830:	2b20      	cmp	r3, #32
 800b832:	d0f0      	beq.n	800b816 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	00030d40 	.word	0x00030d40

0800b848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2210      	movs	r2, #16
 800b858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a09      	ldr	r2, [pc, #36]	; (800b888 <USB_FlushRxFifo+0x40>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d901      	bls.n	800b86c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e006      	b.n	800b87a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b10      	cmp	r3, #16
 800b876:	d0f0      	beq.n	800b85a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	00030d40 	.word	0x00030d40

0800b88c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b089      	sub	sp, #36	; 0x24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4611      	mov	r1, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	460b      	mov	r3, r1
 800b89c:	71fb      	strb	r3, [r7, #7]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b8aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d11a      	bne.n	800b8e8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b8b2:	88bb      	ldrh	r3, [r7, #4]
 800b8b4:	3303      	adds	r3, #3
 800b8b6:	089b      	lsrs	r3, r3, #2
 800b8b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	e00f      	b.n	800b8e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	031a      	lsls	r2, r3, #12
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	61bb      	str	r3, [r7, #24]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d3eb      	bcc.n	800b8c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3724      	adds	r7, #36	; 0x24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b089      	sub	sp, #36	; 0x24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	4613      	mov	r3, r2
 800b902:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b90c:	88fb      	ldrh	r3, [r7, #6]
 800b90e:	3303      	adds	r3, #3
 800b910:	089b      	lsrs	r3, r3, #2
 800b912:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b914:	2300      	movs	r3, #0
 800b916:	61bb      	str	r3, [r7, #24]
 800b918:	e00b      	b.n	800b932 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	601a      	str	r2, [r3, #0]
    pDest++;
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	3304      	adds	r3, #4
 800b92a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	3301      	adds	r3, #1
 800b930:	61bb      	str	r3, [r7, #24]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	429a      	cmp	r2, r3
 800b938:	d3ef      	bcc.n	800b91a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b93a:	69fb      	ldr	r3, [r7, #28]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3724      	adds	r7, #36	; 0x24
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4013      	ands	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b960:	68fb      	ldr	r3, [r7, #12]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b96e:	b480      	push	{r7}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f003 0301 	and.w	r3, r3, #1
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3301      	adds	r3, #1
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4a13      	ldr	r2, [pc, #76]	; (800b9f0 <USB_CoreReset+0x64>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d901      	bls.n	800b9aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e01b      	b.n	800b9e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	daf2      	bge.n	800b998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f043 0201 	orr.w	r2, r3, #1
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <USB_CoreReset+0x64>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d901      	bls.n	800b9d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e006      	b.n	800b9e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d0f0      	beq.n	800b9c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	00030d40 	.word	0x00030d40

0800b9f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	f107 001c 	add.w	r0, r7, #28
 800ba02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba10:	461a      	mov	r2, r3
 800ba12:	2300      	movs	r3, #0
 800ba14:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d018      	beq.n	800ba60 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d10a      	bne.n	800ba4a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba42:	f043 0304 	orr.w	r3, r3, #4
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	e014      	b.n	800ba74 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba58:	f023 0304 	bic.w	r3, r3, #4
 800ba5c:	6013      	str	r3, [r2, #0]
 800ba5e:	e009      	b.n	800ba74 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba6e:	f023 0304 	bic.w	r3, r3, #4
 800ba72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ba74:	2110      	movs	r1, #16
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fec0 	bl	800b7fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff fee3 	bl	800b848 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	e015      	b.n	800bab4 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba94:	461a      	mov	r2, r3
 800ba96:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baa8:	461a      	mov	r2, r3
 800baaa:	2300      	movs	r3, #0
 800baac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d3e5      	bcc.n	800ba88 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800babc:	2101      	movs	r1, #1
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8ac 	bl	800bc1c <USB_DriveVbus>

  HAL_Delay(200U);
 800bac4:	20c8      	movs	r0, #200	; 0xc8
 800bac6:	f7f7 ffd7 	bl	8003a78 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00b      	beq.n	800bafc <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a14      	ldr	r2, [pc, #80]	; (800bb40 <USB_HostInit+0x14c>)
 800baf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a13      	ldr	r2, [pc, #76]	; (800bb44 <USB_HostInit+0x150>)
 800baf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bafa:	e009      	b.n	800bb10 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2280      	movs	r2, #128	; 0x80
 800bb00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a10      	ldr	r2, [pc, #64]	; (800bb48 <USB_HostInit+0x154>)
 800bb06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a10      	ldr	r2, [pc, #64]	; (800bb4c <USB_HostInit+0x158>)
 800bb0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d105      	bne.n	800bb22 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	f043 0210 	orr.w	r2, r3, #16
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	699a      	ldr	r2, [r3, #24]
 800bb26:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <USB_HostInit+0x15c>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb3a:	b004      	add	sp, #16
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	01000200 	.word	0x01000200
 800bb44:	00e00300 	.word	0x00e00300
 800bb48:	00600080 	.word	0x00600080
 800bb4c:	004000e0 	.word	0x004000e0
 800bb50:	a3200008 	.word	0xa3200008

0800bb54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb72:	f023 0303 	bic.w	r3, r3, #3
 800bb76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	68f9      	ldr	r1, [r7, #12]
 800bb88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d107      	bne.n	800bba6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bba2:	6053      	str	r3, [r2, #4]
 800bba4:	e009      	b.n	800bbba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d106      	bne.n	800bbba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f241 7370 	movw	r3, #6000	; 0x1770
 800bbb8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bbe8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bbf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbf6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bbf8:	2064      	movs	r0, #100	; 0x64
 800bbfa:	f7f7 ff3d 	bl	8003a78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bc06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bc0c:	200a      	movs	r0, #10
 800bc0e:	f7f7 ff33 	bl	8003a78 <HAL_Delay>

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bc40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d109      	bne.n	800bc60 <USB_DriveVbus+0x44>
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d106      	bne.n	800bc60 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bc5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc5e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc6a:	d109      	bne.n	800bc80 <USB_DriveVbus+0x64>
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bc7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc7e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b085      	sub	sp, #20
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	0c5b      	lsrs	r3, r3, #17
 800bcac:	f003 0303 	and.w	r3, r3, #3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	b29b      	uxth	r3, r3
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b087      	sub	sp, #28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	4608      	mov	r0, r1
 800bcea:	4611      	mov	r1, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	4603      	mov	r3, r0
 800bcf0:	70fb      	strb	r3, [r7, #3]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	70bb      	strb	r3, [r7, #2]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bd02:	78fb      	ldrb	r3, [r7, #3]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f04f 33ff 	mov.w	r3, #4294967295
 800bd14:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bd16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d87e      	bhi.n	800be1c <USB_HC_Init+0x13c>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <USB_HC_Init+0x44>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bddf 	.word	0x0800bddf
 800bd2c:	0800bd35 	.word	0x0800bd35
 800bd30:	0800bda1 	.word	0x0800bda1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bd34:	78fb      	ldrb	r3, [r7, #3]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd40:	461a      	mov	r2, r3
 800bd42:	f240 439d 	movw	r3, #1181	; 0x49d
 800bd46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bd48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da10      	bge.n	800bd72 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	78fa      	ldrb	r2, [r7, #3]
 800bd60:	0151      	lsls	r1, r2, #5
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	440a      	add	r2, r1
 800bd66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd6e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bd70:	e057      	b.n	800be22 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d051      	beq.n	800be22 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	78fa      	ldrb	r2, [r7, #3]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bd9c:	60d3      	str	r3, [r2, #12]
      break;
 800bd9e:	e040      	b.n	800be22 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdac:	461a      	mov	r2, r3
 800bdae:	f240 639d 	movw	r3, #1693	; 0x69d
 800bdb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bdb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da34      	bge.n	800be26 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	78fa      	ldrb	r2, [r7, #3]
 800bdcc:	0151      	lsls	r1, r2, #5
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	440a      	add	r2, r1
 800bdd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bdd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdda:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bddc:	e023      	b.n	800be26 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bdde:	78fb      	ldrb	r3, [r7, #3]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdea:	461a      	mov	r2, r3
 800bdec:	f240 2325 	movw	r3, #549	; 0x225
 800bdf0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bdf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	da17      	bge.n	800be2a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4413      	add	r3, r2
 800be02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	78fa      	ldrb	r2, [r7, #3]
 800be0a:	0151      	lsls	r1, r2, #5
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	440a      	add	r2, r1
 800be10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be14:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800be18:	60d3      	str	r3, [r2, #12]
      }
      break;
 800be1a:	e006      	b.n	800be2a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	75fb      	strb	r3, [r7, #23]
      break;
 800be20:	e004      	b.n	800be2c <USB_HC_Init+0x14c>
      break;
 800be22:	bf00      	nop
 800be24:	e002      	b.n	800be2c <USB_HC_Init+0x14c>
      break;
 800be26:	bf00      	nop
 800be28:	e000      	b.n	800be2c <USB_HC_Init+0x14c>
      break;
 800be2a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be32:	699a      	ldr	r2, [r3, #24]
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	2101      	movs	r1, #1
 800be3c:	fa01 f303 	lsl.w	r3, r1, r3
 800be40:	68b9      	ldr	r1, [r7, #8]
 800be42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800be46:	4313      	orrs	r3, r2
 800be48:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800be56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	da03      	bge.n	800be66 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800be5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	e001      	b.n	800be6a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800be6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d103      	bne.n	800be7a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800be72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	e001      	b.n	800be7e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be7e:	787b      	ldrb	r3, [r7, #1]
 800be80:	059b      	lsls	r3, r3, #22
 800be82:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800be86:	78bb      	ldrb	r3, [r7, #2]
 800be88:	02db      	lsls	r3, r3, #11
 800be8a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be8e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800be90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be94:	049b      	lsls	r3, r3, #18
 800be96:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800be9a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bea2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	0159      	lsls	r1, r3, #5
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	440b      	add	r3, r1
 800beb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800beba:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d10f      	bne.n	800bee4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bec4:	78fb      	ldrb	r3, [r7, #3]
 800bec6:	015a      	lsls	r2, r3, #5
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	4413      	add	r3, r2
 800becc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	78fa      	ldrb	r2, [r7, #3]
 800bed4:	0151      	lsls	r1, r2, #5
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	440a      	add	r2, r1
 800beda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bee2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	371c      	adds	r7, #28
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop

0800bef4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08c      	sub	sp, #48	; 0x30
 800bef8:	af02      	add	r7, sp, #8
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	4613      	mov	r3, r2
 800bf00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bf0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf10:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d028      	beq.n	800bf70 <USB_HC_StartXfer+0x7c>
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	791b      	ldrb	r3, [r3, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d124      	bne.n	800bf70 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10b      	bne.n	800bf44 <USB_HC_StartXfer+0x50>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	795b      	ldrb	r3, [r3, #5]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d107      	bne.n	800bf44 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	785b      	ldrb	r3, [r3, #1]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 fa2e 	bl	800c39c <USB_DoPing>
      return HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e112      	b.n	800c16a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d112      	bne.n	800bf70 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	69fa      	ldr	r2, [r7, #28]
 800bf5a:	0151      	lsls	r1, r2, #5
 800bf5c:	6a3a      	ldr	r2, [r7, #32]
 800bf5e:	440a      	add	r2, r1
 800bf60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf64:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bf68:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d018      	beq.n	800bfaa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	8912      	ldrh	r2, [r2, #8]
 800bf80:	4413      	add	r3, r2
 800bf82:	3b01      	subs	r3, #1
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	8912      	ldrh	r2, [r2, #8]
 800bf88:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf8c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bf8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bf90:	8b7b      	ldrh	r3, [r7, #26]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d90b      	bls.n	800bfae <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bf96:	8b7b      	ldrh	r3, [r7, #26]
 800bf98:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bf9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	8912      	ldrh	r2, [r2, #8]
 800bfa0:	fb02 f203 	mul.w	r2, r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	611a      	str	r2, [r3, #16]
 800bfa8:	e001      	b.n	800bfae <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	78db      	ldrb	r3, [r3, #3]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d006      	beq.n	800bfc4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bfb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	8912      	ldrh	r2, [r2, #8]
 800bfbc:	fb02 f203 	mul.w	r2, r2, r3
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bfcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfce:	04d9      	lsls	r1, r3, #19
 800bfd0:	4b68      	ldr	r3, [pc, #416]	; (800c174 <USB_HC_StartXfer+0x280>)
 800bfd2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bfd4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	7a9b      	ldrb	r3, [r3, #10]
 800bfda:	075b      	lsls	r3, r3, #29
 800bfdc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bfe0:	69f9      	ldr	r1, [r7, #28]
 800bfe2:	0148      	lsls	r0, r1, #5
 800bfe4:	6a39      	ldr	r1, [r7, #32]
 800bfe6:	4401      	add	r1, r0
 800bfe8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bfec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bfee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d009      	beq.n	800c00a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	68d9      	ldr	r1, [r3, #12]
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	4413      	add	r3, r2
 800c002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c006:	460a      	mov	r2, r1
 800c008:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	bf0c      	ite	eq
 800c01a:	2301      	moveq	r3, #1
 800c01c:	2300      	movne	r3, #0
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	015a      	lsls	r2, r3, #5
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	4413      	add	r3, r2
 800c02a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69fa      	ldr	r2, [r7, #28]
 800c032:	0151      	lsls	r1, r2, #5
 800c034:	6a3a      	ldr	r2, [r7, #32]
 800c036:	440a      	add	r2, r1
 800c038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c03c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c040:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	6a3b      	ldr	r3, [r7, #32]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	7e7b      	ldrb	r3, [r7, #25]
 800c052:	075b      	lsls	r3, r3, #29
 800c054:	69f9      	ldr	r1, [r7, #28]
 800c056:	0148      	lsls	r0, r1, #5
 800c058:	6a39      	ldr	r1, [r7, #32]
 800c05a:	4401      	add	r1, r0
 800c05c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c060:	4313      	orrs	r3, r2
 800c062:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a41      	ldr	r2, [pc, #260]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c074:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c076:	4b40      	ldr	r3, [pc, #256]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c07e:	4a3e      	ldr	r2, [pc, #248]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c080:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	78db      	ldrb	r3, [r3, #3]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d006      	beq.n	800c098 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c08a:	4b3b      	ldr	r3, [pc, #236]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c092:	4a39      	ldr	r2, [pc, #228]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	e005      	b.n	800c0a4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c098:	4b37      	ldr	r3, [pc, #220]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0a0:	4a35      	ldr	r2, [pc, #212]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c0a2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c0a4:	4b34      	ldr	r3, [pc, #208]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0ac:	4a32      	ldr	r2, [pc, #200]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c0ae:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0bc:	461a      	mov	r2, r3
 800c0be:	4b2e      	ldr	r3, [pc, #184]	; (800c178 <USB_HC_StartXfer+0x284>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d14e      	bne.n	800c168 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	78db      	ldrb	r3, [r3, #3]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d14a      	bne.n	800c168 <USB_HC_StartXfer+0x274>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d046      	beq.n	800c168 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	79db      	ldrb	r3, [r3, #7]
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d830      	bhi.n	800c144 <USB_HC_StartXfer+0x250>
 800c0e2:	a201      	add	r2, pc, #4	; (adr r2, 800c0e8 <USB_HC_StartXfer+0x1f4>)
 800c0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e8:	0800c0f9 	.word	0x0800c0f9
 800c0ec:	0800c11d 	.word	0x0800c11d
 800c0f0:	0800c0f9 	.word	0x0800c0f9
 800c0f4:	0800c11d 	.word	0x0800c11d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	3303      	adds	r3, #3
 800c0fe:	089b      	lsrs	r3, r3, #2
 800c100:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c102:	8afa      	ldrh	r2, [r7, #22]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	b29b      	uxth	r3, r3
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d91c      	bls.n	800c148 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	f043 0220 	orr.w	r2, r3, #32
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	619a      	str	r2, [r3, #24]
          }
          break;
 800c11a:	e015      	b.n	800c148 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	3303      	adds	r3, #3
 800c122:	089b      	lsrs	r3, r3, #2
 800c124:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c126:	8afa      	ldrh	r2, [r7, #22]
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	b29b      	uxth	r3, r3
 800c132:	429a      	cmp	r2, r3
 800c134:	d90a      	bls.n	800c14c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	619a      	str	r2, [r3, #24]
          }
          break;
 800c142:	e003      	b.n	800c14c <USB_HC_StartXfer+0x258>

        default:
          break;
 800c144:	bf00      	nop
 800c146:	e002      	b.n	800c14e <USB_HC_StartXfer+0x25a>
          break;
 800c148:	bf00      	nop
 800c14a:	e000      	b.n	800c14e <USB_HC_StartXfer+0x25a>
          break;
 800c14c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	68d9      	ldr	r1, [r3, #12]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	785a      	ldrb	r2, [r3, #1]
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	b298      	uxth	r0, r3
 800c15c:	2300      	movs	r3, #0
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	4603      	mov	r3, r0
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff fb92 	bl	800b88c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3728      	adds	r7, #40	; 0x28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	1ff80000 	.word	0x1ff80000
 800c178:	200002c8 	.word	0x200002c8

0800c17c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c18e:	695b      	ldr	r3, [r3, #20]
 800c190:	b29b      	uxth	r3, r3
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b087      	sub	sp, #28
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
 800c1b0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	015a      	lsls	r2, r3, #5
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	4413      	add	r3, r2
 800c1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	0c9b      	lsrs	r3, r3, #18
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d002      	beq.n	800c1d8 <USB_HC_Halt+0x3a>
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d16c      	bne.n	800c2b2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	0151      	lsls	r1, r2, #5
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	440a      	add	r2, r1
 800c1ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1f6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d143      	bne.n	800c28c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	0151      	lsls	r1, r2, #5
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	440a      	add	r2, r1
 800c21a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c21e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	0151      	lsls	r1, r2, #5
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	440a      	add	r2, r1
 800c23a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c23e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	015a      	lsls	r2, r3, #5
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	4413      	add	r3, r2
 800c24c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	0151      	lsls	r1, r2, #5
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	440a      	add	r2, r1
 800c25a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c25e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c262:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	3301      	adds	r3, #1
 800c268:	617b      	str	r3, [r7, #20]
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c270:	d81d      	bhi.n	800c2ae <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c288:	d0ec      	beq.n	800c264 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c28a:	e080      	b.n	800c38e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	4413      	add	r3, r2
 800c294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	0151      	lsls	r1, r2, #5
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2aa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c2ac:	e06f      	b.n	800c38e <USB_HC_Halt+0x1f0>
          break;
 800c2ae:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c2b0:	e06d      	b.n	800c38e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	015a      	lsls	r2, r3, #5
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	0151      	lsls	r1, r2, #5
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	440a      	add	r2, r1
 800c2c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2d0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d143      	bne.n	800c36a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c300:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	0151      	lsls	r1, r2, #5
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	440a      	add	r2, r1
 800c318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c320:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	015a      	lsls	r2, r3, #5
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	4413      	add	r3, r2
 800c32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	0151      	lsls	r1, r2, #5
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	440a      	add	r2, r1
 800c338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c33c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c340:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	3301      	adds	r3, #1
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c34e:	d81d      	bhi.n	800c38c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	015a      	lsls	r2, r3, #5
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	4413      	add	r3, r2
 800c358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c366:	d0ec      	beq.n	800c342 <USB_HC_Halt+0x1a4>
 800c368:	e011      	b.n	800c38e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	4413      	add	r3, r2
 800c372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	0151      	lsls	r1, r2, #5
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	440a      	add	r2, r1
 800c380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	e000      	b.n	800c38e <USB_HC_Halt+0x1f0>
          break;
 800c38c:	bf00      	nop
    }
  }

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	371c      	adds	r7, #28
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	04da      	lsls	r2, r3, #19
 800c3b8:	4b15      	ldr	r3, [pc, #84]	; (800c410 <USB_DoPing+0x74>)
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	371c      	adds	r7, #28
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	1ff80000 	.word	0x1ff80000

0800c414 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff f9ae 	bl	800b786 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c42a:	2110      	movs	r1, #16
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff f9e5 	bl	800b7fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fa08 	bl	800b848 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c438:	2300      	movs	r3, #0
 800c43a:	613b      	str	r3, [r7, #16]
 800c43c:	e01f      	b.n	800c47e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	015a      	lsls	r2, r3, #5
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c454:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c45c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c464:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	015a      	lsls	r2, r3, #5
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c472:	461a      	mov	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	3301      	adds	r3, #1
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	2b0f      	cmp	r3, #15
 800c482:	d9dc      	bls.n	800c43e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c484:	2300      	movs	r3, #0
 800c486:	613b      	str	r3, [r7, #16]
 800c488:	e034      	b.n	800c4f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	4413      	add	r3, r2
 800c492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4be:	461a      	mov	r2, r3
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4d0:	d80c      	bhi.n	800c4ec <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4e8:	d0ec      	beq.n	800c4c4 <USB_StopHost+0xb0>
 800c4ea:	e000      	b.n	800c4ee <USB_StopHost+0xda>
        break;
 800c4ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	613b      	str	r3, [r7, #16]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d9c7      	bls.n	800c48a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c500:	461a      	mov	r2, r3
 800c502:	f04f 33ff 	mov.w	r3, #4294967295
 800c506:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f04f 32ff 	mov.w	r2, #4294967295
 800c50e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff f927 	bl	800b764 <USB_EnableGlobalInt>

  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b089      	sub	sp, #36	; 0x24
 800c524:	af04      	add	r7, sp, #16
 800c526:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c528:	2301      	movs	r3, #1
 800c52a:	2202      	movs	r2, #2
 800c52c:	2102      	movs	r1, #2
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fcb4 	bl	800ce9c <USBH_FindInterface>
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c538:	7bfb      	ldrb	r3, [r7, #15]
 800c53a:	2bff      	cmp	r3, #255	; 0xff
 800c53c:	d002      	beq.n	800c544 <USBH_CDC_InterfaceInit+0x24>
 800c53e:	7bfb      	ldrb	r3, [r7, #15]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d901      	bls.n	800c548 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c544:	2302      	movs	r3, #2
 800c546:	e13d      	b.n	800c7c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fc89 	bl	800ce64 <USBH_SelectInterface>
 800c552:	4603      	mov	r3, r0
 800c554:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c55c:	2302      	movs	r3, #2
 800c55e:	e131      	b.n	800c7c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c566:	2050      	movs	r0, #80	; 0x50
 800c568:	f006 faa8 	bl	8012abc <malloc>
 800c56c:	4603      	mov	r3, r0
 800c56e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c580:	2302      	movs	r3, #2
 800c582:	e11f      	b.n	800c7c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c584:	2250      	movs	r2, #80	; 0x50
 800c586:	2100      	movs	r1, #0
 800c588:	68b8      	ldr	r0, [r7, #8]
 800c58a:	f006 fab2 	bl	8012af2 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	211a      	movs	r1, #26
 800c594:	fb01 f303 	mul.w	r3, r1, r3
 800c598:	4413      	add	r3, r2
 800c59a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	b25b      	sxtb	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da15      	bge.n	800c5d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	211a      	movs	r1, #26
 800c5ac:	fb01 f303 	mul.w	r3, r1, r3
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	211a      	movs	r1, #26
 800c5c2:	fb01 f303 	mul.w	r3, r1, r3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c5cc:	881a      	ldrh	r2, [r3, #0]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f002 f890 	bl	800e6fe <USBH_AllocPipe>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	7819      	ldrb	r1, [r3, #0]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	7858      	ldrb	r0, [r3, #1]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	8952      	ldrh	r2, [r2, #10]
 800c5fe:	9202      	str	r2, [sp, #8]
 800c600:	2203      	movs	r2, #3
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	4623      	mov	r3, r4
 800c608:	4602      	mov	r2, r0
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f002 f848 	bl	800e6a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2200      	movs	r2, #0
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f005 ff6b 	bl	80124f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c61e:	2300      	movs	r3, #0
 800c620:	2200      	movs	r2, #0
 800c622:	210a      	movs	r1, #10
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fc39 	bl	800ce9c <USBH_FindInterface>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2bff      	cmp	r3, #255	; 0xff
 800c632:	d002      	beq.n	800c63a <USBH_CDC_InterfaceInit+0x11a>
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d901      	bls.n	800c63e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c63a:	2302      	movs	r3, #2
 800c63c:	e0c2      	b.n	800c7c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	211a      	movs	r1, #26
 800c644:	fb01 f303 	mul.w	r3, r1, r3
 800c648:	4413      	add	r3, r2
 800c64a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	b25b      	sxtb	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	da16      	bge.n	800c684 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	211a      	movs	r1, #26
 800c65c:	fb01 f303 	mul.w	r3, r1, r3
 800c660:	4413      	add	r3, r2
 800c662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c666:	781a      	ldrb	r2, [r3, #0]
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	211a      	movs	r1, #26
 800c672:	fb01 f303 	mul.w	r3, r1, r3
 800c676:	4413      	add	r3, r2
 800c678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c67c:	881a      	ldrh	r2, [r3, #0]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	835a      	strh	r2, [r3, #26]
 800c682:	e015      	b.n	800c6b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	211a      	movs	r1, #26
 800c68a:	fb01 f303 	mul.w	r3, r1, r3
 800c68e:	4413      	add	r3, r2
 800c690:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c694:	781a      	ldrb	r2, [r3, #0]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	211a      	movs	r1, #26
 800c6a0:	fb01 f303 	mul.w	r3, r1, r3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c6aa:	881a      	ldrh	r2, [r3, #0]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	211a      	movs	r1, #26
 800c6b6:	fb01 f303 	mul.w	r3, r1, r3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b25b      	sxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	da16      	bge.n	800c6f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	211a      	movs	r1, #26
 800c6ce:	fb01 f303 	mul.w	r3, r1, r3
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	211a      	movs	r1, #26
 800c6e4:	fb01 f303 	mul.w	r3, r1, r3
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c6ee:	881a      	ldrh	r2, [r3, #0]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	835a      	strh	r2, [r3, #26]
 800c6f4:	e015      	b.n	800c722 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	211a      	movs	r1, #26
 800c6fc:	fb01 f303 	mul.w	r3, r1, r3
 800c700:	4413      	add	r3, r2
 800c702:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	211a      	movs	r1, #26
 800c712:	fb01 f303 	mul.w	r3, r1, r3
 800c716:	4413      	add	r3, r2
 800c718:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c71c:	881a      	ldrh	r2, [r3, #0]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	7b9b      	ldrb	r3, [r3, #14]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f001 ffe8 	bl	800e6fe <USBH_AllocPipe>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	7bdb      	ldrb	r3, [r3, #15]
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f001 ffde 	bl	800e6fe <USBH_AllocPipe>
 800c742:	4603      	mov	r3, r0
 800c744:	461a      	mov	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	7b59      	ldrb	r1, [r3, #13]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	7b98      	ldrb	r0, [r3, #14]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	8b12      	ldrh	r2, [r2, #24]
 800c762:	9202      	str	r2, [sp, #8]
 800c764:	2202      	movs	r2, #2
 800c766:	9201      	str	r2, [sp, #4]
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	4623      	mov	r3, r4
 800c76c:	4602      	mov	r2, r0
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 ff96 	bl	800e6a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	7b19      	ldrb	r1, [r3, #12]
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	7bd8      	ldrb	r0, [r3, #15]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	8b52      	ldrh	r2, [r2, #26]
 800c78c:	9202      	str	r2, [sp, #8]
 800c78e:	2202      	movs	r2, #2
 800c790:	9201      	str	r2, [sp, #4]
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	4623      	mov	r3, r4
 800c796:	4602      	mov	r2, r0
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 ff81 	bl	800e6a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	7b5b      	ldrb	r3, [r3, #13]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f005 fea0 	bl	80124f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	7b1b      	ldrb	r3, [r3, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f005 fe99 	bl	80124f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd90      	pop	{r4, r7, pc}

0800c7cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00e      	beq.n	800c804 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f001 ff76 	bl	800e6de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f001 ffa1 	bl	800e740 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	7b1b      	ldrb	r3, [r3, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00e      	beq.n	800c82a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	7b1b      	ldrb	r3, [r3, #12]
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f001 ff63 	bl	800e6de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	7b1b      	ldrb	r3, [r3, #12]
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f001 ff8e 	bl	800e740 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	7b5b      	ldrb	r3, [r3, #13]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00e      	beq.n	800c850 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	7b5b      	ldrb	r3, [r3, #13]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 ff50 	bl	800e6de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	7b5b      	ldrb	r3, [r3, #13]
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f001 ff7b 	bl	800e740 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	4618      	mov	r0, r3
 800c866:	f006 f931 	bl	8012acc <free>
    phost->pActiveClass->pData = 0U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c870:	2200      	movs	r2, #0
 800c872:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3340      	adds	r3, #64	; 0x40
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f8b1 	bl	800c9fe <GetLineCoding>
 800c89c:	4603      	mov	r3, r0
 800c89e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c8a0:	7afb      	ldrb	r3, [r7, #11]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d105      	bne.n	800c8b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8ac:	2102      	movs	r1, #2
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c8b2:	7afb      	ldrb	r3, [r7, #11]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8d2:	69db      	ldr	r3, [r3, #28]
 800c8d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c8dc:	2b04      	cmp	r3, #4
 800c8de:	d877      	bhi.n	800c9d0 <USBH_CDC_Process+0x114>
 800c8e0:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <USBH_CDC_Process+0x2c>)
 800c8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e6:	bf00      	nop
 800c8e8:	0800c8fd 	.word	0x0800c8fd
 800c8ec:	0800c903 	.word	0x0800c903
 800c8f0:	0800c933 	.word	0x0800c933
 800c8f4:	0800c9a7 	.word	0x0800c9a7
 800c8f8:	0800c9b5 	.word	0x0800c9b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c900:	e06d      	b.n	800c9de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f897 	bl	800ca3c <SetLineCoding>
 800c90e:	4603      	mov	r3, r0
 800c910:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d104      	bne.n	800c922 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c920:	e058      	b.n	800c9d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d055      	beq.n	800c9d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2204      	movs	r2, #4
 800c92c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c930:	e050      	b.n	800c9d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	3340      	adds	r3, #64	; 0x40
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f860 	bl	800c9fe <GetLineCoding>
 800c93e:	4603      	mov	r3, r0
 800c940:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d126      	bne.n	800c996 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c95a:	791b      	ldrb	r3, [r3, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d13b      	bne.n	800c9d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c96a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d133      	bne.n	800c9d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c97a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d12b      	bne.n	800c9d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c988:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d124      	bne.n	800c9d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f984 	bl	800cc9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c994:	e020      	b.n	800c9d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c996:	7bbb      	ldrb	r3, [r7, #14]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d01d      	beq.n	800c9d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2204      	movs	r2, #4
 800c9a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c9a4:	e018      	b.n	800c9d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f867 	bl	800ca7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f8f8 	bl	800cba2 <CDC_ProcessReception>
      break;
 800c9b2:	e014      	b.n	800c9de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f001 f94f 	bl	800dc5a <USBH_ClrFeature>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c9ce:	e005      	b.n	800c9dc <USBH_CDC_Process+0x120>

    default:
      break;
 800c9d0:	bf00      	nop
 800c9d2:	e004      	b.n	800c9de <USBH_CDC_Process+0x122>
      break;
 800c9d4:	bf00      	nop
 800c9d6:	e002      	b.n	800c9de <USBH_CDC_Process+0x122>
      break;
 800c9d8:	bf00      	nop
 800c9da:	e000      	b.n	800c9de <USBH_CDC_Process+0x122>
      break;
 800c9dc:	bf00      	nop

  }

  return status;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	22a1      	movs	r2, #161	; 0xa1
 800ca0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2221      	movs	r2, #33	; 0x21
 800ca12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2207      	movs	r2, #7
 800ca24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2207      	movs	r2, #7
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f001 faf4 	bl	800e01a <USBH_CtlReq>
 800ca32:	4603      	mov	r3, r0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2221      	movs	r2, #33	; 0x21
 800ca4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2220      	movs	r2, #32
 800ca50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2207      	movs	r2, #7
 800ca62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	2207      	movs	r2, #7
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fad5 	bl	800e01a <USBH_CtlReq>
 800ca70:	4603      	mov	r3, r0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b086      	sub	sp, #24
 800ca7e:	af02      	add	r7, sp, #8
 800ca80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d002      	beq.n	800caa0 <CDC_ProcessTransmission+0x26>
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d025      	beq.n	800caea <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800ca9e:	e07c      	b.n	800cb9a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	8b12      	ldrh	r2, [r2, #24]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d90c      	bls.n	800cac6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	69d9      	ldr	r1, [r3, #28]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	8b1a      	ldrh	r2, [r3, #24]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	7b58      	ldrb	r0, [r3, #13]
 800cab8:	2301      	movs	r3, #1
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	4603      	mov	r3, r0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fdab 	bl	800e61a <USBH_BulkSendData>
 800cac4:	e00c      	b.n	800cae0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	7b58      	ldrb	r0, [r3, #13]
 800cad4:	2301      	movs	r3, #1
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	4603      	mov	r3, r0
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 fd9d 	bl	800e61a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cae8:	e057      	b.n	800cb9a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	7b5b      	ldrb	r3, [r3, #13]
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f005 fcd5 	bl	80124a0 <USBH_LL_GetURBState>
 800caf6:	4603      	mov	r3, r0
 800caf8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cafa:	7afb      	ldrb	r3, [r7, #11]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d136      	bne.n	800cb6e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	8b12      	ldrh	r2, [r2, #24]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d90e      	bls.n	800cb2a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	8b12      	ldrh	r2, [r2, #24]
 800cb14:	1a9a      	subs	r2, r3, r2
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	8b12      	ldrh	r2, [r2, #24]
 800cb22:	441a      	add	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	61da      	str	r2, [r3, #28]
 800cb28:	e002      	b.n	800cb30 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d004      	beq.n	800cb42 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800cb40:	e006      	b.n	800cb50 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f892 	bl	800cc74 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2204      	movs	r2, #4
 800cb54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb64:	2300      	movs	r3, #0
 800cb66:	2200      	movs	r2, #0
 800cb68:	f002 f940 	bl	800edec <osMessageQueuePut>
      break;
 800cb6c:	e014      	b.n	800cb98 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800cb6e:	7afb      	ldrb	r3, [r7, #11]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d111      	bne.n	800cb98 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2204      	movs	r2, #4
 800cb80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb90:	2300      	movs	r3, #0
 800cb92:	2200      	movs	r2, #0
 800cb94:	f002 f92a 	bl	800edec <osMessageQueuePut>
      break;
 800cb98:	bf00      	nop
  }
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d002      	beq.n	800cbc8 <CDC_ProcessReception+0x26>
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d00e      	beq.n	800cbe4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cbc6:	e051      	b.n	800cc6c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	6a19      	ldr	r1, [r3, #32]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	8b5a      	ldrh	r2, [r3, #26]
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	7b1b      	ldrb	r3, [r3, #12]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 fd45 	bl	800e664 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2204      	movs	r2, #4
 800cbde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cbe2:	e043      	b.n	800cc6c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	7b1b      	ldrb	r3, [r3, #12]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f005 fc58 	bl	80124a0 <USBH_LL_GetURBState>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cbf4:	7cfb      	ldrb	r3, [r7, #19]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d137      	bne.n	800cc6a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	7b1b      	ldrb	r3, [r3, #12]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f005 fbbb 	bl	801237c <USBH_LL_GetLastXferSize>
 800cc06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d016      	beq.n	800cc40 <CDC_ProcessReception+0x9e>
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	8b5b      	ldrh	r3, [r3, #26]
 800cc16:	461a      	mov	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d910      	bls.n	800cc40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1ad2      	subs	r2, r2, r3
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	6a1a      	ldr	r2, [r3, #32]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	441a      	add	r2, r3
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2203      	movs	r2, #3
 800cc3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800cc3e:	e006      	b.n	800cc4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f81d 	bl	800cc88 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2204      	movs	r2, #4
 800cc52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc62:	2300      	movs	r3, #0
 800cc64:	2200      	movs	r2, #0
 800cc66:	f002 f8c1 	bl	800edec <osMessageQueuePut>
      break;
 800cc6a:	bf00      	nop
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	e044      	b.n	800cd52 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	79fa      	ldrb	r2, [r7, #7]
 800cccc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f000 f841 	bl	800cd68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cd14:	2200      	movs	r2, #0
 800cd16:	2104      	movs	r1, #4
 800cd18:	2010      	movs	r0, #16
 800cd1a:	f001 ffe1 	bl	800ece0 <osMessageQueueNew>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cd26:	4b0d      	ldr	r3, [pc, #52]	; (800cd5c <USBH_Init+0xac>)
 800cd28:	4a0d      	ldr	r2, [pc, #52]	; (800cd60 <USBH_Init+0xb0>)
 800cd2a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cd2c:	4b0b      	ldr	r3, [pc, #44]	; (800cd5c <USBH_Init+0xac>)
 800cd2e:	2280      	movs	r2, #128	; 0x80
 800cd30:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cd32:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <USBH_Init+0xac>)
 800cd34:	2218      	movs	r2, #24
 800cd36:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800cd38:	4a08      	ldr	r2, [pc, #32]	; (800cd5c <USBH_Init+0xac>)
 800cd3a:	68f9      	ldr	r1, [r7, #12]
 800cd3c:	4809      	ldr	r0, [pc, #36]	; (800cd64 <USBH_Init+0xb4>)
 800cd3e:	f001 fdb3 	bl	800e8a8 <osThreadNew>
 800cd42:	4602      	mov	r2, r0
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f005 fa64 	bl	8012218 <USBH_LL_Init>

  return USBH_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	2000b110 	.word	0x2000b110
 800cd60:	08013988 	.word	0x08013988
 800cd64:	0800d9d1 	.word	0x0800d9d1

0800cd68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e009      	b.n	800cd8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	33e0      	adds	r3, #224	; 0xe0
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	2200      	movs	r2, #0
 800cd86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b0e      	cmp	r3, #14
 800cd92:	d9f2      	bls.n	800cd7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	e009      	b.n	800cdae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	60fb      	str	r3, [r7, #12]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb4:	d3f1      	bcc.n	800cd9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2240      	movs	r2, #64	; 0x40
 800cdda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d016      	beq.n	800ce52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10e      	bne.n	800ce4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ce34:	1c59      	adds	r1, r3, #1
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	33de      	adds	r3, #222	; 0xde
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]
 800ce4a:	e004      	b.n	800ce56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	73fb      	strb	r3, [r7, #15]
 800ce50:	e001      	b.n	800ce56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ce52:	2302      	movs	r3, #2
 800ce54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ce7a:	78fa      	ldrb	r2, [r7, #3]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d204      	bcs.n	800ce8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	78fa      	ldrb	r2, [r7, #3]
 800ce84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ce88:	e001      	b.n	800ce8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4603      	mov	r3, r0
 800ceac:	70fb      	strb	r3, [r7, #3]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70bb      	strb	r3, [r7, #2]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cec4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cec6:	e025      	b.n	800cf14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	221a      	movs	r2, #26
 800cecc:	fb02 f303 	mul.w	r3, r2, r3
 800ced0:	3308      	adds	r3, #8
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	4413      	add	r3, r2
 800ced6:	3302      	adds	r3, #2
 800ced8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	795b      	ldrb	r3, [r3, #5]
 800cede:	78fa      	ldrb	r2, [r7, #3]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d002      	beq.n	800ceea <USBH_FindInterface+0x4e>
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	2bff      	cmp	r3, #255	; 0xff
 800cee8:	d111      	bne.n	800cf0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ceee:	78ba      	ldrb	r2, [r7, #2]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d002      	beq.n	800cefa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cef4:	78bb      	ldrb	r3, [r7, #2]
 800cef6:	2bff      	cmp	r3, #255	; 0xff
 800cef8:	d109      	bne.n	800cf0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cefe:	787a      	ldrb	r2, [r7, #1]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d002      	beq.n	800cf0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cf04:	787b      	ldrb	r3, [r7, #1]
 800cf06:	2bff      	cmp	r3, #255	; 0xff
 800cf08:	d101      	bne.n	800cf0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	e006      	b.n	800cf1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	3301      	adds	r3, #1
 800cf12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cf14:	7dfb      	ldrb	r3, [r7, #23]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d9d6      	bls.n	800cec8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cf1a:	23ff      	movs	r3, #255	; 0xff
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	371c      	adds	r7, #28
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f005 f9ad 	bl	8012290 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cf36:	2101      	movs	r1, #1
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f005 fac4 	bl	80124c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af04      	add	r7, sp, #16
 800cf4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cf50:	2302      	movs	r3, #2
 800cf52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d102      	bne.n	800cf6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2203      	movs	r2, #3
 800cf68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b0b      	cmp	r3, #11
 800cf72:	f200 823c 	bhi.w	800d3ee <USBH_Process+0x4a6>
 800cf76:	a201      	add	r2, pc, #4	; (adr r2, 800cf7c <USBH_Process+0x34>)
 800cf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7c:	0800cfad 	.word	0x0800cfad
 800cf80:	0800cffb 	.word	0x0800cffb
 800cf84:	0800d07f 	.word	0x0800d07f
 800cf88:	0800d36d 	.word	0x0800d36d
 800cf8c:	0800d3ef 	.word	0x0800d3ef
 800cf90:	0800d13f 	.word	0x0800d13f
 800cf94:	0800d2f7 	.word	0x0800d2f7
 800cf98:	0800d191 	.word	0x0800d191
 800cf9c:	0800d1cd 	.word	0x0800d1cd
 800cfa0:	0800d207 	.word	0x0800d207
 800cfa4:	0800d24f 	.word	0x0800d24f
 800cfa8:	0800d355 	.word	0x0800d355
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 821c 	beq.w	800d3f2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cfc0:	20c8      	movs	r0, #200	; 0xc8
 800cfc2:	f005 faca 	bl	801255a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f005 f9bd 	bl	8012346 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cff0:	2300      	movs	r3, #0
 800cff2:	2200      	movs	r2, #0
 800cff4:	f001 fefa 	bl	800edec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cff8:	e1fb      	b.n	800d3f2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d000:	2b01      	cmp	r3, #1
 800d002:	d107      	bne.n	800d014 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2202      	movs	r2, #2
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	e025      	b.n	800d060 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d01e:	d914      	bls.n	800d04a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d026:	3301      	adds	r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d036:	2b03      	cmp	r3, #3
 800d038:	d903      	bls.n	800d042 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	220d      	movs	r2, #13
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e00e      	b.n	800d060 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	701a      	strb	r2, [r3, #0]
 800d048:	e00a      	b.n	800d060 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d050:	f103 020a 	add.w	r2, r3, #10
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d05a:	200a      	movs	r0, #10
 800d05c:	f005 fa7d 	bl	801255a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d074:	2300      	movs	r3, #0
 800d076:	2200      	movs	r2, #0
 800d078:	f001 feb8 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d07c:	e1c0      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d08e:	2104      	movs	r1, #4
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d094:	2064      	movs	r0, #100	; 0x64
 800d096:	f005 fa60 	bl	801255a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f005 f92e 	bl	80122fc <USBH_LL_GetSpeed>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2205      	movs	r2, #5
 800d0ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f001 fb23 	bl	800e6fe <USBH_AllocPipe>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d0c0:	2180      	movs	r1, #128	; 0x80
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f001 fb1b 	bl	800e6fe <USBH_AllocPipe>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7919      	ldrb	r1, [r3, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d0e4:	b292      	uxth	r2, r2
 800d0e6:	9202      	str	r2, [sp, #8]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	9201      	str	r2, [sp, #4]
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2280      	movs	r2, #128	; 0x80
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 fad4 	bl	800e6a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7959      	ldrb	r1, [r3, #5]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d10c:	b292      	uxth	r2, r2
 800d10e:	9202      	str	r2, [sp, #8]
 800d110:	2200      	movs	r2, #0
 800d112:	9201      	str	r2, [sp, #4]
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	4603      	mov	r3, r0
 800d118:	2200      	movs	r2, #0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f001 fac0 	bl	800e6a0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d134:	2300      	movs	r3, #0
 800d136:	2200      	movs	r2, #0
 800d138:	f001 fe58 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d13c:	e160      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f964 	bl	800d40c <USBH_HandleEnum>
 800d144:	4603      	mov	r3, r0
 800d146:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f040 8152 	bne.w	800d3f6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d160:	2b01      	cmp	r3, #1
 800d162:	d103      	bne.n	800d16c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2208      	movs	r2, #8
 800d168:	701a      	strb	r2, [r3, #0]
 800d16a:	e002      	b.n	800d172 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2207      	movs	r2, #7
 800d170:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2205      	movs	r2, #5
 800d176:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d186:	2300      	movs	r3, #0
 800d188:	2200      	movs	r2, #0
 800d18a:	f001 fe2f 	bl	800edec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d18e:	e132      	b.n	800d3f6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 812f 	beq.w	800d3fa <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2208      	movs	r2, #8
 800d1ac:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2205      	movs	r2, #5
 800d1b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f001 fe11 	bl	800edec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d1ca:	e116      	b.n	800d3fa <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fcf8 	bl	800dbcc <USBH_SetCfg>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d102      	bne.n	800d1e8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2209      	movs	r2, #9
 800d1e6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	2200      	movs	r2, #0
 800d200:	f001 fdf4 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d204:	e0fc      	b.n	800d400 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d20c:	f003 0320 	and.w	r3, r3, #32
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00a      	beq.n	800d22a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d214:	2101      	movs	r1, #1
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fcfb 	bl	800dc12 <USBH_SetFeature>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	220a      	movs	r2, #10
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	e002      	b.n	800d230 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	220a      	movs	r2, #10
 800d22e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d244:	2300      	movs	r3, #0
 800d246:	2200      	movs	r2, #0
 800d248:	f001 fdd0 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d24c:	e0d8      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d254:	2b00      	cmp	r3, #0
 800d256:	d03f      	beq.n	800d2d8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d260:	2300      	movs	r3, #0
 800d262:	73fb      	strb	r3, [r7, #15]
 800d264:	e016      	b.n	800d294 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d266:	7bfa      	ldrb	r2, [r7, #15]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	32de      	adds	r2, #222	; 0xde
 800d26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d270:	791a      	ldrb	r2, [r3, #4]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d278:	429a      	cmp	r2, r3
 800d27a:	d108      	bne.n	800d28e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d27c:	7bfa      	ldrb	r2, [r7, #15]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	32de      	adds	r2, #222	; 0xde
 800d282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d28c:	e005      	b.n	800d29a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	3301      	adds	r3, #1
 800d292:	73fb      	strb	r3, [r7, #15]
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0e5      	beq.n	800d266 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d016      	beq.n	800d2d2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	4798      	blx	r3
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d109      	bne.n	800d2ca <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2206      	movs	r2, #6
 800d2ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2c2:	2103      	movs	r1, #3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	4798      	blx	r3
 800d2c8:	e006      	b.n	800d2d8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	220d      	movs	r2, #13
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	e002      	b.n	800d2d8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	220d      	movs	r2, #13
 800d2d6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2205      	movs	r2, #5
 800d2dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f001 fd7c 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d2f4:	e084      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d017      	beq.n	800d330 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	4798      	blx	r3
 800d30c:	4603      	mov	r3, r0
 800d30e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d310:	7bbb      	ldrb	r3, [r7, #14]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d103      	bne.n	800d320 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	220b      	movs	r2, #11
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	e00a      	b.n	800d336 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d320:	7bbb      	ldrb	r3, [r7, #14]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b02      	cmp	r3, #2
 800d326:	d106      	bne.n	800d336 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	220d      	movs	r2, #13
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	e002      	b.n	800d336 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	220d      	movs	r2, #13
 800d334:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2205      	movs	r2, #5
 800d33a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d34a:	2300      	movs	r3, #0
 800d34c:	2200      	movs	r2, #0
 800d34e:	f001 fd4d 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d352:	e055      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d04f      	beq.n	800d3fe <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	4798      	blx	r3
      }
      break;
 800d36a:	e048      	b.n	800d3fe <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fcf7 	bl	800cd68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d005      	beq.n	800d3ae <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3a8:	2105      	movs	r1, #5
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d107      	bne.n	800d3ca <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff fdb0 	bl	800cf28 <USBH_Start>
 800d3c8:	e002      	b.n	800d3d0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f004 ff60 	bl	8012290 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f001 fd00 	bl	800edec <osMessageQueuePut>
#endif
#endif
      break;
 800d3ec:	e008      	b.n	800d400 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d3ee:	bf00      	nop
 800d3f0:	e006      	b.n	800d400 <USBH_Process+0x4b8>
      break;
 800d3f2:	bf00      	nop
 800d3f4:	e004      	b.n	800d400 <USBH_Process+0x4b8>
      break;
 800d3f6:	bf00      	nop
 800d3f8:	e002      	b.n	800d400 <USBH_Process+0x4b8>
    break;
 800d3fa:	bf00      	nop
 800d3fc:	e000      	b.n	800d400 <USBH_Process+0x4b8>
      break;
 800d3fe:	bf00      	nop
  }
  return USBH_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop

0800d40c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af04      	add	r7, sp, #16
 800d412:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d414:	2301      	movs	r3, #1
 800d416:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d418:	2301      	movs	r3, #1
 800d41a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	2b07      	cmp	r3, #7
 800d422:	f200 8208 	bhi.w	800d836 <USBH_HandleEnum+0x42a>
 800d426:	a201      	add	r2, pc, #4	; (adr r2, 800d42c <USBH_HandleEnum+0x20>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d44d 	.word	0x0800d44d
 800d430:	0800d50b 	.word	0x0800d50b
 800d434:	0800d575 	.word	0x0800d575
 800d438:	0800d603 	.word	0x0800d603
 800d43c:	0800d66d 	.word	0x0800d66d
 800d440:	0800d6dd 	.word	0x0800d6dd
 800d444:	0800d779 	.word	0x0800d779
 800d448:	0800d7f7 	.word	0x0800d7f7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d44c:	2108      	movs	r1, #8
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 faec 	bl	800da2c <USBH_Get_DevDesc>
 800d454:	4603      	mov	r3, r0
 800d456:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d130      	bne.n	800d4c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7919      	ldrb	r1, [r3, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d482:	b292      	uxth	r2, r2
 800d484:	9202      	str	r2, [sp, #8]
 800d486:	2200      	movs	r2, #0
 800d488:	9201      	str	r2, [sp, #4]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	4603      	mov	r3, r0
 800d48e:	2280      	movs	r2, #128	; 0x80
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f001 f905 	bl	800e6a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7959      	ldrb	r1, [r3, #5]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4aa:	b292      	uxth	r2, r2
 800d4ac:	9202      	str	r2, [sp, #8]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	9201      	str	r2, [sp, #4]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 f8f1 	bl	800e6a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d4be:	e1bc      	b.n	800d83a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	f040 81b9 	bne.w	800d83a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d903      	bls.n	800d4ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	220d      	movs	r2, #13
 800d4e6:	701a      	strb	r2, [r3, #0]
      break;
 800d4e8:	e1a7      	b.n	800d83a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	795b      	ldrb	r3, [r3, #5]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f001 f925 	bl	800e740 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	791b      	ldrb	r3, [r3, #4]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 f91f 	bl	800e740 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]
      break;
 800d508:	e197      	b.n	800d83a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d50a:	2112      	movs	r1, #18
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fa8d 	bl	800da2c <USBH_Get_DevDesc>
 800d512:	4603      	mov	r3, r0
 800d514:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d516:	7bbb      	ldrb	r3, [r7, #14]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d103      	bne.n	800d524 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2202      	movs	r2, #2
 800d520:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d522:	e18c      	b.n	800d83e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	2b03      	cmp	r3, #3
 800d528:	f040 8189 	bne.w	800d83e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d532:	3301      	adds	r3, #1
 800d534:	b2da      	uxtb	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d542:	2b03      	cmp	r3, #3
 800d544:	d903      	bls.n	800d54e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	220d      	movs	r2, #13
 800d54a:	701a      	strb	r2, [r3, #0]
      break;
 800d54c:	e177      	b.n	800d83e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	795b      	ldrb	r3, [r3, #5]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f001 f8f3 	bl	800e740 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	791b      	ldrb	r3, [r3, #4]
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f001 f8ed 	bl	800e740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	701a      	strb	r2, [r3, #0]
      break;
 800d572:	e164      	b.n	800d83e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d574:	2101      	movs	r1, #1
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fb04 	bl	800db84 <USBH_SetAddress>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d580:	7bbb      	ldrb	r3, [r7, #14]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d132      	bne.n	800d5ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d586:	2002      	movs	r0, #2
 800d588:	f004 ffe7 	bl	801255a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2203      	movs	r2, #3
 800d598:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7919      	ldrb	r1, [r3, #4]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d5ae:	b292      	uxth	r2, r2
 800d5b0:	9202      	str	r2, [sp, #8]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	9201      	str	r2, [sp, #4]
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2280      	movs	r2, #128	; 0x80
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 f86f 	bl	800e6a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7959      	ldrb	r1, [r3, #5]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d5d6:	b292      	uxth	r2, r2
 800d5d8:	9202      	str	r2, [sp, #8]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	9201      	str	r2, [sp, #4]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f001 f85b 	bl	800e6a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d5ea:	e12a      	b.n	800d842 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	f040 8127 	bne.w	800d842 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	220d      	movs	r2, #13
 800d5f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	705a      	strb	r2, [r3, #1]
      break;
 800d600:	e11f      	b.n	800d842 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d602:	2109      	movs	r1, #9
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fa39 	bl	800da7c <USBH_Get_CfgDesc>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d60e:	7bbb      	ldrb	r3, [r7, #14]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2204      	movs	r2, #4
 800d618:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d61a:	e114      	b.n	800d846 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b03      	cmp	r3, #3
 800d620:	f040 8111 	bne.w	800d846 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d62a:	3301      	adds	r3, #1
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d903      	bls.n	800d646 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	220d      	movs	r2, #13
 800d642:	701a      	strb	r2, [r3, #0]
      break;
 800d644:	e0ff      	b.n	800d846 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	795b      	ldrb	r3, [r3, #5]
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 f877 	bl	800e740 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	791b      	ldrb	r3, [r3, #4]
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f001 f871 	bl	800e740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	701a      	strb	r2, [r3, #0]
      break;
 800d66a:	e0ec      	b.n	800d846 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa01 	bl	800da7c <USBH_Get_CfgDesc>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d67e:	7bbb      	ldrb	r3, [r7, #14]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d103      	bne.n	800d68c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2205      	movs	r2, #5
 800d688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d68a:	e0de      	b.n	800d84a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	2b03      	cmp	r3, #3
 800d690:	f040 80db 	bne.w	800d84a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d69a:	3301      	adds	r3, #1
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d903      	bls.n	800d6b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	220d      	movs	r2, #13
 800d6b2:	701a      	strb	r2, [r3, #0]
      break;
 800d6b4:	e0c9      	b.n	800d84a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	795b      	ldrb	r3, [r3, #5]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f001 f83f 	bl	800e740 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	791b      	ldrb	r3, [r3, #4]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f001 f839 	bl	800e740 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	701a      	strb	r2, [r3, #0]
      break;
 800d6da:	e0b6      	b.n	800d84a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d036      	beq.n	800d754 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d6f2:	23ff      	movs	r3, #255	; 0xff
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f9e5 	bl	800dac4 <USBH_Get_StringDesc>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d6fe:	7bbb      	ldrb	r3, [r7, #14]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d111      	bne.n	800d728 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2206      	movs	r2, #6
 800d708:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2205      	movs	r2, #5
 800d70e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d71e:	2300      	movs	r3, #0
 800d720:	2200      	movs	r2, #0
 800d722:	f001 fb63 	bl	800edec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d726:	e092      	b.n	800d84e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	2b03      	cmp	r3, #3
 800d72c:	f040 808f 	bne.w	800d84e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2206      	movs	r2, #6
 800d734:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2205      	movs	r2, #5
 800d73a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d74a:	2300      	movs	r3, #0
 800d74c:	2200      	movs	r2, #0
 800d74e:	f001 fb4d 	bl	800edec <osMessageQueuePut>
      break;
 800d752:	e07c      	b.n	800d84e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2206      	movs	r2, #6
 800d758:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2205      	movs	r2, #5
 800d75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d76e:	2300      	movs	r3, #0
 800d770:	2200      	movs	r2, #0
 800d772:	f001 fb3b 	bl	800edec <osMessageQueuePut>
      break;
 800d776:	e06a      	b.n	800d84e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d027      	beq.n	800d7d2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d78e:	23ff      	movs	r3, #255	; 0xff
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f997 	bl	800dac4 <USBH_Get_StringDesc>
 800d796:	4603      	mov	r3, r0
 800d798:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d79a:	7bbb      	ldrb	r3, [r7, #14]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d103      	bne.n	800d7a8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2207      	movs	r2, #7
 800d7a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d7a6:	e054      	b.n	800d852 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d151      	bne.n	800d852 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2207      	movs	r2, #7
 800d7b2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2205      	movs	r2, #5
 800d7b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f001 fb0e 	bl	800edec <osMessageQueuePut>
      break;
 800d7d0:	e03f      	b.n	800d852 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2207      	movs	r2, #7
 800d7d6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2205      	movs	r2, #5
 800d7dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f001 fafc 	bl	800edec <osMessageQueuePut>
      break;
 800d7f4:	e02d      	b.n	800d852 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d017      	beq.n	800d830 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d80c:	23ff      	movs	r3, #255	; 0xff
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f958 	bl	800dac4 <USBH_Get_StringDesc>
 800d814:	4603      	mov	r3, r0
 800d816:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d818:	7bbb      	ldrb	r3, [r7, #14]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d102      	bne.n	800d824 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d822:	e018      	b.n	800d856 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d824:	7bbb      	ldrb	r3, [r7, #14]
 800d826:	2b03      	cmp	r3, #3
 800d828:	d115      	bne.n	800d856 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	73fb      	strb	r3, [r7, #15]
      break;
 800d82e:	e012      	b.n	800d856 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
      break;
 800d834:	e00f      	b.n	800d856 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d836:	bf00      	nop
 800d838:	e00e      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d83a:	bf00      	nop
 800d83c:	e00c      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d83e:	bf00      	nop
 800d840:	e00a      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d842:	bf00      	nop
 800d844:	e008      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d846:	bf00      	nop
 800d848:	e006      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d84a:	bf00      	nop
 800d84c:	e004      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d84e:	bf00      	nop
 800d850:	e002      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d852:	bf00      	nop
 800d854:	e000      	b.n	800d858 <USBH_HandleEnum+0x44c>
      break;
 800d856:	bf00      	nop
  }
  return Status;
 800d858:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop

0800d864 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f804 	bl	800d8a6 <USBH_HandleSof>
}
 800d89e:	bf00      	nop
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	2b0b      	cmp	r3, #11
 800d8b6:	d10a      	bne.n	800d8ce <USBH_HandleSof+0x28>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d005      	beq.n	800d8ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	4798      	blx	r3
  }
}
 800d8ce:	bf00      	nop
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f001 fa75 	bl	800edec <osMessageQueuePut>
#endif
#endif

  return;
 800d902:	bf00      	nop
}
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b083      	sub	sp, #12
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d91a:	bf00      	nop
}
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr

0800d926 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d95a:	2300      	movs	r3, #0
 800d95c:	2200      	movs	r2, #0
 800d95e:	f001 fa45 	bl	800edec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f004 fc9a 	bl	80122c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	791b      	ldrb	r3, [r3, #4]
 800d996:	4619      	mov	r1, r3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fed1 	bl	800e740 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	795b      	ldrb	r3, [r3, #5]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fecb 	bl	800e740 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9be:	2300      	movs	r3, #0
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f001 fa13 	bl	800edec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f001 fa73 	bl	800eed4 <osMessageQueueGet>
 800d9ee:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1f0      	bne.n	800d9d8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff faa6 	bl	800cf48 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d9fc:	e7ec      	b.n	800d9d8 <USBH_Process_OS+0x8>

0800d9fe <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da1a:	2300      	movs	r3, #0
 800da1c:	2200      	movs	r2, #0
 800da1e:	f001 f9e5 	bl	800edec <osMessageQueuePut>
#endif

  return USBH_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af02      	add	r7, sp, #8
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800da3e:	78fb      	ldrb	r3, [r7, #3]
 800da40:	b29b      	uxth	r3, r3
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	4613      	mov	r3, r2
 800da46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da4a:	2100      	movs	r1, #0
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f864 	bl	800db1a <USBH_GetDescriptor>
 800da52:	4603      	mov	r3, r0
 800da54:	73fb      	strb	r3, [r7, #15]
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da68:	78fa      	ldrb	r2, [r7, #3]
 800da6a:	b292      	uxth	r2, r2
 800da6c:	4619      	mov	r1, r3
 800da6e:	f000 f918 	bl	800dca2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800da72:	7bfb      	ldrb	r3, [r7, #15]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af02      	add	r7, sp, #8
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	331c      	adds	r3, #28
 800da8c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800da8e:	887b      	ldrh	r3, [r7, #2]
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da98:	2100      	movs	r1, #0
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f83d 	bl	800db1a <USBH_GetDescriptor>
 800daa0:	4603      	mov	r3, r0
 800daa2:	72fb      	strb	r3, [r7, #11]
 800daa4:	7afb      	ldrb	r3, [r7, #11]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d107      	bne.n	800daba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dab0:	887a      	ldrh	r2, [r7, #2]
 800dab2:	68f9      	ldr	r1, [r7, #12]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 f964 	bl	800dd82 <USBH_ParseCfgDesc>
  }

  return status;
 800daba:	7afb      	ldrb	r3, [r7, #11]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af02      	add	r7, sp, #8
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	607a      	str	r2, [r7, #4]
 800dace:	461a      	mov	r2, r3
 800dad0:	460b      	mov	r3, r1
 800dad2:	72fb      	strb	r3, [r7, #11]
 800dad4:	4613      	mov	r3, r2
 800dad6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800dad8:	7afb      	ldrb	r3, [r7, #11]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dae0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dae8:	893b      	ldrh	r3, [r7, #8]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	460b      	mov	r3, r1
 800daee:	2100      	movs	r1, #0
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f000 f812 	bl	800db1a <USBH_GetDescriptor>
 800daf6:	4603      	mov	r3, r0
 800daf8:	75fb      	strb	r3, [r7, #23]
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d107      	bne.n	800db10 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db06:	893a      	ldrh	r2, [r7, #8]
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fa37 	bl	800df7e <USBH_ParseStringDesc>
  }

  return status;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3718      	adds	r7, #24
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	60f8      	str	r0, [r7, #12]
 800db22:	607b      	str	r3, [r7, #4]
 800db24:	460b      	mov	r3, r1
 800db26:	72fb      	strb	r3, [r7, #11]
 800db28:	4613      	mov	r3, r2
 800db2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	789b      	ldrb	r3, [r3, #2]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d11c      	bne.n	800db6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800db34:	7afb      	ldrb	r3, [r7, #11]
 800db36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2206      	movs	r2, #6
 800db44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	893a      	ldrh	r2, [r7, #8]
 800db4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800db4c:	893b      	ldrh	r3, [r7, #8]
 800db4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db56:	d104      	bne.n	800db62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f240 4209 	movw	r2, #1033	; 0x409
 800db5e:	829a      	strh	r2, [r3, #20]
 800db60:	e002      	b.n	800db68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	8b3a      	ldrh	r2, [r7, #24]
 800db6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800db6e:	8b3b      	ldrh	r3, [r7, #24]
 800db70:	461a      	mov	r2, r3
 800db72:	6879      	ldr	r1, [r7, #4]
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 fa50 	bl	800e01a <USBH_CtlReq>
 800db7a:	4603      	mov	r3, r0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	789b      	ldrb	r3, [r3, #2]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d10f      	bne.n	800dbb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2205      	movs	r2, #5
 800dba2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dba4:	78fb      	ldrb	r3, [r7, #3]
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fa2c 	bl	800e01a <USBH_CtlReq>
 800dbc2:	4603      	mov	r3, r0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	789b      	ldrb	r3, [r3, #2]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d10e      	bne.n	800dbfe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2209      	movs	r2, #9
 800dbea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	887a      	ldrh	r2, [r7, #2]
 800dbf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2100      	movs	r1, #0
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa09 	bl	800e01a <USBH_CtlReq>
 800dc08:	4603      	mov	r3, r0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	789b      	ldrb	r3, [r3, #2]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d10f      	bne.n	800dc46 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2203      	movs	r2, #3
 800dc30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dc32:	78fb      	ldrb	r3, [r7, #3]
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc46:	2200      	movs	r2, #0
 800dc48:	2100      	movs	r1, #0
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f9e5 	bl	800e01a <USBH_CtlReq>
 800dc50:	4603      	mov	r3, r0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	460b      	mov	r3, r1
 800dc64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	789b      	ldrb	r3, [r3, #2]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d10f      	bne.n	800dc8e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2202      	movs	r2, #2
 800dc72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dc80:	78fb      	ldrb	r3, [r7, #3]
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2100      	movs	r1, #0
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f9c1 	bl	800e01a <USBH_CtlReq>
 800dc98:	4603      	mov	r3, r0
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b085      	sub	sp, #20
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	60f8      	str	r0, [r7, #12]
 800dcaa:	60b9      	str	r1, [r7, #8]
 800dcac:	4613      	mov	r3, r2
 800dcae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	785a      	ldrb	r2, [r3, #1]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	3302      	adds	r3, #2
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	3303      	adds	r3, #3
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	021b      	lsls	r3, r3, #8
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	791a      	ldrb	r2, [r3, #4]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	795a      	ldrb	r2, [r3, #5]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	799a      	ldrb	r2, [r3, #6]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	79da      	ldrb	r2, [r3, #7]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dcfc:	88fb      	ldrh	r3, [r7, #6]
 800dcfe:	2b08      	cmp	r3, #8
 800dd00:	d939      	bls.n	800dd76 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	3308      	adds	r3, #8
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	3309      	adds	r3, #9
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	4313      	orrs	r3, r2
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	330a      	adds	r3, #10
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	330b      	adds	r3, #11
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	4313      	orrs	r3, r2
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	330c      	adds	r3, #12
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	330d      	adds	r3, #13
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	021b      	lsls	r3, r3, #8
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	7b9a      	ldrb	r2, [r3, #14]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	7bda      	ldrb	r2, [r3, #15]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	7c1a      	ldrb	r2, [r3, #16]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	7c5a      	ldrb	r2, [r3, #17]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	745a      	strb	r2, [r3, #17]
  }
}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b08a      	sub	sp, #40	; 0x28
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	60f8      	str	r0, [r7, #12]
 800dd8a:	60b9      	str	r1, [r7, #8]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	781a      	ldrb	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	785a      	ldrb	r2, [r3, #1]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	3302      	adds	r3, #2
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	3303      	adds	r3, #3
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	021b      	lsls	r3, r3, #8
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	791a      	ldrb	r2, [r3, #4]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	795a      	ldrb	r2, [r3, #5]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	799a      	ldrb	r2, [r3, #6]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	79da      	ldrb	r2, [r3, #7]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	7a1a      	ldrb	r2, [r3, #8]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	2b09      	cmp	r3, #9
 800ddfc:	d95f      	bls.n	800debe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ddfe:	2309      	movs	r3, #9
 800de00:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800de02:	2300      	movs	r3, #0
 800de04:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800de06:	e051      	b.n	800deac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de08:	f107 0316 	add.w	r3, r7, #22
 800de0c:	4619      	mov	r1, r3
 800de0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de10:	f000 f8e8 	bl	800dfe4 <USBH_GetNextDesc>
 800de14:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800de16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de18:	785b      	ldrb	r3, [r3, #1]
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	d146      	bne.n	800deac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800de1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de22:	221a      	movs	r2, #26
 800de24:	fb02 f303 	mul.w	r3, r2, r3
 800de28:	3308      	adds	r3, #8
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	3302      	adds	r3, #2
 800de30:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800de32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de34:	69f8      	ldr	r0, [r7, #28]
 800de36:	f000 f846 	bl	800dec6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800de40:	2300      	movs	r3, #0
 800de42:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de44:	e022      	b.n	800de8c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de46:	f107 0316 	add.w	r3, r7, #22
 800de4a:	4619      	mov	r1, r3
 800de4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de4e:	f000 f8c9 	bl	800dfe4 <USBH_GetNextDesc>
 800de52:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	785b      	ldrb	r3, [r3, #1]
 800de58:	2b05      	cmp	r3, #5
 800de5a:	d117      	bne.n	800de8c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800de5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800de64:	3201      	adds	r2, #1
 800de66:	00d2      	lsls	r2, r2, #3
 800de68:	211a      	movs	r1, #26
 800de6a:	fb01 f303 	mul.w	r3, r1, r3
 800de6e:	4413      	add	r3, r2
 800de70:	3308      	adds	r3, #8
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	4413      	add	r3, r2
 800de76:	3304      	adds	r3, #4
 800de78:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800de7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de7c:	69b8      	ldr	r0, [r7, #24]
 800de7e:	f000 f851 	bl	800df24 <USBH_ParseEPDesc>
            ep_ix++;
 800de82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800de86:	3301      	adds	r3, #1
 800de88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	791b      	ldrb	r3, [r3, #4]
 800de90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800de94:	429a      	cmp	r2, r3
 800de96:	d204      	bcs.n	800dea2 <USBH_ParseCfgDesc+0x120>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	885a      	ldrh	r2, [r3, #2]
 800de9c:	8afb      	ldrh	r3, [r7, #22]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d8d1      	bhi.n	800de46 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800dea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dea6:	3301      	adds	r3, #1
 800dea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800deac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d804      	bhi.n	800debe <USBH_ParseCfgDesc+0x13c>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	885a      	ldrh	r2, [r3, #2]
 800deb8:	8afb      	ldrh	r3, [r7, #22]
 800deba:	429a      	cmp	r2, r3
 800debc:	d8a4      	bhi.n	800de08 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800debe:	bf00      	nop
 800dec0:	3728      	adds	r7, #40	; 0x28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b083      	sub	sp, #12
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	781a      	ldrb	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	785a      	ldrb	r2, [r3, #1]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	789a      	ldrb	r2, [r3, #2]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	78da      	ldrb	r2, [r3, #3]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	791a      	ldrb	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	795a      	ldrb	r2, [r3, #5]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	799a      	ldrb	r2, [r3, #6]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	79da      	ldrb	r2, [r3, #7]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	7a1a      	ldrb	r2, [r3, #8]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	721a      	strb	r2, [r3, #8]
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	785a      	ldrb	r2, [r3, #1]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	789a      	ldrb	r2, [r3, #2]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	78da      	ldrb	r2, [r3, #3]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	3304      	adds	r3, #4
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	b29a      	uxth	r2, r3
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	3305      	adds	r3, #5
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	021b      	lsls	r3, r3, #8
 800df60:	b29b      	uxth	r3, r3
 800df62:	4313      	orrs	r3, r2
 800df64:	b29a      	uxth	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	799a      	ldrb	r2, [r3, #6]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	719a      	strb	r2, [r3, #6]
}
 800df72:	bf00      	nop
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800df7e:	b480      	push	{r7}
 800df80:	b087      	sub	sp, #28
 800df82:	af00      	add	r7, sp, #0
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	4613      	mov	r3, r2
 800df8a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	3301      	adds	r3, #1
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b03      	cmp	r3, #3
 800df94:	d120      	bne.n	800dfd8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	1e9a      	subs	r2, r3, #2
 800df9c:	88fb      	ldrh	r3, [r7, #6]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	bf28      	it	cs
 800dfa2:	4613      	movcs	r3, r2
 800dfa4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3302      	adds	r3, #2
 800dfaa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dfac:	2300      	movs	r3, #0
 800dfae:	82fb      	strh	r3, [r7, #22]
 800dfb0:	e00b      	b.n	800dfca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dfb2:	8afb      	ldrh	r3, [r7, #22]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dfc4:	8afb      	ldrh	r3, [r7, #22]
 800dfc6:	3302      	adds	r3, #2
 800dfc8:	82fb      	strh	r3, [r7, #22]
 800dfca:	8afa      	ldrh	r2, [r7, #22]
 800dfcc:	8abb      	ldrh	r3, [r7, #20]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d3ef      	bcc.n	800dfb2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
  }
}
 800dfd8:	bf00      	nop
 800dfda:	371c      	adds	r7, #28
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	881a      	ldrh	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4413      	add	r3, r2
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4413      	add	r3, r2
 800e00a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e00c:	68fb      	ldr	r3, [r7, #12]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b086      	sub	sp, #24
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	4613      	mov	r3, r2
 800e026:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e028:	2301      	movs	r3, #1
 800e02a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	789b      	ldrb	r3, [r3, #2]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d002      	beq.n	800e03a <USBH_CtlReq+0x20>
 800e034:	2b02      	cmp	r3, #2
 800e036:	d01d      	beq.n	800e074 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e038:	e043      	b.n	800e0c2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	88fa      	ldrh	r2, [r7, #6]
 800e044:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2201      	movs	r2, #1
 800e04a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2202      	movs	r2, #2
 800e050:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e052:	2301      	movs	r3, #1
 800e054:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2203      	movs	r2, #3
 800e05a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e06a:	2300      	movs	r3, #0
 800e06c:	2200      	movs	r2, #0
 800e06e:	f000 febd 	bl	800edec <osMessageQueuePut>
      break;
 800e072:	e026      	b.n	800e0c2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f000 f829 	bl	800e0cc <USBH_HandleControl>
 800e07a:	4603      	mov	r3, r0
 800e07c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <USBH_CtlReq+0x70>
 800e084:	7dfb      	ldrb	r3, [r7, #23]
 800e086:	2b03      	cmp	r3, #3
 800e088:	d106      	bne.n	800e098 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2201      	movs	r2, #1
 800e08e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2200      	movs	r2, #0
 800e094:	761a      	strb	r2, [r3, #24]
 800e096:	e005      	b.n	800e0a4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e098:	7dfb      	ldrb	r3, [r7, #23]
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d102      	bne.n	800e0a4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f000 fe96 	bl	800edec <osMessageQueuePut>
      break;
 800e0c0:	bf00      	nop
  }
  return status;
 800e0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af02      	add	r7, sp, #8
 800e0d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7e1b      	ldrb	r3, [r3, #24]
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	2b0a      	cmp	r3, #10
 800e0e4:	f200 822b 	bhi.w	800e53e <USBH_HandleControl+0x472>
 800e0e8:	a201      	add	r2, pc, #4	; (adr r2, 800e0f0 <USBH_HandleControl+0x24>)
 800e0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ee:	bf00      	nop
 800e0f0:	0800e11d 	.word	0x0800e11d
 800e0f4:	0800e137 	.word	0x0800e137
 800e0f8:	0800e1d9 	.word	0x0800e1d9
 800e0fc:	0800e1ff 	.word	0x0800e1ff
 800e100:	0800e28b 	.word	0x0800e28b
 800e104:	0800e2b7 	.word	0x0800e2b7
 800e108:	0800e379 	.word	0x0800e379
 800e10c:	0800e39b 	.word	0x0800e39b
 800e110:	0800e42d 	.word	0x0800e42d
 800e114:	0800e455 	.word	0x0800e455
 800e118:	0800e4e7 	.word	0x0800e4e7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f103 0110 	add.w	r1, r3, #16
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	795b      	ldrb	r3, [r3, #5]
 800e126:	461a      	mov	r2, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fa19 	bl	800e560 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2202      	movs	r2, #2
 800e132:	761a      	strb	r2, [r3, #24]
      break;
 800e134:	e20e      	b.n	800e554 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	795b      	ldrb	r3, [r3, #5]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f004 f9af 	bl	80124a0 <USBH_LL_GetURBState>
 800e142:	4603      	mov	r3, r0
 800e144:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d12c      	bne.n	800e1a6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	7c1b      	ldrb	r3, [r3, #16]
 800e150:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e154:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	8adb      	ldrh	r3, [r3, #22]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00a      	beq.n	800e174 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e15e:	7b7b      	ldrb	r3, [r7, #13]
 800e160:	2b80      	cmp	r3, #128	; 0x80
 800e162:	d103      	bne.n	800e16c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2203      	movs	r2, #3
 800e168:	761a      	strb	r2, [r3, #24]
 800e16a:	e00d      	b.n	800e188 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2205      	movs	r2, #5
 800e170:	761a      	strb	r2, [r3, #24]
 800e172:	e009      	b.n	800e188 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e174:	7b7b      	ldrb	r3, [r7, #13]
 800e176:	2b80      	cmp	r3, #128	; 0x80
 800e178:	d103      	bne.n	800e182 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2209      	movs	r2, #9
 800e17e:	761a      	strb	r2, [r3, #24]
 800e180:	e002      	b.n	800e188 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2207      	movs	r2, #7
 800e186:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2203      	movs	r2, #3
 800e18c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e19c:	2300      	movs	r3, #0
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f000 fe24 	bl	800edec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1a4:	e1cd      	b.n	800e542 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	d003      	beq.n	800e1b4 <USBH_HandleControl+0xe8>
 800e1ac:	7bbb      	ldrb	r3, [r7, #14]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	f040 81c7 	bne.w	800e542 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	220b      	movs	r2, #11
 800e1b8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2203      	movs	r2, #3
 800e1be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f000 fe0b 	bl	800edec <osMessageQueuePut>
      break;
 800e1d6:	e1b4      	b.n	800e542 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6899      	ldr	r1, [r3, #8]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	899a      	ldrh	r2, [r3, #12]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	791b      	ldrb	r3, [r3, #4]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f9f4 	bl	800e5de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2204      	movs	r2, #4
 800e1fa:	761a      	strb	r2, [r3, #24]
      break;
 800e1fc:	e1aa      	b.n	800e554 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	791b      	ldrb	r3, [r3, #4]
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f004 f94b 	bl	80124a0 <USBH_LL_GetURBState>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e20e:	7bbb      	ldrb	r3, [r7, #14]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d110      	bne.n	800e236 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2209      	movs	r2, #9
 800e218:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2203      	movs	r2, #3
 800e21e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e22e:	2300      	movs	r3, #0
 800e230:	2200      	movs	r2, #0
 800e232:	f000 fddb 	bl	800edec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e236:	7bbb      	ldrb	r3, [r7, #14]
 800e238:	2b05      	cmp	r3, #5
 800e23a:	d110      	bne.n	800e25e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e23c:	2303      	movs	r3, #3
 800e23e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2203      	movs	r2, #3
 800e244:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e254:	2300      	movs	r3, #0
 800e256:	2200      	movs	r2, #0
 800e258:	f000 fdc8 	bl	800edec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e25c:	e173      	b.n	800e546 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
 800e260:	2b04      	cmp	r3, #4
 800e262:	f040 8170 	bne.w	800e546 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	220b      	movs	r2, #11
 800e26a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2203      	movs	r2, #3
 800e270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e280:	2300      	movs	r3, #0
 800e282:	2200      	movs	r2, #0
 800e284:	f000 fdb2 	bl	800edec <osMessageQueuePut>
      break;
 800e288:	e15d      	b.n	800e546 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6899      	ldr	r1, [r3, #8]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	899a      	ldrh	r2, [r3, #12]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7958      	ldrb	r0, [r3, #5]
 800e296:	2301      	movs	r3, #1
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4603      	mov	r3, r0
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 f979 	bl	800e594 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2206      	movs	r2, #6
 800e2b2:	761a      	strb	r2, [r3, #24]
      break;
 800e2b4:	e14e      	b.n	800e554 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	795b      	ldrb	r3, [r3, #5]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f004 f8ef 	bl	80124a0 <USBH_LL_GetURBState>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d111      	bne.n	800e2f0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2207      	movs	r2, #7
 800e2d0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2203      	movs	r2, #3
 800e2d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f000 fd7f 	bl	800edec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e2ee:	e12c      	b.n	800e54a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800e2f0:	7bbb      	ldrb	r3, [r7, #14]
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	d113      	bne.n	800e31e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	220c      	movs	r2, #12
 800e2fa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2203      	movs	r2, #3
 800e304:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e314:	2300      	movs	r3, #0
 800e316:	2200      	movs	r2, #0
 800e318:	f000 fd68 	bl	800edec <osMessageQueuePut>
      break;
 800e31c:	e115      	b.n	800e54a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e31e:	7bbb      	ldrb	r3, [r7, #14]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d111      	bne.n	800e348 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2205      	movs	r2, #5
 800e328:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2203      	movs	r2, #3
 800e32e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e33e:	2300      	movs	r3, #0
 800e340:	2200      	movs	r2, #0
 800e342:	f000 fd53 	bl	800edec <osMessageQueuePut>
      break;
 800e346:	e100      	b.n	800e54a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800e348:	7bbb      	ldrb	r3, [r7, #14]
 800e34a:	2b04      	cmp	r3, #4
 800e34c:	f040 80fd 	bne.w	800e54a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	220b      	movs	r2, #11
 800e354:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e356:	2302      	movs	r3, #2
 800e358:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2203      	movs	r2, #3
 800e35e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e36e:	2300      	movs	r3, #0
 800e370:	2200      	movs	r2, #0
 800e372:	f000 fd3b 	bl	800edec <osMessageQueuePut>
      break;
 800e376:	e0e8      	b.n	800e54a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	791b      	ldrb	r3, [r3, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	2100      	movs	r1, #0
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f92c 	bl	800e5de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2208      	movs	r2, #8
 800e396:	761a      	strb	r2, [r3, #24]

      break;
 800e398:	e0dc      	b.n	800e554 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	791b      	ldrb	r3, [r3, #4]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f004 f87d 	bl	80124a0 <USBH_LL_GetURBState>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e3aa:	7bbb      	ldrb	r3, [r7, #14]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d113      	bne.n	800e3d8 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	220d      	movs	r2, #13
 800e3b4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2203      	movs	r2, #3
 800e3be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f000 fd0b 	bl	800edec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e3d6:	e0ba      	b.n	800e54e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d111      	bne.n	800e402 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	220b      	movs	r2, #11
 800e3e2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2203      	movs	r2, #3
 800e3e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f000 fcf6 	bl	800edec <osMessageQueuePut>
      break;
 800e400:	e0a5      	b.n	800e54e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b05      	cmp	r3, #5
 800e406:	f040 80a2 	bne.w	800e54e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e40a:	2303      	movs	r3, #3
 800e40c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2203      	movs	r2, #3
 800e412:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e422:	2300      	movs	r3, #0
 800e424:	2200      	movs	r2, #0
 800e426:	f000 fce1 	bl	800edec <osMessageQueuePut>
      break;
 800e42a:	e090      	b.n	800e54e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	795a      	ldrb	r2, [r3, #5]
 800e430:	2301      	movs	r3, #1
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	4613      	mov	r3, r2
 800e436:	2200      	movs	r2, #0
 800e438:	2100      	movs	r1, #0
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f8aa 	bl	800e594 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e446:	b29a      	uxth	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	220a      	movs	r2, #10
 800e450:	761a      	strb	r2, [r3, #24]
      break;
 800e452:	e07f      	b.n	800e554 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	795b      	ldrb	r3, [r3, #5]
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f004 f820 	bl	80124a0 <USBH_LL_GetURBState>
 800e460:	4603      	mov	r3, r0
 800e462:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e464:	7bbb      	ldrb	r3, [r7, #14]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d113      	bne.n	800e492 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	220d      	movs	r2, #13
 800e472:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2203      	movs	r2, #3
 800e478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e488:	2300      	movs	r3, #0
 800e48a:	2200      	movs	r2, #0
 800e48c:	f000 fcae 	bl	800edec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e490:	e05f      	b.n	800e552 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e492:	7bbb      	ldrb	r3, [r7, #14]
 800e494:	2b02      	cmp	r3, #2
 800e496:	d111      	bne.n	800e4bc <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2209      	movs	r2, #9
 800e49c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2203      	movs	r2, #3
 800e4a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f000 fc99 	bl	800edec <osMessageQueuePut>
      break;
 800e4ba:	e04a      	b.n	800e552 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d147      	bne.n	800e552 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	220b      	movs	r2, #11
 800e4c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2203      	movs	r2, #3
 800e4cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4dc:	2300      	movs	r3, #0
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f000 fc84 	bl	800edec <osMessageQueuePut>
      break;
 800e4e4:	e035      	b.n	800e552 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	7e5b      	ldrb	r3, [r3, #25]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	b2da      	uxtb	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	765a      	strb	r2, [r3, #25]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7e5b      	ldrb	r3, [r3, #25]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d806      	bhi.n	800e508 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e506:	e025      	b.n	800e554 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e50e:	2106      	movs	r1, #6
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	795b      	ldrb	r3, [r3, #5]
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f90d 	bl	800e740 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	791b      	ldrb	r3, [r3, #4]
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f907 	bl	800e740 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e538:	2302      	movs	r3, #2
 800e53a:	73fb      	strb	r3, [r7, #15]
      break;
 800e53c:	e00a      	b.n	800e554 <USBH_HandleControl+0x488>

    default:
      break;
 800e53e:	bf00      	nop
 800e540:	e008      	b.n	800e554 <USBH_HandleControl+0x488>
      break;
 800e542:	bf00      	nop
 800e544:	e006      	b.n	800e554 <USBH_HandleControl+0x488>
      break;
 800e546:	bf00      	nop
 800e548:	e004      	b.n	800e554 <USBH_HandleControl+0x488>
      break;
 800e54a:	bf00      	nop
 800e54c:	e002      	b.n	800e554 <USBH_HandleControl+0x488>
      break;
 800e54e:	bf00      	nop
 800e550:	e000      	b.n	800e554 <USBH_HandleControl+0x488>
      break;
 800e552:	bf00      	nop
  }

  return status;
 800e554:	7bfb      	ldrb	r3, [r7, #15]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop

0800e560 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af04      	add	r7, sp, #16
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	4613      	mov	r3, r2
 800e56c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e56e:	79f9      	ldrb	r1, [r7, #7]
 800e570:	2300      	movs	r3, #0
 800e572:	9303      	str	r3, [sp, #12]
 800e574:	2308      	movs	r3, #8
 800e576:	9302      	str	r3, [sp, #8]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	9301      	str	r3, [sp, #4]
 800e57c:	2300      	movs	r3, #0
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	2300      	movs	r3, #0
 800e582:	2200      	movs	r2, #0
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f003 ff5a 	bl	801243e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b088      	sub	sp, #32
 800e598:	af04      	add	r7, sp, #16
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	80fb      	strh	r3, [r7, #6]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e5b8:	7979      	ldrb	r1, [r7, #5]
 800e5ba:	7e3b      	ldrb	r3, [r7, #24]
 800e5bc:	9303      	str	r3, [sp, #12]
 800e5be:	88fb      	ldrh	r3, [r7, #6]
 800e5c0:	9302      	str	r3, [sp, #8]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f003 ff35 	bl	801243e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b088      	sub	sp, #32
 800e5e2:	af04      	add	r7, sp, #16
 800e5e4:	60f8      	str	r0, [r7, #12]
 800e5e6:	60b9      	str	r1, [r7, #8]
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	80fb      	strh	r3, [r7, #6]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e5f4:	7979      	ldrb	r1, [r7, #5]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	9303      	str	r3, [sp, #12]
 800e5fa:	88fb      	ldrh	r3, [r7, #6]
 800e5fc:	9302      	str	r3, [sp, #8]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	2301      	movs	r3, #1
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	2300      	movs	r3, #0
 800e608:	2201      	movs	r2, #1
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f003 ff17 	bl	801243e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e610:	2300      	movs	r3, #0

}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b088      	sub	sp, #32
 800e61e:	af04      	add	r7, sp, #16
 800e620:	60f8      	str	r0, [r7, #12]
 800e622:	60b9      	str	r1, [r7, #8]
 800e624:	4611      	mov	r1, r2
 800e626:	461a      	mov	r2, r3
 800e628:	460b      	mov	r3, r1
 800e62a:	80fb      	strh	r3, [r7, #6]
 800e62c:	4613      	mov	r3, r2
 800e62e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e63e:	7979      	ldrb	r1, [r7, #5]
 800e640:	7e3b      	ldrb	r3, [r7, #24]
 800e642:	9303      	str	r3, [sp, #12]
 800e644:	88fb      	ldrh	r3, [r7, #6]
 800e646:	9302      	str	r3, [sp, #8]
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	9301      	str	r3, [sp, #4]
 800e64c:	2301      	movs	r3, #1
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	2302      	movs	r3, #2
 800e652:	2200      	movs	r2, #0
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f003 fef2 	bl	801243e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e65a:	2300      	movs	r3, #0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af04      	add	r7, sp, #16
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	4611      	mov	r1, r2
 800e670:	461a      	mov	r2, r3
 800e672:	460b      	mov	r3, r1
 800e674:	80fb      	strh	r3, [r7, #6]
 800e676:	4613      	mov	r3, r2
 800e678:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e67a:	7979      	ldrb	r1, [r7, #5]
 800e67c:	2300      	movs	r3, #0
 800e67e:	9303      	str	r3, [sp, #12]
 800e680:	88fb      	ldrh	r3, [r7, #6]
 800e682:	9302      	str	r3, [sp, #8]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	9301      	str	r3, [sp, #4]
 800e688:	2301      	movs	r3, #1
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	2302      	movs	r3, #2
 800e68e:	2201      	movs	r2, #1
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f003 fed4 	bl	801243e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af04      	add	r7, sp, #16
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	4608      	mov	r0, r1
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	70fb      	strb	r3, [r7, #3]
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	70bb      	strb	r3, [r7, #2]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e6ba:	7878      	ldrb	r0, [r7, #1]
 800e6bc:	78ba      	ldrb	r2, [r7, #2]
 800e6be:	78f9      	ldrb	r1, [r7, #3]
 800e6c0:	8b3b      	ldrh	r3, [r7, #24]
 800e6c2:	9302      	str	r3, [sp, #8]
 800e6c4:	7d3b      	ldrb	r3, [r7, #20]
 800e6c6:	9301      	str	r3, [sp, #4]
 800e6c8:	7c3b      	ldrb	r3, [r7, #16]
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f003 fe67 	bl	80123a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b082      	sub	sp, #8
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e6ea:	78fb      	ldrb	r3, [r7, #3]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f003 fe86 	bl	8012400 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e6f4:	2300      	movs	r3, #0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b084      	sub	sp, #16
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	460b      	mov	r3, r1
 800e708:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f836 	bl	800e77c <USBH_GetFreePipe>
 800e710:	4603      	mov	r3, r0
 800e712:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e714:	89fb      	ldrh	r3, [r7, #14]
 800e716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d00a      	beq.n	800e734 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e71e:	78fa      	ldrb	r2, [r7, #3]
 800e720:	89fb      	ldrh	r3, [r7, #14]
 800e722:	f003 030f 	and.w	r3, r3, #15
 800e726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e72a:	6879      	ldr	r1, [r7, #4]
 800e72c:	33e0      	adds	r3, #224	; 0xe0
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	440b      	add	r3, r1
 800e732:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e734:	89fb      	ldrh	r3, [r7, #14]
 800e736:	b2db      	uxtb	r3, r3
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	460b      	mov	r3, r1
 800e74a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e74c:	78fb      	ldrb	r3, [r7, #3]
 800e74e:	2b0a      	cmp	r3, #10
 800e750:	d80d      	bhi.n	800e76e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e752:	78fb      	ldrb	r3, [r7, #3]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	33e0      	adds	r3, #224	; 0xe0
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4413      	add	r3, r2
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	78fb      	ldrb	r3, [r7, #3]
 800e760:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e764:	6879      	ldr	r1, [r7, #4]
 800e766:	33e0      	adds	r3, #224	; 0xe0
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	440b      	add	r3, r1
 800e76c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e76e:	2300      	movs	r3, #0
}
 800e770:	4618      	mov	r0, r3
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e784:	2300      	movs	r3, #0
 800e786:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e788:	2300      	movs	r3, #0
 800e78a:	73fb      	strb	r3, [r7, #15]
 800e78c:	e00f      	b.n	800e7ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	33e0      	adds	r3, #224	; 0xe0
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d102      	bne.n	800e7a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e7a2:	7bfb      	ldrb	r3, [r7, #15]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	e007      	b.n	800e7b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	73fb      	strb	r3, [r7, #15]
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
 800e7b0:	2b0a      	cmp	r3, #10
 800e7b2:	d9ec      	bls.n	800e78e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e7b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e7c4:	b480      	push	{r7}
 800e7c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e7c8:	bf00      	nop
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7da:	f3ef 8305 	mrs	r3, IPSR
 800e7de:	60bb      	str	r3, [r7, #8]
  return(result);
 800e7e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10f      	bne.n	800e806 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ea:	607b      	str	r3, [r7, #4]
  return(result);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d105      	bne.n	800e7fe <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7f2:	f3ef 8311 	mrs	r3, BASEPRI
 800e7f6:	603b      	str	r3, [r7, #0]
  return(result);
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <osKernelInitialize+0x3a>
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <osKernelInitialize+0x64>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b02      	cmp	r3, #2
 800e804:	d103      	bne.n	800e80e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e806:	f06f 0305 	mvn.w	r3, #5
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e00c      	b.n	800e828 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e80e:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <osKernelInitialize+0x64>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d105      	bne.n	800e822 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e816:	4b08      	ldr	r3, [pc, #32]	; (800e838 <osKernelInitialize+0x64>)
 800e818:	2201      	movs	r2, #1
 800e81a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e81c:	2300      	movs	r3, #0
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	e002      	b.n	800e828 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e822:	f04f 33ff 	mov.w	r3, #4294967295
 800e826:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e828:	68fb      	ldr	r3, [r7, #12]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	200002cc 	.word	0x200002cc

0800e83c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e842:	f3ef 8305 	mrs	r3, IPSR
 800e846:	60bb      	str	r3, [r7, #8]
  return(result);
 800e848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10f      	bne.n	800e86e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e84e:	f3ef 8310 	mrs	r3, PRIMASK
 800e852:	607b      	str	r3, [r7, #4]
  return(result);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d105      	bne.n	800e866 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e85a:	f3ef 8311 	mrs	r3, BASEPRI
 800e85e:	603b      	str	r3, [r7, #0]
  return(result);
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d007      	beq.n	800e876 <osKernelStart+0x3a>
 800e866:	4b0f      	ldr	r3, [pc, #60]	; (800e8a4 <osKernelStart+0x68>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d103      	bne.n	800e876 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e86e:	f06f 0305 	mvn.w	r3, #5
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	e010      	b.n	800e898 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e876:	4b0b      	ldr	r3, [pc, #44]	; (800e8a4 <osKernelStart+0x68>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d109      	bne.n	800e892 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e87e:	f7ff ffa1 	bl	800e7c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e882:	4b08      	ldr	r3, [pc, #32]	; (800e8a4 <osKernelStart+0x68>)
 800e884:	2202      	movs	r2, #2
 800e886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e888:	f001 fdf8 	bl	801047c <vTaskStartScheduler>
      stat = osOK;
 800e88c:	2300      	movs	r3, #0
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	e002      	b.n	800e898 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e892:	f04f 33ff 	mov.w	r3, #4294967295
 800e896:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e898:	68fb      	ldr	r3, [r7, #12]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	200002cc 	.word	0x200002cc

0800e8a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b090      	sub	sp, #64	; 0x40
 800e8ac:	af04      	add	r7, sp, #16
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8b8:	f3ef 8305 	mrs	r3, IPSR
 800e8bc:	61fb      	str	r3, [r7, #28]
  return(result);
 800e8be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f040 808f 	bne.w	800e9e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8d2:	f3ef 8311 	mrs	r3, BASEPRI
 800e8d6:	617b      	str	r3, [r7, #20]
  return(result);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <osThreadNew+0x3e>
 800e8de:	4b44      	ldr	r3, [pc, #272]	; (800e9f0 <osThreadNew+0x148>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d07e      	beq.n	800e9e4 <osThreadNew+0x13c>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d07b      	beq.n	800e9e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e8ec:	2380      	movs	r3, #128	; 0x80
 800e8ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e8f0:	2318      	movs	r3, #24
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d045      	beq.n	800e990 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <osThreadNew+0x6a>
        name = attr->name;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	2b00      	cmp	r3, #0
 800e924:	d008      	beq.n	800e938 <osThreadNew+0x90>
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	2b38      	cmp	r3, #56	; 0x38
 800e92a:	d805      	bhi.n	800e938 <osThreadNew+0x90>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	2b00      	cmp	r3, #0
 800e936:	d001      	beq.n	800e93c <osThreadNew+0x94>
        return (NULL);
 800e938:	2300      	movs	r3, #0
 800e93a:	e054      	b.n	800e9e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	695b      	ldr	r3, [r3, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	695b      	ldr	r3, [r3, #20]
 800e948:	089b      	lsrs	r3, r3, #2
 800e94a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00e      	beq.n	800e972 <osThreadNew+0xca>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	2b5f      	cmp	r3, #95	; 0x5f
 800e95a:	d90a      	bls.n	800e972 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e960:	2b00      	cmp	r3, #0
 800e962:	d006      	beq.n	800e972 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <osThreadNew+0xca>
        mem = 1;
 800e96c:	2301      	movs	r3, #1
 800e96e:	623b      	str	r3, [r7, #32]
 800e970:	e010      	b.n	800e994 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10c      	bne.n	800e994 <osThreadNew+0xec>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d108      	bne.n	800e994 <osThreadNew+0xec>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d104      	bne.n	800e994 <osThreadNew+0xec>
          mem = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	623b      	str	r3, [r7, #32]
 800e98e:	e001      	b.n	800e994 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d110      	bne.n	800e9bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9a2:	9202      	str	r2, [sp, #8]
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f001 fb85 	bl	80100c0 <xTaskCreateStatic>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	613b      	str	r3, [r7, #16]
 800e9ba:	e013      	b.n	800e9e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d110      	bne.n	800e9e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	f107 0310 	add.w	r3, r7, #16
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f001 fbd3 	bl	8010180 <xTaskCreate>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d001      	beq.n	800e9e4 <osThreadNew+0x13c>
          hTask = NULL;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9e4:	693b      	ldr	r3, [r7, #16]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3730      	adds	r7, #48	; 0x30
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	200002cc 	.word	0x200002cc

0800e9f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9fc:	f3ef 8305 	mrs	r3, IPSR
 800ea00:	613b      	str	r3, [r7, #16]
  return(result);
 800ea02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10f      	bne.n	800ea28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea08:	f3ef 8310 	mrs	r3, PRIMASK
 800ea0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d105      	bne.n	800ea20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea14:	f3ef 8311 	mrs	r3, BASEPRI
 800ea18:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d007      	beq.n	800ea30 <osDelay+0x3c>
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <osDelay+0x58>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d103      	bne.n	800ea30 <osDelay+0x3c>
    stat = osErrorISR;
 800ea28:	f06f 0305 	mvn.w	r3, #5
 800ea2c:	617b      	str	r3, [r7, #20]
 800ea2e:	e007      	b.n	800ea40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f001 fce8 	bl	8010410 <vTaskDelay>
    }
  }

  return (stat);
 800ea40:	697b      	ldr	r3, [r7, #20]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200002cc 	.word	0x200002cc

0800ea50 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b08a      	sub	sp, #40	; 0x28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea5c:	f3ef 8305 	mrs	r3, IPSR
 800ea60:	613b      	str	r3, [r7, #16]
  return(result);
 800ea62:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f040 8085 	bne.w	800eb74 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ea6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d105      	bne.n	800ea82 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea76:	f3ef 8311 	mrs	r3, BASEPRI
 800ea7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <osMutexNew+0x3a>
 800ea82:	4b3f      	ldr	r3, [pc, #252]	; (800eb80 <osMutexNew+0x130>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d074      	beq.n	800eb74 <osMutexNew+0x124>
    if (attr != NULL) {
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <osMutexNew+0x48>
      type = attr->attr_bits;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	623b      	str	r3, [r7, #32]
 800ea96:	e001      	b.n	800ea9c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	f003 0301 	and.w	r3, r3, #1
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <osMutexNew+0x5c>
      rmtx = 1U;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	61fb      	str	r3, [r7, #28]
 800eaaa:	e001      	b.n	800eab0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800eaac:	2300      	movs	r3, #0
 800eaae:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800eab0:	6a3b      	ldr	r3, [r7, #32]
 800eab2:	f003 0308 	and.w	r3, r3, #8
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d15c      	bne.n	800eb74 <osMutexNew+0x124>
      mem = -1;
 800eaba:	f04f 33ff 	mov.w	r3, #4294967295
 800eabe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d015      	beq.n	800eaf2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d006      	beq.n	800eadc <osMutexNew+0x8c>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	2b4f      	cmp	r3, #79	; 0x4f
 800ead4:	d902      	bls.n	800eadc <osMutexNew+0x8c>
          mem = 1;
 800ead6:	2301      	movs	r3, #1
 800ead8:	61bb      	str	r3, [r7, #24]
 800eada:	e00c      	b.n	800eaf6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d108      	bne.n	800eaf6 <osMutexNew+0xa6>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d104      	bne.n	800eaf6 <osMutexNew+0xa6>
            mem = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	61bb      	str	r3, [r7, #24]
 800eaf0:	e001      	b.n	800eaf6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d112      	bne.n	800eb22 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d007      	beq.n	800eb12 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	4619      	mov	r1, r3
 800eb08:	2004      	movs	r0, #4
 800eb0a:	f000 fcba 	bl	800f482 <xQueueCreateMutexStatic>
 800eb0e:	6278      	str	r0, [r7, #36]	; 0x24
 800eb10:	e016      	b.n	800eb40 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	4619      	mov	r1, r3
 800eb18:	2001      	movs	r0, #1
 800eb1a:	f000 fcb2 	bl	800f482 <xQueueCreateMutexStatic>
 800eb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800eb20:	e00e      	b.n	800eb40 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10b      	bne.n	800eb40 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d004      	beq.n	800eb38 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800eb2e:	2004      	movs	r0, #4
 800eb30:	f000 fc8f 	bl	800f452 <xQueueCreateMutex>
 800eb34:	6278      	str	r0, [r7, #36]	; 0x24
 800eb36:	e003      	b.n	800eb40 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800eb38:	2001      	movs	r0, #1
 800eb3a:	f000 fc8a 	bl	800f452 <xQueueCreateMutex>
 800eb3e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00c      	beq.n	800eb60 <osMutexNew+0x110>
        if (attr != NULL) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d003      	beq.n	800eb54 <osMutexNew+0x104>
          name = attr->name;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	617b      	str	r3, [r7, #20]
 800eb52:	e001      	b.n	800eb58 <osMutexNew+0x108>
        } else {
          name = NULL;
 800eb54:	2300      	movs	r3, #0
 800eb56:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800eb58:	6979      	ldr	r1, [r7, #20]
 800eb5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb5c:	f001 fa54 	bl	8010008 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d006      	beq.n	800eb74 <osMutexNew+0x124>
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d003      	beq.n	800eb74 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	f043 0301 	orr.w	r3, r3, #1
 800eb72:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3728      	adds	r7, #40	; 0x28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	200002cc 	.word	0x200002cc

0800eb84 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f023 0301 	bic.w	r3, r3, #1
 800eb94:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eba2:	f3ef 8305 	mrs	r3, IPSR
 800eba6:	613b      	str	r3, [r7, #16]
  return(result);
 800eba8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10f      	bne.n	800ebce <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebae:	f3ef 8310 	mrs	r3, PRIMASK
 800ebb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebba:	f3ef 8311 	mrs	r3, BASEPRI
 800ebbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <osMutexAcquire+0x52>
 800ebc6:	4b1d      	ldr	r3, [pc, #116]	; (800ec3c <osMutexAcquire+0xb8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d103      	bne.n	800ebd6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ebce:	f06f 0305 	mvn.w	r3, #5
 800ebd2:	61fb      	str	r3, [r7, #28]
 800ebd4:	e02c      	b.n	800ec30 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d103      	bne.n	800ebe4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ebdc:	f06f 0303 	mvn.w	r3, #3
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	e025      	b.n	800ec30 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d011      	beq.n	800ec0e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ebea:	6839      	ldr	r1, [r7, #0]
 800ebec:	69b8      	ldr	r0, [r7, #24]
 800ebee:	f000 fc98 	bl	800f522 <xQueueTakeMutexRecursive>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d01b      	beq.n	800ec30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ebfe:	f06f 0301 	mvn.w	r3, #1
 800ec02:	61fb      	str	r3, [r7, #28]
 800ec04:	e014      	b.n	800ec30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ec06:	f06f 0302 	mvn.w	r3, #2
 800ec0a:	61fb      	str	r3, [r7, #28]
 800ec0c:	e010      	b.n	800ec30 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	69b8      	ldr	r0, [r7, #24]
 800ec12:	f000 ff3d 	bl	800fa90 <xQueueSemaphoreTake>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d009      	beq.n	800ec30 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ec22:	f06f 0301 	mvn.w	r3, #1
 800ec26:	61fb      	str	r3, [r7, #28]
 800ec28:	e002      	b.n	800ec30 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ec2a:	f06f 0302 	mvn.w	r3, #2
 800ec2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ec30:	69fb      	ldr	r3, [r7, #28]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3720      	adds	r7, #32
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	200002cc 	.word	0x200002cc

0800ec40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f023 0301 	bic.w	r3, r3, #1
 800ec4e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec5c:	f3ef 8305 	mrs	r3, IPSR
 800ec60:	613b      	str	r3, [r7, #16]
  return(result);
 800ec62:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10f      	bne.n	800ec88 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec68:	f3ef 8310 	mrs	r3, PRIMASK
 800ec6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d105      	bne.n	800ec80 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec74:	f3ef 8311 	mrs	r3, BASEPRI
 800ec78:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d007      	beq.n	800ec90 <osMutexRelease+0x50>
 800ec80:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <osMutexRelease+0x9c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d103      	bne.n	800ec90 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ec88:	f06f 0305 	mvn.w	r3, #5
 800ec8c:	61fb      	str	r3, [r7, #28]
 800ec8e:	e01f      	b.n	800ecd0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d103      	bne.n	800ec9e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ec96:	f06f 0303 	mvn.w	r3, #3
 800ec9a:	61fb      	str	r3, [r7, #28]
 800ec9c:	e018      	b.n	800ecd0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d009      	beq.n	800ecb8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eca4:	69b8      	ldr	r0, [r7, #24]
 800eca6:	f000 fc07 	bl	800f4b8 <xQueueGiveMutexRecursive>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d00f      	beq.n	800ecd0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ecb0:	f06f 0302 	mvn.w	r3, #2
 800ecb4:	61fb      	str	r3, [r7, #28]
 800ecb6:	e00b      	b.n	800ecd0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ecb8:	2300      	movs	r3, #0
 800ecba:	2200      	movs	r2, #0
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	69b8      	ldr	r0, [r7, #24]
 800ecc0:	f000 fc66 	bl	800f590 <xQueueGenericSend>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d002      	beq.n	800ecd0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ecca:	f06f 0302 	mvn.w	r3, #2
 800ecce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ecd0:	69fb      	ldr	r3, [r7, #28]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	200002cc 	.word	0x200002cc

0800ece0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08c      	sub	sp, #48	; 0x30
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ecec:	2300      	movs	r3, #0
 800ecee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecf0:	f3ef 8305 	mrs	r3, IPSR
 800ecf4:	61bb      	str	r3, [r7, #24]
  return(result);
 800ecf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d170      	bne.n	800edde <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ed00:	617b      	str	r3, [r7, #20]
  return(result);
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed08:	f3ef 8311 	mrs	r3, BASEPRI
 800ed0c:	613b      	str	r3, [r7, #16]
  return(result);
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <osMessageQueueNew+0x3c>
 800ed14:	4b34      	ldr	r3, [pc, #208]	; (800ede8 <osMessageQueueNew+0x108>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d060      	beq.n	800edde <osMessageQueueNew+0xfe>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d05d      	beq.n	800edde <osMessageQueueNew+0xfe>
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d05a      	beq.n	800edde <osMessageQueueNew+0xfe>
    mem = -1;
 800ed28:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d029      	beq.n	800ed88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d012      	beq.n	800ed62 <osMessageQueueNew+0x82>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	2b4f      	cmp	r3, #79	; 0x4f
 800ed42:	d90e      	bls.n	800ed62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695a      	ldr	r2, [r3, #20]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	68b9      	ldr	r1, [r7, #8]
 800ed54:	fb01 f303 	mul.w	r3, r1, r3
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d302      	bcc.n	800ed62 <osMessageQueueNew+0x82>
        mem = 1;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	623b      	str	r3, [r7, #32]
 800ed60:	e014      	b.n	800ed8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d110      	bne.n	800ed8c <osMessageQueueNew+0xac>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10c      	bne.n	800ed8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d108      	bne.n	800ed8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d104      	bne.n	800ed8c <osMessageQueueNew+0xac>
          mem = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	623b      	str	r3, [r7, #32]
 800ed86:	e001      	b.n	800ed8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d10c      	bne.n	800edac <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691a      	ldr	r2, [r3, #16]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6899      	ldr	r1, [r3, #8]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	460b      	mov	r3, r1
 800eda0:	68b9      	ldr	r1, [r7, #8]
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f000 fa5a 	bl	800f25c <xQueueGenericCreateStatic>
 800eda8:	6278      	str	r0, [r7, #36]	; 0x24
 800edaa:	e008      	b.n	800edbe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800edac:	6a3b      	ldr	r3, [r7, #32]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800edb2:	2200      	movs	r2, #0
 800edb4:	68b9      	ldr	r1, [r7, #8]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f000 facd 	bl	800f356 <xQueueGenericCreate>
 800edbc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00c      	beq.n	800edde <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	61fb      	str	r3, [r7, #28]
 800edd0:	e001      	b.n	800edd6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800edd2:	2300      	movs	r3, #0
 800edd4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800edd6:	69f9      	ldr	r1, [r7, #28]
 800edd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edda:	f001 f915 	bl	8010008 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3728      	adds	r7, #40	; 0x28
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	200002cc 	.word	0x200002cc

0800edec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800edec:	b580      	push	{r7, lr}
 800edee:	b08a      	sub	sp, #40	; 0x28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	4613      	mov	r3, r2
 800edfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee04:	f3ef 8305 	mrs	r3, IPSR
 800ee08:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee0a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10f      	bne.n	800ee30 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee10:	f3ef 8310 	mrs	r3, PRIMASK
 800ee14:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d105      	bne.n	800ee28 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee1c:	f3ef 8311 	mrs	r3, BASEPRI
 800ee20:	617b      	str	r3, [r7, #20]
  return(result);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d02c      	beq.n	800ee82 <osMessageQueuePut+0x96>
 800ee28:	4b28      	ldr	r3, [pc, #160]	; (800eecc <osMessageQueuePut+0xe0>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d128      	bne.n	800ee82 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee30:	6a3b      	ldr	r3, [r7, #32]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d005      	beq.n	800ee42 <osMessageQueuePut+0x56>
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <osMessageQueuePut+0x56>
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ee42:	f06f 0303 	mvn.w	r3, #3
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee48:	e039      	b.n	800eebe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ee4e:	f107 0210 	add.w	r2, r7, #16
 800ee52:	2300      	movs	r3, #0
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	6a38      	ldr	r0, [r7, #32]
 800ee58:	f000 fc9c 	bl	800f794 <xQueueGenericSendFromISR>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d003      	beq.n	800ee6a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ee62:	f06f 0302 	mvn.w	r3, #2
 800ee66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee68:	e029      	b.n	800eebe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d026      	beq.n	800eebe <osMessageQueuePut+0xd2>
 800ee70:	4b17      	ldr	r3, [pc, #92]	; (800eed0 <osMessageQueuePut+0xe4>)
 800ee72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee80:	e01d      	b.n	800eebe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee82:	6a3b      	ldr	r3, [r7, #32]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <osMessageQueuePut+0xa2>
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d103      	bne.n	800ee96 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ee8e:	f06f 0303 	mvn.w	r3, #3
 800ee92:	627b      	str	r3, [r7, #36]	; 0x24
 800ee94:	e014      	b.n	800eec0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee96:	2300      	movs	r3, #0
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	68b9      	ldr	r1, [r7, #8]
 800ee9c:	6a38      	ldr	r0, [r7, #32]
 800ee9e:	f000 fb77 	bl	800f590 <xQueueGenericSend>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d00b      	beq.n	800eec0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800eeae:	f06f 0301 	mvn.w	r3, #1
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
 800eeb4:	e004      	b.n	800eec0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800eeb6:	f06f 0302 	mvn.w	r3, #2
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
 800eebc:	e000      	b.n	800eec0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eebe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3728      	adds	r7, #40	; 0x28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	200002cc 	.word	0x200002cc
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08a      	sub	sp, #40	; 0x28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eee6:	2300      	movs	r3, #0
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeea:	f3ef 8305 	mrs	r3, IPSR
 800eeee:	61fb      	str	r3, [r7, #28]
  return(result);
 800eef0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d10f      	bne.n	800ef16 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eef6:	f3ef 8310 	mrs	r3, PRIMASK
 800eefa:	61bb      	str	r3, [r7, #24]
  return(result);
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d105      	bne.n	800ef0e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef02:	f3ef 8311 	mrs	r3, BASEPRI
 800ef06:	617b      	str	r3, [r7, #20]
  return(result);
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d02c      	beq.n	800ef68 <osMessageQueueGet+0x94>
 800ef0e:	4b28      	ldr	r3, [pc, #160]	; (800efb0 <osMessageQueueGet+0xdc>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d128      	bne.n	800ef68 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d005      	beq.n	800ef28 <osMessageQueueGet+0x54>
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d002      	beq.n	800ef28 <osMessageQueueGet+0x54>
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ef28:	f06f 0303 	mvn.w	r3, #3
 800ef2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef2e:	e038      	b.n	800efa2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ef30:	2300      	movs	r3, #0
 800ef32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ef34:	f107 0310 	add.w	r3, r7, #16
 800ef38:	461a      	mov	r2, r3
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	6a38      	ldr	r0, [r7, #32]
 800ef3e:	f000 feb7 	bl	800fcb0 <xQueueReceiveFromISR>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d003      	beq.n	800ef50 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ef48:	f06f 0302 	mvn.w	r3, #2
 800ef4c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef4e:	e028      	b.n	800efa2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d025      	beq.n	800efa2 <osMessageQueueGet+0xce>
 800ef56:	4b17      	ldr	r3, [pc, #92]	; (800efb4 <osMessageQueueGet+0xe0>)
 800ef58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef66:	e01c      	b.n	800efa2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ef68:	6a3b      	ldr	r3, [r7, #32]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d002      	beq.n	800ef74 <osMessageQueueGet+0xa0>
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d103      	bne.n	800ef7c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ef74:	f06f 0303 	mvn.w	r3, #3
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24
 800ef7a:	e013      	b.n	800efa4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	68b9      	ldr	r1, [r7, #8]
 800ef80:	6a38      	ldr	r0, [r7, #32]
 800ef82:	f000 fca3 	bl	800f8cc <xQueueReceive>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d00b      	beq.n	800efa4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d003      	beq.n	800ef9a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ef92:	f06f 0301 	mvn.w	r3, #1
 800ef96:	627b      	str	r3, [r7, #36]	; 0x24
 800ef98:	e004      	b.n	800efa4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ef9a:	f06f 0302 	mvn.w	r3, #2
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
 800efa0:	e000      	b.n	800efa4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efa2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3728      	adds	r7, #40	; 0x28
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	200002cc 	.word	0x200002cc
 800efb4:	e000ed04 	.word	0xe000ed04

0800efb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800efb8:	b480      	push	{r7}
 800efba:	b085      	sub	sp, #20
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4a07      	ldr	r2, [pc, #28]	; (800efe4 <vApplicationGetIdleTaskMemory+0x2c>)
 800efc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	4a06      	ldr	r2, [pc, #24]	; (800efe8 <vApplicationGetIdleTaskMemory+0x30>)
 800efce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2280      	movs	r2, #128	; 0x80
 800efd4:	601a      	str	r2, [r3, #0]
}
 800efd6:	bf00      	nop
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	200002d0 	.word	0x200002d0
 800efe8:	20000330 	.word	0x20000330

0800efec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4a07      	ldr	r2, [pc, #28]	; (800f018 <vApplicationGetTimerTaskMemory+0x2c>)
 800effc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	4a06      	ldr	r2, [pc, #24]	; (800f01c <vApplicationGetTimerTaskMemory+0x30>)
 800f002:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f00a:	601a      	str	r2, [r3, #0]
}
 800f00c:	bf00      	nop
 800f00e:	3714      	adds	r7, #20
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	20000530 	.word	0x20000530
 800f01c:	20000590 	.word	0x20000590

0800f020 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f103 0208 	add.w	r2, r3, #8
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f04f 32ff 	mov.w	r2, #4294967295
 800f038:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f103 0208 	add.w	r2, r3, #8
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f103 0208 	add.w	r2, r3, #8
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f06e:	bf00      	nop
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	689a      	ldr	r2, [r3, #8]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	601a      	str	r2, [r3, #0]
}
 800f0b6:	bf00      	nop
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0c2:	b480      	push	{r7}
 800f0c4:	b085      	sub	sp, #20
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d8:	d103      	bne.n	800f0e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	e00c      	b.n	800f0fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	e002      	b.n	800f0f0 <vListInsert+0x2e>
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d2f6      	bcs.n	800f0ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	601a      	str	r2, [r3, #0]
}
 800f128:	bf00      	nop
 800f12a:	3714      	adds	r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	6892      	ldr	r2, [r2, #8]
 800f14a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	6852      	ldr	r2, [r2, #4]
 800f154:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d103      	bne.n	800f168 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	689a      	ldr	r2, [r3, #8]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	1e5a      	subs	r2, r3, #1
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10b      	bne.n	800f1b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a0:	b672      	cpsid	i
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	b662      	cpsie	i
 800f1b0:	60bb      	str	r3, [r7, #8]
 800f1b2:	e7fe      	b.n	800f1b2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800f1b4:	f002 fc28 	bl	8011a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1c0:	68f9      	ldr	r1, [r7, #12]
 800f1c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1c4:	fb01 f303 	mul.w	r3, r1, r3
 800f1c8:	441a      	add	r2, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	68f9      	ldr	r1, [r7, #12]
 800f1e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1ea:	fb01 f303 	mul.w	r3, r1, r3
 800f1ee:	441a      	add	r2, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	22ff      	movs	r2, #255	; 0xff
 800f1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	22ff      	movs	r2, #255	; 0xff
 800f200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d114      	bne.n	800f234 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	691b      	ldr	r3, [r3, #16]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d01a      	beq.n	800f248 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3310      	adds	r3, #16
 800f216:	4618      	mov	r0, r3
 800f218:	f001 fbe4 	bl	80109e4 <xTaskRemoveFromEventList>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d012      	beq.n	800f248 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f222:	4b0d      	ldr	r3, [pc, #52]	; (800f258 <xQueueGenericReset+0xd0>)
 800f224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	e009      	b.n	800f248 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3310      	adds	r3, #16
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff fef1 	bl	800f020 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3324      	adds	r3, #36	; 0x24
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff feec 	bl	800f020 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f248:	f002 fc10 	bl	8011a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f24c:	2301      	movs	r3, #1
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	e000ed04 	.word	0xe000ed04

0800f25c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08e      	sub	sp, #56	; 0x38
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10b      	bne.n	800f288 <xQueueGenericCreateStatic+0x2c>
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	b672      	cpsid	i
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	b662      	cpsie	i
 800f284:	62bb      	str	r3, [r7, #40]	; 0x28
 800f286:	e7fe      	b.n	800f286 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10b      	bne.n	800f2a6 <xQueueGenericCreateStatic+0x4a>
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	b672      	cpsid	i
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	b662      	cpsie	i
 800f2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a4:	e7fe      	b.n	800f2a4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <xQueueGenericCreateStatic+0x56>
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <xQueueGenericCreateStatic+0x5a>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e000      	b.n	800f2b8 <xQueueGenericCreateStatic+0x5c>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10b      	bne.n	800f2d4 <xQueueGenericCreateStatic+0x78>
 800f2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c0:	b672      	cpsid	i
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	b662      	cpsie	i
 800f2d0:	623b      	str	r3, [r7, #32]
 800f2d2:	e7fe      	b.n	800f2d2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <xQueueGenericCreateStatic+0x84>
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <xQueueGenericCreateStatic+0x88>
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e000      	b.n	800f2e6 <xQueueGenericCreateStatic+0x8a>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10b      	bne.n	800f302 <xQueueGenericCreateStatic+0xa6>
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	b672      	cpsid	i
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	b662      	cpsie	i
 800f2fe:	61fb      	str	r3, [r7, #28]
 800f300:	e7fe      	b.n	800f300 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f302:	2350      	movs	r3, #80	; 0x50
 800f304:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	2b50      	cmp	r3, #80	; 0x50
 800f30a:	d00b      	beq.n	800f324 <xQueueGenericCreateStatic+0xc8>
 800f30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f310:	b672      	cpsid	i
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	b662      	cpsie	i
 800f320:	61bb      	str	r3, [r7, #24]
 800f322:	e7fe      	b.n	800f322 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f324:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00d      	beq.n	800f34c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	2201      	movs	r2, #1
 800f334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f338:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	4613      	mov	r3, r2
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f000 f846 	bl	800f3d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f34e:	4618      	mov	r0, r3
 800f350:	3730      	adds	r7, #48	; 0x30
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f356:	b580      	push	{r7, lr}
 800f358:	b08a      	sub	sp, #40	; 0x28
 800f35a:	af02      	add	r7, sp, #8
 800f35c:	60f8      	str	r0, [r7, #12]
 800f35e:	60b9      	str	r1, [r7, #8]
 800f360:	4613      	mov	r3, r2
 800f362:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10b      	bne.n	800f382 <xQueueGenericCreate+0x2c>
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	b672      	cpsid	i
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	b662      	cpsie	i
 800f37e:	613b      	str	r3, [r7, #16]
 800f380:	e7fe      	b.n	800f380 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	61fb      	str	r3, [r7, #28]
 800f38c:	e004      	b.n	800f398 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	fb02 f303 	mul.w	r3, r2, r3
 800f396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	3350      	adds	r3, #80	; 0x50
 800f39c:	4618      	mov	r0, r3
 800f39e:	f002 fc55 	bl	8011c4c <pvPortMalloc>
 800f3a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d011      	beq.n	800f3ce <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	3350      	adds	r3, #80	; 0x50
 800f3b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f3bc:	79fa      	ldrb	r2, [r7, #7]
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f000 f805 	bl	800f3d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f3ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3720      	adds	r7, #32
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d103      	bne.n	800f3f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	69ba      	ldr	r2, [r7, #24]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	e002      	b.n	800f3fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f406:	2101      	movs	r1, #1
 800f408:	69b8      	ldr	r0, [r7, #24]
 800f40a:	f7ff febd 	bl	800f188 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	78fa      	ldrb	r2, [r7, #3]
 800f412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f416:	bf00      	nop
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b082      	sub	sp, #8
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00e      	beq.n	800f44a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	2100      	movs	r1, #0
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f8a3 	bl	800f590 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f44a:	bf00      	nop
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f452:	b580      	push	{r7, lr}
 800f454:	b086      	sub	sp, #24
 800f456:	af00      	add	r7, sp, #0
 800f458:	4603      	mov	r3, r0
 800f45a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f45c:	2301      	movs	r3, #1
 800f45e:	617b      	str	r3, [r7, #20]
 800f460:	2300      	movs	r3, #0
 800f462:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	461a      	mov	r2, r3
 800f468:	6939      	ldr	r1, [r7, #16]
 800f46a:	6978      	ldr	r0, [r7, #20]
 800f46c:	f7ff ff73 	bl	800f356 <xQueueGenericCreate>
 800f470:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff ffd3 	bl	800f41e <prvInitialiseMutex>

		return xNewQueue;
 800f478:	68fb      	ldr	r3, [r7, #12]
	}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f482:	b580      	push	{r7, lr}
 800f484:	b088      	sub	sp, #32
 800f486:	af02      	add	r7, sp, #8
 800f488:	4603      	mov	r3, r0
 800f48a:	6039      	str	r1, [r7, #0]
 800f48c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f48e:	2301      	movs	r3, #1
 800f490:	617b      	str	r3, [r7, #20]
 800f492:	2300      	movs	r3, #0
 800f494:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2200      	movs	r2, #0
 800f49e:	6939      	ldr	r1, [r7, #16]
 800f4a0:	6978      	ldr	r0, [r7, #20]
 800f4a2:	f7ff fedb 	bl	800f25c <xQueueGenericCreateStatic>
 800f4a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f7ff ffb8 	bl	800f41e <prvInitialiseMutex>

		return xNewQueue;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
	}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b087      	sub	sp, #28
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10b      	bne.n	800f4e2 <xQueueGiveMutexRecursive+0x2a>
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	b672      	cpsid	i
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	b662      	cpsie	i
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e7fe      	b.n	800f4e0 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	689c      	ldr	r4, [r3, #8]
 800f4e6:	f001 fc3d 	bl	8010d64 <xTaskGetCurrentTaskHandle>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	429c      	cmp	r4, r3
 800f4ee:	d111      	bne.n	800f514 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	1e5a      	subs	r2, r3, #1
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f502:	2300      	movs	r3, #0
 800f504:	2200      	movs	r2, #0
 800f506:	2100      	movs	r1, #0
 800f508:	6938      	ldr	r0, [r7, #16]
 800f50a:	f000 f841 	bl	800f590 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f50e:	2301      	movs	r3, #1
 800f510:	617b      	str	r3, [r7, #20]
 800f512:	e001      	b.n	800f518 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f514:	2300      	movs	r3, #0
 800f516:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f518:	697b      	ldr	r3, [r7, #20]
	}
 800f51a:	4618      	mov	r0, r3
 800f51c:	371c      	adds	r7, #28
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd90      	pop	{r4, r7, pc}

0800f522 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f522:	b590      	push	{r4, r7, lr}
 800f524:	b087      	sub	sp, #28
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
 800f52a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10b      	bne.n	800f54e <xQueueTakeMutexRecursive+0x2c>
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	b672      	cpsid	i
 800f53c:	f383 8811 	msr	BASEPRI, r3
 800f540:	f3bf 8f6f 	isb	sy
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	b662      	cpsie	i
 800f54a:	60fb      	str	r3, [r7, #12]
 800f54c:	e7fe      	b.n	800f54c <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	689c      	ldr	r4, [r3, #8]
 800f552:	f001 fc07 	bl	8010d64 <xTaskGetCurrentTaskHandle>
 800f556:	4603      	mov	r3, r0
 800f558:	429c      	cmp	r4, r3
 800f55a:	d107      	bne.n	800f56c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	1c5a      	adds	r2, r3, #1
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f566:	2301      	movs	r3, #1
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e00c      	b.n	800f586 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6938      	ldr	r0, [r7, #16]
 800f570:	f000 fa8e 	bl	800fa90 <xQueueSemaphoreTake>
 800f574:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d004      	beq.n	800f586 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	1c5a      	adds	r2, r3, #1
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f586:	697b      	ldr	r3, [r7, #20]
	}
 800f588:	4618      	mov	r0, r3
 800f58a:	371c      	adds	r7, #28
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd90      	pop	{r4, r7, pc}

0800f590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08e      	sub	sp, #56	; 0x38
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10b      	bne.n	800f5c4 <xQueueGenericSend+0x34>
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	b672      	cpsid	i
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	b662      	cpsie	i
 800f5c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5c2:	e7fe      	b.n	800f5c2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d103      	bne.n	800f5d2 <xQueueGenericSend+0x42>
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <xQueueGenericSend+0x46>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <xQueueGenericSend+0x48>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10b      	bne.n	800f5f4 <xQueueGenericSend+0x64>
 800f5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e0:	b672      	cpsid	i
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	b662      	cpsie	i
 800f5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f2:	e7fe      	b.n	800f5f2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d103      	bne.n	800f602 <xQueueGenericSend+0x72>
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <xQueueGenericSend+0x76>
 800f602:	2301      	movs	r3, #1
 800f604:	e000      	b.n	800f608 <xQueueGenericSend+0x78>
 800f606:	2300      	movs	r3, #0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d10b      	bne.n	800f624 <xQueueGenericSend+0x94>
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	b672      	cpsid	i
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	b662      	cpsie	i
 800f620:	623b      	str	r3, [r7, #32]
 800f622:	e7fe      	b.n	800f622 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f624:	f001 fbae 	bl	8010d84 <xTaskGetSchedulerState>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d102      	bne.n	800f634 <xQueueGenericSend+0xa4>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <xQueueGenericSend+0xa8>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <xQueueGenericSend+0xaa>
 800f638:	2300      	movs	r3, #0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10b      	bne.n	800f656 <xQueueGenericSend+0xc6>
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	b672      	cpsid	i
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	b662      	cpsie	i
 800f652:	61fb      	str	r3, [r7, #28]
 800f654:	e7fe      	b.n	800f654 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f656:	f002 f9d7 	bl	8011a08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f662:	429a      	cmp	r2, r3
 800f664:	d302      	bcc.n	800f66c <xQueueGenericSend+0xdc>
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d129      	bne.n	800f6c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f66c:	683a      	ldr	r2, [r7, #0]
 800f66e:	68b9      	ldr	r1, [r7, #8]
 800f670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f672:	f000 fbb8 	bl	800fde6 <prvCopyDataToQueue>
 800f676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d010      	beq.n	800f6a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	3324      	adds	r3, #36	; 0x24
 800f684:	4618      	mov	r0, r3
 800f686:	f001 f9ad 	bl	80109e4 <xTaskRemoveFromEventList>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d013      	beq.n	800f6b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f690:	4b3f      	ldr	r3, [pc, #252]	; (800f790 <xQueueGenericSend+0x200>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	e00a      	b.n	800f6b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d007      	beq.n	800f6b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f6a8:	4b39      	ldr	r3, [pc, #228]	; (800f790 <xQueueGenericSend+0x200>)
 800f6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f6b8:	f002 f9d8 	bl	8011a6c <vPortExitCritical>
				return pdPASS;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e063      	b.n	800f788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d103      	bne.n	800f6ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f6c6:	f002 f9d1 	bl	8011a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e05c      	b.n	800f788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d106      	bne.n	800f6e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f6d4:	f107 0314 	add.w	r3, r7, #20
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f001 f9e7 	bl	8010aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6e2:	f002 f9c3 	bl	8011a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6e6:	f000 ff31 	bl	801054c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6ea:	f002 f98d 	bl	8011a08 <vPortEnterCritical>
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6f4:	b25b      	sxtb	r3, r3
 800f6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6fa:	d103      	bne.n	800f704 <xQueueGenericSend+0x174>
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f70a:	b25b      	sxtb	r3, r3
 800f70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f710:	d103      	bne.n	800f71a <xQueueGenericSend+0x18a>
 800f712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f71a:	f002 f9a7 	bl	8011a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f71e:	1d3a      	adds	r2, r7, #4
 800f720:	f107 0314 	add.w	r3, r7, #20
 800f724:	4611      	mov	r1, r2
 800f726:	4618      	mov	r0, r3
 800f728:	f001 f9d6 	bl	8010ad8 <xTaskCheckForTimeOut>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d124      	bne.n	800f77c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f734:	f000 fc4f 	bl	800ffd6 <prvIsQueueFull>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d018      	beq.n	800f770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	3310      	adds	r3, #16
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	4611      	mov	r1, r2
 800f746:	4618      	mov	r0, r3
 800f748:	f001 f8fa 	bl	8010940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f74c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f74e:	f000 fbda 	bl	800ff06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f752:	f000 ff09 	bl	8010568 <xTaskResumeAll>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f47f af7c 	bne.w	800f656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f75e:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <xQueueGenericSend+0x200>)
 800f760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	e772      	b.n	800f656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f772:	f000 fbc8 	bl	800ff06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f776:	f000 fef7 	bl	8010568 <xTaskResumeAll>
 800f77a:	e76c      	b.n	800f656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f77c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f77e:	f000 fbc2 	bl	800ff06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f782:	f000 fef1 	bl	8010568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3738      	adds	r7, #56	; 0x38
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	e000ed04 	.word	0xe000ed04

0800f794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b08e      	sub	sp, #56	; 0x38
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10b      	bne.n	800f7c4 <xQueueGenericSendFromISR+0x30>
 800f7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b0:	b672      	cpsid	i
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	b662      	cpsie	i
 800f7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800f7c2:	e7fe      	b.n	800f7c2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d103      	bne.n	800f7d2 <xQueueGenericSendFromISR+0x3e>
 800f7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <xQueueGenericSendFromISR+0x42>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e000      	b.n	800f7d8 <xQueueGenericSendFromISR+0x44>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10b      	bne.n	800f7f4 <xQueueGenericSendFromISR+0x60>
 800f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e0:	b672      	cpsid	i
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	b662      	cpsie	i
 800f7f0:	623b      	str	r3, [r7, #32]
 800f7f2:	e7fe      	b.n	800f7f2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d103      	bne.n	800f802 <xQueueGenericSendFromISR+0x6e>
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d101      	bne.n	800f806 <xQueueGenericSendFromISR+0x72>
 800f802:	2301      	movs	r3, #1
 800f804:	e000      	b.n	800f808 <xQueueGenericSendFromISR+0x74>
 800f806:	2300      	movs	r3, #0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10b      	bne.n	800f824 <xQueueGenericSendFromISR+0x90>
 800f80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f810:	b672      	cpsid	i
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	b662      	cpsie	i
 800f820:	61fb      	str	r3, [r7, #28]
 800f822:	e7fe      	b.n	800f822 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f824:	f002 f9d0 	bl	8011bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f828:	f3ef 8211 	mrs	r2, BASEPRI
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	b672      	cpsid	i
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	b662      	cpsie	i
 800f840:	61ba      	str	r2, [r7, #24]
 800f842:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f844:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f846:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f850:	429a      	cmp	r2, r3
 800f852:	d302      	bcc.n	800f85a <xQueueGenericSendFromISR+0xc6>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b02      	cmp	r3, #2
 800f858:	d12c      	bne.n	800f8b4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f864:	683a      	ldr	r2, [r7, #0]
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f86a:	f000 fabc 	bl	800fde6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f86e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f876:	d112      	bne.n	800f89e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d016      	beq.n	800f8ae <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	3324      	adds	r3, #36	; 0x24
 800f884:	4618      	mov	r0, r3
 800f886:	f001 f8ad 	bl	80109e4 <xTaskRemoveFromEventList>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d00e      	beq.n	800f8ae <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00b      	beq.n	800f8ae <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2201      	movs	r2, #1
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	e007      	b.n	800f8ae <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f89e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	b25a      	sxtb	r2, r3
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f8b2:	e001      	b.n	800f8b8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3738      	adds	r7, #56	; 0x38
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b08c      	sub	sp, #48	; 0x30
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10b      	bne.n	800f8fe <xQueueReceive+0x32>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ea:	b672      	cpsid	i
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	b662      	cpsie	i
 800f8fa:	623b      	str	r3, [r7, #32]
 800f8fc:	e7fe      	b.n	800f8fc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d103      	bne.n	800f90c <xQueueReceive+0x40>
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d101      	bne.n	800f910 <xQueueReceive+0x44>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e000      	b.n	800f912 <xQueueReceive+0x46>
 800f910:	2300      	movs	r3, #0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d10b      	bne.n	800f92e <xQueueReceive+0x62>
 800f916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91a:	b672      	cpsid	i
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	b662      	cpsie	i
 800f92a:	61fb      	str	r3, [r7, #28]
 800f92c:	e7fe      	b.n	800f92c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f92e:	f001 fa29 	bl	8010d84 <xTaskGetSchedulerState>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d102      	bne.n	800f93e <xQueueReceive+0x72>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d101      	bne.n	800f942 <xQueueReceive+0x76>
 800f93e:	2301      	movs	r3, #1
 800f940:	e000      	b.n	800f944 <xQueueReceive+0x78>
 800f942:	2300      	movs	r3, #0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d10b      	bne.n	800f960 <xQueueReceive+0x94>
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	b672      	cpsid	i
 800f94e:	f383 8811 	msr	BASEPRI, r3
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	b662      	cpsie	i
 800f95c:	61bb      	str	r3, [r7, #24]
 800f95e:	e7fe      	b.n	800f95e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f960:	f002 f852 	bl	8011a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f968:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d01f      	beq.n	800f9b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f970:	68b9      	ldr	r1, [r7, #8]
 800f972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f974:	f000 faa1 	bl	800feba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	1e5a      	subs	r2, r3, #1
 800f97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00f      	beq.n	800f9a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	3310      	adds	r3, #16
 800f98c:	4618      	mov	r0, r3
 800f98e:	f001 f829 	bl	80109e4 <xTaskRemoveFromEventList>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d007      	beq.n	800f9a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f998:	4b3c      	ldr	r3, [pc, #240]	; (800fa8c <xQueueReceive+0x1c0>)
 800f99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	f3bf 8f4f 	dsb	sy
 800f9a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f9a8:	f002 f860 	bl	8011a6c <vPortExitCritical>
				return pdPASS;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e069      	b.n	800fa84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d103      	bne.n	800f9be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9b6:	f002 f859 	bl	8011a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	e062      	b.n	800fa84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9c4:	f107 0310 	add.w	r3, r7, #16
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f001 f86f 	bl	8010aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9d2:	f002 f84b 	bl	8011a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9d6:	f000 fdb9 	bl	801054c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9da:	f002 f815 	bl	8011a08 <vPortEnterCritical>
 800f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9e4:	b25b      	sxtb	r3, r3
 800f9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ea:	d103      	bne.n	800f9f4 <xQueueReceive+0x128>
 800f9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9fa:	b25b      	sxtb	r3, r3
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa00:	d103      	bne.n	800fa0a <xQueueReceive+0x13e>
 800fa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa0a:	f002 f82f 	bl	8011a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa0e:	1d3a      	adds	r2, r7, #4
 800fa10:	f107 0310 	add.w	r3, r7, #16
 800fa14:	4611      	mov	r1, r2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f001 f85e 	bl	8010ad8 <xTaskCheckForTimeOut>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d123      	bne.n	800fa6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa24:	f000 fac1 	bl	800ffaa <prvIsQueueEmpty>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d017      	beq.n	800fa5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa30:	3324      	adds	r3, #36	; 0x24
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	4611      	mov	r1, r2
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 ff82 	bl	8010940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa3e:	f000 fa62 	bl	800ff06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa42:	f000 fd91 	bl	8010568 <xTaskResumeAll>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d189      	bne.n	800f960 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fa4c:	4b0f      	ldr	r3, [pc, #60]	; (800fa8c <xQueueReceive+0x1c0>)
 800fa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa52:	601a      	str	r2, [r3, #0]
 800fa54:	f3bf 8f4f 	dsb	sy
 800fa58:	f3bf 8f6f 	isb	sy
 800fa5c:	e780      	b.n	800f960 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fa5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa60:	f000 fa51 	bl	800ff06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa64:	f000 fd80 	bl	8010568 <xTaskResumeAll>
 800fa68:	e77a      	b.n	800f960 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fa6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa6c:	f000 fa4b 	bl	800ff06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa70:	f000 fd7a 	bl	8010568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fa74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa76:	f000 fa98 	bl	800ffaa <prvIsQueueEmpty>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f43f af6f 	beq.w	800f960 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3730      	adds	r7, #48	; 0x30
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	e000ed04 	.word	0xe000ed04

0800fa90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b08e      	sub	sp, #56	; 0x38
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800faa2:	2300      	movs	r3, #0
 800faa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d10b      	bne.n	800fac4 <xQueueSemaphoreTake+0x34>
 800faac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab0:	b672      	cpsid	i
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	b662      	cpsie	i
 800fac0:	623b      	str	r3, [r7, #32]
 800fac2:	e7fe      	b.n	800fac2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00b      	beq.n	800fae4 <xQueueSemaphoreTake+0x54>
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	b672      	cpsid	i
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	b662      	cpsie	i
 800fae0:	61fb      	str	r3, [r7, #28]
 800fae2:	e7fe      	b.n	800fae2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fae4:	f001 f94e 	bl	8010d84 <xTaskGetSchedulerState>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d102      	bne.n	800faf4 <xQueueSemaphoreTake+0x64>
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <xQueueSemaphoreTake+0x68>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e000      	b.n	800fafa <xQueueSemaphoreTake+0x6a>
 800faf8:	2300      	movs	r3, #0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10b      	bne.n	800fb16 <xQueueSemaphoreTake+0x86>
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	b672      	cpsid	i
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	b662      	cpsie	i
 800fb12:	61bb      	str	r3, [r7, #24]
 800fb14:	e7fe      	b.n	800fb14 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb16:	f001 ff77 	bl	8011a08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d024      	beq.n	800fb70 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	1e5a      	subs	r2, r3, #1
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d104      	bne.n	800fb40 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fb36:	f001 fa9f 	bl	8011078 <pvTaskIncrementMutexHeldCount>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00f      	beq.n	800fb68 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4a:	3310      	adds	r3, #16
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f000 ff49 	bl	80109e4 <xTaskRemoveFromEventList>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d007      	beq.n	800fb68 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb58:	4b54      	ldr	r3, [pc, #336]	; (800fcac <xQueueSemaphoreTake+0x21c>)
 800fb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb68:	f001 ff80 	bl	8011a6c <vPortExitCritical>
				return pdPASS;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	e098      	b.n	800fca2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d112      	bne.n	800fb9c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00b      	beq.n	800fb94 <xQueueSemaphoreTake+0x104>
 800fb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb80:	b672      	cpsid	i
 800fb82:	f383 8811 	msr	BASEPRI, r3
 800fb86:	f3bf 8f6f 	isb	sy
 800fb8a:	f3bf 8f4f 	dsb	sy
 800fb8e:	b662      	cpsie	i
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	e7fe      	b.n	800fb92 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb94:	f001 ff6a 	bl	8011a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	e082      	b.n	800fca2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d106      	bne.n	800fbb0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fba2:	f107 030c 	add.w	r3, r7, #12
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 ff80 	bl	8010aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbac:	2301      	movs	r3, #1
 800fbae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbb0:	f001 ff5c 	bl	8011a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbb4:	f000 fcca 	bl	801054c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbb8:	f001 ff26 	bl	8011a08 <vPortEnterCritical>
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fbc2:	b25b      	sxtb	r3, r3
 800fbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc8:	d103      	bne.n	800fbd2 <xQueueSemaphoreTake+0x142>
 800fbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbd8:	b25b      	sxtb	r3, r3
 800fbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbde:	d103      	bne.n	800fbe8 <xQueueSemaphoreTake+0x158>
 800fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbe8:	f001 ff40 	bl	8011a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbec:	463a      	mov	r2, r7
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f000 ff6f 	bl	8010ad8 <xTaskCheckForTimeOut>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d132      	bne.n	800fc66 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc02:	f000 f9d2 	bl	800ffaa <prvIsQueueEmpty>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d026      	beq.n	800fc5a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d109      	bne.n	800fc28 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fc14:	f001 fef8 	bl	8011a08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f001 f8cf 	bl	8010dc0 <xTaskPriorityInherit>
 800fc22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fc24:	f001 ff22 	bl	8011a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	3324      	adds	r3, #36	; 0x24
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	4611      	mov	r1, r2
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 fe85 	bl	8010940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc38:	f000 f965 	bl	800ff06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc3c:	f000 fc94 	bl	8010568 <xTaskResumeAll>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f47f af67 	bne.w	800fb16 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fc48:	4b18      	ldr	r3, [pc, #96]	; (800fcac <xQueueSemaphoreTake+0x21c>)
 800fc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	e75d      	b.n	800fb16 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc5c:	f000 f953 	bl	800ff06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc60:	f000 fc82 	bl	8010568 <xTaskResumeAll>
 800fc64:	e757      	b.n	800fb16 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc68:	f000 f94d 	bl	800ff06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc6c:	f000 fc7c 	bl	8010568 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc72:	f000 f99a 	bl	800ffaa <prvIsQueueEmpty>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f43f af4c 	beq.w	800fb16 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00d      	beq.n	800fca0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fc84:	f001 fec0 	bl	8011a08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc8a:	f000 f894 	bl	800fdb6 <prvGetDisinheritPriorityAfterTimeout>
 800fc8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc96:	4618      	mov	r0, r3
 800fc98:	f001 f96a 	bl	8010f70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc9c:	f001 fee6 	bl	8011a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3738      	adds	r7, #56	; 0x38
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	e000ed04 	.word	0xe000ed04

0800fcb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08e      	sub	sp, #56	; 0x38
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10b      	bne.n	800fcde <xQueueReceiveFromISR+0x2e>
 800fcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcca:	b672      	cpsid	i
 800fccc:	f383 8811 	msr	BASEPRI, r3
 800fcd0:	f3bf 8f6f 	isb	sy
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	b662      	cpsie	i
 800fcda:	623b      	str	r3, [r7, #32]
 800fcdc:	e7fe      	b.n	800fcdc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d103      	bne.n	800fcec <xQueueReceiveFromISR+0x3c>
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d101      	bne.n	800fcf0 <xQueueReceiveFromISR+0x40>
 800fcec:	2301      	movs	r3, #1
 800fcee:	e000      	b.n	800fcf2 <xQueueReceiveFromISR+0x42>
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10b      	bne.n	800fd0e <xQueueReceiveFromISR+0x5e>
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	b672      	cpsid	i
 800fcfc:	f383 8811 	msr	BASEPRI, r3
 800fd00:	f3bf 8f6f 	isb	sy
 800fd04:	f3bf 8f4f 	dsb	sy
 800fd08:	b662      	cpsie	i
 800fd0a:	61fb      	str	r3, [r7, #28]
 800fd0c:	e7fe      	b.n	800fd0c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd0e:	f001 ff5b 	bl	8011bc8 <vPortValidateInterruptPriority>
	__asm volatile
 800fd12:	f3ef 8211 	mrs	r2, BASEPRI
 800fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1a:	b672      	cpsid	i
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	b662      	cpsie	i
 800fd2a:	61ba      	str	r2, [r7, #24]
 800fd2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fd2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d02f      	beq.n	800fd9e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd48:	68b9      	ldr	r1, [r7, #8]
 800fd4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd4c:	f000 f8b5 	bl	800feba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd52:	1e5a      	subs	r2, r3, #1
 800fd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd60:	d112      	bne.n	800fd88 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d016      	beq.n	800fd98 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	3310      	adds	r3, #16
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f000 fe38 	bl	80109e4 <xTaskRemoveFromEventList>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00e      	beq.n	800fd98 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00b      	beq.n	800fd98 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2201      	movs	r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
 800fd86:	e007      	b.n	800fd98 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	b25a      	sxtb	r2, r3
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd9c:	e001      	b.n	800fda2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	637b      	str	r3, [r7, #52]	; 0x34
 800fda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3738      	adds	r7, #56	; 0x38
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fdb6:	b480      	push	{r7}
 800fdb8:	b085      	sub	sp, #20
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d006      	beq.n	800fdd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fdd0:	60fb      	str	r3, [r7, #12]
 800fdd2:	e001      	b.n	800fdd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
	}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr

0800fde6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b086      	sub	sp, #24
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	60f8      	str	r0, [r7, #12]
 800fdee:	60b9      	str	r1, [r7, #8]
 800fdf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10d      	bne.n	800fe20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d14d      	bne.n	800fea8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f001 f83d 	bl	8010e90 <xTaskPriorityDisinherit>
 800fe16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	609a      	str	r2, [r3, #8]
 800fe1e:	e043      	b.n	800fea8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d119      	bne.n	800fe5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6858      	ldr	r0, [r3, #4]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2e:	461a      	mov	r2, r3
 800fe30:	68b9      	ldr	r1, [r7, #8]
 800fe32:	f002 fe53 	bl	8012adc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3e:	441a      	add	r2, r3
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d32b      	bcc.n	800fea8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	605a      	str	r2, [r3, #4]
 800fe58:	e026      	b.n	800fea8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	68d8      	ldr	r0, [r3, #12]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe62:	461a      	mov	r2, r3
 800fe64:	68b9      	ldr	r1, [r7, #8]
 800fe66:	f002 fe39 	bl	8012adc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	68da      	ldr	r2, [r3, #12]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe72:	425b      	negs	r3, r3
 800fe74:	441a      	add	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	68da      	ldr	r2, [r3, #12]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d207      	bcs.n	800fe96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	689a      	ldr	r2, [r3, #8]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8e:	425b      	negs	r3, r3
 800fe90:	441a      	add	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d105      	bne.n	800fea8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d002      	beq.n	800fea8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800feb0:	697b      	ldr	r3, [r7, #20]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3718      	adds	r7, #24
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b082      	sub	sp, #8
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d018      	beq.n	800fefe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed4:	441a      	add	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	68da      	ldr	r2, [r3, #12]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d303      	bcc.n	800feee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	68d9      	ldr	r1, [r3, #12]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef6:	461a      	mov	r2, r3
 800fef8:	6838      	ldr	r0, [r7, #0]
 800fefa:	f002 fdef 	bl	8012adc <memcpy>
	}
}
 800fefe:	bf00      	nop
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff0e:	f001 fd7b 	bl	8011a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff1a:	e011      	b.n	800ff40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d012      	beq.n	800ff4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	3324      	adds	r3, #36	; 0x24
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fd5b 	bl	80109e4 <xTaskRemoveFromEventList>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d001      	beq.n	800ff38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff34:	f000 fe34 	bl	8010ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dce9      	bgt.n	800ff1c <prvUnlockQueue+0x16>
 800ff48:	e000      	b.n	800ff4c <prvUnlockQueue+0x46>
					break;
 800ff4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	22ff      	movs	r2, #255	; 0xff
 800ff50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ff54:	f001 fd8a 	bl	8011a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff58:	f001 fd56 	bl	8011a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff64:	e011      	b.n	800ff8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	691b      	ldr	r3, [r3, #16]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d012      	beq.n	800ff94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	3310      	adds	r3, #16
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fd36 	bl	80109e4 <xTaskRemoveFromEventList>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff7e:	f000 fe0f 	bl	8010ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
 800ff84:	3b01      	subs	r3, #1
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	dce9      	bgt.n	800ff66 <prvUnlockQueue+0x60>
 800ff92:	e000      	b.n	800ff96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	22ff      	movs	r2, #255	; 0xff
 800ff9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ff9e:	f001 fd65 	bl	8011a6c <vPortExitCritical>
}
 800ffa2:	bf00      	nop
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b084      	sub	sp, #16
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffb2:	f001 fd29 	bl	8011a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d102      	bne.n	800ffc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	e001      	b.n	800ffc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffc8:	f001 fd50 	bl	8011a6c <vPortExitCritical>

	return xReturn;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b084      	sub	sp, #16
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ffde:	f001 fd13 	bl	8011a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d102      	bne.n	800fff4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffee:	2301      	movs	r3, #1
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	e001      	b.n	800fff8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fff4:	2300      	movs	r3, #0
 800fff6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fff8:	f001 fd38 	bl	8011a6c <vPortExitCritical>

	return xReturn;
 800fffc:	68fb      	ldr	r3, [r7, #12]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010012:	2300      	movs	r3, #0
 8010014:	60fb      	str	r3, [r7, #12]
 8010016:	e014      	b.n	8010042 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010018:	4a0e      	ldr	r2, [pc, #56]	; (8010054 <vQueueAddToRegistry+0x4c>)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10b      	bne.n	801003c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010024:	490b      	ldr	r1, [pc, #44]	; (8010054 <vQueueAddToRegistry+0x4c>)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801002e:	4a09      	ldr	r2, [pc, #36]	; (8010054 <vQueueAddToRegistry+0x4c>)
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	4413      	add	r3, r2
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801003a:	e005      	b.n	8010048 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	3301      	adds	r3, #1
 8010040:	60fb      	str	r3, [r7, #12]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2b07      	cmp	r3, #7
 8010046:	d9e7      	bls.n	8010018 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	2000b134 	.word	0x2000b134

08010058 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010068:	f001 fcce 	bl	8011a08 <vPortEnterCritical>
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010072:	b25b      	sxtb	r3, r3
 8010074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010078:	d103      	bne.n	8010082 <vQueueWaitForMessageRestricted+0x2a>
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010088:	b25b      	sxtb	r3, r3
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008e:	d103      	bne.n	8010098 <vQueueWaitForMessageRestricted+0x40>
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010098:	f001 fce8 	bl	8011a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	3324      	adds	r3, #36	; 0x24
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	68b9      	ldr	r1, [r7, #8]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 fc6d 	bl	801098c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80100b2:	6978      	ldr	r0, [r7, #20]
 80100b4:	f7ff ff27 	bl	800ff06 <prvUnlockQueue>
	}
 80100b8:	bf00      	nop
 80100ba:	3718      	adds	r7, #24
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08e      	sub	sp, #56	; 0x38
 80100c4:	af04      	add	r7, sp, #16
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
 80100cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80100ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10b      	bne.n	80100ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	b672      	cpsid	i
 80100da:	f383 8811 	msr	BASEPRI, r3
 80100de:	f3bf 8f6f 	isb	sy
 80100e2:	f3bf 8f4f 	dsb	sy
 80100e6:	b662      	cpsie	i
 80100e8:	623b      	str	r3, [r7, #32]
 80100ea:	e7fe      	b.n	80100ea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10b      	bne.n	801010a <xTaskCreateStatic+0x4a>
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	b672      	cpsid	i
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	b662      	cpsie	i
 8010106:	61fb      	str	r3, [r7, #28]
 8010108:	e7fe      	b.n	8010108 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801010a:	2360      	movs	r3, #96	; 0x60
 801010c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	2b60      	cmp	r3, #96	; 0x60
 8010112:	d00b      	beq.n	801012c <xTaskCreateStatic+0x6c>
 8010114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010118:	b672      	cpsid	i
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	b662      	cpsie	i
 8010128:	61bb      	str	r3, [r7, #24]
 801012a:	e7fe      	b.n	801012a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801012c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	2b00      	cmp	r3, #0
 8010132:	d01e      	beq.n	8010172 <xTaskCreateStatic+0xb2>
 8010134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010136:	2b00      	cmp	r3, #0
 8010138:	d01b      	beq.n	8010172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010142:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	2202      	movs	r2, #2
 8010148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801014c:	2300      	movs	r3, #0
 801014e:	9303      	str	r3, [sp, #12]
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	9302      	str	r3, [sp, #8]
 8010154:	f107 0314 	add.w	r3, r7, #20
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	9300      	str	r3, [sp, #0]
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	68b9      	ldr	r1, [r7, #8]
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f000 f850 	bl	801020a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801016a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801016c:	f000 f8e0 	bl	8010330 <prvAddNewTaskToReadyList>
 8010170:	e001      	b.n	8010176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010172:	2300      	movs	r3, #0
 8010174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010176:	697b      	ldr	r3, [r7, #20]
	}
 8010178:	4618      	mov	r0, r3
 801017a:	3728      	adds	r7, #40	; 0x28
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08c      	sub	sp, #48	; 0x30
 8010184:	af04      	add	r7, sp, #16
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	4613      	mov	r3, r2
 801018e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4618      	mov	r0, r3
 8010196:	f001 fd59 	bl	8011c4c <pvPortMalloc>
 801019a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00e      	beq.n	80101c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80101a2:	2060      	movs	r0, #96	; 0x60
 80101a4:	f001 fd52 	bl	8011c4c <pvPortMalloc>
 80101a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d003      	beq.n	80101b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	631a      	str	r2, [r3, #48]	; 0x30
 80101b6:	e005      	b.n	80101c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80101b8:	6978      	ldr	r0, [r7, #20]
 80101ba:	f001 fe13 	bl	8011de4 <vPortFree>
 80101be:	e001      	b.n	80101c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80101c0:	2300      	movs	r3, #0
 80101c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d017      	beq.n	80101fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80101d2:	88fa      	ldrh	r2, [r7, #6]
 80101d4:	2300      	movs	r3, #0
 80101d6:	9303      	str	r3, [sp, #12]
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	9302      	str	r3, [sp, #8]
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	68b9      	ldr	r1, [r7, #8]
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f000 f80e 	bl	801020a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101ee:	69f8      	ldr	r0, [r7, #28]
 80101f0:	f000 f89e 	bl	8010330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80101f4:	2301      	movs	r3, #1
 80101f6:	61bb      	str	r3, [r7, #24]
 80101f8:	e002      	b.n	8010200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80101fa:	f04f 33ff 	mov.w	r3, #4294967295
 80101fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010200:	69bb      	ldr	r3, [r7, #24]
	}
 8010202:	4618      	mov	r0, r3
 8010204:	3720      	adds	r7, #32
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b088      	sub	sp, #32
 801020e:	af00      	add	r7, sp, #0
 8010210:	60f8      	str	r0, [r7, #12]
 8010212:	60b9      	str	r1, [r7, #8]
 8010214:	607a      	str	r2, [r7, #4]
 8010216:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	461a      	mov	r2, r3
 8010222:	21a5      	movs	r1, #165	; 0xa5
 8010224:	f002 fc65 	bl	8012af2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010232:	440b      	add	r3, r1
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	f023 0307 	bic.w	r3, r3, #7
 8010240:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	f003 0307 	and.w	r3, r3, #7
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00b      	beq.n	8010264 <prvInitialiseNewTask+0x5a>
 801024c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010250:	b672      	cpsid	i
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	b662      	cpsie	i
 8010260:	617b      	str	r3, [r7, #20]
 8010262:	e7fe      	b.n	8010262 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d01f      	beq.n	80102aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801026a:	2300      	movs	r3, #0
 801026c:	61fb      	str	r3, [r7, #28]
 801026e:	e012      	b.n	8010296 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	4413      	add	r3, r2
 8010276:	7819      	ldrb	r1, [r3, #0]
 8010278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	4413      	add	r3, r2
 801027e:	3334      	adds	r3, #52	; 0x34
 8010280:	460a      	mov	r2, r1
 8010282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	4413      	add	r3, r2
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d006      	beq.n	801029e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	3301      	adds	r3, #1
 8010294:	61fb      	str	r3, [r7, #28]
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	2b0f      	cmp	r3, #15
 801029a:	d9e9      	bls.n	8010270 <prvInitialiseNewTask+0x66>
 801029c:	e000      	b.n	80102a0 <prvInitialiseNewTask+0x96>
			{
				break;
 801029e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102a8:	e003      	b.n	80102b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	2200      	movs	r2, #0
 80102ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	2b37      	cmp	r3, #55	; 0x37
 80102b6:	d901      	bls.n	80102bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80102b8:	2337      	movs	r3, #55	; 0x37
 80102ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80102c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ca:	2200      	movs	r2, #0
 80102cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	3304      	adds	r3, #4
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fec4 	bl	800f060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80102d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102da:	3318      	adds	r3, #24
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe febf 	bl	800f060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80102e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80102f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fa:	2200      	movs	r2, #0
 80102fc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	2200      	movs	r2, #0
 8010302:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010306:	2200      	movs	r2, #0
 8010308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	68f9      	ldr	r1, [r7, #12]
 8010310:	69b8      	ldr	r0, [r7, #24]
 8010312:	f001 fa6d 	bl	80117f0 <pxPortInitialiseStack>
 8010316:	4602      	mov	r2, r0
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010326:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010328:	bf00      	nop
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010338:	f001 fb66 	bl	8011a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801033c:	4b2d      	ldr	r3, [pc, #180]	; (80103f4 <prvAddNewTaskToReadyList+0xc4>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	3301      	adds	r3, #1
 8010342:	4a2c      	ldr	r2, [pc, #176]	; (80103f4 <prvAddNewTaskToReadyList+0xc4>)
 8010344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010346:	4b2c      	ldr	r3, [pc, #176]	; (80103f8 <prvAddNewTaskToReadyList+0xc8>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d109      	bne.n	8010362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801034e:	4a2a      	ldr	r2, [pc, #168]	; (80103f8 <prvAddNewTaskToReadyList+0xc8>)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010354:	4b27      	ldr	r3, [pc, #156]	; (80103f4 <prvAddNewTaskToReadyList+0xc4>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d110      	bne.n	801037e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801035c:	f000 fc46 	bl	8010bec <prvInitialiseTaskLists>
 8010360:	e00d      	b.n	801037e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010362:	4b26      	ldr	r3, [pc, #152]	; (80103fc <prvAddNewTaskToReadyList+0xcc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d109      	bne.n	801037e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801036a:	4b23      	ldr	r3, [pc, #140]	; (80103f8 <prvAddNewTaskToReadyList+0xc8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010374:	429a      	cmp	r2, r3
 8010376:	d802      	bhi.n	801037e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010378:	4a1f      	ldr	r2, [pc, #124]	; (80103f8 <prvAddNewTaskToReadyList+0xc8>)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801037e:	4b20      	ldr	r3, [pc, #128]	; (8010400 <prvAddNewTaskToReadyList+0xd0>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	3301      	adds	r3, #1
 8010384:	4a1e      	ldr	r2, [pc, #120]	; (8010400 <prvAddNewTaskToReadyList+0xd0>)
 8010386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010388:	4b1d      	ldr	r3, [pc, #116]	; (8010400 <prvAddNewTaskToReadyList+0xd0>)
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010394:	4b1b      	ldr	r3, [pc, #108]	; (8010404 <prvAddNewTaskToReadyList+0xd4>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	429a      	cmp	r2, r3
 801039a:	d903      	bls.n	80103a4 <prvAddNewTaskToReadyList+0x74>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a0:	4a18      	ldr	r2, [pc, #96]	; (8010404 <prvAddNewTaskToReadyList+0xd4>)
 80103a2:	6013      	str	r3, [r2, #0]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a8:	4613      	mov	r3, r2
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	4413      	add	r3, r2
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	4a15      	ldr	r2, [pc, #84]	; (8010408 <prvAddNewTaskToReadyList+0xd8>)
 80103b2:	441a      	add	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	3304      	adds	r3, #4
 80103b8:	4619      	mov	r1, r3
 80103ba:	4610      	mov	r0, r2
 80103bc:	f7fe fe5d 	bl	800f07a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103c0:	f001 fb54 	bl	8011a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80103c4:	4b0d      	ldr	r3, [pc, #52]	; (80103fc <prvAddNewTaskToReadyList+0xcc>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00e      	beq.n	80103ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <prvAddNewTaskToReadyList+0xc8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d207      	bcs.n	80103ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80103da:	4b0c      	ldr	r3, [pc, #48]	; (801040c <prvAddNewTaskToReadyList+0xdc>)
 80103dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	20000e64 	.word	0x20000e64
 80103f8:	20000990 	.word	0x20000990
 80103fc:	20000e70 	.word	0x20000e70
 8010400:	20000e80 	.word	0x20000e80
 8010404:	20000e6c 	.word	0x20000e6c
 8010408:	20000994 	.word	0x20000994
 801040c:	e000ed04 	.word	0xe000ed04

08010410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010418:	2300      	movs	r3, #0
 801041a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d018      	beq.n	8010454 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010422:	4b14      	ldr	r3, [pc, #80]	; (8010474 <vTaskDelay+0x64>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00b      	beq.n	8010442 <vTaskDelay+0x32>
 801042a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042e:	b672      	cpsid	i
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	b662      	cpsie	i
 801043e:	60bb      	str	r3, [r7, #8]
 8010440:	e7fe      	b.n	8010440 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010442:	f000 f883 	bl	801054c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010446:	2100      	movs	r1, #0
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fe29 	bl	80110a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801044e:	f000 f88b 	bl	8010568 <xTaskResumeAll>
 8010452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d107      	bne.n	801046a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801045a:	4b07      	ldr	r3, [pc, #28]	; (8010478 <vTaskDelay+0x68>)
 801045c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801046a:	bf00      	nop
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	20000e8c 	.word	0x20000e8c
 8010478:	e000ed04 	.word	0xe000ed04

0801047c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08a      	sub	sp, #40	; 0x28
 8010480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010482:	2300      	movs	r3, #0
 8010484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801048a:	463a      	mov	r2, r7
 801048c:	1d39      	adds	r1, r7, #4
 801048e:	f107 0308 	add.w	r3, r7, #8
 8010492:	4618      	mov	r0, r3
 8010494:	f7fe fd90 	bl	800efb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	9202      	str	r2, [sp, #8]
 80104a0:	9301      	str	r3, [sp, #4]
 80104a2:	2300      	movs	r3, #0
 80104a4:	9300      	str	r3, [sp, #0]
 80104a6:	2300      	movs	r3, #0
 80104a8:	460a      	mov	r2, r1
 80104aa:	4922      	ldr	r1, [pc, #136]	; (8010534 <vTaskStartScheduler+0xb8>)
 80104ac:	4822      	ldr	r0, [pc, #136]	; (8010538 <vTaskStartScheduler+0xbc>)
 80104ae:	f7ff fe07 	bl	80100c0 <xTaskCreateStatic>
 80104b2:	4602      	mov	r2, r0
 80104b4:	4b21      	ldr	r3, [pc, #132]	; (801053c <vTaskStartScheduler+0xc0>)
 80104b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80104b8:	4b20      	ldr	r3, [pc, #128]	; (801053c <vTaskStartScheduler+0xc0>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80104c0:	2301      	movs	r3, #1
 80104c2:	617b      	str	r3, [r7, #20]
 80104c4:	e001      	b.n	80104ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80104c6:	2300      	movs	r3, #0
 80104c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d102      	bne.n	80104d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80104d0:	f000 fe3a 	bl	8011148 <xTimerCreateTimerTask>
 80104d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d117      	bne.n	801050c <vTaskStartScheduler+0x90>
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	b672      	cpsid	i
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	b662      	cpsie	i
 80104f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80104f2:	4b13      	ldr	r3, [pc, #76]	; (8010540 <vTaskStartScheduler+0xc4>)
 80104f4:	f04f 32ff 	mov.w	r2, #4294967295
 80104f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80104fa:	4b12      	ldr	r3, [pc, #72]	; (8010544 <vTaskStartScheduler+0xc8>)
 80104fc:	2201      	movs	r2, #1
 80104fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010500:	4b11      	ldr	r3, [pc, #68]	; (8010548 <vTaskStartScheduler+0xcc>)
 8010502:	2200      	movs	r2, #0
 8010504:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010506:	f001 fa03 	bl	8011910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801050a:	e00f      	b.n	801052c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010512:	d10b      	bne.n	801052c <vTaskStartScheduler+0xb0>
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	b672      	cpsid	i
 801051a:	f383 8811 	msr	BASEPRI, r3
 801051e:	f3bf 8f6f 	isb	sy
 8010522:	f3bf 8f4f 	dsb	sy
 8010526:	b662      	cpsie	i
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	e7fe      	b.n	801052a <vTaskStartScheduler+0xae>
}
 801052c:	bf00      	nop
 801052e:	3718      	adds	r7, #24
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	08013994 	.word	0x08013994
 8010538:	08010bb9 	.word	0x08010bb9
 801053c:	20000e88 	.word	0x20000e88
 8010540:	20000e84 	.word	0x20000e84
 8010544:	20000e70 	.word	0x20000e70
 8010548:	20000e68 	.word	0x20000e68

0801054c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010550:	4b04      	ldr	r3, [pc, #16]	; (8010564 <vTaskSuspendAll+0x18>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	3301      	adds	r3, #1
 8010556:	4a03      	ldr	r2, [pc, #12]	; (8010564 <vTaskSuspendAll+0x18>)
 8010558:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801055a:	bf00      	nop
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	20000e8c 	.word	0x20000e8c

08010568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801056e:	2300      	movs	r3, #0
 8010570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010572:	2300      	movs	r3, #0
 8010574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010576:	4b42      	ldr	r3, [pc, #264]	; (8010680 <xTaskResumeAll+0x118>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d10b      	bne.n	8010596 <xTaskResumeAll+0x2e>
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	b672      	cpsid	i
 8010584:	f383 8811 	msr	BASEPRI, r3
 8010588:	f3bf 8f6f 	isb	sy
 801058c:	f3bf 8f4f 	dsb	sy
 8010590:	b662      	cpsie	i
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	e7fe      	b.n	8010594 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010596:	f001 fa37 	bl	8011a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801059a:	4b39      	ldr	r3, [pc, #228]	; (8010680 <xTaskResumeAll+0x118>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3b01      	subs	r3, #1
 80105a0:	4a37      	ldr	r2, [pc, #220]	; (8010680 <xTaskResumeAll+0x118>)
 80105a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105a4:	4b36      	ldr	r3, [pc, #216]	; (8010680 <xTaskResumeAll+0x118>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d162      	bne.n	8010672 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105ac:	4b35      	ldr	r3, [pc, #212]	; (8010684 <xTaskResumeAll+0x11c>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d05e      	beq.n	8010672 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105b4:	e02f      	b.n	8010616 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105b6:	4b34      	ldr	r3, [pc, #208]	; (8010688 <xTaskResumeAll+0x120>)
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	3318      	adds	r3, #24
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe fdb6 	bl	800f134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fe fdb1 	bl	800f134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d6:	4b2d      	ldr	r3, [pc, #180]	; (801068c <xTaskResumeAll+0x124>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d903      	bls.n	80105e6 <xTaskResumeAll+0x7e>
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e2:	4a2a      	ldr	r2, [pc, #168]	; (801068c <xTaskResumeAll+0x124>)
 80105e4:	6013      	str	r3, [r2, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ea:	4613      	mov	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4413      	add	r3, r2
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	4a27      	ldr	r2, [pc, #156]	; (8010690 <xTaskResumeAll+0x128>)
 80105f4:	441a      	add	r2, r3
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3304      	adds	r3, #4
 80105fa:	4619      	mov	r1, r3
 80105fc:	4610      	mov	r0, r2
 80105fe:	f7fe fd3c 	bl	800f07a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010606:	4b23      	ldr	r3, [pc, #140]	; (8010694 <xTaskResumeAll+0x12c>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801060c:	429a      	cmp	r2, r3
 801060e:	d302      	bcc.n	8010616 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010610:	4b21      	ldr	r3, [pc, #132]	; (8010698 <xTaskResumeAll+0x130>)
 8010612:	2201      	movs	r2, #1
 8010614:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010616:	4b1c      	ldr	r3, [pc, #112]	; (8010688 <xTaskResumeAll+0x120>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d1cb      	bne.n	80105b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d001      	beq.n	8010628 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010624:	f000 fb7e 	bl	8010d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010628:	4b1c      	ldr	r3, [pc, #112]	; (801069c <xTaskResumeAll+0x134>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d010      	beq.n	8010656 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010634:	f000 f846 	bl	80106c4 <xTaskIncrementTick>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <xTaskResumeAll+0x130>)
 8010640:	2201      	movs	r2, #1
 8010642:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	3b01      	subs	r3, #1
 8010648:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1f1      	bne.n	8010634 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010650:	4b12      	ldr	r3, [pc, #72]	; (801069c <xTaskResumeAll+0x134>)
 8010652:	2200      	movs	r2, #0
 8010654:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010656:	4b10      	ldr	r3, [pc, #64]	; (8010698 <xTaskResumeAll+0x130>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d009      	beq.n	8010672 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801065e:	2301      	movs	r3, #1
 8010660:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010662:	4b0f      	ldr	r3, [pc, #60]	; (80106a0 <xTaskResumeAll+0x138>)
 8010664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010672:	f001 f9fb 	bl	8011a6c <vPortExitCritical>

	return xAlreadyYielded;
 8010676:	68bb      	ldr	r3, [r7, #8]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	20000e8c 	.word	0x20000e8c
 8010684:	20000e64 	.word	0x20000e64
 8010688:	20000e24 	.word	0x20000e24
 801068c:	20000e6c 	.word	0x20000e6c
 8010690:	20000994 	.word	0x20000994
 8010694:	20000990 	.word	0x20000990
 8010698:	20000e78 	.word	0x20000e78
 801069c:	20000e74 	.word	0x20000e74
 80106a0:	e000ed04 	.word	0xe000ed04

080106a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80106aa:	4b05      	ldr	r3, [pc, #20]	; (80106c0 <xTaskGetTickCount+0x1c>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106b0:	687b      	ldr	r3, [r7, #4]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop
 80106c0:	20000e68 	.word	0x20000e68

080106c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106ce:	4b4f      	ldr	r3, [pc, #316]	; (801080c <xTaskIncrementTick+0x148>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f040 808a 	bne.w	80107ec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80106d8:	4b4d      	ldr	r3, [pc, #308]	; (8010810 <xTaskIncrementTick+0x14c>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106e0:	4a4b      	ldr	r2, [pc, #300]	; (8010810 <xTaskIncrementTick+0x14c>)
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d121      	bne.n	8010730 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80106ec:	4b49      	ldr	r3, [pc, #292]	; (8010814 <xTaskIncrementTick+0x150>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00b      	beq.n	801070e <xTaskIncrementTick+0x4a>
 80106f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fa:	b672      	cpsid	i
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	b662      	cpsie	i
 801070a:	603b      	str	r3, [r7, #0]
 801070c:	e7fe      	b.n	801070c <xTaskIncrementTick+0x48>
 801070e:	4b41      	ldr	r3, [pc, #260]	; (8010814 <xTaskIncrementTick+0x150>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	60fb      	str	r3, [r7, #12]
 8010714:	4b40      	ldr	r3, [pc, #256]	; (8010818 <xTaskIncrementTick+0x154>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a3e      	ldr	r2, [pc, #248]	; (8010814 <xTaskIncrementTick+0x150>)
 801071a:	6013      	str	r3, [r2, #0]
 801071c:	4a3e      	ldr	r2, [pc, #248]	; (8010818 <xTaskIncrementTick+0x154>)
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	6013      	str	r3, [r2, #0]
 8010722:	4b3e      	ldr	r3, [pc, #248]	; (801081c <xTaskIncrementTick+0x158>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	3301      	adds	r3, #1
 8010728:	4a3c      	ldr	r2, [pc, #240]	; (801081c <xTaskIncrementTick+0x158>)
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	f000 fafa 	bl	8010d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010730:	4b3b      	ldr	r3, [pc, #236]	; (8010820 <xTaskIncrementTick+0x15c>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	693a      	ldr	r2, [r7, #16]
 8010736:	429a      	cmp	r2, r3
 8010738:	d349      	bcc.n	80107ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801073a:	4b36      	ldr	r3, [pc, #216]	; (8010814 <xTaskIncrementTick+0x150>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d104      	bne.n	801074e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010744:	4b36      	ldr	r3, [pc, #216]	; (8010820 <xTaskIncrementTick+0x15c>)
 8010746:	f04f 32ff 	mov.w	r2, #4294967295
 801074a:	601a      	str	r2, [r3, #0]
					break;
 801074c:	e03f      	b.n	80107ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801074e:	4b31      	ldr	r3, [pc, #196]	; (8010814 <xTaskIncrementTick+0x150>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801075e:	693a      	ldr	r2, [r7, #16]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	429a      	cmp	r2, r3
 8010764:	d203      	bcs.n	801076e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010766:	4a2e      	ldr	r2, [pc, #184]	; (8010820 <xTaskIncrementTick+0x15c>)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801076c:	e02f      	b.n	80107ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	3304      	adds	r3, #4
 8010772:	4618      	mov	r0, r3
 8010774:	f7fe fcde 	bl	800f134 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801077c:	2b00      	cmp	r3, #0
 801077e:	d004      	beq.n	801078a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	3318      	adds	r3, #24
 8010784:	4618      	mov	r0, r3
 8010786:	f7fe fcd5 	bl	800f134 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801078e:	4b25      	ldr	r3, [pc, #148]	; (8010824 <xTaskIncrementTick+0x160>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d903      	bls.n	801079e <xTaskIncrementTick+0xda>
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801079a:	4a22      	ldr	r2, [pc, #136]	; (8010824 <xTaskIncrementTick+0x160>)
 801079c:	6013      	str	r3, [r2, #0]
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a2:	4613      	mov	r3, r2
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	4a1f      	ldr	r2, [pc, #124]	; (8010828 <xTaskIncrementTick+0x164>)
 80107ac:	441a      	add	r2, r3
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	3304      	adds	r3, #4
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f7fe fc60 	bl	800f07a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107be:	4b1b      	ldr	r3, [pc, #108]	; (801082c <xTaskIncrementTick+0x168>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d3b8      	bcc.n	801073a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107cc:	e7b5      	b.n	801073a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80107ce:	4b17      	ldr	r3, [pc, #92]	; (801082c <xTaskIncrementTick+0x168>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d4:	4914      	ldr	r1, [pc, #80]	; (8010828 <xTaskIncrementTick+0x164>)
 80107d6:	4613      	mov	r3, r2
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	440b      	add	r3, r1
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d907      	bls.n	80107f6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80107e6:	2301      	movs	r3, #1
 80107e8:	617b      	str	r3, [r7, #20]
 80107ea:	e004      	b.n	80107f6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80107ec:	4b10      	ldr	r3, [pc, #64]	; (8010830 <xTaskIncrementTick+0x16c>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	3301      	adds	r3, #1
 80107f2:	4a0f      	ldr	r2, [pc, #60]	; (8010830 <xTaskIncrementTick+0x16c>)
 80107f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80107f6:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <xTaskIncrementTick+0x170>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d001      	beq.n	8010802 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80107fe:	2301      	movs	r3, #1
 8010800:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010802:	697b      	ldr	r3, [r7, #20]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3718      	adds	r7, #24
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	20000e8c 	.word	0x20000e8c
 8010810:	20000e68 	.word	0x20000e68
 8010814:	20000e1c 	.word	0x20000e1c
 8010818:	20000e20 	.word	0x20000e20
 801081c:	20000e7c 	.word	0x20000e7c
 8010820:	20000e84 	.word	0x20000e84
 8010824:	20000e6c 	.word	0x20000e6c
 8010828:	20000994 	.word	0x20000994
 801082c:	20000990 	.word	0x20000990
 8010830:	20000e74 	.word	0x20000e74
 8010834:	20000e78 	.word	0x20000e78

08010838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801083e:	4b3b      	ldr	r3, [pc, #236]	; (801092c <vTaskSwitchContext+0xf4>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d003      	beq.n	801084e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010846:	4b3a      	ldr	r3, [pc, #232]	; (8010930 <vTaskSwitchContext+0xf8>)
 8010848:	2201      	movs	r2, #1
 801084a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801084c:	e069      	b.n	8010922 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801084e:	4b38      	ldr	r3, [pc, #224]	; (8010930 <vTaskSwitchContext+0xf8>)
 8010850:	2200      	movs	r2, #0
 8010852:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010854:	4b37      	ldr	r3, [pc, #220]	; (8010934 <vTaskSwitchContext+0xfc>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	613b      	str	r3, [r7, #16]
 801085c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010860:	60fb      	str	r3, [r7, #12]
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68fa      	ldr	r2, [r7, #12]
 8010868:	429a      	cmp	r2, r3
 801086a:	d111      	bne.n	8010890 <vTaskSwitchContext+0x58>
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	3304      	adds	r3, #4
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	429a      	cmp	r2, r3
 8010876:	d10b      	bne.n	8010890 <vTaskSwitchContext+0x58>
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	3308      	adds	r3, #8
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	429a      	cmp	r2, r3
 8010882:	d105      	bne.n	8010890 <vTaskSwitchContext+0x58>
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	330c      	adds	r3, #12
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	429a      	cmp	r2, r3
 801088e:	d008      	beq.n	80108a2 <vTaskSwitchContext+0x6a>
 8010890:	4b28      	ldr	r3, [pc, #160]	; (8010934 <vTaskSwitchContext+0xfc>)
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	4b27      	ldr	r3, [pc, #156]	; (8010934 <vTaskSwitchContext+0xfc>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	3334      	adds	r3, #52	; 0x34
 801089a:	4619      	mov	r1, r3
 801089c:	4610      	mov	r0, r2
 801089e:	f7ef fe8e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108a2:	4b25      	ldr	r3, [pc, #148]	; (8010938 <vTaskSwitchContext+0x100>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	617b      	str	r3, [r7, #20]
 80108a8:	e011      	b.n	80108ce <vTaskSwitchContext+0x96>
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10b      	bne.n	80108c8 <vTaskSwitchContext+0x90>
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	b672      	cpsid	i
 80108b6:	f383 8811 	msr	BASEPRI, r3
 80108ba:	f3bf 8f6f 	isb	sy
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	b662      	cpsie	i
 80108c4:	607b      	str	r3, [r7, #4]
 80108c6:	e7fe      	b.n	80108c6 <vTaskSwitchContext+0x8e>
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	617b      	str	r3, [r7, #20]
 80108ce:	491b      	ldr	r1, [pc, #108]	; (801093c <vTaskSwitchContext+0x104>)
 80108d0:	697a      	ldr	r2, [r7, #20]
 80108d2:	4613      	mov	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4413      	add	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	440b      	add	r3, r1
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d0e3      	beq.n	80108aa <vTaskSwitchContext+0x72>
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	4613      	mov	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4a13      	ldr	r2, [pc, #76]	; (801093c <vTaskSwitchContext+0x104>)
 80108ee:	4413      	add	r3, r2
 80108f0:	60bb      	str	r3, [r7, #8]
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	605a      	str	r2, [r3, #4]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	3308      	adds	r3, #8
 8010904:	429a      	cmp	r2, r3
 8010906:	d104      	bne.n	8010912 <vTaskSwitchContext+0xda>
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	685a      	ldr	r2, [r3, #4]
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	605a      	str	r2, [r3, #4]
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	68db      	ldr	r3, [r3, #12]
 8010918:	4a06      	ldr	r2, [pc, #24]	; (8010934 <vTaskSwitchContext+0xfc>)
 801091a:	6013      	str	r3, [r2, #0]
 801091c:	4a06      	ldr	r2, [pc, #24]	; (8010938 <vTaskSwitchContext+0x100>)
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	6013      	str	r3, [r2, #0]
}
 8010922:	bf00      	nop
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	20000e8c 	.word	0x20000e8c
 8010930:	20000e78 	.word	0x20000e78
 8010934:	20000990 	.word	0x20000990
 8010938:	20000e6c 	.word	0x20000e6c
 801093c:	20000994 	.word	0x20000994

08010940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10b      	bne.n	8010968 <vTaskPlaceOnEventList+0x28>
 8010950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010954:	b672      	cpsid	i
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	b662      	cpsie	i
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	e7fe      	b.n	8010966 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010968:	4b07      	ldr	r3, [pc, #28]	; (8010988 <vTaskPlaceOnEventList+0x48>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3318      	adds	r3, #24
 801096e:	4619      	mov	r1, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7fe fba6 	bl	800f0c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010976:	2101      	movs	r1, #1
 8010978:	6838      	ldr	r0, [r7, #0]
 801097a:	f000 fb91 	bl	80110a0 <prvAddCurrentTaskToDelayedList>
}
 801097e:	bf00      	nop
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20000990 	.word	0x20000990

0801098c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d10b      	bne.n	80109b6 <vTaskPlaceOnEventListRestricted+0x2a>
 801099e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a2:	b672      	cpsid	i
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	b662      	cpsie	i
 80109b2:	617b      	str	r3, [r7, #20]
 80109b4:	e7fe      	b.n	80109b4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109b6:	4b0a      	ldr	r3, [pc, #40]	; (80109e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	3318      	adds	r3, #24
 80109bc:	4619      	mov	r1, r3
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f7fe fb5b 	bl	800f07a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80109ca:	f04f 33ff 	mov.w	r3, #4294967295
 80109ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	68b8      	ldr	r0, [r7, #8]
 80109d4:	f000 fb64 	bl	80110a0 <prvAddCurrentTaskToDelayedList>
	}
 80109d8:	bf00      	nop
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	20000990 	.word	0x20000990

080109e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10b      	bne.n	8010a12 <xTaskRemoveFromEventList+0x2e>
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	b672      	cpsid	i
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	b662      	cpsie	i
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	e7fe      	b.n	8010a10 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	3318      	adds	r3, #24
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe fb8c 	bl	800f134 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a1c:	4b1d      	ldr	r3, [pc, #116]	; (8010a94 <xTaskRemoveFromEventList+0xb0>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d11d      	bne.n	8010a60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	3304      	adds	r3, #4
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fe fb83 	bl	800f134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a32:	4b19      	ldr	r3, [pc, #100]	; (8010a98 <xTaskRemoveFromEventList+0xb4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d903      	bls.n	8010a42 <xTaskRemoveFromEventList+0x5e>
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a3e:	4a16      	ldr	r2, [pc, #88]	; (8010a98 <xTaskRemoveFromEventList+0xb4>)
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a46:	4613      	mov	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	4a13      	ldr	r2, [pc, #76]	; (8010a9c <xTaskRemoveFromEventList+0xb8>)
 8010a50:	441a      	add	r2, r3
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	3304      	adds	r3, #4
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7fe fb0e 	bl	800f07a <vListInsertEnd>
 8010a5e:	e005      	b.n	8010a6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	3318      	adds	r3, #24
 8010a64:	4619      	mov	r1, r3
 8010a66:	480e      	ldr	r0, [pc, #56]	; (8010aa0 <xTaskRemoveFromEventList+0xbc>)
 8010a68:	f7fe fb07 	bl	800f07a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a70:	4b0c      	ldr	r3, [pc, #48]	; (8010aa4 <xTaskRemoveFromEventList+0xc0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d905      	bls.n	8010a86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a7e:	4b0a      	ldr	r3, [pc, #40]	; (8010aa8 <xTaskRemoveFromEventList+0xc4>)
 8010a80:	2201      	movs	r2, #1
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	e001      	b.n	8010a8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010a86:	2300      	movs	r3, #0
 8010a88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a8a:	697b      	ldr	r3, [r7, #20]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20000e8c 	.word	0x20000e8c
 8010a98:	20000e6c 	.word	0x20000e6c
 8010a9c:	20000994 	.word	0x20000994
 8010aa0:	20000e24 	.word	0x20000e24
 8010aa4:	20000990 	.word	0x20000990
 8010aa8:	20000e78 	.word	0x20000e78

08010aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ab4:	4b06      	ldr	r3, [pc, #24]	; (8010ad0 <vTaskInternalSetTimeOutState+0x24>)
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010abc:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <vTaskInternalSetTimeOutState+0x28>)
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	605a      	str	r2, [r3, #4]
}
 8010ac4:	bf00      	nop
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr
 8010ad0:	20000e7c 	.word	0x20000e7c
 8010ad4:	20000e68 	.word	0x20000e68

08010ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10b      	bne.n	8010b00 <xTaskCheckForTimeOut+0x28>
 8010ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aec:	b672      	cpsid	i
 8010aee:	f383 8811 	msr	BASEPRI, r3
 8010af2:	f3bf 8f6f 	isb	sy
 8010af6:	f3bf 8f4f 	dsb	sy
 8010afa:	b662      	cpsie	i
 8010afc:	613b      	str	r3, [r7, #16]
 8010afe:	e7fe      	b.n	8010afe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d10b      	bne.n	8010b1e <xTaskCheckForTimeOut+0x46>
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	b672      	cpsid	i
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	b662      	cpsie	i
 8010b1a:	60fb      	str	r3, [r7, #12]
 8010b1c:	e7fe      	b.n	8010b1c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8010b1e:	f000 ff73 	bl	8011a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010b22:	4b1d      	ldr	r3, [pc, #116]	; (8010b98 <xTaskCheckForTimeOut+0xc0>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	69ba      	ldr	r2, [r7, #24]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b3a:	d102      	bne.n	8010b42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	61fb      	str	r3, [r7, #28]
 8010b40:	e023      	b.n	8010b8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	4b15      	ldr	r3, [pc, #84]	; (8010b9c <xTaskCheckForTimeOut+0xc4>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d007      	beq.n	8010b5e <xTaskCheckForTimeOut+0x86>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	69ba      	ldr	r2, [r7, #24]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d302      	bcc.n	8010b5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	61fb      	str	r3, [r7, #28]
 8010b5c:	e015      	b.n	8010b8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d20b      	bcs.n	8010b80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	1ad2      	subs	r2, r2, r3
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ff99 	bl	8010aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	61fb      	str	r3, [r7, #28]
 8010b7e:	e004      	b.n	8010b8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2200      	movs	r2, #0
 8010b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b86:	2301      	movs	r3, #1
 8010b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b8a:	f000 ff6f 	bl	8011a6c <vPortExitCritical>

	return xReturn;
 8010b8e:	69fb      	ldr	r3, [r7, #28]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3720      	adds	r7, #32
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20000e68 	.word	0x20000e68
 8010b9c:	20000e7c 	.word	0x20000e7c

08010ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010ba4:	4b03      	ldr	r3, [pc, #12]	; (8010bb4 <vTaskMissedYield+0x14>)
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	601a      	str	r2, [r3, #0]
}
 8010baa:	bf00      	nop
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	20000e78 	.word	0x20000e78

08010bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010bc0:	f000 f854 	bl	8010c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010bc4:	4b07      	ldr	r3, [pc, #28]	; (8010be4 <prvIdleTask+0x2c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d907      	bls.n	8010bdc <prvIdleTask+0x24>
			{
				taskYIELD();
 8010bcc:	4b06      	ldr	r3, [pc, #24]	; (8010be8 <prvIdleTask+0x30>)
 8010bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	f3bf 8f4f 	dsb	sy
 8010bd8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010bdc:	f7ef fce8 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010be0:	e7ee      	b.n	8010bc0 <prvIdleTask+0x8>
 8010be2:	bf00      	nop
 8010be4:	20000994 	.word	0x20000994
 8010be8:	e000ed04 	.word	0xe000ed04

08010bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	607b      	str	r3, [r7, #4]
 8010bf6:	e00c      	b.n	8010c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	009b      	lsls	r3, r3, #2
 8010bfe:	4413      	add	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4a12      	ldr	r2, [pc, #72]	; (8010c4c <prvInitialiseTaskLists+0x60>)
 8010c04:	4413      	add	r3, r2
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fe fa0a 	bl	800f020 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	607b      	str	r3, [r7, #4]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2b37      	cmp	r3, #55	; 0x37
 8010c16:	d9ef      	bls.n	8010bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010c18:	480d      	ldr	r0, [pc, #52]	; (8010c50 <prvInitialiseTaskLists+0x64>)
 8010c1a:	f7fe fa01 	bl	800f020 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010c1e:	480d      	ldr	r0, [pc, #52]	; (8010c54 <prvInitialiseTaskLists+0x68>)
 8010c20:	f7fe f9fe 	bl	800f020 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010c24:	480c      	ldr	r0, [pc, #48]	; (8010c58 <prvInitialiseTaskLists+0x6c>)
 8010c26:	f7fe f9fb 	bl	800f020 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010c2a:	480c      	ldr	r0, [pc, #48]	; (8010c5c <prvInitialiseTaskLists+0x70>)
 8010c2c:	f7fe f9f8 	bl	800f020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c30:	480b      	ldr	r0, [pc, #44]	; (8010c60 <prvInitialiseTaskLists+0x74>)
 8010c32:	f7fe f9f5 	bl	800f020 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c36:	4b0b      	ldr	r3, [pc, #44]	; (8010c64 <prvInitialiseTaskLists+0x78>)
 8010c38:	4a05      	ldr	r2, [pc, #20]	; (8010c50 <prvInitialiseTaskLists+0x64>)
 8010c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c3c:	4b0a      	ldr	r3, [pc, #40]	; (8010c68 <prvInitialiseTaskLists+0x7c>)
 8010c3e:	4a05      	ldr	r2, [pc, #20]	; (8010c54 <prvInitialiseTaskLists+0x68>)
 8010c40:	601a      	str	r2, [r3, #0]
}
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20000994 	.word	0x20000994
 8010c50:	20000df4 	.word	0x20000df4
 8010c54:	20000e08 	.word	0x20000e08
 8010c58:	20000e24 	.word	0x20000e24
 8010c5c:	20000e38 	.word	0x20000e38
 8010c60:	20000e50 	.word	0x20000e50
 8010c64:	20000e1c 	.word	0x20000e1c
 8010c68:	20000e20 	.word	0x20000e20

08010c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c72:	e019      	b.n	8010ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c74:	f000 fec8 	bl	8011a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c78:	4b0f      	ldr	r3, [pc, #60]	; (8010cb8 <prvCheckTasksWaitingTermination+0x4c>)
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3304      	adds	r3, #4
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fe fa55 	bl	800f134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c8a:	4b0c      	ldr	r3, [pc, #48]	; (8010cbc <prvCheckTasksWaitingTermination+0x50>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	4a0a      	ldr	r2, [pc, #40]	; (8010cbc <prvCheckTasksWaitingTermination+0x50>)
 8010c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c94:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <prvCheckTasksWaitingTermination+0x54>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	4a09      	ldr	r2, [pc, #36]	; (8010cc0 <prvCheckTasksWaitingTermination+0x54>)
 8010c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c9e:	f000 fee5 	bl	8011a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f80e 	bl	8010cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ca8:	4b05      	ldr	r3, [pc, #20]	; (8010cc0 <prvCheckTasksWaitingTermination+0x54>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e1      	bne.n	8010c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010cb0:	bf00      	nop
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	20000e38 	.word	0x20000e38
 8010cbc:	20000e64 	.word	0x20000e64
 8010cc0:	20000e4c 	.word	0x20000e4c

08010cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d108      	bne.n	8010ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f001 f882 	bl	8011de4 <vPortFree>
				vPortFree( pxTCB );
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 f87f 	bl	8011de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ce6:	e019      	b.n	8010d1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d103      	bne.n	8010cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 f876 	bl	8011de4 <vPortFree>
	}
 8010cf8:	e010      	b.n	8010d1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d00b      	beq.n	8010d1c <prvDeleteTCB+0x58>
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	b672      	cpsid	i
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	b662      	cpsie	i
 8010d18:	60fb      	str	r3, [r7, #12]
 8010d1a:	e7fe      	b.n	8010d1a <prvDeleteTCB+0x56>
	}
 8010d1c:	bf00      	nop
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d2a:	4b0c      	ldr	r3, [pc, #48]	; (8010d5c <prvResetNextTaskUnblockTime+0x38>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d104      	bne.n	8010d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d34:	4b0a      	ldr	r3, [pc, #40]	; (8010d60 <prvResetNextTaskUnblockTime+0x3c>)
 8010d36:	f04f 32ff 	mov.w	r2, #4294967295
 8010d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d3c:	e008      	b.n	8010d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d3e:	4b07      	ldr	r3, [pc, #28]	; (8010d5c <prvResetNextTaskUnblockTime+0x38>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	4a04      	ldr	r2, [pc, #16]	; (8010d60 <prvResetNextTaskUnblockTime+0x3c>)
 8010d4e:	6013      	str	r3, [r2, #0]
}
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr
 8010d5c:	20000e1c 	.word	0x20000e1c
 8010d60:	20000e84 	.word	0x20000e84

08010d64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010d6a:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <xTaskGetCurrentTaskHandle+0x1c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010d70:	687b      	ldr	r3, [r7, #4]
	}
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	20000990 	.word	0x20000990

08010d84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <xTaskGetSchedulerState+0x34>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d102      	bne.n	8010d98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d92:	2301      	movs	r3, #1
 8010d94:	607b      	str	r3, [r7, #4]
 8010d96:	e008      	b.n	8010daa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d98:	4b08      	ldr	r3, [pc, #32]	; (8010dbc <xTaskGetSchedulerState+0x38>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d102      	bne.n	8010da6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010da0:	2302      	movs	r3, #2
 8010da2:	607b      	str	r3, [r7, #4]
 8010da4:	e001      	b.n	8010daa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010da6:	2300      	movs	r3, #0
 8010da8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010daa:	687b      	ldr	r3, [r7, #4]
	}
 8010dac:	4618      	mov	r0, r3
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr
 8010db8:	20000e70 	.word	0x20000e70
 8010dbc:	20000e8c 	.word	0x20000e8c

08010dc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d051      	beq.n	8010e7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dda:	4b2a      	ldr	r3, [pc, #168]	; (8010e84 <xTaskPriorityInherit+0xc4>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d241      	bcs.n	8010e68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	699b      	ldr	r3, [r3, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	db06      	blt.n	8010dfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dec:	4b25      	ldr	r3, [pc, #148]	; (8010e84 <xTaskPriorityInherit+0xc4>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	6959      	ldr	r1, [r3, #20]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e02:	4613      	mov	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4413      	add	r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	4a1f      	ldr	r2, [pc, #124]	; (8010e88 <xTaskPriorityInherit+0xc8>)
 8010e0c:	4413      	add	r3, r2
 8010e0e:	4299      	cmp	r1, r3
 8010e10:	d122      	bne.n	8010e58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	3304      	adds	r3, #4
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fe f98c 	bl	800f134 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010e1c:	4b19      	ldr	r3, [pc, #100]	; (8010e84 <xTaskPriorityInherit+0xc4>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e2a:	4b18      	ldr	r3, [pc, #96]	; (8010e8c <xTaskPriorityInherit+0xcc>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d903      	bls.n	8010e3a <xTaskPriorityInherit+0x7a>
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e36:	4a15      	ldr	r2, [pc, #84]	; (8010e8c <xTaskPriorityInherit+0xcc>)
 8010e38:	6013      	str	r3, [r2, #0]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e3e:	4613      	mov	r3, r2
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	4413      	add	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	4a10      	ldr	r2, [pc, #64]	; (8010e88 <xTaskPriorityInherit+0xc8>)
 8010e48:	441a      	add	r2, r3
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	3304      	adds	r3, #4
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fe f912 	bl	800f07a <vListInsertEnd>
 8010e56:	e004      	b.n	8010e62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010e58:	4b0a      	ldr	r3, [pc, #40]	; (8010e84 <xTaskPriorityInherit+0xc4>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010e62:	2301      	movs	r3, #1
 8010e64:	60fb      	str	r3, [r7, #12]
 8010e66:	e008      	b.n	8010e7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010e6c:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <xTaskPriorityInherit+0xc4>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d201      	bcs.n	8010e7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010e76:	2301      	movs	r3, #1
 8010e78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	20000990 	.word	0x20000990
 8010e88:	20000994 	.word	0x20000994
 8010e8c:	20000e6c 	.word	0x20000e6c

08010e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d058      	beq.n	8010f58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010ea6:	4b2f      	ldr	r3, [pc, #188]	; (8010f64 <xTaskPriorityDisinherit+0xd4>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	693a      	ldr	r2, [r7, #16]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d00b      	beq.n	8010ec8 <xTaskPriorityDisinherit+0x38>
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	b672      	cpsid	i
 8010eb6:	f383 8811 	msr	BASEPRI, r3
 8010eba:	f3bf 8f6f 	isb	sy
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	b662      	cpsie	i
 8010ec4:	60fb      	str	r3, [r7, #12]
 8010ec6:	e7fe      	b.n	8010ec6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d10b      	bne.n	8010ee8 <xTaskPriorityDisinherit+0x58>
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	b672      	cpsid	i
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	b662      	cpsie	i
 8010ee4:	60bb      	str	r3, [r7, #8]
 8010ee6:	e7fe      	b.n	8010ee6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eec:	1e5a      	subs	r2, r3, #1
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d02c      	beq.n	8010f58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d128      	bne.n	8010f58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fe f912 	bl	800f134 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f28:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <xTaskPriorityDisinherit+0xd8>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d903      	bls.n	8010f38 <xTaskPriorityDisinherit+0xa8>
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f34:	4a0c      	ldr	r2, [pc, #48]	; (8010f68 <xTaskPriorityDisinherit+0xd8>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4a09      	ldr	r2, [pc, #36]	; (8010f6c <xTaskPriorityDisinherit+0xdc>)
 8010f46:	441a      	add	r2, r3
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	3304      	adds	r3, #4
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7fe f893 	bl	800f07a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f54:	2301      	movs	r3, #1
 8010f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f58:	697b      	ldr	r3, [r7, #20]
	}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	20000990 	.word	0x20000990
 8010f68:	20000e6c 	.word	0x20000e6c
 8010f6c:	20000994 	.word	0x20000994

08010f70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b088      	sub	sp, #32
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d06c      	beq.n	8011062 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d10b      	bne.n	8010fa8 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	b672      	cpsid	i
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	b662      	cpsie	i
 8010fa4:	60fb      	str	r3, [r7, #12]
 8010fa6:	e7fe      	b.n	8010fa6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fac:	683a      	ldr	r2, [r7, #0]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d902      	bls.n	8010fb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	61fb      	str	r3, [r7, #28]
 8010fb6:	e002      	b.n	8010fbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc2:	69fa      	ldr	r2, [r7, #28]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d04c      	beq.n	8011062 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d147      	bne.n	8011062 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010fd2:	4b26      	ldr	r3, [pc, #152]	; (801106c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d10b      	bne.n	8010ff4 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	b672      	cpsid	i
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	b662      	cpsie	i
 8010ff0:	60bb      	str	r3, [r7, #8]
 8010ff2:	e7fe      	b.n	8010ff2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	699b      	ldr	r3, [r3, #24]
 8011004:	2b00      	cmp	r3, #0
 8011006:	db04      	blt.n	8011012 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801100e:	69bb      	ldr	r3, [r7, #24]
 8011010:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	6959      	ldr	r1, [r3, #20]
 8011016:	693a      	ldr	r2, [r7, #16]
 8011018:	4613      	mov	r3, r2
 801101a:	009b      	lsls	r3, r3, #2
 801101c:	4413      	add	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4a13      	ldr	r2, [pc, #76]	; (8011070 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011022:	4413      	add	r3, r2
 8011024:	4299      	cmp	r1, r3
 8011026:	d11c      	bne.n	8011062 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	3304      	adds	r3, #4
 801102c:	4618      	mov	r0, r3
 801102e:	f7fe f881 	bl	800f134 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011036:	4b0f      	ldr	r3, [pc, #60]	; (8011074 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	429a      	cmp	r2, r3
 801103c:	d903      	bls.n	8011046 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011042:	4a0c      	ldr	r2, [pc, #48]	; (8011074 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011044:	6013      	str	r3, [r2, #0]
 8011046:	69bb      	ldr	r3, [r7, #24]
 8011048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801104a:	4613      	mov	r3, r2
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	4413      	add	r3, r2
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	4a07      	ldr	r2, [pc, #28]	; (8011070 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011054:	441a      	add	r2, r3
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	3304      	adds	r3, #4
 801105a:	4619      	mov	r1, r3
 801105c:	4610      	mov	r0, r2
 801105e:	f7fe f80c 	bl	800f07a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011062:	bf00      	nop
 8011064:	3720      	adds	r7, #32
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	20000990 	.word	0x20000990
 8011070:	20000994 	.word	0x20000994
 8011074:	20000e6c 	.word	0x20000e6c

08011078 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011078:	b480      	push	{r7}
 801107a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801107c:	4b07      	ldr	r3, [pc, #28]	; (801109c <pvTaskIncrementMutexHeldCount+0x24>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d004      	beq.n	801108e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011084:	4b05      	ldr	r3, [pc, #20]	; (801109c <pvTaskIncrementMutexHeldCount+0x24>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801108a:	3201      	adds	r2, #1
 801108c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801108e:	4b03      	ldr	r3, [pc, #12]	; (801109c <pvTaskIncrementMutexHeldCount+0x24>)
 8011090:	681b      	ldr	r3, [r3, #0]
	}
 8011092:	4618      	mov	r0, r3
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	20000990 	.word	0x20000990

080110a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80110aa:	4b21      	ldr	r3, [pc, #132]	; (8011130 <prvAddCurrentTaskToDelayedList+0x90>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110b0:	4b20      	ldr	r3, [pc, #128]	; (8011134 <prvAddCurrentTaskToDelayedList+0x94>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3304      	adds	r3, #4
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fe f83c 	bl	800f134 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c2:	d10a      	bne.n	80110da <prvAddCurrentTaskToDelayedList+0x3a>
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d007      	beq.n	80110da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110ca:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <prvAddCurrentTaskToDelayedList+0x94>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	3304      	adds	r3, #4
 80110d0:	4619      	mov	r1, r3
 80110d2:	4819      	ldr	r0, [pc, #100]	; (8011138 <prvAddCurrentTaskToDelayedList+0x98>)
 80110d4:	f7fd ffd1 	bl	800f07a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110d8:	e026      	b.n	8011128 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4413      	add	r3, r2
 80110e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110e2:	4b14      	ldr	r3, [pc, #80]	; (8011134 <prvAddCurrentTaskToDelayedList+0x94>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d209      	bcs.n	8011106 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110f2:	4b12      	ldr	r3, [pc, #72]	; (801113c <prvAddCurrentTaskToDelayedList+0x9c>)
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <prvAddCurrentTaskToDelayedList+0x94>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	3304      	adds	r3, #4
 80110fc:	4619      	mov	r1, r3
 80110fe:	4610      	mov	r0, r2
 8011100:	f7fd ffdf 	bl	800f0c2 <vListInsert>
}
 8011104:	e010      	b.n	8011128 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011106:	4b0e      	ldr	r3, [pc, #56]	; (8011140 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	4b0a      	ldr	r3, [pc, #40]	; (8011134 <prvAddCurrentTaskToDelayedList+0x94>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	3304      	adds	r3, #4
 8011110:	4619      	mov	r1, r3
 8011112:	4610      	mov	r0, r2
 8011114:	f7fd ffd5 	bl	800f0c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011118:	4b0a      	ldr	r3, [pc, #40]	; (8011144 <prvAddCurrentTaskToDelayedList+0xa4>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68ba      	ldr	r2, [r7, #8]
 801111e:	429a      	cmp	r2, r3
 8011120:	d202      	bcs.n	8011128 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011122:	4a08      	ldr	r2, [pc, #32]	; (8011144 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6013      	str	r3, [r2, #0]
}
 8011128:	bf00      	nop
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	20000e68 	.word	0x20000e68
 8011134:	20000990 	.word	0x20000990
 8011138:	20000e50 	.word	0x20000e50
 801113c:	20000e20 	.word	0x20000e20
 8011140:	20000e1c 	.word	0x20000e1c
 8011144:	20000e84 	.word	0x20000e84

08011148 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b08a      	sub	sp, #40	; 0x28
 801114c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801114e:	2300      	movs	r3, #0
 8011150:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011152:	f000 fb0d 	bl	8011770 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011156:	4b1d      	ldr	r3, [pc, #116]	; (80111cc <xTimerCreateTimerTask+0x84>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d021      	beq.n	80111a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801115e:	2300      	movs	r3, #0
 8011160:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011162:	2300      	movs	r3, #0
 8011164:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011166:	1d3a      	adds	r2, r7, #4
 8011168:	f107 0108 	add.w	r1, r7, #8
 801116c:	f107 030c 	add.w	r3, r7, #12
 8011170:	4618      	mov	r0, r3
 8011172:	f7fd ff3b 	bl	800efec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011176:	6879      	ldr	r1, [r7, #4]
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	9202      	str	r2, [sp, #8]
 801117e:	9301      	str	r3, [sp, #4]
 8011180:	2302      	movs	r3, #2
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	2300      	movs	r3, #0
 8011186:	460a      	mov	r2, r1
 8011188:	4911      	ldr	r1, [pc, #68]	; (80111d0 <xTimerCreateTimerTask+0x88>)
 801118a:	4812      	ldr	r0, [pc, #72]	; (80111d4 <xTimerCreateTimerTask+0x8c>)
 801118c:	f7fe ff98 	bl	80100c0 <xTaskCreateStatic>
 8011190:	4602      	mov	r2, r0
 8011192:	4b11      	ldr	r3, [pc, #68]	; (80111d8 <xTimerCreateTimerTask+0x90>)
 8011194:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011196:	4b10      	ldr	r3, [pc, #64]	; (80111d8 <xTimerCreateTimerTask+0x90>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801119e:	2301      	movs	r3, #1
 80111a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d10b      	bne.n	80111c0 <xTimerCreateTimerTask+0x78>
 80111a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ac:	b672      	cpsid	i
 80111ae:	f383 8811 	msr	BASEPRI, r3
 80111b2:	f3bf 8f6f 	isb	sy
 80111b6:	f3bf 8f4f 	dsb	sy
 80111ba:	b662      	cpsie	i
 80111bc:	613b      	str	r3, [r7, #16]
 80111be:	e7fe      	b.n	80111be <xTimerCreateTimerTask+0x76>
	return xReturn;
 80111c0:	697b      	ldr	r3, [r7, #20]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3718      	adds	r7, #24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	20000ec0 	.word	0x20000ec0
 80111d0:	0801399c 	.word	0x0801399c
 80111d4:	08011315 	.word	0x08011315
 80111d8:	20000ec4 	.word	0x20000ec4

080111dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b08a      	sub	sp, #40	; 0x28
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	607a      	str	r2, [r7, #4]
 80111e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80111ea:	2300      	movs	r3, #0
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10b      	bne.n	801120c <xTimerGenericCommand+0x30>
 80111f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f8:	b672      	cpsid	i
 80111fa:	f383 8811 	msr	BASEPRI, r3
 80111fe:	f3bf 8f6f 	isb	sy
 8011202:	f3bf 8f4f 	dsb	sy
 8011206:	b662      	cpsie	i
 8011208:	623b      	str	r3, [r7, #32]
 801120a:	e7fe      	b.n	801120a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801120c:	4b19      	ldr	r3, [pc, #100]	; (8011274 <xTimerGenericCommand+0x98>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d02a      	beq.n	801126a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	2b05      	cmp	r3, #5
 8011224:	dc18      	bgt.n	8011258 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011226:	f7ff fdad 	bl	8010d84 <xTaskGetSchedulerState>
 801122a:	4603      	mov	r3, r0
 801122c:	2b02      	cmp	r3, #2
 801122e:	d109      	bne.n	8011244 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011230:	4b10      	ldr	r3, [pc, #64]	; (8011274 <xTimerGenericCommand+0x98>)
 8011232:	6818      	ldr	r0, [r3, #0]
 8011234:	f107 0110 	add.w	r1, r7, #16
 8011238:	2300      	movs	r3, #0
 801123a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801123c:	f7fe f9a8 	bl	800f590 <xQueueGenericSend>
 8011240:	6278      	str	r0, [r7, #36]	; 0x24
 8011242:	e012      	b.n	801126a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011244:	4b0b      	ldr	r3, [pc, #44]	; (8011274 <xTimerGenericCommand+0x98>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f107 0110 	add.w	r1, r7, #16
 801124c:	2300      	movs	r3, #0
 801124e:	2200      	movs	r2, #0
 8011250:	f7fe f99e 	bl	800f590 <xQueueGenericSend>
 8011254:	6278      	str	r0, [r7, #36]	; 0x24
 8011256:	e008      	b.n	801126a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011258:	4b06      	ldr	r3, [pc, #24]	; (8011274 <xTimerGenericCommand+0x98>)
 801125a:	6818      	ldr	r0, [r3, #0]
 801125c:	f107 0110 	add.w	r1, r7, #16
 8011260:	2300      	movs	r3, #0
 8011262:	683a      	ldr	r2, [r7, #0]
 8011264:	f7fe fa96 	bl	800f794 <xQueueGenericSendFromISR>
 8011268:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801126c:	4618      	mov	r0, r3
 801126e:	3728      	adds	r7, #40	; 0x28
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	20000ec0 	.word	0x20000ec0

08011278 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b088      	sub	sp, #32
 801127c:	af02      	add	r7, sp, #8
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011282:	4b23      	ldr	r3, [pc, #140]	; (8011310 <prvProcessExpiredTimer+0x98>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	3304      	adds	r3, #4
 8011290:	4618      	mov	r0, r3
 8011292:	f7fd ff4f 	bl	800f134 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801129c:	f003 0304 	and.w	r3, r3, #4
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d023      	beq.n	80112ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	699a      	ldr	r2, [r3, #24]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	18d1      	adds	r1, r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	6978      	ldr	r0, [r7, #20]
 80112b2:	f000 f8d3 	bl	801145c <prvInsertTimerInActiveList>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d020      	beq.n	80112fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112bc:	2300      	movs	r3, #0
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	2300      	movs	r3, #0
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	2100      	movs	r1, #0
 80112c6:	6978      	ldr	r0, [r7, #20]
 80112c8:	f7ff ff88 	bl	80111dc <xTimerGenericCommand>
 80112cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d114      	bne.n	80112fe <prvProcessExpiredTimer+0x86>
 80112d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d8:	b672      	cpsid	i
 80112da:	f383 8811 	msr	BASEPRI, r3
 80112de:	f3bf 8f6f 	isb	sy
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	b662      	cpsie	i
 80112e8:	60fb      	str	r3, [r7, #12]
 80112ea:	e7fe      	b.n	80112ea <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112f2:	f023 0301 	bic.w	r3, r3, #1
 80112f6:	b2da      	uxtb	r2, r3
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	6978      	ldr	r0, [r7, #20]
 8011304:	4798      	blx	r3
}
 8011306:	bf00      	nop
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20000eb8 	.word	0x20000eb8

08011314 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801131c:	f107 0308 	add.w	r3, r7, #8
 8011320:	4618      	mov	r0, r3
 8011322:	f000 f857 	bl	80113d4 <prvGetNextExpireTime>
 8011326:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	4619      	mov	r1, r3
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f000 f803 	bl	8011338 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011332:	f000 f8d5 	bl	80114e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011336:	e7f1      	b.n	801131c <prvTimerTask+0x8>

08011338 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011342:	f7ff f903 	bl	801054c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011346:	f107 0308 	add.w	r3, r7, #8
 801134a:	4618      	mov	r0, r3
 801134c:	f000 f866 	bl	801141c <prvSampleTimeNow>
 8011350:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d130      	bne.n	80113ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10a      	bne.n	8011374 <prvProcessTimerOrBlockTask+0x3c>
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	429a      	cmp	r2, r3
 8011364:	d806      	bhi.n	8011374 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011366:	f7ff f8ff 	bl	8010568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801136a:	68f9      	ldr	r1, [r7, #12]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff ff83 	bl	8011278 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011372:	e024      	b.n	80113be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d008      	beq.n	801138c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801137a:	4b13      	ldr	r3, [pc, #76]	; (80113c8 <prvProcessTimerOrBlockTask+0x90>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d101      	bne.n	8011388 <prvProcessTimerOrBlockTask+0x50>
 8011384:	2301      	movs	r3, #1
 8011386:	e000      	b.n	801138a <prvProcessTimerOrBlockTask+0x52>
 8011388:	2300      	movs	r3, #0
 801138a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801138c:	4b0f      	ldr	r3, [pc, #60]	; (80113cc <prvProcessTimerOrBlockTask+0x94>)
 801138e:	6818      	ldr	r0, [r3, #0]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	1ad3      	subs	r3, r2, r3
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	4619      	mov	r1, r3
 801139a:	f7fe fe5d 	bl	8010058 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801139e:	f7ff f8e3 	bl	8010568 <xTaskResumeAll>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10a      	bne.n	80113be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80113a8:	4b09      	ldr	r3, [pc, #36]	; (80113d0 <prvProcessTimerOrBlockTask+0x98>)
 80113aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	f3bf 8f6f 	isb	sy
}
 80113b8:	e001      	b.n	80113be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80113ba:	f7ff f8d5 	bl	8010568 <xTaskResumeAll>
}
 80113be:	bf00      	nop
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	20000ebc 	.word	0x20000ebc
 80113cc:	20000ec0 	.word	0x20000ec0
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80113d4:	b480      	push	{r7}
 80113d6:	b085      	sub	sp, #20
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80113dc:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <prvGetNextExpireTime+0x44>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <prvGetNextExpireTime+0x16>
 80113e6:	2201      	movs	r2, #1
 80113e8:	e000      	b.n	80113ec <prvGetNextExpireTime+0x18>
 80113ea:	2200      	movs	r2, #0
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d105      	bne.n	8011404 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <prvGetNextExpireTime+0x44>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	60fb      	str	r3, [r7, #12]
 8011402:	e001      	b.n	8011408 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011404:	2300      	movs	r3, #0
 8011406:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011408:	68fb      	ldr	r3, [r7, #12]
}
 801140a:	4618      	mov	r0, r3
 801140c:	3714      	adds	r7, #20
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	20000eb8 	.word	0x20000eb8

0801141c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011424:	f7ff f93e 	bl	80106a4 <xTaskGetTickCount>
 8011428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801142a:	4b0b      	ldr	r3, [pc, #44]	; (8011458 <prvSampleTimeNow+0x3c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	429a      	cmp	r2, r3
 8011432:	d205      	bcs.n	8011440 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011434:	f000 f936 	bl	80116a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	601a      	str	r2, [r3, #0]
 801143e:	e002      	b.n	8011446 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011446:	4a04      	ldr	r2, [pc, #16]	; (8011458 <prvSampleTimeNow+0x3c>)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801144c:	68fb      	ldr	r3, [r7, #12]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3710      	adds	r7, #16
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	20000ec8 	.word	0x20000ec8

0801145c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b086      	sub	sp, #24
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801146a:	2300      	movs	r3, #0
 801146c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	68ba      	ldr	r2, [r7, #8]
 8011472:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	429a      	cmp	r2, r3
 8011480:	d812      	bhi.n	80114a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	1ad2      	subs	r2, r2, r3
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	699b      	ldr	r3, [r3, #24]
 801148c:	429a      	cmp	r2, r3
 801148e:	d302      	bcc.n	8011496 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011490:	2301      	movs	r3, #1
 8011492:	617b      	str	r3, [r7, #20]
 8011494:	e01b      	b.n	80114ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011496:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <prvInsertTimerInActiveList+0x7c>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	3304      	adds	r3, #4
 801149e:	4619      	mov	r1, r3
 80114a0:	4610      	mov	r0, r2
 80114a2:	f7fd fe0e 	bl	800f0c2 <vListInsert>
 80114a6:	e012      	b.n	80114ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d206      	bcs.n	80114be <prvInsertTimerInActiveList+0x62>
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d302      	bcc.n	80114be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80114b8:	2301      	movs	r3, #1
 80114ba:	617b      	str	r3, [r7, #20]
 80114bc:	e007      	b.n	80114ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114be:	4b07      	ldr	r3, [pc, #28]	; (80114dc <prvInsertTimerInActiveList+0x80>)
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3304      	adds	r3, #4
 80114c6:	4619      	mov	r1, r3
 80114c8:	4610      	mov	r0, r2
 80114ca:	f7fd fdfa 	bl	800f0c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80114ce:	697b      	ldr	r3, [r7, #20]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3718      	adds	r7, #24
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20000ebc 	.word	0x20000ebc
 80114dc:	20000eb8 	.word	0x20000eb8

080114e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b08e      	sub	sp, #56	; 0x38
 80114e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80114e6:	e0cc      	b.n	8011682 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	da19      	bge.n	8011522 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80114ee:	1d3b      	adds	r3, r7, #4
 80114f0:	3304      	adds	r3, #4
 80114f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80114f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10b      	bne.n	8011512 <prvProcessReceivedCommands+0x32>
 80114fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fe:	b672      	cpsid	i
 8011500:	f383 8811 	msr	BASEPRI, r3
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	b662      	cpsie	i
 801150e:	61fb      	str	r3, [r7, #28]
 8011510:	e7fe      	b.n	8011510 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011518:	6850      	ldr	r0, [r2, #4]
 801151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801151c:	6892      	ldr	r2, [r2, #8]
 801151e:	4611      	mov	r1, r2
 8011520:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f2c0 80ab 	blt.w	8011680 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d004      	beq.n	8011540 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	3304      	adds	r3, #4
 801153a:	4618      	mov	r0, r3
 801153c:	f7fd fdfa 	bl	800f134 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011540:	463b      	mov	r3, r7
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff ff6a 	bl	801141c <prvSampleTimeNow>
 8011548:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b09      	cmp	r3, #9
 801154e:	f200 8098 	bhi.w	8011682 <prvProcessReceivedCommands+0x1a2>
 8011552:	a201      	add	r2, pc, #4	; (adr r2, 8011558 <prvProcessReceivedCommands+0x78>)
 8011554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011558:	08011581 	.word	0x08011581
 801155c:	08011581 	.word	0x08011581
 8011560:	08011581 	.word	0x08011581
 8011564:	080115f7 	.word	0x080115f7
 8011568:	0801160b 	.word	0x0801160b
 801156c:	08011657 	.word	0x08011657
 8011570:	08011581 	.word	0x08011581
 8011574:	08011581 	.word	0x08011581
 8011578:	080115f7 	.word	0x080115f7
 801157c:	0801160b 	.word	0x0801160b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011586:	f043 0301 	orr.w	r3, r3, #1
 801158a:	b2da      	uxtb	r2, r3
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	18d1      	adds	r1, r2, r3
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115a0:	f7ff ff5c 	bl	801145c <prvInsertTimerInActiveList>
 80115a4:	4603      	mov	r3, r0
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d06b      	beq.n	8011682 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	6a1b      	ldr	r3, [r3, #32]
 80115ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115b8:	f003 0304 	and.w	r3, r3, #4
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d060      	beq.n	8011682 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	441a      	add	r2, r3
 80115c8:	2300      	movs	r3, #0
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	2300      	movs	r3, #0
 80115ce:	2100      	movs	r1, #0
 80115d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115d2:	f7ff fe03 	bl	80111dc <xTimerGenericCommand>
 80115d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d151      	bne.n	8011682 <prvProcessReceivedCommands+0x1a2>
 80115de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e2:	b672      	cpsid	i
 80115e4:	f383 8811 	msr	BASEPRI, r3
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	b662      	cpsie	i
 80115f2:	61bb      	str	r3, [r7, #24]
 80115f4:	e7fe      	b.n	80115f4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80115f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115fc:	f023 0301 	bic.w	r3, r3, #1
 8011600:	b2da      	uxtb	r2, r3
 8011602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011608:	e03b      	b.n	8011682 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011610:	f043 0301 	orr.w	r3, r3, #1
 8011614:	b2da      	uxtb	r2, r3
 8011616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011624:	699b      	ldr	r3, [r3, #24]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d10b      	bne.n	8011642 <prvProcessReceivedCommands+0x162>
 801162a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801162e:	b672      	cpsid	i
 8011630:	f383 8811 	msr	BASEPRI, r3
 8011634:	f3bf 8f6f 	isb	sy
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	b662      	cpsie	i
 801163e:	617b      	str	r3, [r7, #20]
 8011640:	e7fe      	b.n	8011640 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	699a      	ldr	r2, [r3, #24]
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	18d1      	adds	r1, r2, r3
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801164e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011650:	f7ff ff04 	bl	801145c <prvInsertTimerInActiveList>
					break;
 8011654:	e015      	b.n	8011682 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801165c:	f003 0302 	and.w	r3, r3, #2
 8011660:	2b00      	cmp	r3, #0
 8011662:	d103      	bne.n	801166c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011666:	f000 fbbd 	bl	8011de4 <vPortFree>
 801166a:	e00a      	b.n	8011682 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011672:	f023 0301 	bic.w	r3, r3, #1
 8011676:	b2da      	uxtb	r2, r3
 8011678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801167e:	e000      	b.n	8011682 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011682:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <prvProcessReceivedCommands+0x1c0>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	1d39      	adds	r1, r7, #4
 8011688:	2200      	movs	r2, #0
 801168a:	4618      	mov	r0, r3
 801168c:	f7fe f91e 	bl	800f8cc <xQueueReceive>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	f47f af28 	bne.w	80114e8 <prvProcessReceivedCommands+0x8>
	}
}
 8011698:	bf00      	nop
 801169a:	3730      	adds	r7, #48	; 0x30
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	20000ec0 	.word	0x20000ec0

080116a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b088      	sub	sp, #32
 80116a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80116aa:	e049      	b.n	8011740 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116ac:	4b2e      	ldr	r3, [pc, #184]	; (8011768 <prvSwitchTimerLists+0xc4>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116b6:	4b2c      	ldr	r3, [pc, #176]	; (8011768 <prvSwitchTimerLists+0xc4>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3304      	adds	r3, #4
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fd fd35 	bl	800f134 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116d8:	f003 0304 	and.w	r3, r3, #4
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d02f      	beq.n	8011740 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4413      	add	r3, r2
 80116e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80116ea:	68ba      	ldr	r2, [r7, #8]
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d90e      	bls.n	8011710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	68fa      	ldr	r2, [r7, #12]
 80116fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80116fe:	4b1a      	ldr	r3, [pc, #104]	; (8011768 <prvSwitchTimerLists+0xc4>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	3304      	adds	r3, #4
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f7fd fcda 	bl	800f0c2 <vListInsert>
 801170e:	e017      	b.n	8011740 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011710:	2300      	movs	r3, #0
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	2300      	movs	r3, #0
 8011716:	693a      	ldr	r2, [r7, #16]
 8011718:	2100      	movs	r1, #0
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7ff fd5e 	bl	80111dc <xTimerGenericCommand>
 8011720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10b      	bne.n	8011740 <prvSwitchTimerLists+0x9c>
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	b672      	cpsid	i
 801172e:	f383 8811 	msr	BASEPRI, r3
 8011732:	f3bf 8f6f 	isb	sy
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	b662      	cpsie	i
 801173c:	603b      	str	r3, [r7, #0]
 801173e:	e7fe      	b.n	801173e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011740:	4b09      	ldr	r3, [pc, #36]	; (8011768 <prvSwitchTimerLists+0xc4>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1b0      	bne.n	80116ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801174a:	4b07      	ldr	r3, [pc, #28]	; (8011768 <prvSwitchTimerLists+0xc4>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011750:	4b06      	ldr	r3, [pc, #24]	; (801176c <prvSwitchTimerLists+0xc8>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a04      	ldr	r2, [pc, #16]	; (8011768 <prvSwitchTimerLists+0xc4>)
 8011756:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011758:	4a04      	ldr	r2, [pc, #16]	; (801176c <prvSwitchTimerLists+0xc8>)
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	6013      	str	r3, [r2, #0]
}
 801175e:	bf00      	nop
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20000eb8 	.word	0x20000eb8
 801176c:	20000ebc 	.word	0x20000ebc

08011770 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011776:	f000 f947 	bl	8011a08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801177a:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <prvCheckForValidListAndQueue+0x60>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d120      	bne.n	80117c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011782:	4814      	ldr	r0, [pc, #80]	; (80117d4 <prvCheckForValidListAndQueue+0x64>)
 8011784:	f7fd fc4c 	bl	800f020 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011788:	4813      	ldr	r0, [pc, #76]	; (80117d8 <prvCheckForValidListAndQueue+0x68>)
 801178a:	f7fd fc49 	bl	800f020 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801178e:	4b13      	ldr	r3, [pc, #76]	; (80117dc <prvCheckForValidListAndQueue+0x6c>)
 8011790:	4a10      	ldr	r2, [pc, #64]	; (80117d4 <prvCheckForValidListAndQueue+0x64>)
 8011792:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011794:	4b12      	ldr	r3, [pc, #72]	; (80117e0 <prvCheckForValidListAndQueue+0x70>)
 8011796:	4a10      	ldr	r2, [pc, #64]	; (80117d8 <prvCheckForValidListAndQueue+0x68>)
 8011798:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801179a:	2300      	movs	r3, #0
 801179c:	9300      	str	r3, [sp, #0]
 801179e:	4b11      	ldr	r3, [pc, #68]	; (80117e4 <prvCheckForValidListAndQueue+0x74>)
 80117a0:	4a11      	ldr	r2, [pc, #68]	; (80117e8 <prvCheckForValidListAndQueue+0x78>)
 80117a2:	2110      	movs	r1, #16
 80117a4:	200a      	movs	r0, #10
 80117a6:	f7fd fd59 	bl	800f25c <xQueueGenericCreateStatic>
 80117aa:	4602      	mov	r2, r0
 80117ac:	4b08      	ldr	r3, [pc, #32]	; (80117d0 <prvCheckForValidListAndQueue+0x60>)
 80117ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80117b0:	4b07      	ldr	r3, [pc, #28]	; (80117d0 <prvCheckForValidListAndQueue+0x60>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d005      	beq.n	80117c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <prvCheckForValidListAndQueue+0x60>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	490b      	ldr	r1, [pc, #44]	; (80117ec <prvCheckForValidListAndQueue+0x7c>)
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fe fc22 	bl	8010008 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117c4:	f000 f952 	bl	8011a6c <vPortExitCritical>
}
 80117c8:	bf00      	nop
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20000ec0 	.word	0x20000ec0
 80117d4:	20000e90 	.word	0x20000e90
 80117d8:	20000ea4 	.word	0x20000ea4
 80117dc:	20000eb8 	.word	0x20000eb8
 80117e0:	20000ebc 	.word	0x20000ebc
 80117e4:	20000f6c 	.word	0x20000f6c
 80117e8:	20000ecc 	.word	0x20000ecc
 80117ec:	080139a4 	.word	0x080139a4

080117f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	3b04      	subs	r3, #4
 8011800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3b04      	subs	r3, #4
 801180e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	f023 0201 	bic.w	r2, r3, #1
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3b04      	subs	r3, #4
 801181e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011820:	4a0c      	ldr	r2, [pc, #48]	; (8011854 <pxPortInitialiseStack+0x64>)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3b14      	subs	r3, #20
 801182a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	3b04      	subs	r3, #4
 8011836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f06f 0202 	mvn.w	r2, #2
 801183e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	3b20      	subs	r3, #32
 8011844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011846:	68fb      	ldr	r3, [r7, #12]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	08011859 	.word	0x08011859

08011858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011862:	4b13      	ldr	r3, [pc, #76]	; (80118b0 <prvTaskExitError+0x58>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186a:	d00b      	beq.n	8011884 <prvTaskExitError+0x2c>
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	b672      	cpsid	i
 8011872:	f383 8811 	msr	BASEPRI, r3
 8011876:	f3bf 8f6f 	isb	sy
 801187a:	f3bf 8f4f 	dsb	sy
 801187e:	b662      	cpsie	i
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	e7fe      	b.n	8011882 <prvTaskExitError+0x2a>
 8011884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011888:	b672      	cpsid	i
 801188a:	f383 8811 	msr	BASEPRI, r3
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f3bf 8f4f 	dsb	sy
 8011896:	b662      	cpsie	i
 8011898:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801189a:	bf00      	nop
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d0fc      	beq.n	801189c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80118a2:	bf00      	nop
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop
 80118b0:	20000048 	.word	0x20000048
	...

080118c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80118c0:	4b07      	ldr	r3, [pc, #28]	; (80118e0 <pxCurrentTCBConst2>)
 80118c2:	6819      	ldr	r1, [r3, #0]
 80118c4:	6808      	ldr	r0, [r1, #0]
 80118c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ca:	f380 8809 	msr	PSP, r0
 80118ce:	f3bf 8f6f 	isb	sy
 80118d2:	f04f 0000 	mov.w	r0, #0
 80118d6:	f380 8811 	msr	BASEPRI, r0
 80118da:	4770      	bx	lr
 80118dc:	f3af 8000 	nop.w

080118e0 <pxCurrentTCBConst2>:
 80118e0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop

080118e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118e8:	4808      	ldr	r0, [pc, #32]	; (801190c <prvPortStartFirstTask+0x24>)
 80118ea:	6800      	ldr	r0, [r0, #0]
 80118ec:	6800      	ldr	r0, [r0, #0]
 80118ee:	f380 8808 	msr	MSP, r0
 80118f2:	f04f 0000 	mov.w	r0, #0
 80118f6:	f380 8814 	msr	CONTROL, r0
 80118fa:	b662      	cpsie	i
 80118fc:	b661      	cpsie	f
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	df00      	svc	0
 8011908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801190a:	bf00      	nop
 801190c:	e000ed08 	.word	0xe000ed08

08011910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011916:	4b36      	ldr	r3, [pc, #216]	; (80119f0 <xPortStartScheduler+0xe0>)
 8011918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	22ff      	movs	r2, #255	; 0xff
 8011926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	b2db      	uxtb	r3, r3
 801192e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011930:	78fb      	ldrb	r3, [r7, #3]
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011938:	b2da      	uxtb	r2, r3
 801193a:	4b2e      	ldr	r3, [pc, #184]	; (80119f4 <xPortStartScheduler+0xe4>)
 801193c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801193e:	4b2e      	ldr	r3, [pc, #184]	; (80119f8 <xPortStartScheduler+0xe8>)
 8011940:	2207      	movs	r2, #7
 8011942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011944:	e009      	b.n	801195a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011946:	4b2c      	ldr	r3, [pc, #176]	; (80119f8 <xPortStartScheduler+0xe8>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3b01      	subs	r3, #1
 801194c:	4a2a      	ldr	r2, [pc, #168]	; (80119f8 <xPortStartScheduler+0xe8>)
 801194e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011950:	78fb      	ldrb	r3, [r7, #3]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	b2db      	uxtb	r3, r3
 8011958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801195a:	78fb      	ldrb	r3, [r7, #3]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011962:	2b80      	cmp	r3, #128	; 0x80
 8011964:	d0ef      	beq.n	8011946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011966:	4b24      	ldr	r3, [pc, #144]	; (80119f8 <xPortStartScheduler+0xe8>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	f1c3 0307 	rsb	r3, r3, #7
 801196e:	2b04      	cmp	r3, #4
 8011970:	d00b      	beq.n	801198a <xPortStartScheduler+0x7a>
 8011972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011976:	b672      	cpsid	i
 8011978:	f383 8811 	msr	BASEPRI, r3
 801197c:	f3bf 8f6f 	isb	sy
 8011980:	f3bf 8f4f 	dsb	sy
 8011984:	b662      	cpsie	i
 8011986:	60bb      	str	r3, [r7, #8]
 8011988:	e7fe      	b.n	8011988 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801198a:	4b1b      	ldr	r3, [pc, #108]	; (80119f8 <xPortStartScheduler+0xe8>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	4a19      	ldr	r2, [pc, #100]	; (80119f8 <xPortStartScheduler+0xe8>)
 8011992:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011994:	4b18      	ldr	r3, [pc, #96]	; (80119f8 <xPortStartScheduler+0xe8>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801199c:	4a16      	ldr	r2, [pc, #88]	; (80119f8 <xPortStartScheduler+0xe8>)
 801199e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	b2da      	uxtb	r2, r3
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80119a8:	4b14      	ldr	r3, [pc, #80]	; (80119fc <xPortStartScheduler+0xec>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a13      	ldr	r2, [pc, #76]	; (80119fc <xPortStartScheduler+0xec>)
 80119ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80119b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80119b4:	4b11      	ldr	r3, [pc, #68]	; (80119fc <xPortStartScheduler+0xec>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a10      	ldr	r2, [pc, #64]	; (80119fc <xPortStartScheduler+0xec>)
 80119ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80119be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119c0:	f000 f8d4 	bl	8011b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119c4:	4b0e      	ldr	r3, [pc, #56]	; (8011a00 <xPortStartScheduler+0xf0>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119ca:	f000 f8f3 	bl	8011bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119ce:	4b0d      	ldr	r3, [pc, #52]	; (8011a04 <xPortStartScheduler+0xf4>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a0c      	ldr	r2, [pc, #48]	; (8011a04 <xPortStartScheduler+0xf4>)
 80119d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80119d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119da:	f7ff ff85 	bl	80118e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119de:	f7fe ff2b 	bl	8010838 <vTaskSwitchContext>
	prvTaskExitError();
 80119e2:	f7ff ff39 	bl	8011858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119e6:	2300      	movs	r3, #0
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	e000e400 	.word	0xe000e400
 80119f4:	20000fbc 	.word	0x20000fbc
 80119f8:	20000fc0 	.word	0x20000fc0
 80119fc:	e000ed20 	.word	0xe000ed20
 8011a00:	20000048 	.word	0x20000048
 8011a04:	e000ef34 	.word	0xe000ef34

08011a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a12:	b672      	cpsid	i
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	b662      	cpsie	i
 8011a22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a24:	4b0f      	ldr	r3, [pc, #60]	; (8011a64 <vPortEnterCritical+0x5c>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	3301      	adds	r3, #1
 8011a2a:	4a0e      	ldr	r2, [pc, #56]	; (8011a64 <vPortEnterCritical+0x5c>)
 8011a2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a2e:	4b0d      	ldr	r3, [pc, #52]	; (8011a64 <vPortEnterCritical+0x5c>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d110      	bne.n	8011a58 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a36:	4b0c      	ldr	r3, [pc, #48]	; (8011a68 <vPortEnterCritical+0x60>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00b      	beq.n	8011a58 <vPortEnterCritical+0x50>
 8011a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a44:	b672      	cpsid	i
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	b662      	cpsie	i
 8011a54:	603b      	str	r3, [r7, #0]
 8011a56:	e7fe      	b.n	8011a56 <vPortEnterCritical+0x4e>
	}
}
 8011a58:	bf00      	nop
 8011a5a:	370c      	adds	r7, #12
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	20000048 	.word	0x20000048
 8011a68:	e000ed04 	.word	0xe000ed04

08011a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a72:	4b12      	ldr	r3, [pc, #72]	; (8011abc <vPortExitCritical+0x50>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10b      	bne.n	8011a92 <vPortExitCritical+0x26>
 8011a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7e:	b672      	cpsid	i
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	b662      	cpsie	i
 8011a8e:	607b      	str	r3, [r7, #4]
 8011a90:	e7fe      	b.n	8011a90 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011a92:	4b0a      	ldr	r3, [pc, #40]	; (8011abc <vPortExitCritical+0x50>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3b01      	subs	r3, #1
 8011a98:	4a08      	ldr	r2, [pc, #32]	; (8011abc <vPortExitCritical+0x50>)
 8011a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a9c:	4b07      	ldr	r3, [pc, #28]	; (8011abc <vPortExitCritical+0x50>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d104      	bne.n	8011aae <vPortExitCritical+0x42>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011aae:	bf00      	nop
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	20000048 	.word	0x20000048

08011ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ac0:	f3ef 8009 	mrs	r0, PSP
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	4b15      	ldr	r3, [pc, #84]	; (8011b20 <pxCurrentTCBConst>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	f01e 0f10 	tst.w	lr, #16
 8011ad0:	bf08      	it	eq
 8011ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	6010      	str	r0, [r2, #0]
 8011adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ae4:	b672      	cpsid	i
 8011ae6:	f380 8811 	msr	BASEPRI, r0
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	b662      	cpsie	i
 8011af4:	f7fe fea0 	bl	8010838 <vTaskSwitchContext>
 8011af8:	f04f 0000 	mov.w	r0, #0
 8011afc:	f380 8811 	msr	BASEPRI, r0
 8011b00:	bc09      	pop	{r0, r3}
 8011b02:	6819      	ldr	r1, [r3, #0]
 8011b04:	6808      	ldr	r0, [r1, #0]
 8011b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0a:	f01e 0f10 	tst.w	lr, #16
 8011b0e:	bf08      	it	eq
 8011b10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b14:	f380 8809 	msr	PSP, r0
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop

08011b20 <pxCurrentTCBConst>:
 8011b20:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b24:	bf00      	nop
 8011b26:	bf00      	nop

08011b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	b672      	cpsid	i
 8011b34:	f383 8811 	msr	BASEPRI, r3
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	f3bf 8f4f 	dsb	sy
 8011b40:	b662      	cpsie	i
 8011b42:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b44:	f7fe fdbe 	bl	80106c4 <xTaskIncrementTick>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d003      	beq.n	8011b56 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b4e:	4b06      	ldr	r3, [pc, #24]	; (8011b68 <SysTick_Handler+0x40>)
 8011b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b54:	601a      	str	r2, [r3, #0]
 8011b56:	2300      	movs	r3, #0
 8011b58:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b60:	bf00      	nop
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	e000ed04 	.word	0xe000ed04

08011b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b70:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <vPortSetupTimerInterrupt+0x34>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b76:	4b0b      	ldr	r3, [pc, #44]	; (8011ba4 <vPortSetupTimerInterrupt+0x38>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ba8 <vPortSetupTimerInterrupt+0x3c>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a0a      	ldr	r2, [pc, #40]	; (8011bac <vPortSetupTimerInterrupt+0x40>)
 8011b82:	fba2 2303 	umull	r2, r3, r2, r3
 8011b86:	099b      	lsrs	r3, r3, #6
 8011b88:	4a09      	ldr	r2, [pc, #36]	; (8011bb0 <vPortSetupTimerInterrupt+0x44>)
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b8e:	4b04      	ldr	r3, [pc, #16]	; (8011ba0 <vPortSetupTimerInterrupt+0x34>)
 8011b90:	2207      	movs	r2, #7
 8011b92:	601a      	str	r2, [r3, #0]
}
 8011b94:	bf00      	nop
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop
 8011ba0:	e000e010 	.word	0xe000e010
 8011ba4:	e000e018 	.word	0xe000e018
 8011ba8:	20000000 	.word	0x20000000
 8011bac:	10624dd3 	.word	0x10624dd3
 8011bb0:	e000e014 	.word	0xe000e014

08011bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011bc4 <vPortEnableVFP+0x10>
 8011bb8:	6801      	ldr	r1, [r0, #0]
 8011bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011bbe:	6001      	str	r1, [r0, #0]
 8011bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bc2:	bf00      	nop
 8011bc4:	e000ed88 	.word	0xe000ed88

08011bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bce:	f3ef 8305 	mrs	r3, IPSR
 8011bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b0f      	cmp	r3, #15
 8011bd8:	d915      	bls.n	8011c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bda:	4a18      	ldr	r2, [pc, #96]	; (8011c3c <vPortValidateInterruptPriority+0x74>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4413      	add	r3, r2
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011be4:	4b16      	ldr	r3, [pc, #88]	; (8011c40 <vPortValidateInterruptPriority+0x78>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	7afa      	ldrb	r2, [r7, #11]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d20b      	bcs.n	8011c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	b672      	cpsid	i
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	b662      	cpsie	i
 8011c02:	607b      	str	r3, [r7, #4]
 8011c04:	e7fe      	b.n	8011c04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011c06:	4b0f      	ldr	r3, [pc, #60]	; (8011c44 <vPortValidateInterruptPriority+0x7c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011c0e:	4b0e      	ldr	r3, [pc, #56]	; (8011c48 <vPortValidateInterruptPriority+0x80>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d90b      	bls.n	8011c2e <vPortValidateInterruptPriority+0x66>
 8011c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1a:	b672      	cpsid	i
 8011c1c:	f383 8811 	msr	BASEPRI, r3
 8011c20:	f3bf 8f6f 	isb	sy
 8011c24:	f3bf 8f4f 	dsb	sy
 8011c28:	b662      	cpsie	i
 8011c2a:	603b      	str	r3, [r7, #0]
 8011c2c:	e7fe      	b.n	8011c2c <vPortValidateInterruptPriority+0x64>
	}
 8011c2e:	bf00      	nop
 8011c30:	3714      	adds	r7, #20
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr
 8011c3a:	bf00      	nop
 8011c3c:	e000e3f0 	.word	0xe000e3f0
 8011c40:	20000fbc 	.word	0x20000fbc
 8011c44:	e000ed0c 	.word	0xe000ed0c
 8011c48:	20000fc0 	.word	0x20000fc0

08011c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b08a      	sub	sp, #40	; 0x28
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c54:	2300      	movs	r3, #0
 8011c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c58:	f7fe fc78 	bl	801054c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c5c:	4b5c      	ldr	r3, [pc, #368]	; (8011dd0 <pvPortMalloc+0x184>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d101      	bne.n	8011c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c64:	f000 f91a 	bl	8011e9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c68:	4b5a      	ldr	r3, [pc, #360]	; (8011dd4 <pvPortMalloc+0x188>)
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	4013      	ands	r3, r2
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f040 8090 	bne.w	8011d96 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01e      	beq.n	8011cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011c7c:	2208      	movs	r2, #8
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4413      	add	r3, r2
 8011c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f003 0307 	and.w	r3, r3, #7
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d015      	beq.n	8011cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f023 0307 	bic.w	r3, r3, #7
 8011c94:	3308      	adds	r3, #8
 8011c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f003 0307 	and.w	r3, r3, #7
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00b      	beq.n	8011cba <pvPortMalloc+0x6e>
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	b672      	cpsid	i
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	b662      	cpsie	i
 8011cb6:	617b      	str	r3, [r7, #20]
 8011cb8:	e7fe      	b.n	8011cb8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d06a      	beq.n	8011d96 <pvPortMalloc+0x14a>
 8011cc0:	4b45      	ldr	r3, [pc, #276]	; (8011dd8 <pvPortMalloc+0x18c>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d865      	bhi.n	8011d96 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011cca:	4b44      	ldr	r3, [pc, #272]	; (8011ddc <pvPortMalloc+0x190>)
 8011ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011cce:	4b43      	ldr	r3, [pc, #268]	; (8011ddc <pvPortMalloc+0x190>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cd4:	e004      	b.n	8011ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d903      	bls.n	8011cf2 <pvPortMalloc+0xa6>
 8011cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1f1      	bne.n	8011cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011cf2:	4b37      	ldr	r3, [pc, #220]	; (8011dd0 <pvPortMalloc+0x184>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d04c      	beq.n	8011d96 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2208      	movs	r2, #8
 8011d02:	4413      	add	r3, r2
 8011d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d08:	681a      	ldr	r2, [r3, #0]
 8011d0a:	6a3b      	ldr	r3, [r7, #32]
 8011d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d10:	685a      	ldr	r2, [r3, #4]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	1ad2      	subs	r2, r2, r3
 8011d16:	2308      	movs	r3, #8
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d920      	bls.n	8011d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	4413      	add	r3, r2
 8011d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	f003 0307 	and.w	r3, r3, #7
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00b      	beq.n	8011d48 <pvPortMalloc+0xfc>
 8011d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d34:	b672      	cpsid	i
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	b662      	cpsie	i
 8011d44:	613b      	str	r3, [r7, #16]
 8011d46:	e7fe      	b.n	8011d46 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	685a      	ldr	r2, [r3, #4]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	1ad2      	subs	r2, r2, r3
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d5a:	69b8      	ldr	r0, [r7, #24]
 8011d5c:	f000 f900 	bl	8011f60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d60:	4b1d      	ldr	r3, [pc, #116]	; (8011dd8 <pvPortMalloc+0x18c>)
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	4a1b      	ldr	r2, [pc, #108]	; (8011dd8 <pvPortMalloc+0x18c>)
 8011d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d6e:	4b1a      	ldr	r3, [pc, #104]	; (8011dd8 <pvPortMalloc+0x18c>)
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	4b1b      	ldr	r3, [pc, #108]	; (8011de0 <pvPortMalloc+0x194>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d203      	bcs.n	8011d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d7a:	4b17      	ldr	r3, [pc, #92]	; (8011dd8 <pvPortMalloc+0x18c>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a18      	ldr	r2, [pc, #96]	; (8011de0 <pvPortMalloc+0x194>)
 8011d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d84:	685a      	ldr	r2, [r3, #4]
 8011d86:	4b13      	ldr	r3, [pc, #76]	; (8011dd4 <pvPortMalloc+0x188>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	431a      	orrs	r2, r3
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	2200      	movs	r2, #0
 8011d94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d96:	f7fe fbe7 	bl	8010568 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d101      	bne.n	8011da4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011da0:	f7ee fc18 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	f003 0307 	and.w	r3, r3, #7
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d00b      	beq.n	8011dc6 <pvPortMalloc+0x17a>
 8011dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db2:	b672      	cpsid	i
 8011db4:	f383 8811 	msr	BASEPRI, r3
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	f3bf 8f4f 	dsb	sy
 8011dc0:	b662      	cpsie	i
 8011dc2:	60fb      	str	r3, [r7, #12]
 8011dc4:	e7fe      	b.n	8011dc4 <pvPortMalloc+0x178>
	return pvReturn;
 8011dc6:	69fb      	ldr	r3, [r7, #28]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3728      	adds	r7, #40	; 0x28
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	20008fcc 	.word	0x20008fcc
 8011dd4:	20008fd8 	.word	0x20008fd8
 8011dd8:	20008fd0 	.word	0x20008fd0
 8011ddc:	20008fc4 	.word	0x20008fc4
 8011de0:	20008fd4 	.word	0x20008fd4

08011de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d04a      	beq.n	8011e8c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011df6:	2308      	movs	r3, #8
 8011df8:	425b      	negs	r3, r3
 8011dfa:	697a      	ldr	r2, [r7, #20]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	4b22      	ldr	r3, [pc, #136]	; (8011e94 <vPortFree+0xb0>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10b      	bne.n	8011e2a <vPortFree+0x46>
 8011e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e16:	b672      	cpsid	i
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	b662      	cpsie	i
 8011e26:	60fb      	str	r3, [r7, #12]
 8011e28:	e7fe      	b.n	8011e28 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00b      	beq.n	8011e4a <vPortFree+0x66>
 8011e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e36:	b672      	cpsid	i
 8011e38:	f383 8811 	msr	BASEPRI, r3
 8011e3c:	f3bf 8f6f 	isb	sy
 8011e40:	f3bf 8f4f 	dsb	sy
 8011e44:	b662      	cpsie	i
 8011e46:	60bb      	str	r3, [r7, #8]
 8011e48:	e7fe      	b.n	8011e48 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	685a      	ldr	r2, [r3, #4]
 8011e4e:	4b11      	ldr	r3, [pc, #68]	; (8011e94 <vPortFree+0xb0>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4013      	ands	r3, r2
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d019      	beq.n	8011e8c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d115      	bne.n	8011e8c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	685a      	ldr	r2, [r3, #4]
 8011e64:	4b0b      	ldr	r3, [pc, #44]	; (8011e94 <vPortFree+0xb0>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	43db      	mvns	r3, r3
 8011e6a:	401a      	ands	r2, r3
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e70:	f7fe fb6c 	bl	801054c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	685a      	ldr	r2, [r3, #4]
 8011e78:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <vPortFree+0xb4>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	4a06      	ldr	r2, [pc, #24]	; (8011e98 <vPortFree+0xb4>)
 8011e80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e82:	6938      	ldr	r0, [r7, #16]
 8011e84:	f000 f86c 	bl	8011f60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011e88:	f7fe fb6e 	bl	8010568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e8c:	bf00      	nop
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	20008fd8 	.word	0x20008fd8
 8011e98:	20008fd0 	.word	0x20008fd0

08011e9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ea8:	4b27      	ldr	r3, [pc, #156]	; (8011f48 <prvHeapInit+0xac>)
 8011eaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f003 0307 	and.w	r3, r3, #7
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d00c      	beq.n	8011ed0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	3307      	adds	r3, #7
 8011eba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f023 0307 	bic.w	r3, r3, #7
 8011ec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011ec4:	68ba      	ldr	r2, [r7, #8]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	1ad3      	subs	r3, r2, r3
 8011eca:	4a1f      	ldr	r2, [pc, #124]	; (8011f48 <prvHeapInit+0xac>)
 8011ecc:	4413      	add	r3, r2
 8011ece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ed4:	4a1d      	ldr	r2, [pc, #116]	; (8011f4c <prvHeapInit+0xb0>)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011eda:	4b1c      	ldr	r3, [pc, #112]	; (8011f4c <prvHeapInit+0xb0>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ee8:	2208      	movs	r2, #8
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	1a9b      	subs	r3, r3, r2
 8011eee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f023 0307 	bic.w	r3, r3, #7
 8011ef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	4a15      	ldr	r2, [pc, #84]	; (8011f50 <prvHeapInit+0xb4>)
 8011efc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011efe:	4b14      	ldr	r3, [pc, #80]	; (8011f50 <prvHeapInit+0xb4>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2200      	movs	r2, #0
 8011f04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f06:	4b12      	ldr	r3, [pc, #72]	; (8011f50 <prvHeapInit+0xb4>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	1ad2      	subs	r2, r2, r3
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f1c:	4b0c      	ldr	r3, [pc, #48]	; (8011f50 <prvHeapInit+0xb4>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	4a0a      	ldr	r2, [pc, #40]	; (8011f54 <prvHeapInit+0xb8>)
 8011f2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	4a09      	ldr	r2, [pc, #36]	; (8011f58 <prvHeapInit+0xbc>)
 8011f32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f34:	4b09      	ldr	r3, [pc, #36]	; (8011f5c <prvHeapInit+0xc0>)
 8011f36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f3a:	601a      	str	r2, [r3, #0]
}
 8011f3c:	bf00      	nop
 8011f3e:	3714      	adds	r7, #20
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	20000fc4 	.word	0x20000fc4
 8011f4c:	20008fc4 	.word	0x20008fc4
 8011f50:	20008fcc 	.word	0x20008fcc
 8011f54:	20008fd4 	.word	0x20008fd4
 8011f58:	20008fd0 	.word	0x20008fd0
 8011f5c:	20008fd8 	.word	0x20008fd8

08011f60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f60:	b480      	push	{r7}
 8011f62:	b085      	sub	sp, #20
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f68:	4b28      	ldr	r3, [pc, #160]	; (801200c <prvInsertBlockIntoFreeList+0xac>)
 8011f6a:	60fb      	str	r3, [r7, #12]
 8011f6c:	e002      	b.n	8011f74 <prvInsertBlockIntoFreeList+0x14>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d8f7      	bhi.n	8011f6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	4413      	add	r3, r2
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d108      	bne.n	8011fa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	441a      	add	r2, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	441a      	add	r2, r3
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d118      	bne.n	8011fe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	4b15      	ldr	r3, [pc, #84]	; (8012010 <prvInsertBlockIntoFreeList+0xb0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d00d      	beq.n	8011fde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	441a      	add	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	601a      	str	r2, [r3, #0]
 8011fdc:	e008      	b.n	8011ff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011fde:	4b0c      	ldr	r3, [pc, #48]	; (8012010 <prvInsertBlockIntoFreeList+0xb0>)
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	601a      	str	r2, [r3, #0]
 8011fe6:	e003      	b.n	8011ff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d002      	beq.n	8011ffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ffe:	bf00      	nop
 8012000:	3714      	adds	r7, #20
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	20008fc4 	.word	0x20008fc4
 8012010:	20008fcc 	.word	0x20008fcc

08012014 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012018:	2201      	movs	r2, #1
 801201a:	490e      	ldr	r1, [pc, #56]	; (8012054 <MX_USB_HOST_Init+0x40>)
 801201c:	480e      	ldr	r0, [pc, #56]	; (8012058 <MX_USB_HOST_Init+0x44>)
 801201e:	f7fa fe47 	bl	800ccb0 <USBH_Init>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012028:	f7ef fdac 	bl	8001b84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801202c:	490b      	ldr	r1, [pc, #44]	; (801205c <MX_USB_HOST_Init+0x48>)
 801202e:	480a      	ldr	r0, [pc, #40]	; (8012058 <MX_USB_HOST_Init+0x44>)
 8012030:	f7fa feee 	bl	800ce10 <USBH_RegisterClass>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801203a:	f7ef fda3 	bl	8001b84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801203e:	4806      	ldr	r0, [pc, #24]	; (8012058 <MX_USB_HOST_Init+0x44>)
 8012040:	f7fa ff72 	bl	800cf28 <USBH_Start>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801204a:	f7ef fd9b 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801204e:	bf00      	nop
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	08012061 	.word	0x08012061
 8012058:	2000b174 	.word	0x2000b174
 801205c:	20000028 	.word	0x20000028

08012060 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012060:	b480      	push	{r7}
 8012062:	b083      	sub	sp, #12
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	460b      	mov	r3, r1
 801206a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801206c:	78fb      	ldrb	r3, [r7, #3]
 801206e:	3b01      	subs	r3, #1
 8012070:	2b04      	cmp	r3, #4
 8012072:	d819      	bhi.n	80120a8 <USBH_UserProcess+0x48>
 8012074:	a201      	add	r2, pc, #4	; (adr r2, 801207c <USBH_UserProcess+0x1c>)
 8012076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801207a:	bf00      	nop
 801207c:	080120a9 	.word	0x080120a9
 8012080:	08012099 	.word	0x08012099
 8012084:	080120a9 	.word	0x080120a9
 8012088:	080120a1 	.word	0x080120a1
 801208c:	08012091 	.word	0x08012091
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012090:	4b09      	ldr	r3, [pc, #36]	; (80120b8 <USBH_UserProcess+0x58>)
 8012092:	2203      	movs	r2, #3
 8012094:	701a      	strb	r2, [r3, #0]
  break;
 8012096:	e008      	b.n	80120aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012098:	4b07      	ldr	r3, [pc, #28]	; (80120b8 <USBH_UserProcess+0x58>)
 801209a:	2202      	movs	r2, #2
 801209c:	701a      	strb	r2, [r3, #0]
  break;
 801209e:	e004      	b.n	80120aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80120a0:	4b05      	ldr	r3, [pc, #20]	; (80120b8 <USBH_UserProcess+0x58>)
 80120a2:	2201      	movs	r2, #1
 80120a4:	701a      	strb	r2, [r3, #0]
  break;
 80120a6:	e000      	b.n	80120aa <USBH_UserProcess+0x4a>

  default:
  break;
 80120a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80120aa:	bf00      	nop
 80120ac:	370c      	adds	r7, #12
 80120ae:	46bd      	mov	sp, r7
 80120b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop
 80120b8:	20008fdc 	.word	0x20008fdc

080120bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b08a      	sub	sp, #40	; 0x28
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120c4:	f107 0314 	add.w	r3, r7, #20
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	605a      	str	r2, [r3, #4]
 80120ce:	609a      	str	r2, [r3, #8]
 80120d0:	60da      	str	r2, [r3, #12]
 80120d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80120dc:	d13c      	bne.n	8012158 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80120de:	4b20      	ldr	r3, [pc, #128]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 80120e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120e2:	4a1f      	ldr	r2, [pc, #124]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 80120e4:	f043 0301 	orr.w	r3, r3, #1
 80120e8:	6313      	str	r3, [r2, #48]	; 0x30
 80120ea:	4b1d      	ldr	r3, [pc, #116]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 80120ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ee:	f003 0301 	and.w	r3, r3, #1
 80120f2:	613b      	str	r3, [r7, #16]
 80120f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80120f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80120fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120fc:	2302      	movs	r3, #2
 80120fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012100:	2300      	movs	r3, #0
 8012102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012104:	2303      	movs	r3, #3
 8012106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012108:	230a      	movs	r3, #10
 801210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801210c:	f107 0314 	add.w	r3, r7, #20
 8012110:	4619      	mov	r1, r3
 8012112:	4814      	ldr	r0, [pc, #80]	; (8012164 <HAL_HCD_MspInit+0xa8>)
 8012114:	f7f3 f882 	bl	800521c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012118:	4b11      	ldr	r3, [pc, #68]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 801211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801211c:	4a10      	ldr	r2, [pc, #64]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 801211e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012122:	6353      	str	r3, [r2, #52]	; 0x34
 8012124:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 8012126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801212c:	60fb      	str	r3, [r7, #12]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 8012132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012134:	4a0a      	ldr	r2, [pc, #40]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 8012136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801213a:	6453      	str	r3, [r2, #68]	; 0x44
 801213c:	4b08      	ldr	r3, [pc, #32]	; (8012160 <HAL_HCD_MspInit+0xa4>)
 801213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012144:	60bb      	str	r3, [r7, #8]
 8012146:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012148:	2200      	movs	r2, #0
 801214a:	2100      	movs	r1, #0
 801214c:	2043      	movs	r0, #67	; 0x43
 801214e:	f7f1 fff5 	bl	800413c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012152:	2043      	movs	r0, #67	; 0x43
 8012154:	f7f2 f80e 	bl	8004174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012158:	bf00      	nop
 801215a:	3728      	adds	r7, #40	; 0x28
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	40023800 	.word	0x40023800
 8012164:	40020000 	.word	0x40020000

08012168 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012176:	4618      	mov	r0, r3
 8012178:	f7fb fb83 	bl	800d882 <USBH_LL_IncTimer>
}
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012192:	4618      	mov	r0, r3
 8012194:	f7fb fbc7 	bl	800d926 <USBH_LL_Connect>
}
 8012198:	bf00      	nop
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fb fbdc 	bl	800d96c <USBH_LL_Disconnect>
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	460b      	mov	r3, r1
 80121c6:	70fb      	strb	r3, [r7, #3]
 80121c8:	4613      	mov	r3, r2
 80121ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fb fc13 	bl	800d9fe <USBH_LL_NotifyURBChange>
#endif
}
 80121d8:	bf00      	nop
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fb fb71 	bl	800d8d6 <USBH_LL_PortEnabled>
}
 80121f4:	bf00      	nop
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801220a:	4618      	mov	r0, r3
 801220c:	f7fb fb7d 	bl	800d90a <USBH_LL_PortDisabled>
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012226:	2b01      	cmp	r3, #1
 8012228:	d12a      	bne.n	8012280 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801222a:	4a18      	ldr	r2, [pc, #96]	; (801228c <USBH_LL_Init+0x74>)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	4a15      	ldr	r2, [pc, #84]	; (801228c <USBH_LL_Init+0x74>)
 8012236:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801223a:	4b14      	ldr	r3, [pc, #80]	; (801228c <USBH_LL_Init+0x74>)
 801223c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012240:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012242:	4b12      	ldr	r3, [pc, #72]	; (801228c <USBH_LL_Init+0x74>)
 8012244:	2208      	movs	r2, #8
 8012246:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012248:	4b10      	ldr	r3, [pc, #64]	; (801228c <USBH_LL_Init+0x74>)
 801224a:	2201      	movs	r2, #1
 801224c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801224e:	4b0f      	ldr	r3, [pc, #60]	; (801228c <USBH_LL_Init+0x74>)
 8012250:	2200      	movs	r2, #0
 8012252:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012254:	4b0d      	ldr	r3, [pc, #52]	; (801228c <USBH_LL_Init+0x74>)
 8012256:	2202      	movs	r2, #2
 8012258:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801225a:	4b0c      	ldr	r3, [pc, #48]	; (801228c <USBH_LL_Init+0x74>)
 801225c:	2200      	movs	r2, #0
 801225e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012260:	480a      	ldr	r0, [pc, #40]	; (801228c <USBH_LL_Init+0x74>)
 8012262:	f7f3 f99e 	bl	80055a2 <HAL_HCD_Init>
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	d001      	beq.n	8012270 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801226c:	f7ef fc8a 	bl	8001b84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012270:	4806      	ldr	r0, [pc, #24]	; (801228c <USBH_LL_Init+0x74>)
 8012272:	f7f3 fda1 	bl	8005db8 <HAL_HCD_GetCurrentFrame>
 8012276:	4603      	mov	r3, r0
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7fb faf2 	bl	800d864 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	2000b558 	.word	0x2000b558

08012290 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012298:	2300      	movs	r3, #0
 801229a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801229c:	2300      	movs	r3, #0
 801229e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f3 fd0e 	bl	8005cc8 <HAL_HCD_Start>
 80122ac:	4603      	mov	r3, r0
 80122ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80122b0:	7bfb      	ldrb	r3, [r7, #15]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 f95c 	bl	8012570 <USBH_Get_USB_Status>
 80122b8:	4603      	mov	r3, r0
 80122ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b084      	sub	sp, #16
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80122d2:	2300      	movs	r3, #0
 80122d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f3 fd16 	bl	8005d0e <HAL_HCD_Stop>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f000 f941 	bl	8012570 <USBH_Get_USB_Status>
 80122ee:	4603      	mov	r3, r0
 80122f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012304:	2301      	movs	r3, #1
 8012306:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801230e:	4618      	mov	r0, r3
 8012310:	f7f3 fd60 	bl	8005dd4 <HAL_HCD_GetCurrentSpeed>
 8012314:	4603      	mov	r3, r0
 8012316:	2b01      	cmp	r3, #1
 8012318:	d007      	beq.n	801232a <USBH_LL_GetSpeed+0x2e>
 801231a:	2b01      	cmp	r3, #1
 801231c:	d302      	bcc.n	8012324 <USBH_LL_GetSpeed+0x28>
 801231e:	2b02      	cmp	r3, #2
 8012320:	d006      	beq.n	8012330 <USBH_LL_GetSpeed+0x34>
 8012322:	e008      	b.n	8012336 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012324:	2300      	movs	r3, #0
 8012326:	73fb      	strb	r3, [r7, #15]
    break;
 8012328:	e008      	b.n	801233c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801232a:	2301      	movs	r3, #1
 801232c:	73fb      	strb	r3, [r7, #15]
    break;
 801232e:	e005      	b.n	801233c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012330:	2302      	movs	r3, #2
 8012332:	73fb      	strb	r3, [r7, #15]
    break;
 8012334:	e002      	b.n	801233c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8012336:	2301      	movs	r3, #1
 8012338:	73fb      	strb	r3, [r7, #15]
    break;
 801233a:	bf00      	nop
  }
  return  speed;
 801233c:	7bfb      	ldrb	r3, [r7, #15]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012346:	b580      	push	{r7, lr}
 8012348:	b084      	sub	sp, #16
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801234e:	2300      	movs	r3, #0
 8012350:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012352:	2300      	movs	r3, #0
 8012354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801235c:	4618      	mov	r0, r3
 801235e:	f7f3 fcf3 	bl	8005d48 <HAL_HCD_ResetPort>
 8012362:	4603      	mov	r3, r0
 8012364:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012366:	7bfb      	ldrb	r3, [r7, #15]
 8012368:	4618      	mov	r0, r3
 801236a:	f000 f901 	bl	8012570 <USBH_Get_USB_Status>
 801236e:	4603      	mov	r3, r0
 8012370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012372:	7bbb      	ldrb	r3, [r7, #14]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3710      	adds	r7, #16
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	460b      	mov	r3, r1
 8012386:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801238e:	78fa      	ldrb	r2, [r7, #3]
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f7f3 fcfb 	bl	8005d8e <HAL_HCD_HC_GetXferCount>
 8012398:	4603      	mov	r3, r0
}
 801239a:	4618      	mov	r0, r3
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80123a2:	b590      	push	{r4, r7, lr}
 80123a4:	b089      	sub	sp, #36	; 0x24
 80123a6:	af04      	add	r7, sp, #16
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	4608      	mov	r0, r1
 80123ac:	4611      	mov	r1, r2
 80123ae:	461a      	mov	r2, r3
 80123b0:	4603      	mov	r3, r0
 80123b2:	70fb      	strb	r3, [r7, #3]
 80123b4:	460b      	mov	r3, r1
 80123b6:	70bb      	strb	r3, [r7, #2]
 80123b8:	4613      	mov	r3, r2
 80123ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80123c0:	2300      	movs	r3, #0
 80123c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80123ca:	787c      	ldrb	r4, [r7, #1]
 80123cc:	78ba      	ldrb	r2, [r7, #2]
 80123ce:	78f9      	ldrb	r1, [r7, #3]
 80123d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80123d2:	9302      	str	r3, [sp, #8]
 80123d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123de:	9300      	str	r3, [sp, #0]
 80123e0:	4623      	mov	r3, r4
 80123e2:	f7f3 f940 	bl	8005666 <HAL_HCD_HC_Init>
 80123e6:	4603      	mov	r3, r0
 80123e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80123ea:	7bfb      	ldrb	r3, [r7, #15]
 80123ec:	4618      	mov	r0, r3
 80123ee:	f000 f8bf 	bl	8012570 <USBH_Get_USB_Status>
 80123f2:	4603      	mov	r3, r0
 80123f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3714      	adds	r7, #20
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd90      	pop	{r4, r7, pc}

08012400 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801240c:	2300      	movs	r3, #0
 801240e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801241a:	78fa      	ldrb	r2, [r7, #3]
 801241c:	4611      	mov	r1, r2
 801241e:	4618      	mov	r0, r3
 8012420:	f7f3 f9b9 	bl	8005796 <HAL_HCD_HC_Halt>
 8012424:	4603      	mov	r3, r0
 8012426:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012428:	7bfb      	ldrb	r3, [r7, #15]
 801242a:	4618      	mov	r0, r3
 801242c:	f000 f8a0 	bl	8012570 <USBH_Get_USB_Status>
 8012430:	4603      	mov	r3, r0
 8012432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012434:	7bbb      	ldrb	r3, [r7, #14]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801243e:	b590      	push	{r4, r7, lr}
 8012440:	b089      	sub	sp, #36	; 0x24
 8012442:	af04      	add	r7, sp, #16
 8012444:	6078      	str	r0, [r7, #4]
 8012446:	4608      	mov	r0, r1
 8012448:	4611      	mov	r1, r2
 801244a:	461a      	mov	r2, r3
 801244c:	4603      	mov	r3, r0
 801244e:	70fb      	strb	r3, [r7, #3]
 8012450:	460b      	mov	r3, r1
 8012452:	70bb      	strb	r3, [r7, #2]
 8012454:	4613      	mov	r3, r2
 8012456:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012458:	2300      	movs	r3, #0
 801245a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012466:	787c      	ldrb	r4, [r7, #1]
 8012468:	78ba      	ldrb	r2, [r7, #2]
 801246a:	78f9      	ldrb	r1, [r7, #3]
 801246c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012470:	9303      	str	r3, [sp, #12]
 8012472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012474:	9302      	str	r3, [sp, #8]
 8012476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012478:	9301      	str	r3, [sp, #4]
 801247a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801247e:	9300      	str	r3, [sp, #0]
 8012480:	4623      	mov	r3, r4
 8012482:	f7f3 f9ab 	bl	80057dc <HAL_HCD_HC_SubmitRequest>
 8012486:	4603      	mov	r3, r0
 8012488:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801248a:	7bfb      	ldrb	r3, [r7, #15]
 801248c:	4618      	mov	r0, r3
 801248e:	f000 f86f 	bl	8012570 <USBH_Get_USB_Status>
 8012492:	4603      	mov	r3, r0
 8012494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012496:	7bbb      	ldrb	r3, [r7, #14]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3714      	adds	r7, #20
 801249c:	46bd      	mov	sp, r7
 801249e:	bd90      	pop	{r4, r7, pc}

080124a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	460b      	mov	r3, r1
 80124aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124b2:	78fa      	ldrb	r2, [r7, #3]
 80124b4:	4611      	mov	r1, r2
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f3 fc54 	bl	8005d64 <HAL_HCD_HC_GetURBState>
 80124bc:	4603      	mov	r3, r0
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	460b      	mov	r3, r1
 80124d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d103      	bne.n	80124e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80124dc:	78fb      	ldrb	r3, [r7, #3]
 80124de:	4618      	mov	r0, r3
 80124e0:	f000 f872 	bl	80125c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80124e4:	20c8      	movs	r0, #200	; 0xc8
 80124e6:	f7f1 fac7 	bl	8003a78 <HAL_Delay>
  return USBH_OK;
 80124ea:	2300      	movs	r3, #0
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b085      	sub	sp, #20
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	460b      	mov	r3, r1
 80124fe:	70fb      	strb	r3, [r7, #3]
 8012500:	4613      	mov	r3, r2
 8012502:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801250a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801250c:	78fa      	ldrb	r2, [r7, #3]
 801250e:	68f9      	ldr	r1, [r7, #12]
 8012510:	4613      	mov	r3, r2
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	4413      	add	r3, r2
 8012516:	00db      	lsls	r3, r3, #3
 8012518:	440b      	add	r3, r1
 801251a:	333b      	adds	r3, #59	; 0x3b
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00a      	beq.n	8012538 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012522:	78fa      	ldrb	r2, [r7, #3]
 8012524:	68f9      	ldr	r1, [r7, #12]
 8012526:	4613      	mov	r3, r2
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	4413      	add	r3, r2
 801252c:	00db      	lsls	r3, r3, #3
 801252e:	440b      	add	r3, r1
 8012530:	3350      	adds	r3, #80	; 0x50
 8012532:	78ba      	ldrb	r2, [r7, #2]
 8012534:	701a      	strb	r2, [r3, #0]
 8012536:	e009      	b.n	801254c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012538:	78fa      	ldrb	r2, [r7, #3]
 801253a:	68f9      	ldr	r1, [r7, #12]
 801253c:	4613      	mov	r3, r2
 801253e:	009b      	lsls	r3, r3, #2
 8012540:	4413      	add	r3, r2
 8012542:	00db      	lsls	r3, r3, #3
 8012544:	440b      	add	r3, r1
 8012546:	3351      	adds	r3, #81	; 0x51
 8012548:	78ba      	ldrb	r2, [r7, #2]
 801254a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3714      	adds	r7, #20
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr

0801255a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b082      	sub	sp, #8
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7f1 fa88 	bl	8003a78 <HAL_Delay>
}
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	4603      	mov	r3, r0
 8012578:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801257a:	2300      	movs	r3, #0
 801257c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801257e:	79fb      	ldrb	r3, [r7, #7]
 8012580:	2b03      	cmp	r3, #3
 8012582:	d817      	bhi.n	80125b4 <USBH_Get_USB_Status+0x44>
 8012584:	a201      	add	r2, pc, #4	; (adr r2, 801258c <USBH_Get_USB_Status+0x1c>)
 8012586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801258a:	bf00      	nop
 801258c:	0801259d 	.word	0x0801259d
 8012590:	080125a3 	.word	0x080125a3
 8012594:	080125a9 	.word	0x080125a9
 8012598:	080125af 	.word	0x080125af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801259c:	2300      	movs	r3, #0
 801259e:	73fb      	strb	r3, [r7, #15]
    break;
 80125a0:	e00b      	b.n	80125ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80125a2:	2302      	movs	r3, #2
 80125a4:	73fb      	strb	r3, [r7, #15]
    break;
 80125a6:	e008      	b.n	80125ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80125a8:	2301      	movs	r3, #1
 80125aa:	73fb      	strb	r3, [r7, #15]
    break;
 80125ac:	e005      	b.n	80125ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80125ae:	2302      	movs	r3, #2
 80125b0:	73fb      	strb	r3, [r7, #15]
    break;
 80125b2:	e002      	b.n	80125ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80125b4:	2302      	movs	r3, #2
 80125b6:	73fb      	strb	r3, [r7, #15]
    break;
 80125b8:	bf00      	nop
  }
  return usb_status;
 80125ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3714      	adds	r7, #20
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80125d2:	79fb      	ldrb	r3, [r7, #7]
 80125d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80125d6:	79fb      	ldrb	r3, [r7, #7]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d102      	bne.n	80125e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80125dc:	2301      	movs	r3, #1
 80125de:	73fb      	strb	r3, [r7, #15]
 80125e0:	e001      	b.n	80125e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80125e2:	2300      	movs	r3, #0
 80125e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80125e6:	7bfb      	ldrb	r3, [r7, #15]
 80125e8:	461a      	mov	r2, r3
 80125ea:	2120      	movs	r1, #32
 80125ec:	4803      	ldr	r0, [pc, #12]	; (80125fc <MX_DriverVbusFS+0x34>)
 80125ee:	f7f2 ffbf 	bl	8005570 <HAL_GPIO_WritePin>
}
 80125f2:	bf00      	nop
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	40020c00 	.word	0x40020c00

08012600 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8012604:	f000 f806 	bl	8012614 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8012608:	f04f 30ff 	mov.w	r0, #4294967295
 801260c:	f7f0 fc4c 	bl	8002ea8 <BSP_LCD_Clear>
}
 8012610:	bf00      	nop
 8012612:	bd80      	pop	{r7, pc}

08012614 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8012614:	b480      	push	{r7}
 8012616:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8012618:	4b12      	ldr	r3, [pc, #72]	; (8012664 <LCD_LOG_DeInit+0x50>)
 801261a:	4a13      	ldr	r2, [pc, #76]	; (8012668 <LCD_LOG_DeInit+0x54>)
 801261c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 801261e:	4b13      	ldr	r3, [pc, #76]	; (801266c <LCD_LOG_DeInit+0x58>)
 8012620:	2200      	movs	r2, #0
 8012622:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8012624:	4b12      	ldr	r3, [pc, #72]	; (8012670 <LCD_LOG_DeInit+0x5c>)
 8012626:	2200      	movs	r2, #0
 8012628:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 801262a:	4b12      	ldr	r3, [pc, #72]	; (8012674 <LCD_LOG_DeInit+0x60>)
 801262c:	2200      	movs	r2, #0
 801262e:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8012630:	4b11      	ldr	r3, [pc, #68]	; (8012678 <LCD_LOG_DeInit+0x64>)
 8012632:	2200      	movs	r2, #0
 8012634:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8012636:	4b11      	ldr	r3, [pc, #68]	; (801267c <LCD_LOG_DeInit+0x68>)
 8012638:	2200      	movs	r2, #0
 801263a:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 801263c:	4b10      	ldr	r3, [pc, #64]	; (8012680 <LCD_LOG_DeInit+0x6c>)
 801263e:	2201      	movs	r2, #1
 8012640:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8012642:	4b10      	ldr	r3, [pc, #64]	; (8012684 <LCD_LOG_DeInit+0x70>)
 8012644:	2200      	movs	r2, #0
 8012646:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8012648:	4b0f      	ldr	r3, [pc, #60]	; (8012688 <LCD_LOG_DeInit+0x74>)
 801264a:	2200      	movs	r2, #0
 801264c:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 801264e:	4b0f      	ldr	r3, [pc, #60]	; (801268c <LCD_LOG_DeInit+0x78>)
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8012654:	4b0e      	ldr	r3, [pc, #56]	; (8012690 <LCD_LOG_DeInit+0x7c>)
 8012656:	2200      	movs	r2, #0
 8012658:	801a      	strh	r2, [r3, #0]
}
 801265a:	bf00      	nop
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr
 8012664:	2000f480 	.word	0x2000f480
 8012668:	ff000080 	.word	0xff000080
 801266c:	2000b822 	.word	0x2000b822
 8012670:	2000b828 	.word	0x2000b828
 8012674:	2000b820 	.word	0x2000b820
 8012678:	2000b81e 	.word	0x2000b81e
 801267c:	2000b81c 	.word	0x2000b81c
 8012680:	2000b824 	.word	0x2000b824
 8012684:	2000b82a 	.word	0x2000b82a
 8012688:	2000b825 	.word	0x2000b825
 801268c:	2000b826 	.word	0x2000b826
 8012690:	2000f484 	.word	0x2000f484

08012694 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 801269c:	4817      	ldr	r0, [pc, #92]	; (80126fc <LCD_LOG_SetHeader+0x68>)
 801269e:	f7f0 fbd3 	bl	8002e48 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80126a2:	4817      	ldr	r0, [pc, #92]	; (8012700 <LCD_LOG_SetHeader+0x6c>)
 80126a4:	f7f0 fb9e 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80126a8:	f7f0 fb14 	bl	8002cd4 <BSP_LCD_GetXSize>
 80126ac:	4603      	mov	r3, r0
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	4b12      	ldr	r3, [pc, #72]	; (80126fc <LCD_LOG_SetHeader+0x68>)
 80126b2:	88db      	ldrh	r3, [r3, #6]
 80126b4:	4619      	mov	r1, r3
 80126b6:	0049      	lsls	r1, r1, #1
 80126b8:	440b      	add	r3, r1
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	2100      	movs	r1, #0
 80126be:	2000      	movs	r0, #0
 80126c0:	f7f0 fd82 	bl	80031c8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80126c4:	f04f 30ff 	mov.w	r0, #4294967295
 80126c8:	f7f0 fb8c 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80126cc:	480c      	ldr	r0, [pc, #48]	; (8012700 <LCD_LOG_SetHeader+0x6c>)
 80126ce:	f7f0 fba1 	bl	8002e14 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80126d2:	4b0a      	ldr	r3, [pc, #40]	; (80126fc <LCD_LOG_SetHeader+0x68>)
 80126d4:	88d9      	ldrh	r1, [r3, #6]
 80126d6:	2301      	movs	r3, #1
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	2000      	movs	r0, #0
 80126dc:	f7f0 fc50 	bl	8002f80 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80126e0:	f04f 30ff 	mov.w	r0, #4294967295
 80126e4:	f7f0 fb96 	bl	8002e14 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80126e8:	4806      	ldr	r0, [pc, #24]	; (8012704 <LCD_LOG_SetHeader+0x70>)
 80126ea:	f7f0 fb7b 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80126ee:	4806      	ldr	r0, [pc, #24]	; (8012708 <LCD_LOG_SetHeader+0x74>)
 80126f0:	f7f0 fbaa 	bl	8002e48 <BSP_LCD_SetFont>
}
 80126f4:	bf00      	nop
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	2000000c 	.word	0x2000000c
 8012700:	ff0000ff 	.word	0xff0000ff
 8012704:	ff000080 	.word	0xff000080
 8012708:	20000014 	.word	0x20000014

0801270c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 801270c:	b590      	push	{r4, r7, lr}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8012714:	481e      	ldr	r0, [pc, #120]	; (8012790 <LCD_LOG_SetFooter+0x84>)
 8012716:	f7f0 fb97 	bl	8002e48 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 801271a:	481e      	ldr	r0, [pc, #120]	; (8012794 <LCD_LOG_SetFooter+0x88>)
 801271c:	f7f0 fb62 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8012720:	f7f0 faec 	bl	8002cfc <BSP_LCD_GetYSize>
 8012724:	4603      	mov	r3, r0
 8012726:	b29a      	uxth	r2, r3
 8012728:	4b19      	ldr	r3, [pc, #100]	; (8012790 <LCD_LOG_SetFooter+0x84>)
 801272a:	88db      	ldrh	r3, [r3, #6]
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	b29b      	uxth	r3, r3
 8012730:	3b04      	subs	r3, #4
 8012732:	b29c      	uxth	r4, r3
 8012734:	f7f0 face 	bl	8002cd4 <BSP_LCD_GetXSize>
 8012738:	4603      	mov	r3, r0
 801273a:	b29a      	uxth	r2, r3
 801273c:	4b14      	ldr	r3, [pc, #80]	; (8012790 <LCD_LOG_SetFooter+0x84>)
 801273e:	88db      	ldrh	r3, [r3, #6]
 8012740:	3304      	adds	r3, #4
 8012742:	b29b      	uxth	r3, r3
 8012744:	4621      	mov	r1, r4
 8012746:	2000      	movs	r0, #0
 8012748:	f7f0 fd3e 	bl	80031c8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 801274c:	f04f 30ff 	mov.w	r0, #4294967295
 8012750:	f7f0 fb48 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8012754:	480f      	ldr	r0, [pc, #60]	; (8012794 <LCD_LOG_SetFooter+0x88>)
 8012756:	f7f0 fb5d 	bl	8002e14 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 801275a:	f7f0 facf 	bl	8002cfc <BSP_LCD_GetYSize>
 801275e:	4603      	mov	r3, r0
 8012760:	b29a      	uxth	r2, r3
 8012762:	4b0b      	ldr	r3, [pc, #44]	; (8012790 <LCD_LOG_SetFooter+0x84>)
 8012764:	88db      	ldrh	r3, [r3, #6]
 8012766:	1ad3      	subs	r3, r2, r3
 8012768:	b299      	uxth	r1, r3
 801276a:	2301      	movs	r3, #1
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	2000      	movs	r0, #0
 8012770:	f7f0 fc06 	bl	8002f80 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8012774:	f04f 30ff 	mov.w	r0, #4294967295
 8012778:	f7f0 fb4c 	bl	8002e14 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 801277c:	4806      	ldr	r0, [pc, #24]	; (8012798 <LCD_LOG_SetFooter+0x8c>)
 801277e:	f7f0 fb31 	bl	8002de4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8012782:	4803      	ldr	r0, [pc, #12]	; (8012790 <LCD_LOG_SetFooter+0x84>)
 8012784:	f7f0 fb60 	bl	8002e48 <BSP_LCD_SetFont>
}
 8012788:	bf00      	nop
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	bd90      	pop	{r4, r7, pc}
 8012790:	20000014 	.word	0x20000014
 8012794:	ff0000ff 	.word	0xff0000ff
 8012798:	ff000080 	.word	0xff000080

0801279c <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 801279c:	b590      	push	{r4, r7, lr}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 80127a4:	f7f0 fb6a 	bl	8002e7c <BSP_LCD_GetFont>
 80127a8:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 80127aa:	4b60      	ldr	r3, [pc, #384]	; (801292c <__io_putchar+0x190>)
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f040 80b6 	bne.w	8012920 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 80127b4:	4b5e      	ldr	r3, [pc, #376]	; (8012930 <__io_putchar+0x194>)
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d110      	bne.n	80127de <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80127bc:	4b5d      	ldr	r3, [pc, #372]	; (8012934 <__io_putchar+0x198>)
 80127be:	881a      	ldrh	r2, [r3, #0]
 80127c0:	4b5d      	ldr	r3, [pc, #372]	; (8012938 <__io_putchar+0x19c>)
 80127c2:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80127c4:	4b5d      	ldr	r3, [pc, #372]	; (801293c <__io_putchar+0x1a0>)
 80127c6:	881a      	ldrh	r2, [r3, #0]
 80127c8:	4b5d      	ldr	r3, [pc, #372]	; (8012940 <__io_putchar+0x1a4>)
 80127ca:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 80127cc:	4b58      	ldr	r3, [pc, #352]	; (8012930 <__io_putchar+0x194>)
 80127ce:	2200      	movs	r2, #0
 80127d0:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 80127d2:	4b5c      	ldr	r3, [pc, #368]	; (8012944 <__io_putchar+0x1a8>)
 80127d4:	2200      	movs	r2, #0
 80127d6:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 80127d8:	4b5b      	ldr	r3, [pc, #364]	; (8012948 <__io_putchar+0x1ac>)
 80127da:	2200      	movs	r2, #0
 80127dc:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80127de:	4b5b      	ldr	r3, [pc, #364]	; (801294c <__io_putchar+0x1b0>)
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	461c      	mov	r4, r3
 80127e4:	f7f0 fa76 	bl	8002cd4 <BSP_LCD_GetXSize>
 80127e8:	4602      	mov	r2, r0
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	889b      	ldrh	r3, [r3, #4]
 80127ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80127f2:	429c      	cmp	r4, r3
 80127f4:	d218      	bcs.n	8012828 <__io_putchar+0x8c>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b0a      	cmp	r3, #10
 80127fa:	d015      	beq.n	8012828 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80127fc:	4b4e      	ldr	r3, [pc, #312]	; (8012938 <__io_putchar+0x19c>)
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	4619      	mov	r1, r3
 8012802:	4b52      	ldr	r3, [pc, #328]	; (801294c <__io_putchar+0x1b0>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	1c5a      	adds	r2, r3, #1
 8012808:	b290      	uxth	r0, r2
 801280a:	4a50      	ldr	r2, [pc, #320]	; (801294c <__io_putchar+0x1b0>)
 801280c:	8010      	strh	r0, [r2, #0]
 801280e:	461c      	mov	r4, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	b2d8      	uxtb	r0, r3
 8012814:	4a4e      	ldr	r2, [pc, #312]	; (8012950 <__io_putchar+0x1b4>)
 8012816:	460b      	mov	r3, r1
 8012818:	015b      	lsls	r3, r3, #5
 801281a:	440b      	add	r3, r1
 801281c:	009b      	lsls	r3, r3, #2
 801281e:	4413      	add	r3, r2
 8012820:	4423      	add	r3, r4
 8012822:	4602      	mov	r2, r0
 8012824:	701a      	strb	r2, [r3, #0]
 8012826:	e07b      	b.n	8012920 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8012828:	4b45      	ldr	r3, [pc, #276]	; (8012940 <__io_putchar+0x1a4>)
 801282a:	881a      	ldrh	r2, [r3, #0]
 801282c:	4b42      	ldr	r3, [pc, #264]	; (8012938 <__io_putchar+0x19c>)
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	429a      	cmp	r2, r3
 8012832:	d314      	bcc.n	801285e <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8012834:	4b47      	ldr	r3, [pc, #284]	; (8012954 <__io_putchar+0x1b8>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10d      	bne.n	8012858 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 801283c:	4b40      	ldr	r3, [pc, #256]	; (8012940 <__io_putchar+0x1a4>)
 801283e:	881b      	ldrh	r3, [r3, #0]
 8012840:	3301      	adds	r3, #1
 8012842:	b29a      	uxth	r2, r3
 8012844:	4b3e      	ldr	r3, [pc, #248]	; (8012940 <__io_putchar+0x1a4>)
 8012846:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8012848:	4b3d      	ldr	r3, [pc, #244]	; (8012940 <__io_putchar+0x1a4>)
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	2b75      	cmp	r3, #117	; 0x75
 801284e:	d106      	bne.n	801285e <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8012850:	4b3b      	ldr	r3, [pc, #236]	; (8012940 <__io_putchar+0x1a4>)
 8012852:	2200      	movs	r2, #0
 8012854:	801a      	strh	r2, [r3, #0]
 8012856:	e002      	b.n	801285e <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8012858:	4b3e      	ldr	r3, [pc, #248]	; (8012954 <__io_putchar+0x1b8>)
 801285a:	2200      	movs	r2, #0
 801285c:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 801285e:	4b3b      	ldr	r3, [pc, #236]	; (801294c <__io_putchar+0x1b0>)
 8012860:	881b      	ldrh	r3, [r3, #0]
 8012862:	60fb      	str	r3, [r7, #12]
 8012864:	e015      	b.n	8012892 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8012866:	4b34      	ldr	r3, [pc, #208]	; (8012938 <__io_putchar+0x19c>)
 8012868:	881b      	ldrh	r3, [r3, #0]
 801286a:	4619      	mov	r1, r3
 801286c:	4b37      	ldr	r3, [pc, #220]	; (801294c <__io_putchar+0x1b0>)
 801286e:	881b      	ldrh	r3, [r3, #0]
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	b290      	uxth	r0, r2
 8012874:	4a35      	ldr	r2, [pc, #212]	; (801294c <__io_putchar+0x1b0>)
 8012876:	8010      	strh	r0, [r2, #0]
 8012878:	4618      	mov	r0, r3
 801287a:	4a35      	ldr	r2, [pc, #212]	; (8012950 <__io_putchar+0x1b4>)
 801287c:	460b      	mov	r3, r1
 801287e:	015b      	lsls	r3, r3, #5
 8012880:	440b      	add	r3, r1
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	4413      	add	r3, r2
 8012886:	4403      	add	r3, r0
 8012888:	2220      	movs	r2, #32
 801288a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3301      	adds	r3, #1
 8012890:	60fb      	str	r3, [r7, #12]
 8012892:	f7f0 fa1f 	bl	8002cd4 <BSP_LCD_GetXSize>
 8012896:	4602      	mov	r2, r0
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	889b      	ldrh	r3, [r3, #4]
 801289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d3df      	bcc.n	8012866 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80128a6:	4b24      	ldr	r3, [pc, #144]	; (8012938 <__io_putchar+0x19c>)
 80128a8:	881b      	ldrh	r3, [r3, #0]
 80128aa:	4618      	mov	r0, r3
 80128ac:	4b2a      	ldr	r3, [pc, #168]	; (8012958 <__io_putchar+0x1bc>)
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	4927      	ldr	r1, [pc, #156]	; (8012950 <__io_putchar+0x1b4>)
 80128b2:	4603      	mov	r3, r0
 80128b4:	015b      	lsls	r3, r3, #5
 80128b6:	4403      	add	r3, r0
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	440b      	add	r3, r1
 80128bc:	3380      	adds	r3, #128	; 0x80
 80128be:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 80128c0:	4b22      	ldr	r3, [pc, #136]	; (801294c <__io_putchar+0x1b0>)
 80128c2:	2200      	movs	r2, #0
 80128c4:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 80128c6:	f000 f849 	bl	801295c <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 80128ca:	4b1b      	ldr	r3, [pc, #108]	; (8012938 <__io_putchar+0x19c>)
 80128cc:	881b      	ldrh	r3, [r3, #0]
 80128ce:	3301      	adds	r3, #1
 80128d0:	b29a      	uxth	r2, r3
 80128d2:	4b19      	ldr	r3, [pc, #100]	; (8012938 <__io_putchar+0x19c>)
 80128d4:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80128d6:	4b18      	ldr	r3, [pc, #96]	; (8012938 <__io_putchar+0x19c>)
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	2b75      	cmp	r3, #117	; 0x75
 80128dc:	d108      	bne.n	80128f0 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 80128de:	4b16      	ldr	r3, [pc, #88]	; (8012938 <__io_putchar+0x19c>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 80128e4:	4b16      	ldr	r3, [pc, #88]	; (8012940 <__io_putchar+0x1a4>)
 80128e6:	2201      	movs	r2, #1
 80128e8:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80128ea:	4b1a      	ldr	r3, [pc, #104]	; (8012954 <__io_putchar+0x1b8>)
 80128ec:	2201      	movs	r2, #1
 80128ee:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b0a      	cmp	r3, #10
 80128f4:	d014      	beq.n	8012920 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80128f6:	4b10      	ldr	r3, [pc, #64]	; (8012938 <__io_putchar+0x19c>)
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	4619      	mov	r1, r3
 80128fc:	4b13      	ldr	r3, [pc, #76]	; (801294c <__io_putchar+0x1b0>)
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	1c5a      	adds	r2, r3, #1
 8012902:	b290      	uxth	r0, r2
 8012904:	4a11      	ldr	r2, [pc, #68]	; (801294c <__io_putchar+0x1b0>)
 8012906:	8010      	strh	r0, [r2, #0]
 8012908:	461c      	mov	r4, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	b2d8      	uxtb	r0, r3
 801290e:	4a10      	ldr	r2, [pc, #64]	; (8012950 <__io_putchar+0x1b4>)
 8012910:	460b      	mov	r3, r1
 8012912:	015b      	lsls	r3, r3, #5
 8012914:	440b      	add	r3, r1
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4413      	add	r3, r2
 801291a:	4423      	add	r3, r4
 801291c:	4602      	mov	r2, r0
 801291e:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 8012920:	687b      	ldr	r3, [r7, #4]
}
 8012922:	4618      	mov	r0, r3
 8012924:	3714      	adds	r7, #20
 8012926:	46bd      	mov	sp, r7
 8012928:	bd90      	pop	{r4, r7, pc}
 801292a:	bf00      	nop
 801292c:	2000b825 	.word	0x2000b825
 8012930:	2000b82a 	.word	0x2000b82a
 8012934:	2000b81c 	.word	0x2000b81c
 8012938:	2000b820 	.word	0x2000b820
 801293c:	2000b81e 	.word	0x2000b81e
 8012940:	2000b828 	.word	0x2000b828
 8012944:	2000b826 	.word	0x2000b826
 8012948:	2000f484 	.word	0x2000f484
 801294c:	2000b822 	.word	0x2000b822
 8012950:	2000b82c 	.word	0x2000b82c
 8012954:	2000b824 	.word	0x2000b824
 8012958:	2000f480 	.word	0x2000f480

0801295c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 8012962:	2300      	movs	r3, #0
 8012964:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8012966:	2300      	movs	r3, #0
 8012968:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	807b      	strh	r3, [r7, #2]
 801296e:	2300      	movs	r3, #0
 8012970:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8012972:	4b39      	ldr	r3, [pc, #228]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	2b0f      	cmp	r3, #15
 8012978:	d826      	bhi.n	80129c8 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 801297a:	4b37      	ldr	r3, [pc, #220]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 801297c:	881a      	ldrh	r2, [r3, #0]
 801297e:	4b37      	ldr	r3, [pc, #220]	; (8012a5c <LCD_LOG_UpdateDisplay+0x100>)
 8012980:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8012982:	429a      	cmp	r2, r3
 8012984:	d320      	bcc.n	80129c8 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8012986:	79fb      	ldrb	r3, [r7, #7]
 8012988:	4a33      	ldr	r2, [pc, #204]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 801298a:	8812      	ldrh	r2, [r2, #0]
 801298c:	441a      	add	r2, r3
 801298e:	4934      	ldr	r1, [pc, #208]	; (8012a60 <LCD_LOG_UpdateDisplay+0x104>)
 8012990:	4613      	mov	r3, r2
 8012992:	015b      	lsls	r3, r3, #5
 8012994:	4413      	add	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	440b      	add	r3, r1
 801299a:	3380      	adds	r3, #128	; 0x80
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f0 fa20 	bl	8002de4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80129a4:	4b2c      	ldr	r3, [pc, #176]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 80129a6:	881b      	ldrh	r3, [r3, #0]
 80129a8:	3304      	adds	r3, #4
 80129aa:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 80129ac:	79fb      	ldrb	r3, [r7, #7]
 80129ae:	4a2a      	ldr	r2, [pc, #168]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 80129b0:	8812      	ldrh	r2, [r2, #0]
 80129b2:	441a      	add	r2, r3
 80129b4:	4613      	mov	r3, r2
 80129b6:	015b      	lsls	r3, r3, #5
 80129b8:	4413      	add	r3, r2
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	4a28      	ldr	r2, [pc, #160]	; (8012a60 <LCD_LOG_UpdateDisplay+0x104>)
 80129be:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80129c0:	4619      	mov	r1, r3
 80129c2:	f7f0 fba1 	bl	8003108 <BSP_LCD_DisplayStringAtLine>
 80129c6:	e043      	b.n	8012a50 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80129c8:	4b23      	ldr	r3, [pc, #140]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 80129ca:	881a      	ldrh	r2, [r3, #0]
 80129cc:	4b23      	ldr	r3, [pc, #140]	; (8012a5c <LCD_LOG_UpdateDisplay+0x100>)
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d204      	bcs.n	80129de <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80129d4:	4b20      	ldr	r3, [pc, #128]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 80129d6:	881b      	ldrh	r3, [r3, #0]
 80129d8:	3375      	adds	r3, #117	; 0x75
 80129da:	80bb      	strh	r3, [r7, #4]
 80129dc:	e002      	b.n	80129e4 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80129de:	4b1e      	ldr	r3, [pc, #120]	; (8012a58 <LCD_LOG_UpdateDisplay+0xfc>)
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80129e4:	88bb      	ldrh	r3, [r7, #4]
 80129e6:	3b10      	subs	r3, #16
 80129e8:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80129ea:	2300      	movs	r3, #0
 80129ec:	71fb      	strb	r3, [r7, #7]
 80129ee:	e02c      	b.n	8012a4a <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80129f0:	79fa      	ldrb	r2, [r7, #7]
 80129f2:	887b      	ldrh	r3, [r7, #2]
 80129f4:	4413      	add	r3, r2
 80129f6:	4a1b      	ldr	r2, [pc, #108]	; (8012a64 <LCD_LOG_UpdateDisplay+0x108>)
 80129f8:	fb82 1203 	smull	r1, r2, r2, r3
 80129fc:	441a      	add	r2, r3
 80129fe:	1191      	asrs	r1, r2, #6
 8012a00:	17da      	asrs	r2, r3, #31
 8012a02:	1a8a      	subs	r2, r1, r2
 8012a04:	2175      	movs	r1, #117	; 0x75
 8012a06:	fb01 f202 	mul.w	r2, r1, r2
 8012a0a:	1a9a      	subs	r2, r3, r2
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8012a10:	883a      	ldrh	r2, [r7, #0]
 8012a12:	4913      	ldr	r1, [pc, #76]	; (8012a60 <LCD_LOG_UpdateDisplay+0x104>)
 8012a14:	4613      	mov	r3, r2
 8012a16:	015b      	lsls	r3, r3, #5
 8012a18:	4413      	add	r3, r2
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	440b      	add	r3, r1
 8012a1e:	3380      	adds	r3, #128	; 0x80
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f0 f9de 	bl	8002de4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8012a28:	79fb      	ldrb	r3, [r7, #7]
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8012a30:	883a      	ldrh	r2, [r7, #0]
 8012a32:	4613      	mov	r3, r2
 8012a34:	015b      	lsls	r3, r3, #5
 8012a36:	4413      	add	r3, r2
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	4a09      	ldr	r2, [pc, #36]	; (8012a60 <LCD_LOG_UpdateDisplay+0x104>)
 8012a3c:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8012a3e:	4619      	mov	r1, r3
 8012a40:	f7f0 fb62 	bl	8003108 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8012a44:	79fb      	ldrb	r3, [r7, #7]
 8012a46:	3301      	adds	r3, #1
 8012a48:	71fb      	strb	r3, [r7, #7]
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	2b10      	cmp	r3, #16
 8012a4e:	d9cf      	bls.n	80129f0 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	2000b820 	.word	0x2000b820
 8012a5c:	2000b828 	.word	0x2000b828
 8012a60:	2000b82c 	.word	0x2000b82c
 8012a64:	8c08c08d 	.word	0x8c08c08d

08012a68 <__errno>:
 8012a68:	4b01      	ldr	r3, [pc, #4]	; (8012a70 <__errno+0x8>)
 8012a6a:	6818      	ldr	r0, [r3, #0]
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop
 8012a70:	2000004c 	.word	0x2000004c

08012a74 <__libc_init_array>:
 8012a74:	b570      	push	{r4, r5, r6, lr}
 8012a76:	4e0d      	ldr	r6, [pc, #52]	; (8012aac <__libc_init_array+0x38>)
 8012a78:	4c0d      	ldr	r4, [pc, #52]	; (8012ab0 <__libc_init_array+0x3c>)
 8012a7a:	1ba4      	subs	r4, r4, r6
 8012a7c:	10a4      	asrs	r4, r4, #2
 8012a7e:	2500      	movs	r5, #0
 8012a80:	42a5      	cmp	r5, r4
 8012a82:	d109      	bne.n	8012a98 <__libc_init_array+0x24>
 8012a84:	4e0b      	ldr	r6, [pc, #44]	; (8012ab4 <__libc_init_array+0x40>)
 8012a86:	4c0c      	ldr	r4, [pc, #48]	; (8012ab8 <__libc_init_array+0x44>)
 8012a88:	f000 ff20 	bl	80138cc <_init>
 8012a8c:	1ba4      	subs	r4, r4, r6
 8012a8e:	10a4      	asrs	r4, r4, #2
 8012a90:	2500      	movs	r5, #0
 8012a92:	42a5      	cmp	r5, r4
 8012a94:	d105      	bne.n	8012aa2 <__libc_init_array+0x2e>
 8012a96:	bd70      	pop	{r4, r5, r6, pc}
 8012a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a9c:	4798      	blx	r3
 8012a9e:	3501      	adds	r5, #1
 8012aa0:	e7ee      	b.n	8012a80 <__libc_init_array+0xc>
 8012aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012aa6:	4798      	blx	r3
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	e7f2      	b.n	8012a92 <__libc_init_array+0x1e>
 8012aac:	080165f4 	.word	0x080165f4
 8012ab0:	080165f4 	.word	0x080165f4
 8012ab4:	080165f4 	.word	0x080165f4
 8012ab8:	080165f8 	.word	0x080165f8

08012abc <malloc>:
 8012abc:	4b02      	ldr	r3, [pc, #8]	; (8012ac8 <malloc+0xc>)
 8012abe:	4601      	mov	r1, r0
 8012ac0:	6818      	ldr	r0, [r3, #0]
 8012ac2:	f000 b86d 	b.w	8012ba0 <_malloc_r>
 8012ac6:	bf00      	nop
 8012ac8:	2000004c 	.word	0x2000004c

08012acc <free>:
 8012acc:	4b02      	ldr	r3, [pc, #8]	; (8012ad8 <free+0xc>)
 8012ace:	4601      	mov	r1, r0
 8012ad0:	6818      	ldr	r0, [r3, #0]
 8012ad2:	f000 b817 	b.w	8012b04 <_free_r>
 8012ad6:	bf00      	nop
 8012ad8:	2000004c 	.word	0x2000004c

08012adc <memcpy>:
 8012adc:	b510      	push	{r4, lr}
 8012ade:	1e43      	subs	r3, r0, #1
 8012ae0:	440a      	add	r2, r1
 8012ae2:	4291      	cmp	r1, r2
 8012ae4:	d100      	bne.n	8012ae8 <memcpy+0xc>
 8012ae6:	bd10      	pop	{r4, pc}
 8012ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012af0:	e7f7      	b.n	8012ae2 <memcpy+0x6>

08012af2 <memset>:
 8012af2:	4402      	add	r2, r0
 8012af4:	4603      	mov	r3, r0
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d100      	bne.n	8012afc <memset+0xa>
 8012afa:	4770      	bx	lr
 8012afc:	f803 1b01 	strb.w	r1, [r3], #1
 8012b00:	e7f9      	b.n	8012af6 <memset+0x4>
	...

08012b04 <_free_r>:
 8012b04:	b538      	push	{r3, r4, r5, lr}
 8012b06:	4605      	mov	r5, r0
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	d045      	beq.n	8012b98 <_free_r+0x94>
 8012b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b10:	1f0c      	subs	r4, r1, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bfb8      	it	lt
 8012b16:	18e4      	addlt	r4, r4, r3
 8012b18:	f000 f98e 	bl	8012e38 <__malloc_lock>
 8012b1c:	4a1f      	ldr	r2, [pc, #124]	; (8012b9c <_free_r+0x98>)
 8012b1e:	6813      	ldr	r3, [r2, #0]
 8012b20:	4610      	mov	r0, r2
 8012b22:	b933      	cbnz	r3, 8012b32 <_free_r+0x2e>
 8012b24:	6063      	str	r3, [r4, #4]
 8012b26:	6014      	str	r4, [r2, #0]
 8012b28:	4628      	mov	r0, r5
 8012b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b2e:	f000 b984 	b.w	8012e3a <__malloc_unlock>
 8012b32:	42a3      	cmp	r3, r4
 8012b34:	d90c      	bls.n	8012b50 <_free_r+0x4c>
 8012b36:	6821      	ldr	r1, [r4, #0]
 8012b38:	1862      	adds	r2, r4, r1
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	bf04      	itt	eq
 8012b3e:	681a      	ldreq	r2, [r3, #0]
 8012b40:	685b      	ldreq	r3, [r3, #4]
 8012b42:	6063      	str	r3, [r4, #4]
 8012b44:	bf04      	itt	eq
 8012b46:	1852      	addeq	r2, r2, r1
 8012b48:	6022      	streq	r2, [r4, #0]
 8012b4a:	6004      	str	r4, [r0, #0]
 8012b4c:	e7ec      	b.n	8012b28 <_free_r+0x24>
 8012b4e:	4613      	mov	r3, r2
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	b10a      	cbz	r2, 8012b58 <_free_r+0x54>
 8012b54:	42a2      	cmp	r2, r4
 8012b56:	d9fa      	bls.n	8012b4e <_free_r+0x4a>
 8012b58:	6819      	ldr	r1, [r3, #0]
 8012b5a:	1858      	adds	r0, r3, r1
 8012b5c:	42a0      	cmp	r0, r4
 8012b5e:	d10b      	bne.n	8012b78 <_free_r+0x74>
 8012b60:	6820      	ldr	r0, [r4, #0]
 8012b62:	4401      	add	r1, r0
 8012b64:	1858      	adds	r0, r3, r1
 8012b66:	4282      	cmp	r2, r0
 8012b68:	6019      	str	r1, [r3, #0]
 8012b6a:	d1dd      	bne.n	8012b28 <_free_r+0x24>
 8012b6c:	6810      	ldr	r0, [r2, #0]
 8012b6e:	6852      	ldr	r2, [r2, #4]
 8012b70:	605a      	str	r2, [r3, #4]
 8012b72:	4401      	add	r1, r0
 8012b74:	6019      	str	r1, [r3, #0]
 8012b76:	e7d7      	b.n	8012b28 <_free_r+0x24>
 8012b78:	d902      	bls.n	8012b80 <_free_r+0x7c>
 8012b7a:	230c      	movs	r3, #12
 8012b7c:	602b      	str	r3, [r5, #0]
 8012b7e:	e7d3      	b.n	8012b28 <_free_r+0x24>
 8012b80:	6820      	ldr	r0, [r4, #0]
 8012b82:	1821      	adds	r1, r4, r0
 8012b84:	428a      	cmp	r2, r1
 8012b86:	bf04      	itt	eq
 8012b88:	6811      	ldreq	r1, [r2, #0]
 8012b8a:	6852      	ldreq	r2, [r2, #4]
 8012b8c:	6062      	str	r2, [r4, #4]
 8012b8e:	bf04      	itt	eq
 8012b90:	1809      	addeq	r1, r1, r0
 8012b92:	6021      	streq	r1, [r4, #0]
 8012b94:	605c      	str	r4, [r3, #4]
 8012b96:	e7c7      	b.n	8012b28 <_free_r+0x24>
 8012b98:	bd38      	pop	{r3, r4, r5, pc}
 8012b9a:	bf00      	nop
 8012b9c:	20008fe0 	.word	0x20008fe0

08012ba0 <_malloc_r>:
 8012ba0:	b570      	push	{r4, r5, r6, lr}
 8012ba2:	1ccd      	adds	r5, r1, #3
 8012ba4:	f025 0503 	bic.w	r5, r5, #3
 8012ba8:	3508      	adds	r5, #8
 8012baa:	2d0c      	cmp	r5, #12
 8012bac:	bf38      	it	cc
 8012bae:	250c      	movcc	r5, #12
 8012bb0:	2d00      	cmp	r5, #0
 8012bb2:	4606      	mov	r6, r0
 8012bb4:	db01      	blt.n	8012bba <_malloc_r+0x1a>
 8012bb6:	42a9      	cmp	r1, r5
 8012bb8:	d903      	bls.n	8012bc2 <_malloc_r+0x22>
 8012bba:	230c      	movs	r3, #12
 8012bbc:	6033      	str	r3, [r6, #0]
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	bd70      	pop	{r4, r5, r6, pc}
 8012bc2:	f000 f939 	bl	8012e38 <__malloc_lock>
 8012bc6:	4a21      	ldr	r2, [pc, #132]	; (8012c4c <_malloc_r+0xac>)
 8012bc8:	6814      	ldr	r4, [r2, #0]
 8012bca:	4621      	mov	r1, r4
 8012bcc:	b991      	cbnz	r1, 8012bf4 <_malloc_r+0x54>
 8012bce:	4c20      	ldr	r4, [pc, #128]	; (8012c50 <_malloc_r+0xb0>)
 8012bd0:	6823      	ldr	r3, [r4, #0]
 8012bd2:	b91b      	cbnz	r3, 8012bdc <_malloc_r+0x3c>
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f000 f855 	bl	8012c84 <_sbrk_r>
 8012bda:	6020      	str	r0, [r4, #0]
 8012bdc:	4629      	mov	r1, r5
 8012bde:	4630      	mov	r0, r6
 8012be0:	f000 f850 	bl	8012c84 <_sbrk_r>
 8012be4:	1c43      	adds	r3, r0, #1
 8012be6:	d124      	bne.n	8012c32 <_malloc_r+0x92>
 8012be8:	230c      	movs	r3, #12
 8012bea:	6033      	str	r3, [r6, #0]
 8012bec:	4630      	mov	r0, r6
 8012bee:	f000 f924 	bl	8012e3a <__malloc_unlock>
 8012bf2:	e7e4      	b.n	8012bbe <_malloc_r+0x1e>
 8012bf4:	680b      	ldr	r3, [r1, #0]
 8012bf6:	1b5b      	subs	r3, r3, r5
 8012bf8:	d418      	bmi.n	8012c2c <_malloc_r+0x8c>
 8012bfa:	2b0b      	cmp	r3, #11
 8012bfc:	d90f      	bls.n	8012c1e <_malloc_r+0x7e>
 8012bfe:	600b      	str	r3, [r1, #0]
 8012c00:	50cd      	str	r5, [r1, r3]
 8012c02:	18cc      	adds	r4, r1, r3
 8012c04:	4630      	mov	r0, r6
 8012c06:	f000 f918 	bl	8012e3a <__malloc_unlock>
 8012c0a:	f104 000b 	add.w	r0, r4, #11
 8012c0e:	1d23      	adds	r3, r4, #4
 8012c10:	f020 0007 	bic.w	r0, r0, #7
 8012c14:	1ac3      	subs	r3, r0, r3
 8012c16:	d0d3      	beq.n	8012bc0 <_malloc_r+0x20>
 8012c18:	425a      	negs	r2, r3
 8012c1a:	50e2      	str	r2, [r4, r3]
 8012c1c:	e7d0      	b.n	8012bc0 <_malloc_r+0x20>
 8012c1e:	428c      	cmp	r4, r1
 8012c20:	684b      	ldr	r3, [r1, #4]
 8012c22:	bf16      	itet	ne
 8012c24:	6063      	strne	r3, [r4, #4]
 8012c26:	6013      	streq	r3, [r2, #0]
 8012c28:	460c      	movne	r4, r1
 8012c2a:	e7eb      	b.n	8012c04 <_malloc_r+0x64>
 8012c2c:	460c      	mov	r4, r1
 8012c2e:	6849      	ldr	r1, [r1, #4]
 8012c30:	e7cc      	b.n	8012bcc <_malloc_r+0x2c>
 8012c32:	1cc4      	adds	r4, r0, #3
 8012c34:	f024 0403 	bic.w	r4, r4, #3
 8012c38:	42a0      	cmp	r0, r4
 8012c3a:	d005      	beq.n	8012c48 <_malloc_r+0xa8>
 8012c3c:	1a21      	subs	r1, r4, r0
 8012c3e:	4630      	mov	r0, r6
 8012c40:	f000 f820 	bl	8012c84 <_sbrk_r>
 8012c44:	3001      	adds	r0, #1
 8012c46:	d0cf      	beq.n	8012be8 <_malloc_r+0x48>
 8012c48:	6025      	str	r5, [r4, #0]
 8012c4a:	e7db      	b.n	8012c04 <_malloc_r+0x64>
 8012c4c:	20008fe0 	.word	0x20008fe0
 8012c50:	20008fe4 	.word	0x20008fe4

08012c54 <iprintf>:
 8012c54:	b40f      	push	{r0, r1, r2, r3}
 8012c56:	4b0a      	ldr	r3, [pc, #40]	; (8012c80 <iprintf+0x2c>)
 8012c58:	b513      	push	{r0, r1, r4, lr}
 8012c5a:	681c      	ldr	r4, [r3, #0]
 8012c5c:	b124      	cbz	r4, 8012c68 <iprintf+0x14>
 8012c5e:	69a3      	ldr	r3, [r4, #24]
 8012c60:	b913      	cbnz	r3, 8012c68 <iprintf+0x14>
 8012c62:	4620      	mov	r0, r4
 8012c64:	f000 f85e 	bl	8012d24 <__sinit>
 8012c68:	ab05      	add	r3, sp, #20
 8012c6a:	9a04      	ldr	r2, [sp, #16]
 8012c6c:	68a1      	ldr	r1, [r4, #8]
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	4620      	mov	r0, r4
 8012c72:	f000 f90d 	bl	8012e90 <_vfiprintf_r>
 8012c76:	b002      	add	sp, #8
 8012c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c7c:	b004      	add	sp, #16
 8012c7e:	4770      	bx	lr
 8012c80:	2000004c 	.word	0x2000004c

08012c84 <_sbrk_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4c06      	ldr	r4, [pc, #24]	; (8012ca0 <_sbrk_r+0x1c>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4605      	mov	r5, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	6023      	str	r3, [r4, #0]
 8012c90:	f7ef ff3a 	bl	8002b08 <_sbrk>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_sbrk_r+0x1a>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_sbrk_r+0x1a>
 8012c9c:	602b      	str	r3, [r5, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	2000f488 	.word	0x2000f488

08012ca4 <std>:
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	b510      	push	{r4, lr}
 8012ca8:	4604      	mov	r4, r0
 8012caa:	e9c0 3300 	strd	r3, r3, [r0]
 8012cae:	6083      	str	r3, [r0, #8]
 8012cb0:	8181      	strh	r1, [r0, #12]
 8012cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8012cb4:	81c2      	strh	r2, [r0, #14]
 8012cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cba:	6183      	str	r3, [r0, #24]
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	2208      	movs	r2, #8
 8012cc0:	305c      	adds	r0, #92	; 0x5c
 8012cc2:	f7ff ff16 	bl	8012af2 <memset>
 8012cc6:	4b05      	ldr	r3, [pc, #20]	; (8012cdc <std+0x38>)
 8012cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8012cca:	4b05      	ldr	r3, [pc, #20]	; (8012ce0 <std+0x3c>)
 8012ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cce:	4b05      	ldr	r3, [pc, #20]	; (8012ce4 <std+0x40>)
 8012cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012cd2:	4b05      	ldr	r3, [pc, #20]	; (8012ce8 <std+0x44>)
 8012cd4:	6224      	str	r4, [r4, #32]
 8012cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8012cd8:	bd10      	pop	{r4, pc}
 8012cda:	bf00      	nop
 8012cdc:	080133cd 	.word	0x080133cd
 8012ce0:	080133ef 	.word	0x080133ef
 8012ce4:	08013427 	.word	0x08013427
 8012ce8:	0801344b 	.word	0x0801344b

08012cec <_cleanup_r>:
 8012cec:	4901      	ldr	r1, [pc, #4]	; (8012cf4 <_cleanup_r+0x8>)
 8012cee:	f000 b885 	b.w	8012dfc <_fwalk_reent>
 8012cf2:	bf00      	nop
 8012cf4:	08013725 	.word	0x08013725

08012cf8 <__sfmoreglue>:
 8012cf8:	b570      	push	{r4, r5, r6, lr}
 8012cfa:	1e4a      	subs	r2, r1, #1
 8012cfc:	2568      	movs	r5, #104	; 0x68
 8012cfe:	4355      	muls	r5, r2
 8012d00:	460e      	mov	r6, r1
 8012d02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d06:	f7ff ff4b 	bl	8012ba0 <_malloc_r>
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	b140      	cbz	r0, 8012d20 <__sfmoreglue+0x28>
 8012d0e:	2100      	movs	r1, #0
 8012d10:	e9c0 1600 	strd	r1, r6, [r0]
 8012d14:	300c      	adds	r0, #12
 8012d16:	60a0      	str	r0, [r4, #8]
 8012d18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d1c:	f7ff fee9 	bl	8012af2 <memset>
 8012d20:	4620      	mov	r0, r4
 8012d22:	bd70      	pop	{r4, r5, r6, pc}

08012d24 <__sinit>:
 8012d24:	6983      	ldr	r3, [r0, #24]
 8012d26:	b510      	push	{r4, lr}
 8012d28:	4604      	mov	r4, r0
 8012d2a:	bb33      	cbnz	r3, 8012d7a <__sinit+0x56>
 8012d2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012d30:	6503      	str	r3, [r0, #80]	; 0x50
 8012d32:	4b12      	ldr	r3, [pc, #72]	; (8012d7c <__sinit+0x58>)
 8012d34:	4a12      	ldr	r2, [pc, #72]	; (8012d80 <__sinit+0x5c>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	6282      	str	r2, [r0, #40]	; 0x28
 8012d3a:	4298      	cmp	r0, r3
 8012d3c:	bf04      	itt	eq
 8012d3e:	2301      	moveq	r3, #1
 8012d40:	6183      	streq	r3, [r0, #24]
 8012d42:	f000 f81f 	bl	8012d84 <__sfp>
 8012d46:	6060      	str	r0, [r4, #4]
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 f81b 	bl	8012d84 <__sfp>
 8012d4e:	60a0      	str	r0, [r4, #8]
 8012d50:	4620      	mov	r0, r4
 8012d52:	f000 f817 	bl	8012d84 <__sfp>
 8012d56:	2200      	movs	r2, #0
 8012d58:	60e0      	str	r0, [r4, #12]
 8012d5a:	2104      	movs	r1, #4
 8012d5c:	6860      	ldr	r0, [r4, #4]
 8012d5e:	f7ff ffa1 	bl	8012ca4 <std>
 8012d62:	2201      	movs	r2, #1
 8012d64:	2109      	movs	r1, #9
 8012d66:	68a0      	ldr	r0, [r4, #8]
 8012d68:	f7ff ff9c 	bl	8012ca4 <std>
 8012d6c:	2202      	movs	r2, #2
 8012d6e:	2112      	movs	r1, #18
 8012d70:	68e0      	ldr	r0, [r4, #12]
 8012d72:	f7ff ff97 	bl	8012ca4 <std>
 8012d76:	2301      	movs	r3, #1
 8012d78:	61a3      	str	r3, [r4, #24]
 8012d7a:	bd10      	pop	{r4, pc}
 8012d7c:	08016554 	.word	0x08016554
 8012d80:	08012ced 	.word	0x08012ced

08012d84 <__sfp>:
 8012d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d86:	4b1b      	ldr	r3, [pc, #108]	; (8012df4 <__sfp+0x70>)
 8012d88:	681e      	ldr	r6, [r3, #0]
 8012d8a:	69b3      	ldr	r3, [r6, #24]
 8012d8c:	4607      	mov	r7, r0
 8012d8e:	b913      	cbnz	r3, 8012d96 <__sfp+0x12>
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7ff ffc7 	bl	8012d24 <__sinit>
 8012d96:	3648      	adds	r6, #72	; 0x48
 8012d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d9c:	3b01      	subs	r3, #1
 8012d9e:	d503      	bpl.n	8012da8 <__sfp+0x24>
 8012da0:	6833      	ldr	r3, [r6, #0]
 8012da2:	b133      	cbz	r3, 8012db2 <__sfp+0x2e>
 8012da4:	6836      	ldr	r6, [r6, #0]
 8012da6:	e7f7      	b.n	8012d98 <__sfp+0x14>
 8012da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012dac:	b16d      	cbz	r5, 8012dca <__sfp+0x46>
 8012dae:	3468      	adds	r4, #104	; 0x68
 8012db0:	e7f4      	b.n	8012d9c <__sfp+0x18>
 8012db2:	2104      	movs	r1, #4
 8012db4:	4638      	mov	r0, r7
 8012db6:	f7ff ff9f 	bl	8012cf8 <__sfmoreglue>
 8012dba:	6030      	str	r0, [r6, #0]
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d1f1      	bne.n	8012da4 <__sfp+0x20>
 8012dc0:	230c      	movs	r3, #12
 8012dc2:	603b      	str	r3, [r7, #0]
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dca:	4b0b      	ldr	r3, [pc, #44]	; (8012df8 <__sfp+0x74>)
 8012dcc:	6665      	str	r5, [r4, #100]	; 0x64
 8012dce:	e9c4 5500 	strd	r5, r5, [r4]
 8012dd2:	60a5      	str	r5, [r4, #8]
 8012dd4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012dd8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012ddc:	2208      	movs	r2, #8
 8012dde:	4629      	mov	r1, r5
 8012de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012de4:	f7ff fe85 	bl	8012af2 <memset>
 8012de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012df0:	e7e9      	b.n	8012dc6 <__sfp+0x42>
 8012df2:	bf00      	nop
 8012df4:	08016554 	.word	0x08016554
 8012df8:	ffff0001 	.word	0xffff0001

08012dfc <_fwalk_reent>:
 8012dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e00:	4680      	mov	r8, r0
 8012e02:	4689      	mov	r9, r1
 8012e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012e08:	2600      	movs	r6, #0
 8012e0a:	b914      	cbnz	r4, 8012e12 <_fwalk_reent+0x16>
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e12:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012e16:	3f01      	subs	r7, #1
 8012e18:	d501      	bpl.n	8012e1e <_fwalk_reent+0x22>
 8012e1a:	6824      	ldr	r4, [r4, #0]
 8012e1c:	e7f5      	b.n	8012e0a <_fwalk_reent+0xe>
 8012e1e:	89ab      	ldrh	r3, [r5, #12]
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d907      	bls.n	8012e34 <_fwalk_reent+0x38>
 8012e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	d003      	beq.n	8012e34 <_fwalk_reent+0x38>
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4640      	mov	r0, r8
 8012e30:	47c8      	blx	r9
 8012e32:	4306      	orrs	r6, r0
 8012e34:	3568      	adds	r5, #104	; 0x68
 8012e36:	e7ee      	b.n	8012e16 <_fwalk_reent+0x1a>

08012e38 <__malloc_lock>:
 8012e38:	4770      	bx	lr

08012e3a <__malloc_unlock>:
 8012e3a:	4770      	bx	lr

08012e3c <__sfputc_r>:
 8012e3c:	6893      	ldr	r3, [r2, #8]
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	b410      	push	{r4}
 8012e44:	6093      	str	r3, [r2, #8]
 8012e46:	da08      	bge.n	8012e5a <__sfputc_r+0x1e>
 8012e48:	6994      	ldr	r4, [r2, #24]
 8012e4a:	42a3      	cmp	r3, r4
 8012e4c:	db01      	blt.n	8012e52 <__sfputc_r+0x16>
 8012e4e:	290a      	cmp	r1, #10
 8012e50:	d103      	bne.n	8012e5a <__sfputc_r+0x1e>
 8012e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e56:	f000 bafd 	b.w	8013454 <__swbuf_r>
 8012e5a:	6813      	ldr	r3, [r2, #0]
 8012e5c:	1c58      	adds	r0, r3, #1
 8012e5e:	6010      	str	r0, [r2, #0]
 8012e60:	7019      	strb	r1, [r3, #0]
 8012e62:	4608      	mov	r0, r1
 8012e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e68:	4770      	bx	lr

08012e6a <__sfputs_r>:
 8012e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6c:	4606      	mov	r6, r0
 8012e6e:	460f      	mov	r7, r1
 8012e70:	4614      	mov	r4, r2
 8012e72:	18d5      	adds	r5, r2, r3
 8012e74:	42ac      	cmp	r4, r5
 8012e76:	d101      	bne.n	8012e7c <__sfputs_r+0x12>
 8012e78:	2000      	movs	r0, #0
 8012e7a:	e007      	b.n	8012e8c <__sfputs_r+0x22>
 8012e7c:	463a      	mov	r2, r7
 8012e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e82:	4630      	mov	r0, r6
 8012e84:	f7ff ffda 	bl	8012e3c <__sfputc_r>
 8012e88:	1c43      	adds	r3, r0, #1
 8012e8a:	d1f3      	bne.n	8012e74 <__sfputs_r+0xa>
 8012e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e90 <_vfiprintf_r>:
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	460c      	mov	r4, r1
 8012e96:	b09d      	sub	sp, #116	; 0x74
 8012e98:	4617      	mov	r7, r2
 8012e9a:	461d      	mov	r5, r3
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	b118      	cbz	r0, 8012ea8 <_vfiprintf_r+0x18>
 8012ea0:	6983      	ldr	r3, [r0, #24]
 8012ea2:	b90b      	cbnz	r3, 8012ea8 <_vfiprintf_r+0x18>
 8012ea4:	f7ff ff3e 	bl	8012d24 <__sinit>
 8012ea8:	4b7c      	ldr	r3, [pc, #496]	; (801309c <_vfiprintf_r+0x20c>)
 8012eaa:	429c      	cmp	r4, r3
 8012eac:	d158      	bne.n	8012f60 <_vfiprintf_r+0xd0>
 8012eae:	6874      	ldr	r4, [r6, #4]
 8012eb0:	89a3      	ldrh	r3, [r4, #12]
 8012eb2:	0718      	lsls	r0, r3, #28
 8012eb4:	d55e      	bpl.n	8012f74 <_vfiprintf_r+0xe4>
 8012eb6:	6923      	ldr	r3, [r4, #16]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d05b      	beq.n	8012f74 <_vfiprintf_r+0xe4>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8012ec0:	2320      	movs	r3, #32
 8012ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ec6:	2330      	movs	r3, #48	; 0x30
 8012ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ecc:	9503      	str	r5, [sp, #12]
 8012ece:	f04f 0b01 	mov.w	fp, #1
 8012ed2:	46b8      	mov	r8, r7
 8012ed4:	4645      	mov	r5, r8
 8012ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012eda:	b10b      	cbz	r3, 8012ee0 <_vfiprintf_r+0x50>
 8012edc:	2b25      	cmp	r3, #37	; 0x25
 8012ede:	d154      	bne.n	8012f8a <_vfiprintf_r+0xfa>
 8012ee0:	ebb8 0a07 	subs.w	sl, r8, r7
 8012ee4:	d00b      	beq.n	8012efe <_vfiprintf_r+0x6e>
 8012ee6:	4653      	mov	r3, sl
 8012ee8:	463a      	mov	r2, r7
 8012eea:	4621      	mov	r1, r4
 8012eec:	4630      	mov	r0, r6
 8012eee:	f7ff ffbc 	bl	8012e6a <__sfputs_r>
 8012ef2:	3001      	adds	r0, #1
 8012ef4:	f000 80c2 	beq.w	801307c <_vfiprintf_r+0x1ec>
 8012ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efa:	4453      	add	r3, sl
 8012efc:	9309      	str	r3, [sp, #36]	; 0x24
 8012efe:	f898 3000 	ldrb.w	r3, [r8]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 80ba 	beq.w	801307c <_vfiprintf_r+0x1ec>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f12:	9304      	str	r3, [sp, #16]
 8012f14:	9307      	str	r3, [sp, #28]
 8012f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8012f1c:	46a8      	mov	r8, r5
 8012f1e:	2205      	movs	r2, #5
 8012f20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012f24:	485e      	ldr	r0, [pc, #376]	; (80130a0 <_vfiprintf_r+0x210>)
 8012f26:	f7ed f973 	bl	8000210 <memchr>
 8012f2a:	9b04      	ldr	r3, [sp, #16]
 8012f2c:	bb78      	cbnz	r0, 8012f8e <_vfiprintf_r+0xfe>
 8012f2e:	06d9      	lsls	r1, r3, #27
 8012f30:	bf44      	itt	mi
 8012f32:	2220      	movmi	r2, #32
 8012f34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012f38:	071a      	lsls	r2, r3, #28
 8012f3a:	bf44      	itt	mi
 8012f3c:	222b      	movmi	r2, #43	; 0x2b
 8012f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012f42:	782a      	ldrb	r2, [r5, #0]
 8012f44:	2a2a      	cmp	r2, #42	; 0x2a
 8012f46:	d02a      	beq.n	8012f9e <_vfiprintf_r+0x10e>
 8012f48:	9a07      	ldr	r2, [sp, #28]
 8012f4a:	46a8      	mov	r8, r5
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	250a      	movs	r5, #10
 8012f50:	4641      	mov	r1, r8
 8012f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f56:	3b30      	subs	r3, #48	; 0x30
 8012f58:	2b09      	cmp	r3, #9
 8012f5a:	d969      	bls.n	8013030 <_vfiprintf_r+0x1a0>
 8012f5c:	b360      	cbz	r0, 8012fb8 <_vfiprintf_r+0x128>
 8012f5e:	e024      	b.n	8012faa <_vfiprintf_r+0x11a>
 8012f60:	4b50      	ldr	r3, [pc, #320]	; (80130a4 <_vfiprintf_r+0x214>)
 8012f62:	429c      	cmp	r4, r3
 8012f64:	d101      	bne.n	8012f6a <_vfiprintf_r+0xda>
 8012f66:	68b4      	ldr	r4, [r6, #8]
 8012f68:	e7a2      	b.n	8012eb0 <_vfiprintf_r+0x20>
 8012f6a:	4b4f      	ldr	r3, [pc, #316]	; (80130a8 <_vfiprintf_r+0x218>)
 8012f6c:	429c      	cmp	r4, r3
 8012f6e:	bf08      	it	eq
 8012f70:	68f4      	ldreq	r4, [r6, #12]
 8012f72:	e79d      	b.n	8012eb0 <_vfiprintf_r+0x20>
 8012f74:	4621      	mov	r1, r4
 8012f76:	4630      	mov	r0, r6
 8012f78:	f000 fad0 	bl	801351c <__swsetup_r>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d09d      	beq.n	8012ebc <_vfiprintf_r+0x2c>
 8012f80:	f04f 30ff 	mov.w	r0, #4294967295
 8012f84:	b01d      	add	sp, #116	; 0x74
 8012f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8a:	46a8      	mov	r8, r5
 8012f8c:	e7a2      	b.n	8012ed4 <_vfiprintf_r+0x44>
 8012f8e:	4a44      	ldr	r2, [pc, #272]	; (80130a0 <_vfiprintf_r+0x210>)
 8012f90:	1a80      	subs	r0, r0, r2
 8012f92:	fa0b f000 	lsl.w	r0, fp, r0
 8012f96:	4318      	orrs	r0, r3
 8012f98:	9004      	str	r0, [sp, #16]
 8012f9a:	4645      	mov	r5, r8
 8012f9c:	e7be      	b.n	8012f1c <_vfiprintf_r+0x8c>
 8012f9e:	9a03      	ldr	r2, [sp, #12]
 8012fa0:	1d11      	adds	r1, r2, #4
 8012fa2:	6812      	ldr	r2, [r2, #0]
 8012fa4:	9103      	str	r1, [sp, #12]
 8012fa6:	2a00      	cmp	r2, #0
 8012fa8:	db01      	blt.n	8012fae <_vfiprintf_r+0x11e>
 8012faa:	9207      	str	r2, [sp, #28]
 8012fac:	e004      	b.n	8012fb8 <_vfiprintf_r+0x128>
 8012fae:	4252      	negs	r2, r2
 8012fb0:	f043 0302 	orr.w	r3, r3, #2
 8012fb4:	9207      	str	r2, [sp, #28]
 8012fb6:	9304      	str	r3, [sp, #16]
 8012fb8:	f898 3000 	ldrb.w	r3, [r8]
 8012fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8012fbe:	d10e      	bne.n	8012fde <_vfiprintf_r+0x14e>
 8012fc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8012fc6:	d138      	bne.n	801303a <_vfiprintf_r+0x1aa>
 8012fc8:	9b03      	ldr	r3, [sp, #12]
 8012fca:	1d1a      	adds	r2, r3, #4
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	9203      	str	r2, [sp, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bfb8      	it	lt
 8012fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012fd8:	f108 0802 	add.w	r8, r8, #2
 8012fdc:	9305      	str	r3, [sp, #20]
 8012fde:	4d33      	ldr	r5, [pc, #204]	; (80130ac <_vfiprintf_r+0x21c>)
 8012fe0:	f898 1000 	ldrb.w	r1, [r8]
 8012fe4:	2203      	movs	r2, #3
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f7ed f912 	bl	8000210 <memchr>
 8012fec:	b140      	cbz	r0, 8013000 <_vfiprintf_r+0x170>
 8012fee:	2340      	movs	r3, #64	; 0x40
 8012ff0:	1b40      	subs	r0, r0, r5
 8012ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8012ff6:	9b04      	ldr	r3, [sp, #16]
 8012ff8:	4303      	orrs	r3, r0
 8012ffa:	f108 0801 	add.w	r8, r8, #1
 8012ffe:	9304      	str	r3, [sp, #16]
 8013000:	f898 1000 	ldrb.w	r1, [r8]
 8013004:	482a      	ldr	r0, [pc, #168]	; (80130b0 <_vfiprintf_r+0x220>)
 8013006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801300a:	2206      	movs	r2, #6
 801300c:	f108 0701 	add.w	r7, r8, #1
 8013010:	f7ed f8fe 	bl	8000210 <memchr>
 8013014:	2800      	cmp	r0, #0
 8013016:	d037      	beq.n	8013088 <_vfiprintf_r+0x1f8>
 8013018:	4b26      	ldr	r3, [pc, #152]	; (80130b4 <_vfiprintf_r+0x224>)
 801301a:	bb1b      	cbnz	r3, 8013064 <_vfiprintf_r+0x1d4>
 801301c:	9b03      	ldr	r3, [sp, #12]
 801301e:	3307      	adds	r3, #7
 8013020:	f023 0307 	bic.w	r3, r3, #7
 8013024:	3308      	adds	r3, #8
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801302a:	444b      	add	r3, r9
 801302c:	9309      	str	r3, [sp, #36]	; 0x24
 801302e:	e750      	b.n	8012ed2 <_vfiprintf_r+0x42>
 8013030:	fb05 3202 	mla	r2, r5, r2, r3
 8013034:	2001      	movs	r0, #1
 8013036:	4688      	mov	r8, r1
 8013038:	e78a      	b.n	8012f50 <_vfiprintf_r+0xc0>
 801303a:	2300      	movs	r3, #0
 801303c:	f108 0801 	add.w	r8, r8, #1
 8013040:	9305      	str	r3, [sp, #20]
 8013042:	4619      	mov	r1, r3
 8013044:	250a      	movs	r5, #10
 8013046:	4640      	mov	r0, r8
 8013048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801304c:	3a30      	subs	r2, #48	; 0x30
 801304e:	2a09      	cmp	r2, #9
 8013050:	d903      	bls.n	801305a <_vfiprintf_r+0x1ca>
 8013052:	2b00      	cmp	r3, #0
 8013054:	d0c3      	beq.n	8012fde <_vfiprintf_r+0x14e>
 8013056:	9105      	str	r1, [sp, #20]
 8013058:	e7c1      	b.n	8012fde <_vfiprintf_r+0x14e>
 801305a:	fb05 2101 	mla	r1, r5, r1, r2
 801305e:	2301      	movs	r3, #1
 8013060:	4680      	mov	r8, r0
 8013062:	e7f0      	b.n	8013046 <_vfiprintf_r+0x1b6>
 8013064:	ab03      	add	r3, sp, #12
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	4622      	mov	r2, r4
 801306a:	4b13      	ldr	r3, [pc, #76]	; (80130b8 <_vfiprintf_r+0x228>)
 801306c:	a904      	add	r1, sp, #16
 801306e:	4630      	mov	r0, r6
 8013070:	f3af 8000 	nop.w
 8013074:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013078:	4681      	mov	r9, r0
 801307a:	d1d5      	bne.n	8013028 <_vfiprintf_r+0x198>
 801307c:	89a3      	ldrh	r3, [r4, #12]
 801307e:	065b      	lsls	r3, r3, #25
 8013080:	f53f af7e 	bmi.w	8012f80 <_vfiprintf_r+0xf0>
 8013084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013086:	e77d      	b.n	8012f84 <_vfiprintf_r+0xf4>
 8013088:	ab03      	add	r3, sp, #12
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	4622      	mov	r2, r4
 801308e:	4b0a      	ldr	r3, [pc, #40]	; (80130b8 <_vfiprintf_r+0x228>)
 8013090:	a904      	add	r1, sp, #16
 8013092:	4630      	mov	r0, r6
 8013094:	f000 f888 	bl	80131a8 <_printf_i>
 8013098:	e7ec      	b.n	8013074 <_vfiprintf_r+0x1e4>
 801309a:	bf00      	nop
 801309c:	08016578 	.word	0x08016578
 80130a0:	080165b8 	.word	0x080165b8
 80130a4:	08016598 	.word	0x08016598
 80130a8:	08016558 	.word	0x08016558
 80130ac:	080165be 	.word	0x080165be
 80130b0:	080165c2 	.word	0x080165c2
 80130b4:	00000000 	.word	0x00000000
 80130b8:	08012e6b 	.word	0x08012e6b

080130bc <_printf_common>:
 80130bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130c0:	4691      	mov	r9, r2
 80130c2:	461f      	mov	r7, r3
 80130c4:	688a      	ldr	r2, [r1, #8]
 80130c6:	690b      	ldr	r3, [r1, #16]
 80130c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80130cc:	4293      	cmp	r3, r2
 80130ce:	bfb8      	it	lt
 80130d0:	4613      	movlt	r3, r2
 80130d2:	f8c9 3000 	str.w	r3, [r9]
 80130d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80130da:	4606      	mov	r6, r0
 80130dc:	460c      	mov	r4, r1
 80130de:	b112      	cbz	r2, 80130e6 <_printf_common+0x2a>
 80130e0:	3301      	adds	r3, #1
 80130e2:	f8c9 3000 	str.w	r3, [r9]
 80130e6:	6823      	ldr	r3, [r4, #0]
 80130e8:	0699      	lsls	r1, r3, #26
 80130ea:	bf42      	ittt	mi
 80130ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80130f0:	3302      	addmi	r3, #2
 80130f2:	f8c9 3000 	strmi.w	r3, [r9]
 80130f6:	6825      	ldr	r5, [r4, #0]
 80130f8:	f015 0506 	ands.w	r5, r5, #6
 80130fc:	d107      	bne.n	801310e <_printf_common+0x52>
 80130fe:	f104 0a19 	add.w	sl, r4, #25
 8013102:	68e3      	ldr	r3, [r4, #12]
 8013104:	f8d9 2000 	ldr.w	r2, [r9]
 8013108:	1a9b      	subs	r3, r3, r2
 801310a:	42ab      	cmp	r3, r5
 801310c:	dc28      	bgt.n	8013160 <_printf_common+0xa4>
 801310e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013112:	6822      	ldr	r2, [r4, #0]
 8013114:	3300      	adds	r3, #0
 8013116:	bf18      	it	ne
 8013118:	2301      	movne	r3, #1
 801311a:	0692      	lsls	r2, r2, #26
 801311c:	d42d      	bmi.n	801317a <_printf_common+0xbe>
 801311e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013122:	4639      	mov	r1, r7
 8013124:	4630      	mov	r0, r6
 8013126:	47c0      	blx	r8
 8013128:	3001      	adds	r0, #1
 801312a:	d020      	beq.n	801316e <_printf_common+0xb2>
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	68e5      	ldr	r5, [r4, #12]
 8013130:	f8d9 2000 	ldr.w	r2, [r9]
 8013134:	f003 0306 	and.w	r3, r3, #6
 8013138:	2b04      	cmp	r3, #4
 801313a:	bf08      	it	eq
 801313c:	1aad      	subeq	r5, r5, r2
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	6922      	ldr	r2, [r4, #16]
 8013142:	bf0c      	ite	eq
 8013144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013148:	2500      	movne	r5, #0
 801314a:	4293      	cmp	r3, r2
 801314c:	bfc4      	itt	gt
 801314e:	1a9b      	subgt	r3, r3, r2
 8013150:	18ed      	addgt	r5, r5, r3
 8013152:	f04f 0900 	mov.w	r9, #0
 8013156:	341a      	adds	r4, #26
 8013158:	454d      	cmp	r5, r9
 801315a:	d11a      	bne.n	8013192 <_printf_common+0xd6>
 801315c:	2000      	movs	r0, #0
 801315e:	e008      	b.n	8013172 <_printf_common+0xb6>
 8013160:	2301      	movs	r3, #1
 8013162:	4652      	mov	r2, sl
 8013164:	4639      	mov	r1, r7
 8013166:	4630      	mov	r0, r6
 8013168:	47c0      	blx	r8
 801316a:	3001      	adds	r0, #1
 801316c:	d103      	bne.n	8013176 <_printf_common+0xba>
 801316e:	f04f 30ff 	mov.w	r0, #4294967295
 8013172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013176:	3501      	adds	r5, #1
 8013178:	e7c3      	b.n	8013102 <_printf_common+0x46>
 801317a:	18e1      	adds	r1, r4, r3
 801317c:	1c5a      	adds	r2, r3, #1
 801317e:	2030      	movs	r0, #48	; 0x30
 8013180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013184:	4422      	add	r2, r4
 8013186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801318a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801318e:	3302      	adds	r3, #2
 8013190:	e7c5      	b.n	801311e <_printf_common+0x62>
 8013192:	2301      	movs	r3, #1
 8013194:	4622      	mov	r2, r4
 8013196:	4639      	mov	r1, r7
 8013198:	4630      	mov	r0, r6
 801319a:	47c0      	blx	r8
 801319c:	3001      	adds	r0, #1
 801319e:	d0e6      	beq.n	801316e <_printf_common+0xb2>
 80131a0:	f109 0901 	add.w	r9, r9, #1
 80131a4:	e7d8      	b.n	8013158 <_printf_common+0x9c>
	...

080131a8 <_printf_i>:
 80131a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80131b0:	460c      	mov	r4, r1
 80131b2:	7e09      	ldrb	r1, [r1, #24]
 80131b4:	b085      	sub	sp, #20
 80131b6:	296e      	cmp	r1, #110	; 0x6e
 80131b8:	4617      	mov	r7, r2
 80131ba:	4606      	mov	r6, r0
 80131bc:	4698      	mov	r8, r3
 80131be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131c0:	f000 80b3 	beq.w	801332a <_printf_i+0x182>
 80131c4:	d822      	bhi.n	801320c <_printf_i+0x64>
 80131c6:	2963      	cmp	r1, #99	; 0x63
 80131c8:	d036      	beq.n	8013238 <_printf_i+0x90>
 80131ca:	d80a      	bhi.n	80131e2 <_printf_i+0x3a>
 80131cc:	2900      	cmp	r1, #0
 80131ce:	f000 80b9 	beq.w	8013344 <_printf_i+0x19c>
 80131d2:	2958      	cmp	r1, #88	; 0x58
 80131d4:	f000 8083 	beq.w	80132de <_printf_i+0x136>
 80131d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80131e0:	e032      	b.n	8013248 <_printf_i+0xa0>
 80131e2:	2964      	cmp	r1, #100	; 0x64
 80131e4:	d001      	beq.n	80131ea <_printf_i+0x42>
 80131e6:	2969      	cmp	r1, #105	; 0x69
 80131e8:	d1f6      	bne.n	80131d8 <_printf_i+0x30>
 80131ea:	6820      	ldr	r0, [r4, #0]
 80131ec:	6813      	ldr	r3, [r2, #0]
 80131ee:	0605      	lsls	r5, r0, #24
 80131f0:	f103 0104 	add.w	r1, r3, #4
 80131f4:	d52a      	bpl.n	801324c <_printf_i+0xa4>
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	6011      	str	r1, [r2, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	da03      	bge.n	8013206 <_printf_i+0x5e>
 80131fe:	222d      	movs	r2, #45	; 0x2d
 8013200:	425b      	negs	r3, r3
 8013202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013206:	486f      	ldr	r0, [pc, #444]	; (80133c4 <_printf_i+0x21c>)
 8013208:	220a      	movs	r2, #10
 801320a:	e039      	b.n	8013280 <_printf_i+0xd8>
 801320c:	2973      	cmp	r1, #115	; 0x73
 801320e:	f000 809d 	beq.w	801334c <_printf_i+0x1a4>
 8013212:	d808      	bhi.n	8013226 <_printf_i+0x7e>
 8013214:	296f      	cmp	r1, #111	; 0x6f
 8013216:	d020      	beq.n	801325a <_printf_i+0xb2>
 8013218:	2970      	cmp	r1, #112	; 0x70
 801321a:	d1dd      	bne.n	80131d8 <_printf_i+0x30>
 801321c:	6823      	ldr	r3, [r4, #0]
 801321e:	f043 0320 	orr.w	r3, r3, #32
 8013222:	6023      	str	r3, [r4, #0]
 8013224:	e003      	b.n	801322e <_printf_i+0x86>
 8013226:	2975      	cmp	r1, #117	; 0x75
 8013228:	d017      	beq.n	801325a <_printf_i+0xb2>
 801322a:	2978      	cmp	r1, #120	; 0x78
 801322c:	d1d4      	bne.n	80131d8 <_printf_i+0x30>
 801322e:	2378      	movs	r3, #120	; 0x78
 8013230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013234:	4864      	ldr	r0, [pc, #400]	; (80133c8 <_printf_i+0x220>)
 8013236:	e055      	b.n	80132e4 <_printf_i+0x13c>
 8013238:	6813      	ldr	r3, [r2, #0]
 801323a:	1d19      	adds	r1, r3, #4
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	6011      	str	r1, [r2, #0]
 8013240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013248:	2301      	movs	r3, #1
 801324a:	e08c      	b.n	8013366 <_printf_i+0x1be>
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	6011      	str	r1, [r2, #0]
 8013250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013254:	bf18      	it	ne
 8013256:	b21b      	sxthne	r3, r3
 8013258:	e7cf      	b.n	80131fa <_printf_i+0x52>
 801325a:	6813      	ldr	r3, [r2, #0]
 801325c:	6825      	ldr	r5, [r4, #0]
 801325e:	1d18      	adds	r0, r3, #4
 8013260:	6010      	str	r0, [r2, #0]
 8013262:	0628      	lsls	r0, r5, #24
 8013264:	d501      	bpl.n	801326a <_printf_i+0xc2>
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	e002      	b.n	8013270 <_printf_i+0xc8>
 801326a:	0668      	lsls	r0, r5, #25
 801326c:	d5fb      	bpl.n	8013266 <_printf_i+0xbe>
 801326e:	881b      	ldrh	r3, [r3, #0]
 8013270:	4854      	ldr	r0, [pc, #336]	; (80133c4 <_printf_i+0x21c>)
 8013272:	296f      	cmp	r1, #111	; 0x6f
 8013274:	bf14      	ite	ne
 8013276:	220a      	movne	r2, #10
 8013278:	2208      	moveq	r2, #8
 801327a:	2100      	movs	r1, #0
 801327c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013280:	6865      	ldr	r5, [r4, #4]
 8013282:	60a5      	str	r5, [r4, #8]
 8013284:	2d00      	cmp	r5, #0
 8013286:	f2c0 8095 	blt.w	80133b4 <_printf_i+0x20c>
 801328a:	6821      	ldr	r1, [r4, #0]
 801328c:	f021 0104 	bic.w	r1, r1, #4
 8013290:	6021      	str	r1, [r4, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d13d      	bne.n	8013312 <_printf_i+0x16a>
 8013296:	2d00      	cmp	r5, #0
 8013298:	f040 808e 	bne.w	80133b8 <_printf_i+0x210>
 801329c:	4665      	mov	r5, ip
 801329e:	2a08      	cmp	r2, #8
 80132a0:	d10b      	bne.n	80132ba <_printf_i+0x112>
 80132a2:	6823      	ldr	r3, [r4, #0]
 80132a4:	07db      	lsls	r3, r3, #31
 80132a6:	d508      	bpl.n	80132ba <_printf_i+0x112>
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	6862      	ldr	r2, [r4, #4]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	bfde      	ittt	le
 80132b0:	2330      	movle	r3, #48	; 0x30
 80132b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80132b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80132ba:	ebac 0305 	sub.w	r3, ip, r5
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	f8cd 8000 	str.w	r8, [sp]
 80132c4:	463b      	mov	r3, r7
 80132c6:	aa03      	add	r2, sp, #12
 80132c8:	4621      	mov	r1, r4
 80132ca:	4630      	mov	r0, r6
 80132cc:	f7ff fef6 	bl	80130bc <_printf_common>
 80132d0:	3001      	adds	r0, #1
 80132d2:	d14d      	bne.n	8013370 <_printf_i+0x1c8>
 80132d4:	f04f 30ff 	mov.w	r0, #4294967295
 80132d8:	b005      	add	sp, #20
 80132da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132de:	4839      	ldr	r0, [pc, #228]	; (80133c4 <_printf_i+0x21c>)
 80132e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80132e4:	6813      	ldr	r3, [r2, #0]
 80132e6:	6821      	ldr	r1, [r4, #0]
 80132e8:	1d1d      	adds	r5, r3, #4
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	6015      	str	r5, [r2, #0]
 80132ee:	060a      	lsls	r2, r1, #24
 80132f0:	d50b      	bpl.n	801330a <_printf_i+0x162>
 80132f2:	07ca      	lsls	r2, r1, #31
 80132f4:	bf44      	itt	mi
 80132f6:	f041 0120 	orrmi.w	r1, r1, #32
 80132fa:	6021      	strmi	r1, [r4, #0]
 80132fc:	b91b      	cbnz	r3, 8013306 <_printf_i+0x15e>
 80132fe:	6822      	ldr	r2, [r4, #0]
 8013300:	f022 0220 	bic.w	r2, r2, #32
 8013304:	6022      	str	r2, [r4, #0]
 8013306:	2210      	movs	r2, #16
 8013308:	e7b7      	b.n	801327a <_printf_i+0xd2>
 801330a:	064d      	lsls	r5, r1, #25
 801330c:	bf48      	it	mi
 801330e:	b29b      	uxthmi	r3, r3
 8013310:	e7ef      	b.n	80132f2 <_printf_i+0x14a>
 8013312:	4665      	mov	r5, ip
 8013314:	fbb3 f1f2 	udiv	r1, r3, r2
 8013318:	fb02 3311 	mls	r3, r2, r1, r3
 801331c:	5cc3      	ldrb	r3, [r0, r3]
 801331e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013322:	460b      	mov	r3, r1
 8013324:	2900      	cmp	r1, #0
 8013326:	d1f5      	bne.n	8013314 <_printf_i+0x16c>
 8013328:	e7b9      	b.n	801329e <_printf_i+0xf6>
 801332a:	6813      	ldr	r3, [r2, #0]
 801332c:	6825      	ldr	r5, [r4, #0]
 801332e:	6961      	ldr	r1, [r4, #20]
 8013330:	1d18      	adds	r0, r3, #4
 8013332:	6010      	str	r0, [r2, #0]
 8013334:	0628      	lsls	r0, r5, #24
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	d501      	bpl.n	801333e <_printf_i+0x196>
 801333a:	6019      	str	r1, [r3, #0]
 801333c:	e002      	b.n	8013344 <_printf_i+0x19c>
 801333e:	066a      	lsls	r2, r5, #25
 8013340:	d5fb      	bpl.n	801333a <_printf_i+0x192>
 8013342:	8019      	strh	r1, [r3, #0]
 8013344:	2300      	movs	r3, #0
 8013346:	6123      	str	r3, [r4, #16]
 8013348:	4665      	mov	r5, ip
 801334a:	e7b9      	b.n	80132c0 <_printf_i+0x118>
 801334c:	6813      	ldr	r3, [r2, #0]
 801334e:	1d19      	adds	r1, r3, #4
 8013350:	6011      	str	r1, [r2, #0]
 8013352:	681d      	ldr	r5, [r3, #0]
 8013354:	6862      	ldr	r2, [r4, #4]
 8013356:	2100      	movs	r1, #0
 8013358:	4628      	mov	r0, r5
 801335a:	f7ec ff59 	bl	8000210 <memchr>
 801335e:	b108      	cbz	r0, 8013364 <_printf_i+0x1bc>
 8013360:	1b40      	subs	r0, r0, r5
 8013362:	6060      	str	r0, [r4, #4]
 8013364:	6863      	ldr	r3, [r4, #4]
 8013366:	6123      	str	r3, [r4, #16]
 8013368:	2300      	movs	r3, #0
 801336a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801336e:	e7a7      	b.n	80132c0 <_printf_i+0x118>
 8013370:	6923      	ldr	r3, [r4, #16]
 8013372:	462a      	mov	r2, r5
 8013374:	4639      	mov	r1, r7
 8013376:	4630      	mov	r0, r6
 8013378:	47c0      	blx	r8
 801337a:	3001      	adds	r0, #1
 801337c:	d0aa      	beq.n	80132d4 <_printf_i+0x12c>
 801337e:	6823      	ldr	r3, [r4, #0]
 8013380:	079b      	lsls	r3, r3, #30
 8013382:	d413      	bmi.n	80133ac <_printf_i+0x204>
 8013384:	68e0      	ldr	r0, [r4, #12]
 8013386:	9b03      	ldr	r3, [sp, #12]
 8013388:	4298      	cmp	r0, r3
 801338a:	bfb8      	it	lt
 801338c:	4618      	movlt	r0, r3
 801338e:	e7a3      	b.n	80132d8 <_printf_i+0x130>
 8013390:	2301      	movs	r3, #1
 8013392:	464a      	mov	r2, r9
 8013394:	4639      	mov	r1, r7
 8013396:	4630      	mov	r0, r6
 8013398:	47c0      	blx	r8
 801339a:	3001      	adds	r0, #1
 801339c:	d09a      	beq.n	80132d4 <_printf_i+0x12c>
 801339e:	3501      	adds	r5, #1
 80133a0:	68e3      	ldr	r3, [r4, #12]
 80133a2:	9a03      	ldr	r2, [sp, #12]
 80133a4:	1a9b      	subs	r3, r3, r2
 80133a6:	42ab      	cmp	r3, r5
 80133a8:	dcf2      	bgt.n	8013390 <_printf_i+0x1e8>
 80133aa:	e7eb      	b.n	8013384 <_printf_i+0x1dc>
 80133ac:	2500      	movs	r5, #0
 80133ae:	f104 0919 	add.w	r9, r4, #25
 80133b2:	e7f5      	b.n	80133a0 <_printf_i+0x1f8>
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d1ac      	bne.n	8013312 <_printf_i+0x16a>
 80133b8:	7803      	ldrb	r3, [r0, #0]
 80133ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133c2:	e76c      	b.n	801329e <_printf_i+0xf6>
 80133c4:	080165c9 	.word	0x080165c9
 80133c8:	080165da 	.word	0x080165da

080133cc <__sread>:
 80133cc:	b510      	push	{r4, lr}
 80133ce:	460c      	mov	r4, r1
 80133d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d4:	f000 fa46 	bl	8013864 <_read_r>
 80133d8:	2800      	cmp	r0, #0
 80133da:	bfab      	itete	ge
 80133dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133de:	89a3      	ldrhlt	r3, [r4, #12]
 80133e0:	181b      	addge	r3, r3, r0
 80133e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133e6:	bfac      	ite	ge
 80133e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80133ea:	81a3      	strhlt	r3, [r4, #12]
 80133ec:	bd10      	pop	{r4, pc}

080133ee <__swrite>:
 80133ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f2:	461f      	mov	r7, r3
 80133f4:	898b      	ldrh	r3, [r1, #12]
 80133f6:	05db      	lsls	r3, r3, #23
 80133f8:	4605      	mov	r5, r0
 80133fa:	460c      	mov	r4, r1
 80133fc:	4616      	mov	r6, r2
 80133fe:	d505      	bpl.n	801340c <__swrite+0x1e>
 8013400:	2302      	movs	r3, #2
 8013402:	2200      	movs	r2, #0
 8013404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013408:	f000 f9b6 	bl	8013778 <_lseek_r>
 801340c:	89a3      	ldrh	r3, [r4, #12]
 801340e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013416:	81a3      	strh	r3, [r4, #12]
 8013418:	4632      	mov	r2, r6
 801341a:	463b      	mov	r3, r7
 801341c:	4628      	mov	r0, r5
 801341e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	f000 b869 	b.w	80134f8 <_write_r>

08013426 <__sseek>:
 8013426:	b510      	push	{r4, lr}
 8013428:	460c      	mov	r4, r1
 801342a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801342e:	f000 f9a3 	bl	8013778 <_lseek_r>
 8013432:	1c43      	adds	r3, r0, #1
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	bf15      	itete	ne
 8013438:	6560      	strne	r0, [r4, #84]	; 0x54
 801343a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801343e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013442:	81a3      	strheq	r3, [r4, #12]
 8013444:	bf18      	it	ne
 8013446:	81a3      	strhne	r3, [r4, #12]
 8013448:	bd10      	pop	{r4, pc}

0801344a <__sclose>:
 801344a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801344e:	f000 b8d3 	b.w	80135f8 <_close_r>
	...

08013454 <__swbuf_r>:
 8013454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013456:	460e      	mov	r6, r1
 8013458:	4614      	mov	r4, r2
 801345a:	4605      	mov	r5, r0
 801345c:	b118      	cbz	r0, 8013466 <__swbuf_r+0x12>
 801345e:	6983      	ldr	r3, [r0, #24]
 8013460:	b90b      	cbnz	r3, 8013466 <__swbuf_r+0x12>
 8013462:	f7ff fc5f 	bl	8012d24 <__sinit>
 8013466:	4b21      	ldr	r3, [pc, #132]	; (80134ec <__swbuf_r+0x98>)
 8013468:	429c      	cmp	r4, r3
 801346a:	d12a      	bne.n	80134c2 <__swbuf_r+0x6e>
 801346c:	686c      	ldr	r4, [r5, #4]
 801346e:	69a3      	ldr	r3, [r4, #24]
 8013470:	60a3      	str	r3, [r4, #8]
 8013472:	89a3      	ldrh	r3, [r4, #12]
 8013474:	071a      	lsls	r2, r3, #28
 8013476:	d52e      	bpl.n	80134d6 <__swbuf_r+0x82>
 8013478:	6923      	ldr	r3, [r4, #16]
 801347a:	b363      	cbz	r3, 80134d6 <__swbuf_r+0x82>
 801347c:	6923      	ldr	r3, [r4, #16]
 801347e:	6820      	ldr	r0, [r4, #0]
 8013480:	1ac0      	subs	r0, r0, r3
 8013482:	6963      	ldr	r3, [r4, #20]
 8013484:	b2f6      	uxtb	r6, r6
 8013486:	4283      	cmp	r3, r0
 8013488:	4637      	mov	r7, r6
 801348a:	dc04      	bgt.n	8013496 <__swbuf_r+0x42>
 801348c:	4621      	mov	r1, r4
 801348e:	4628      	mov	r0, r5
 8013490:	f000 f948 	bl	8013724 <_fflush_r>
 8013494:	bb28      	cbnz	r0, 80134e2 <__swbuf_r+0x8e>
 8013496:	68a3      	ldr	r3, [r4, #8]
 8013498:	3b01      	subs	r3, #1
 801349a:	60a3      	str	r3, [r4, #8]
 801349c:	6823      	ldr	r3, [r4, #0]
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	6022      	str	r2, [r4, #0]
 80134a2:	701e      	strb	r6, [r3, #0]
 80134a4:	6963      	ldr	r3, [r4, #20]
 80134a6:	3001      	adds	r0, #1
 80134a8:	4283      	cmp	r3, r0
 80134aa:	d004      	beq.n	80134b6 <__swbuf_r+0x62>
 80134ac:	89a3      	ldrh	r3, [r4, #12]
 80134ae:	07db      	lsls	r3, r3, #31
 80134b0:	d519      	bpl.n	80134e6 <__swbuf_r+0x92>
 80134b2:	2e0a      	cmp	r6, #10
 80134b4:	d117      	bne.n	80134e6 <__swbuf_r+0x92>
 80134b6:	4621      	mov	r1, r4
 80134b8:	4628      	mov	r0, r5
 80134ba:	f000 f933 	bl	8013724 <_fflush_r>
 80134be:	b190      	cbz	r0, 80134e6 <__swbuf_r+0x92>
 80134c0:	e00f      	b.n	80134e2 <__swbuf_r+0x8e>
 80134c2:	4b0b      	ldr	r3, [pc, #44]	; (80134f0 <__swbuf_r+0x9c>)
 80134c4:	429c      	cmp	r4, r3
 80134c6:	d101      	bne.n	80134cc <__swbuf_r+0x78>
 80134c8:	68ac      	ldr	r4, [r5, #8]
 80134ca:	e7d0      	b.n	801346e <__swbuf_r+0x1a>
 80134cc:	4b09      	ldr	r3, [pc, #36]	; (80134f4 <__swbuf_r+0xa0>)
 80134ce:	429c      	cmp	r4, r3
 80134d0:	bf08      	it	eq
 80134d2:	68ec      	ldreq	r4, [r5, #12]
 80134d4:	e7cb      	b.n	801346e <__swbuf_r+0x1a>
 80134d6:	4621      	mov	r1, r4
 80134d8:	4628      	mov	r0, r5
 80134da:	f000 f81f 	bl	801351c <__swsetup_r>
 80134de:	2800      	cmp	r0, #0
 80134e0:	d0cc      	beq.n	801347c <__swbuf_r+0x28>
 80134e2:	f04f 37ff 	mov.w	r7, #4294967295
 80134e6:	4638      	mov	r0, r7
 80134e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ea:	bf00      	nop
 80134ec:	08016578 	.word	0x08016578
 80134f0:	08016598 	.word	0x08016598
 80134f4:	08016558 	.word	0x08016558

080134f8 <_write_r>:
 80134f8:	b538      	push	{r3, r4, r5, lr}
 80134fa:	4c07      	ldr	r4, [pc, #28]	; (8013518 <_write_r+0x20>)
 80134fc:	4605      	mov	r5, r0
 80134fe:	4608      	mov	r0, r1
 8013500:	4611      	mov	r1, r2
 8013502:	2200      	movs	r2, #0
 8013504:	6022      	str	r2, [r4, #0]
 8013506:	461a      	mov	r2, r3
 8013508:	f7ef faad 	bl	8002a66 <_write>
 801350c:	1c43      	adds	r3, r0, #1
 801350e:	d102      	bne.n	8013516 <_write_r+0x1e>
 8013510:	6823      	ldr	r3, [r4, #0]
 8013512:	b103      	cbz	r3, 8013516 <_write_r+0x1e>
 8013514:	602b      	str	r3, [r5, #0]
 8013516:	bd38      	pop	{r3, r4, r5, pc}
 8013518:	2000f488 	.word	0x2000f488

0801351c <__swsetup_r>:
 801351c:	4b32      	ldr	r3, [pc, #200]	; (80135e8 <__swsetup_r+0xcc>)
 801351e:	b570      	push	{r4, r5, r6, lr}
 8013520:	681d      	ldr	r5, [r3, #0]
 8013522:	4606      	mov	r6, r0
 8013524:	460c      	mov	r4, r1
 8013526:	b125      	cbz	r5, 8013532 <__swsetup_r+0x16>
 8013528:	69ab      	ldr	r3, [r5, #24]
 801352a:	b913      	cbnz	r3, 8013532 <__swsetup_r+0x16>
 801352c:	4628      	mov	r0, r5
 801352e:	f7ff fbf9 	bl	8012d24 <__sinit>
 8013532:	4b2e      	ldr	r3, [pc, #184]	; (80135ec <__swsetup_r+0xd0>)
 8013534:	429c      	cmp	r4, r3
 8013536:	d10f      	bne.n	8013558 <__swsetup_r+0x3c>
 8013538:	686c      	ldr	r4, [r5, #4]
 801353a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801353e:	b29a      	uxth	r2, r3
 8013540:	0715      	lsls	r5, r2, #28
 8013542:	d42c      	bmi.n	801359e <__swsetup_r+0x82>
 8013544:	06d0      	lsls	r0, r2, #27
 8013546:	d411      	bmi.n	801356c <__swsetup_r+0x50>
 8013548:	2209      	movs	r2, #9
 801354a:	6032      	str	r2, [r6, #0]
 801354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013550:	81a3      	strh	r3, [r4, #12]
 8013552:	f04f 30ff 	mov.w	r0, #4294967295
 8013556:	e03e      	b.n	80135d6 <__swsetup_r+0xba>
 8013558:	4b25      	ldr	r3, [pc, #148]	; (80135f0 <__swsetup_r+0xd4>)
 801355a:	429c      	cmp	r4, r3
 801355c:	d101      	bne.n	8013562 <__swsetup_r+0x46>
 801355e:	68ac      	ldr	r4, [r5, #8]
 8013560:	e7eb      	b.n	801353a <__swsetup_r+0x1e>
 8013562:	4b24      	ldr	r3, [pc, #144]	; (80135f4 <__swsetup_r+0xd8>)
 8013564:	429c      	cmp	r4, r3
 8013566:	bf08      	it	eq
 8013568:	68ec      	ldreq	r4, [r5, #12]
 801356a:	e7e6      	b.n	801353a <__swsetup_r+0x1e>
 801356c:	0751      	lsls	r1, r2, #29
 801356e:	d512      	bpl.n	8013596 <__swsetup_r+0x7a>
 8013570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013572:	b141      	cbz	r1, 8013586 <__swsetup_r+0x6a>
 8013574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013578:	4299      	cmp	r1, r3
 801357a:	d002      	beq.n	8013582 <__swsetup_r+0x66>
 801357c:	4630      	mov	r0, r6
 801357e:	f7ff fac1 	bl	8012b04 <_free_r>
 8013582:	2300      	movs	r3, #0
 8013584:	6363      	str	r3, [r4, #52]	; 0x34
 8013586:	89a3      	ldrh	r3, [r4, #12]
 8013588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801358c:	81a3      	strh	r3, [r4, #12]
 801358e:	2300      	movs	r3, #0
 8013590:	6063      	str	r3, [r4, #4]
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	89a3      	ldrh	r3, [r4, #12]
 8013598:	f043 0308 	orr.w	r3, r3, #8
 801359c:	81a3      	strh	r3, [r4, #12]
 801359e:	6923      	ldr	r3, [r4, #16]
 80135a0:	b94b      	cbnz	r3, 80135b6 <__swsetup_r+0x9a>
 80135a2:	89a3      	ldrh	r3, [r4, #12]
 80135a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80135a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135ac:	d003      	beq.n	80135b6 <__swsetup_r+0x9a>
 80135ae:	4621      	mov	r1, r4
 80135b0:	4630      	mov	r0, r6
 80135b2:	f000 f917 	bl	80137e4 <__smakebuf_r>
 80135b6:	89a2      	ldrh	r2, [r4, #12]
 80135b8:	f012 0301 	ands.w	r3, r2, #1
 80135bc:	d00c      	beq.n	80135d8 <__swsetup_r+0xbc>
 80135be:	2300      	movs	r3, #0
 80135c0:	60a3      	str	r3, [r4, #8]
 80135c2:	6963      	ldr	r3, [r4, #20]
 80135c4:	425b      	negs	r3, r3
 80135c6:	61a3      	str	r3, [r4, #24]
 80135c8:	6923      	ldr	r3, [r4, #16]
 80135ca:	b953      	cbnz	r3, 80135e2 <__swsetup_r+0xc6>
 80135cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80135d4:	d1ba      	bne.n	801354c <__swsetup_r+0x30>
 80135d6:	bd70      	pop	{r4, r5, r6, pc}
 80135d8:	0792      	lsls	r2, r2, #30
 80135da:	bf58      	it	pl
 80135dc:	6963      	ldrpl	r3, [r4, #20]
 80135de:	60a3      	str	r3, [r4, #8]
 80135e0:	e7f2      	b.n	80135c8 <__swsetup_r+0xac>
 80135e2:	2000      	movs	r0, #0
 80135e4:	e7f7      	b.n	80135d6 <__swsetup_r+0xba>
 80135e6:	bf00      	nop
 80135e8:	2000004c 	.word	0x2000004c
 80135ec:	08016578 	.word	0x08016578
 80135f0:	08016598 	.word	0x08016598
 80135f4:	08016558 	.word	0x08016558

080135f8 <_close_r>:
 80135f8:	b538      	push	{r3, r4, r5, lr}
 80135fa:	4c06      	ldr	r4, [pc, #24]	; (8013614 <_close_r+0x1c>)
 80135fc:	2300      	movs	r3, #0
 80135fe:	4605      	mov	r5, r0
 8013600:	4608      	mov	r0, r1
 8013602:	6023      	str	r3, [r4, #0]
 8013604:	f7ef fa4b 	bl	8002a9e <_close>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d102      	bne.n	8013612 <_close_r+0x1a>
 801360c:	6823      	ldr	r3, [r4, #0]
 801360e:	b103      	cbz	r3, 8013612 <_close_r+0x1a>
 8013610:	602b      	str	r3, [r5, #0]
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	2000f488 	.word	0x2000f488

08013618 <__sflush_r>:
 8013618:	898a      	ldrh	r2, [r1, #12]
 801361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801361e:	4605      	mov	r5, r0
 8013620:	0710      	lsls	r0, r2, #28
 8013622:	460c      	mov	r4, r1
 8013624:	d458      	bmi.n	80136d8 <__sflush_r+0xc0>
 8013626:	684b      	ldr	r3, [r1, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	dc05      	bgt.n	8013638 <__sflush_r+0x20>
 801362c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801362e:	2b00      	cmp	r3, #0
 8013630:	dc02      	bgt.n	8013638 <__sflush_r+0x20>
 8013632:	2000      	movs	r0, #0
 8013634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801363a:	2e00      	cmp	r6, #0
 801363c:	d0f9      	beq.n	8013632 <__sflush_r+0x1a>
 801363e:	2300      	movs	r3, #0
 8013640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013644:	682f      	ldr	r7, [r5, #0]
 8013646:	6a21      	ldr	r1, [r4, #32]
 8013648:	602b      	str	r3, [r5, #0]
 801364a:	d032      	beq.n	80136b2 <__sflush_r+0x9a>
 801364c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801364e:	89a3      	ldrh	r3, [r4, #12]
 8013650:	075a      	lsls	r2, r3, #29
 8013652:	d505      	bpl.n	8013660 <__sflush_r+0x48>
 8013654:	6863      	ldr	r3, [r4, #4]
 8013656:	1ac0      	subs	r0, r0, r3
 8013658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801365a:	b10b      	cbz	r3, 8013660 <__sflush_r+0x48>
 801365c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801365e:	1ac0      	subs	r0, r0, r3
 8013660:	2300      	movs	r3, #0
 8013662:	4602      	mov	r2, r0
 8013664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013666:	6a21      	ldr	r1, [r4, #32]
 8013668:	4628      	mov	r0, r5
 801366a:	47b0      	blx	r6
 801366c:	1c43      	adds	r3, r0, #1
 801366e:	89a3      	ldrh	r3, [r4, #12]
 8013670:	d106      	bne.n	8013680 <__sflush_r+0x68>
 8013672:	6829      	ldr	r1, [r5, #0]
 8013674:	291d      	cmp	r1, #29
 8013676:	d848      	bhi.n	801370a <__sflush_r+0xf2>
 8013678:	4a29      	ldr	r2, [pc, #164]	; (8013720 <__sflush_r+0x108>)
 801367a:	40ca      	lsrs	r2, r1
 801367c:	07d6      	lsls	r6, r2, #31
 801367e:	d544      	bpl.n	801370a <__sflush_r+0xf2>
 8013680:	2200      	movs	r2, #0
 8013682:	6062      	str	r2, [r4, #4]
 8013684:	04d9      	lsls	r1, r3, #19
 8013686:	6922      	ldr	r2, [r4, #16]
 8013688:	6022      	str	r2, [r4, #0]
 801368a:	d504      	bpl.n	8013696 <__sflush_r+0x7e>
 801368c:	1c42      	adds	r2, r0, #1
 801368e:	d101      	bne.n	8013694 <__sflush_r+0x7c>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	b903      	cbnz	r3, 8013696 <__sflush_r+0x7e>
 8013694:	6560      	str	r0, [r4, #84]	; 0x54
 8013696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013698:	602f      	str	r7, [r5, #0]
 801369a:	2900      	cmp	r1, #0
 801369c:	d0c9      	beq.n	8013632 <__sflush_r+0x1a>
 801369e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136a2:	4299      	cmp	r1, r3
 80136a4:	d002      	beq.n	80136ac <__sflush_r+0x94>
 80136a6:	4628      	mov	r0, r5
 80136a8:	f7ff fa2c 	bl	8012b04 <_free_r>
 80136ac:	2000      	movs	r0, #0
 80136ae:	6360      	str	r0, [r4, #52]	; 0x34
 80136b0:	e7c0      	b.n	8013634 <__sflush_r+0x1c>
 80136b2:	2301      	movs	r3, #1
 80136b4:	4628      	mov	r0, r5
 80136b6:	47b0      	blx	r6
 80136b8:	1c41      	adds	r1, r0, #1
 80136ba:	d1c8      	bne.n	801364e <__sflush_r+0x36>
 80136bc:	682b      	ldr	r3, [r5, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d0c5      	beq.n	801364e <__sflush_r+0x36>
 80136c2:	2b1d      	cmp	r3, #29
 80136c4:	d001      	beq.n	80136ca <__sflush_r+0xb2>
 80136c6:	2b16      	cmp	r3, #22
 80136c8:	d101      	bne.n	80136ce <__sflush_r+0xb6>
 80136ca:	602f      	str	r7, [r5, #0]
 80136cc:	e7b1      	b.n	8013632 <__sflush_r+0x1a>
 80136ce:	89a3      	ldrh	r3, [r4, #12]
 80136d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136d4:	81a3      	strh	r3, [r4, #12]
 80136d6:	e7ad      	b.n	8013634 <__sflush_r+0x1c>
 80136d8:	690f      	ldr	r7, [r1, #16]
 80136da:	2f00      	cmp	r7, #0
 80136dc:	d0a9      	beq.n	8013632 <__sflush_r+0x1a>
 80136de:	0793      	lsls	r3, r2, #30
 80136e0:	680e      	ldr	r6, [r1, #0]
 80136e2:	bf08      	it	eq
 80136e4:	694b      	ldreq	r3, [r1, #20]
 80136e6:	600f      	str	r7, [r1, #0]
 80136e8:	bf18      	it	ne
 80136ea:	2300      	movne	r3, #0
 80136ec:	eba6 0807 	sub.w	r8, r6, r7
 80136f0:	608b      	str	r3, [r1, #8]
 80136f2:	f1b8 0f00 	cmp.w	r8, #0
 80136f6:	dd9c      	ble.n	8013632 <__sflush_r+0x1a>
 80136f8:	4643      	mov	r3, r8
 80136fa:	463a      	mov	r2, r7
 80136fc:	6a21      	ldr	r1, [r4, #32]
 80136fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013700:	4628      	mov	r0, r5
 8013702:	47b0      	blx	r6
 8013704:	2800      	cmp	r0, #0
 8013706:	dc06      	bgt.n	8013716 <__sflush_r+0xfe>
 8013708:	89a3      	ldrh	r3, [r4, #12]
 801370a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801370e:	81a3      	strh	r3, [r4, #12]
 8013710:	f04f 30ff 	mov.w	r0, #4294967295
 8013714:	e78e      	b.n	8013634 <__sflush_r+0x1c>
 8013716:	4407      	add	r7, r0
 8013718:	eba8 0800 	sub.w	r8, r8, r0
 801371c:	e7e9      	b.n	80136f2 <__sflush_r+0xda>
 801371e:	bf00      	nop
 8013720:	20400001 	.word	0x20400001

08013724 <_fflush_r>:
 8013724:	b538      	push	{r3, r4, r5, lr}
 8013726:	690b      	ldr	r3, [r1, #16]
 8013728:	4605      	mov	r5, r0
 801372a:	460c      	mov	r4, r1
 801372c:	b1db      	cbz	r3, 8013766 <_fflush_r+0x42>
 801372e:	b118      	cbz	r0, 8013738 <_fflush_r+0x14>
 8013730:	6983      	ldr	r3, [r0, #24]
 8013732:	b90b      	cbnz	r3, 8013738 <_fflush_r+0x14>
 8013734:	f7ff faf6 	bl	8012d24 <__sinit>
 8013738:	4b0c      	ldr	r3, [pc, #48]	; (801376c <_fflush_r+0x48>)
 801373a:	429c      	cmp	r4, r3
 801373c:	d109      	bne.n	8013752 <_fflush_r+0x2e>
 801373e:	686c      	ldr	r4, [r5, #4]
 8013740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013744:	b17b      	cbz	r3, 8013766 <_fflush_r+0x42>
 8013746:	4621      	mov	r1, r4
 8013748:	4628      	mov	r0, r5
 801374a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801374e:	f7ff bf63 	b.w	8013618 <__sflush_r>
 8013752:	4b07      	ldr	r3, [pc, #28]	; (8013770 <_fflush_r+0x4c>)
 8013754:	429c      	cmp	r4, r3
 8013756:	d101      	bne.n	801375c <_fflush_r+0x38>
 8013758:	68ac      	ldr	r4, [r5, #8]
 801375a:	e7f1      	b.n	8013740 <_fflush_r+0x1c>
 801375c:	4b05      	ldr	r3, [pc, #20]	; (8013774 <_fflush_r+0x50>)
 801375e:	429c      	cmp	r4, r3
 8013760:	bf08      	it	eq
 8013762:	68ec      	ldreq	r4, [r5, #12]
 8013764:	e7ec      	b.n	8013740 <_fflush_r+0x1c>
 8013766:	2000      	movs	r0, #0
 8013768:	bd38      	pop	{r3, r4, r5, pc}
 801376a:	bf00      	nop
 801376c:	08016578 	.word	0x08016578
 8013770:	08016598 	.word	0x08016598
 8013774:	08016558 	.word	0x08016558

08013778 <_lseek_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4c07      	ldr	r4, [pc, #28]	; (8013798 <_lseek_r+0x20>)
 801377c:	4605      	mov	r5, r0
 801377e:	4608      	mov	r0, r1
 8013780:	4611      	mov	r1, r2
 8013782:	2200      	movs	r2, #0
 8013784:	6022      	str	r2, [r4, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	f7ef f9b0 	bl	8002aec <_lseek>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_lseek_r+0x1e>
 8013790:	6823      	ldr	r3, [r4, #0]
 8013792:	b103      	cbz	r3, 8013796 <_lseek_r+0x1e>
 8013794:	602b      	str	r3, [r5, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	2000f488 	.word	0x2000f488

0801379c <__swhatbuf_r>:
 801379c:	b570      	push	{r4, r5, r6, lr}
 801379e:	460e      	mov	r6, r1
 80137a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137a4:	2900      	cmp	r1, #0
 80137a6:	b096      	sub	sp, #88	; 0x58
 80137a8:	4614      	mov	r4, r2
 80137aa:	461d      	mov	r5, r3
 80137ac:	da07      	bge.n	80137be <__swhatbuf_r+0x22>
 80137ae:	2300      	movs	r3, #0
 80137b0:	602b      	str	r3, [r5, #0]
 80137b2:	89b3      	ldrh	r3, [r6, #12]
 80137b4:	061a      	lsls	r2, r3, #24
 80137b6:	d410      	bmi.n	80137da <__swhatbuf_r+0x3e>
 80137b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137bc:	e00e      	b.n	80137dc <__swhatbuf_r+0x40>
 80137be:	466a      	mov	r2, sp
 80137c0:	f000 f862 	bl	8013888 <_fstat_r>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	dbf2      	blt.n	80137ae <__swhatbuf_r+0x12>
 80137c8:	9a01      	ldr	r2, [sp, #4]
 80137ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137d2:	425a      	negs	r2, r3
 80137d4:	415a      	adcs	r2, r3
 80137d6:	602a      	str	r2, [r5, #0]
 80137d8:	e7ee      	b.n	80137b8 <__swhatbuf_r+0x1c>
 80137da:	2340      	movs	r3, #64	; 0x40
 80137dc:	2000      	movs	r0, #0
 80137de:	6023      	str	r3, [r4, #0]
 80137e0:	b016      	add	sp, #88	; 0x58
 80137e2:	bd70      	pop	{r4, r5, r6, pc}

080137e4 <__smakebuf_r>:
 80137e4:	898b      	ldrh	r3, [r1, #12]
 80137e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137e8:	079d      	lsls	r5, r3, #30
 80137ea:	4606      	mov	r6, r0
 80137ec:	460c      	mov	r4, r1
 80137ee:	d507      	bpl.n	8013800 <__smakebuf_r+0x1c>
 80137f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137f4:	6023      	str	r3, [r4, #0]
 80137f6:	6123      	str	r3, [r4, #16]
 80137f8:	2301      	movs	r3, #1
 80137fa:	6163      	str	r3, [r4, #20]
 80137fc:	b002      	add	sp, #8
 80137fe:	bd70      	pop	{r4, r5, r6, pc}
 8013800:	ab01      	add	r3, sp, #4
 8013802:	466a      	mov	r2, sp
 8013804:	f7ff ffca 	bl	801379c <__swhatbuf_r>
 8013808:	9900      	ldr	r1, [sp, #0]
 801380a:	4605      	mov	r5, r0
 801380c:	4630      	mov	r0, r6
 801380e:	f7ff f9c7 	bl	8012ba0 <_malloc_r>
 8013812:	b948      	cbnz	r0, 8013828 <__smakebuf_r+0x44>
 8013814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013818:	059a      	lsls	r2, r3, #22
 801381a:	d4ef      	bmi.n	80137fc <__smakebuf_r+0x18>
 801381c:	f023 0303 	bic.w	r3, r3, #3
 8013820:	f043 0302 	orr.w	r3, r3, #2
 8013824:	81a3      	strh	r3, [r4, #12]
 8013826:	e7e3      	b.n	80137f0 <__smakebuf_r+0xc>
 8013828:	4b0d      	ldr	r3, [pc, #52]	; (8013860 <__smakebuf_r+0x7c>)
 801382a:	62b3      	str	r3, [r6, #40]	; 0x28
 801382c:	89a3      	ldrh	r3, [r4, #12]
 801382e:	6020      	str	r0, [r4, #0]
 8013830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013834:	81a3      	strh	r3, [r4, #12]
 8013836:	9b00      	ldr	r3, [sp, #0]
 8013838:	6163      	str	r3, [r4, #20]
 801383a:	9b01      	ldr	r3, [sp, #4]
 801383c:	6120      	str	r0, [r4, #16]
 801383e:	b15b      	cbz	r3, 8013858 <__smakebuf_r+0x74>
 8013840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013844:	4630      	mov	r0, r6
 8013846:	f000 f831 	bl	80138ac <_isatty_r>
 801384a:	b128      	cbz	r0, 8013858 <__smakebuf_r+0x74>
 801384c:	89a3      	ldrh	r3, [r4, #12]
 801384e:	f023 0303 	bic.w	r3, r3, #3
 8013852:	f043 0301 	orr.w	r3, r3, #1
 8013856:	81a3      	strh	r3, [r4, #12]
 8013858:	89a3      	ldrh	r3, [r4, #12]
 801385a:	431d      	orrs	r5, r3
 801385c:	81a5      	strh	r5, [r4, #12]
 801385e:	e7cd      	b.n	80137fc <__smakebuf_r+0x18>
 8013860:	08012ced 	.word	0x08012ced

08013864 <_read_r>:
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4c07      	ldr	r4, [pc, #28]	; (8013884 <_read_r+0x20>)
 8013868:	4605      	mov	r5, r0
 801386a:	4608      	mov	r0, r1
 801386c:	4611      	mov	r1, r2
 801386e:	2200      	movs	r2, #0
 8013870:	6022      	str	r2, [r4, #0]
 8013872:	461a      	mov	r2, r3
 8013874:	f7ef f8da 	bl	8002a2c <_read>
 8013878:	1c43      	adds	r3, r0, #1
 801387a:	d102      	bne.n	8013882 <_read_r+0x1e>
 801387c:	6823      	ldr	r3, [r4, #0]
 801387e:	b103      	cbz	r3, 8013882 <_read_r+0x1e>
 8013880:	602b      	str	r3, [r5, #0]
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	2000f488 	.word	0x2000f488

08013888 <_fstat_r>:
 8013888:	b538      	push	{r3, r4, r5, lr}
 801388a:	4c07      	ldr	r4, [pc, #28]	; (80138a8 <_fstat_r+0x20>)
 801388c:	2300      	movs	r3, #0
 801388e:	4605      	mov	r5, r0
 8013890:	4608      	mov	r0, r1
 8013892:	4611      	mov	r1, r2
 8013894:	6023      	str	r3, [r4, #0]
 8013896:	f7ef f90e 	bl	8002ab6 <_fstat>
 801389a:	1c43      	adds	r3, r0, #1
 801389c:	d102      	bne.n	80138a4 <_fstat_r+0x1c>
 801389e:	6823      	ldr	r3, [r4, #0]
 80138a0:	b103      	cbz	r3, 80138a4 <_fstat_r+0x1c>
 80138a2:	602b      	str	r3, [r5, #0]
 80138a4:	bd38      	pop	{r3, r4, r5, pc}
 80138a6:	bf00      	nop
 80138a8:	2000f488 	.word	0x2000f488

080138ac <_isatty_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	4c06      	ldr	r4, [pc, #24]	; (80138c8 <_isatty_r+0x1c>)
 80138b0:	2300      	movs	r3, #0
 80138b2:	4605      	mov	r5, r0
 80138b4:	4608      	mov	r0, r1
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	f7ef f90d 	bl	8002ad6 <_isatty>
 80138bc:	1c43      	adds	r3, r0, #1
 80138be:	d102      	bne.n	80138c6 <_isatty_r+0x1a>
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	b103      	cbz	r3, 80138c6 <_isatty_r+0x1a>
 80138c4:	602b      	str	r3, [r5, #0]
 80138c6:	bd38      	pop	{r3, r4, r5, pc}
 80138c8:	2000f488 	.word	0x2000f488

080138cc <_init>:
 80138cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ce:	bf00      	nop
 80138d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138d2:	bc08      	pop	{r3}
 80138d4:	469e      	mov	lr, r3
 80138d6:	4770      	bx	lr

080138d8 <_fini>:
 80138d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138da:	bf00      	nop
 80138dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138de:	bc08      	pop	{r3}
 80138e0:	469e      	mov	lr, r3
 80138e2:	4770      	bx	lr
