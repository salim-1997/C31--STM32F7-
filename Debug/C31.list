
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad98  0800ad98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ada0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  20000010  0800adb0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800adb0  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f91a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005740  00000000  00000000  0004f95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002770  00000000  00000000  000550a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024f0  00000000  00000000  00057810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f6fa  00000000  00000000  00059d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000222f8  00000000  00000000  000893fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001224fa  00000000  00000000  000ab6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdbec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a914  00000000  00000000  001cdc68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad60 	.word	0x0800ad60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800ad60 	.word	0x0800ad60

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f002 f988 	bl	8002842 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f835 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f001 f807 	bl	8001548 <MX_GPIO_Init>
  MX_ADC3_Init();
 800053a:	f000 f8ef 	bl	800071c <MX_ADC3_Init>
  MX_CRC_Init();
 800053e:	f000 f93f 	bl	80007c0 <MX_CRC_Init>
  MX_DCMI_Init();
 8000542:	f000 f95f 	bl	8000804 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000546:	f000 f991 	bl	800086c <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 800054a:	f000 ffad 	bl	80014a8 <MX_FMC_Init>
  MX_I2C1_Init();
 800054e:	f000 f9bf 	bl	80008d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000552:	f000 f9fd 	bl	8000950 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000556:	f000 fa3b 	bl	80009d0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800055a:	f000 faef 	bl	8000b3c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800055e:	f000 fb19 	bl	8000b94 <MX_RTC_Init>
  MX_SAI2_Init();
 8000562:	f000 fbbd 	bl	8000ce0 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000566:	f000 fc63 	bl	8000e30 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800056a:	f000 fc91 	bl	8000e90 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056e:	f000 fd3b 	bl	8000fe8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000572:	f000 fdaf 	bl	80010d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000576:	f000 fe25 	bl	80011c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800057a:	f000 fe9b 	bl	80012b4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800057e:	f000 feed 	bl	800135c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000582:	f000 ff31 	bl	80013e8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000586:	f000 ff5f 	bl	8001448 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
while(1){
	HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
 800058a:	2102      	movs	r1, #2
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <main+0x74>)
 800058e:	f003 fa24 	bl	80039da <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000592:	20fa      	movs	r0, #250	; 0xfa
 8000594:	f002 f982 	bl	800289c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
 8000598:	e7f7      	b.n	800058a <main+0x62>
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0b4      	sub	sp, #208	; 0xd0
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00a fbcd 	bl	800ad4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2284      	movs	r2, #132	; 0x84
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00a fbbe 	bl	800ad4e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d2:	f005 f899 	bl	8005708 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b4e      	ldr	r3, [pc, #312]	; (8000710 <SystemClock_Config+0x170>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	4a4d      	ldr	r2, [pc, #308]	; (8000710 <SystemClock_Config+0x170>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
 80005e2:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <SystemClock_Config+0x170>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <SystemClock_Config+0x174>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a48      	ldr	r2, [pc, #288]	; (8000714 <SystemClock_Config+0x174>)
 80005f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <SystemClock_Config+0x174>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000606:	2309      	movs	r3, #9
 8000608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000628:	2319      	movs	r3, #25
 800062a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800062e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800063c:	2309      	movs	r3, #9
 800063e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f980 	bl	800594c <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000652:	f001 f96f 	bl	8001934 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000656:	f005 f867 	bl	8005728 <HAL_PWREx_EnableOverDrive>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000660:	f001 f968 	bl	8001934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000686:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800068a:	2106      	movs	r1, #6
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fc01 	bl	8005e94 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000698:	f001 f94c 	bl	8001934 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemClock_Config+0x178>)
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80006b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80006b6:	2305      	movs	r3, #5
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006be:	2303      	movs	r3, #3
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006da:	2300      	movs	r3, #0
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80006de:	2300      	movs	r3, #0
 80006e0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80006ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 fdd0 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000702:	f001 f917 	bl	8001934 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	37d0      	adds	r7, #208	; 0xd0
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000
 8000718:	01314868 	.word	0x01314868

0800071c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_ADC3_Init+0x9c>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_ADC3_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_ADC3_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ADC3_Init+0x98>)
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC3_Init+0xa0>)
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_ADC3_Init+0x98>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC3_Init+0x98>)
 8000778:	2201      	movs	r2, #1
 800077a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_ADC3_Init+0x98>)
 800077e:	f002 f8af 	bl	80028e0 <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000788:	f001 f8d4 	bl	8001934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800078c:	2304      	movs	r3, #4
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC3_Init+0x98>)
 800079e:	f002 f8e3 	bl	8002968 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007a8:	f001 f8c4 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000049c 	.word	0x2000049c
 80007b8:	40012200 	.word	0x40012200
 80007bc:	0f000001 	.word	0x0f000001

080007c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_CRC_Init+0x3c>)
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <MX_CRC_Init+0x40>)
 80007c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_CRC_Init+0x3c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_CRC_Init+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_CRC_Init+0x3c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_CRC_Init+0x3c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_CRC_Init+0x3c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_CRC_Init+0x3c>)
 80007ea:	f002 fbe3 	bl	8002fb4 <HAL_CRC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007f4:	f001 f89e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000350 	.word	0x20000350
 8000800:	40023000 	.word	0x40023000

08000804 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_DCMI_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_DCMI_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_DCMI_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_DCMI_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_DCMI_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_DCMI_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DCMI_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_DCMI_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_DCMI_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DCMI_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_DCMI_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_DCMI_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_DCMI_Init+0x60>)
 8000852:	f002 fc99 	bl	8003188 <HAL_DCMI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800085c:	f001 f86a 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200004e4 	.word	0x200004e4
 8000868:	50050000 	.word	0x50050000

0800086c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_DMA2D_Init+0x60>)
 8000874:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 80008a2:	f002 fceb 	bl	800327c <HAL_DMA2D_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008ac:	f001 f842 	bl	8001934 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008b0:	2101      	movs	r1, #1
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 80008b4:	f002 fe3c 	bl	8003530 <HAL_DMA2D_ConfigLayer>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008be:	f001 f839 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000694 	.word	0x20000694
 80008cc:	4002b000 	.word	0x4002b000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f004 fa6a 	bl	8004de4 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f001 f80d 	bl	8001934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f004 faf1 	bl	8004f04 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f001 f804 	bl	8001934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f004 fb33 	bl	8004f9a <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fffb 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000304 	.word	0x20000304
 8000948:	40005400 	.word	0x40005400
 800094c:	00c0eaff 	.word	0x00c0eaff

08000950 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C3_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C3_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C3_Init+0x74>)
 800098c:	f004 fa2a 	bl	8004de4 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 ffcd 	bl	8001934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C3_Init+0x74>)
 800099e:	f004 fab1 	bl	8004f04 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 ffc4 	bl	8001934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C3_Init+0x74>)
 80009b0:	f004 faf3 	bl	8004f9a <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 ffbb 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	00c0eaff 	.word	0x00c0eaff

080009d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09a      	sub	sp, #104	; 0x68
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009da:	2234      	movs	r2, #52	; 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00a f9b5 	bl	800ad4e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2234      	movs	r2, #52	; 0x34
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00a f9af 	bl	800ad4e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <MX_LTDC_Init+0x164>)
 80009f2:	4a51      	ldr	r2, [pc, #324]	; (8000b38 <MX_LTDC_Init+0x168>)
 80009f4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009f6:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <MX_LTDC_Init+0x164>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009fc:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <MX_LTDC_Init+0x164>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a02:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a08:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a0e:	4b49      	ldr	r3, [pc, #292]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a10:	2228      	movs	r2, #40	; 0x28
 8000a12:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a16:	2209      	movs	r2, #9
 8000a18:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a1c:	2235      	movs	r2, #53	; 0x35
 8000a1e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a22:	220b      	movs	r2, #11
 8000a24:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a28:	f240 2215 	movw	r2, #533	; 0x215
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a2e:	4b41      	ldr	r3, [pc, #260]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a30:	f240 121b 	movw	r2, #283	; 0x11b
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a38:	f240 2235 	movw	r2, #565	; 0x235
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a40:	f240 121d 	movw	r2, #285	; 0x11d
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5e:	4835      	ldr	r0, [pc, #212]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000a60:	f004 fae8 	bl	8005034 <HAL_LTDC_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 ff63 	bl	8001934 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000a72:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000a7c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a82:	2302      	movs	r3, #2
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000a86:	23ff      	movs	r3, #255	; 0xff
 8000a88:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a94:	2307      	movs	r3, #7
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000a98:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000a9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000aa4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481b      	ldr	r0, [pc, #108]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000ac6:	f004 fc47 	bl	8005358 <HAL_LTDC_ConfigLayer>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000ad0:	f000 ff30 	bl	8001934 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000af2:	2305      	movs	r3, #5
 8000af4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	2201      	movs	r2, #1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_LTDC_Init+0x164>)
 8000b1c:	f004 fc1c 	bl	8005358 <HAL_LTDC_ConfigLayer>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000b26:	f000 ff05 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3768      	adds	r7, #104	; 0x68
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200003f4 	.word	0x200003f4
 8000b38:	40016800 	.word	0x40016800

08000b3c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_QUADSPI_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_QUADSPI_Init+0x50>)
 8000b78:	f004 fe26 	bl	80057c8 <HAL_QSPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b82:	f000 fed7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200007d0 	.word	0x200007d0
 8000b90:	a0001000 	.word	0xa0001000

08000b94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b092      	sub	sp, #72	; 0x48
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	222c      	movs	r2, #44	; 0x2c
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00a f8c9 	bl	800ad4e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bbc:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bbe:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <MX_RTC_Init+0x148>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bc8:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bca:	227f      	movs	r2, #127	; 0x7f
 8000bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be6:	483c      	ldr	r0, [pc, #240]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000be8:	f006 f87a 	bl	8006ce0 <HAL_RTC_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000bf2:	f000 fe9f 	bl	8001934 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000c1a:	f006 f8dd 	bl	8006dd8 <HAL_RTC_SetTime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000c24:	f000 fe86 	bl	8001934 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000c4a:	f006 f983 	bl	8006f54 <HAL_RTC_SetDate>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c54:	f000 fe6e 	bl	8001934 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000c90:	f006 fa08 	bl	80070a4 <HAL_RTC_SetAlarm>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000c9a:	f000 fe4b 	bl	8001934 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000cac:	f006 f9fa 	bl	80070a4 <HAL_RTC_SetAlarm>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000cb6:	f000 fe3d 	bl	8001934 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_RTC_Init+0x144>)
 8000cc0:	f006 fb7a 	bl	80073b8 <HAL_RTCEx_SetTimeStamp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000cca:	f000 fe33 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3748      	adds	r7, #72	; 0x48
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200005b4 	.word	0x200005b4
 8000cdc:	40002800 	.word	0x40002800

08000ce0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000ce6:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <MX_SAI2_Init+0x140>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cea:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000cf8:	2240      	movs	r2, #64	; 0x40
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cfc:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d08:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d0e:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d14:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d22:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <MX_SAI2_Init+0x144>)
 8000d24:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d40:	2208      	movs	r2, #8
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d44:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d50:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d74:	4829      	ldr	r0, [pc, #164]	; (8000e1c <MX_SAI2_Init+0x13c>)
 8000d76:	f006 fb75 	bl	8007464 <HAL_SAI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d80:	f000 fdd8 	bl	8001934 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <MX_SAI2_Init+0x14c>)
 8000d88:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_SAI2_Init+0x148>)
 8000e0a:	f006 fb2b 	bl	8007464 <HAL_SAI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e14:	f000 fd8e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000280 	.word	0x20000280
 8000e20:	40015c04 	.word	0x40015c04
 8000e24:	0002ee00 	.word	0x0002ee00
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	40015c24 	.word	0x40015c24

08000e30 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e36:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e3a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_SPDIFRX_Init+0x5c>)
 8000e7a:	f006 fccf 	bl	800781c <HAL_SPDIFRX_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 fd56 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000234 	.word	0x20000234

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	; 0x68
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	222c      	movs	r2, #44	; 0x2c
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f009 ff3f 	bl	800ad4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ed2:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <MX_TIM1_Init+0x154>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efc:	4838      	ldr	r0, [pc, #224]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000efe:	f006 fce9 	bl	80078d4 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f000 fd14 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f16:	4619      	mov	r1, r3
 8000f18:	4831      	ldr	r0, [pc, #196]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000f1a:	f006 ff93 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f24:	f000 fd06 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f28:	482d      	ldr	r0, [pc, #180]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000f2a:	f006 fd29 	bl	8007980 <HAL_TIM_PWM_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f34:	f000 fcfe 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4825      	ldr	r0, [pc, #148]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000f4c:	f007 fbf4 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f56:	f000 fced 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000f80:	f006 fe48 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f8a:	f000 fcd3 	bl	8001934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000fc4:	f007 fc46 	bl	8008854 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000fce:	f000 fcb1 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM1_Init+0x150>)
 8000fd4:	f001 f8f6 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3768      	adds	r7, #104	; 0x68
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200005d4 	.word	0x200005d4
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001042:	4823      	ldr	r0, [pc, #140]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001044:	f006 fc46 	bl	80078d4 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 fc71 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105c:	4619      	mov	r1, r3
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001060:	f006 fef0 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800106a:	f000 fc63 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106e:	4818      	ldr	r0, [pc, #96]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001070:	f006 fc86 	bl	8007980 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800107a:	f000 fc5b 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800108e:	f007 fb53 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001098:	f000 fc4c 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM2_Init+0xe8>)
 80010b4:	f006 fdae 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010be:	f000 fc39 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM2_Init+0xe8>)
 80010c4:	f001 f87e 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200006d4 	.word	0x200006d4

080010d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <MX_TIM3_Init+0xec>)
 800110a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_TIM3_Init+0xe8>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <MX_TIM3_Init+0xe8>)
 800111a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <MX_TIM3_Init+0xe8>)
 800112e:	f006 fbd1 	bl	80078d4 <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001138:	f000 fbfc 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	4619      	mov	r1, r3
 8001148:	481c      	ldr	r0, [pc, #112]	; (80011bc <MX_TIM3_Init+0xe8>)
 800114a:	f006 fe7b 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001154:	f000 fbee 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001158:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_TIM3_Init+0xe8>)
 800115a:	f006 fc11 	bl	8007980 <HAL_TIM_PWM_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001164:	f000 fbe6 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001178:	f007 fade 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001182:	f000 fbd7 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <MX_TIM3_Init+0xe8>)
 800119e:	f006 fd39 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011a8:	f000 fbc4 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_TIM3_Init+0xe8>)
 80011ae:	f001 f809 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80011b2:	bf00      	nop
 80011b4:	3738      	adds	r7, #56	; 0x38
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	40000400 	.word	0x40000400

080011c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_TIM5_Init+0xe8>)
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <MX_TIM5_Init+0xec>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_TIM5_Init+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM5_Init+0xe8>)
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <MX_TIM5_Init+0xe8>)
 800121e:	f006 fb59 	bl	80078d4 <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001228:	f000 fb84 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM5_Init+0xe8>)
 800123a:	f006 fe03 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001244:	f000 fb76 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM5_Init+0xe8>)
 800124a:	f006 fb99 	bl	8007980 <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001254:	f000 fb6e 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001268:	f007 fa66 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001272:	f000 fb5f 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	; 0x60
 8001278:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	220c      	movs	r2, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM5_Init+0xe8>)
 800128e:	f006 fcc1 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001298:	f000 fb4c 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM5_Init+0xe8>)
 800129e:	f000 ff91 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000374 	.word	0x20000374
 80012b0:	40000c00 	.word	0x40000c00

080012b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <MX_TIM8_Init+0xa4>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM8_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_TIM8_Init+0xa0>)
 8001300:	f006 fae8 	bl	80078d4 <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800130a:	f000 fb13 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <MX_TIM8_Init+0xa0>)
 800131c:	f006 fd92 	bl	8007e44 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001326:	f000 fb05 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_TIM8_Init+0xa0>)
 800133c:	f007 f9fc 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001346:	f000 faf5 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001f4 	.word	0x200001f4
 8001358:	40010400 	.word	0x40010400

0800135c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <MX_TIM12_Init+0x88>)
 8001378:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_TIM12_Init+0x84>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_TIM12_Init+0x84>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_TIM12_Init+0x84>)
 800139c:	f006 faf0 	bl	8007980 <HAL_TIM_PWM_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80013a6:	f000 fac5 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM12_Init+0x84>)
 80013c2:	f006 fc27 	bl	8007c14 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80013cc:	f000 fab2 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM12_Init+0x84>)
 80013d2:	f000 fef7 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000714 	.word	0x20000714
 80013e4:	40001800 	.word	0x40001800

080013e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <MX_USART1_UART_Init+0x5c>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART1_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x58>)
 800142c:	f007 faae 	bl	800898c <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001436:	f000 fa7d 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000534 	.word	0x20000534
 8001444:	40011000 	.word	0x40011000

08001448 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <MX_USART6_UART_Init+0x5c>)
 8001450:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART6_UART_Init+0x58>)
 800148c:	f007 fa7e 	bl	800898c <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001496:	f000 fa4d 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000614 	.word	0x20000614
 80014a4:	40011400 	.word	0x40011400

080014a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_FMC_Init+0x98>)
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <MX_FMC_Init+0x9c>)
 80014c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_FMC_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_FMC_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_FMC_Init+0x98>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_FMC_Init+0x98>)
 80014da:	2210      	movs	r2, #16
 80014dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_FMC_Init+0x98>)
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_FMC_Init+0x98>)
 80014e6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014ea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_FMC_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_FMC_Init+0x98>)
 80014f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_FMC_Init+0x98>)
 80014fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_FMC_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800150c:	2307      	movs	r3, #7
 800150e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001514:	2307      	movs	r3, #7
 8001516:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001518:	2303      	movs	r3, #3
 800151a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_FMC_Init+0x98>)
 800152a:	f006 f943 	bl	80077b4 <HAL_SDRAM_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001534:	f000 f9fe 	bl	8001934 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000754 	.word	0x20000754
 8001544:	a0000140 	.word	0xa0000140

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4baf      	ldr	r3, [pc, #700]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4aae      	ldr	r2, [pc, #696]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4bac      	ldr	r3, [pc, #688]	; (800181c <MX_GPIO_Init+0x2d4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001576:	4ba9      	ldr	r3, [pc, #676]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4aa8      	ldr	r2, [pc, #672]	; (800181c <MX_GPIO_Init+0x2d4>)
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4ba6      	ldr	r3, [pc, #664]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4ba3      	ldr	r3, [pc, #652]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4aa2      	ldr	r2, [pc, #648]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4ba0      	ldr	r3, [pc, #640]	; (800181c <MX_GPIO_Init+0x2d4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	4b9d      	ldr	r3, [pc, #628]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a9c      	ldr	r2, [pc, #624]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b9a      	ldr	r3, [pc, #616]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b97      	ldr	r3, [pc, #604]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a96      	ldr	r2, [pc, #600]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b94      	ldr	r3, [pc, #592]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b91      	ldr	r3, [pc, #580]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a90      	ldr	r2, [pc, #576]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b8e      	ldr	r3, [pc, #568]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <MX_GPIO_Init+0x2d4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a84      	ldr	r2, [pc, #528]	; (800181c <MX_GPIO_Init+0x2d4>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b82      	ldr	r3, [pc, #520]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a7e      	ldr	r2, [pc, #504]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <MX_GPIO_Init+0x2d4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a78      	ldr	r2, [pc, #480]	; (800181c <MX_GPIO_Init+0x2d4>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a72      	ldr	r2, [pc, #456]	; (800181c <MX_GPIO_Init+0x2d4>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b70      	ldr	r3, [pc, #448]	; (800181c <MX_GPIO_Init+0x2d4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2120      	movs	r1, #32
 800166a:	486d      	ldr	r0, [pc, #436]	; (8001820 <MX_GPIO_Init+0x2d8>)
 800166c:	f002 f99c 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	210e      	movs	r1, #14
 8001674:	486b      	ldr	r0, [pc, #428]	; (8001824 <MX_GPIO_Init+0x2dc>)
 8001676:	f002 f997 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2108      	movs	r1, #8
 800167e:	486a      	ldr	r0, [pc, #424]	; (8001828 <MX_GPIO_Init+0x2e0>)
 8001680:	f002 f992 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168a:	4866      	ldr	r0, [pc, #408]	; (8001824 <MX_GPIO_Init+0x2dc>)
 800168c:	f002 f98c 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	4865      	ldr	r0, [pc, #404]	; (800182c <MX_GPIO_Init+0x2e4>)
 8001698:	f002 f986 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	21c8      	movs	r1, #200	; 0xc8
 80016a0:	4863      	ldr	r0, [pc, #396]	; (8001830 <MX_GPIO_Init+0x2e8>)
 80016a2:	f002 f981 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016a6:	2308      	movs	r3, #8
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	4619      	mov	r1, r3
 80016b8:	485e      	ldr	r0, [pc, #376]	; (8001834 <MX_GPIO_Init+0x2ec>)
 80016ba:	f001 ffcb 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016be:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016d0:	230a      	movs	r3, #10
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d8:	4619      	mov	r1, r3
 80016da:	4857      	ldr	r0, [pc, #348]	; (8001838 <MX_GPIO_Init+0x2f0>)
 80016dc:	f001 ffba 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80016e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016f2:	230c      	movs	r3, #12
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	484f      	ldr	r0, [pc, #316]	; (800183c <MX_GPIO_Init+0x2f4>)
 80016fe:	f001 ffa9 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001714:	4619      	mov	r1, r3
 8001716:	484a      	ldr	r0, [pc, #296]	; (8001840 <MX_GPIO_Init+0x2f8>)
 8001718:	f001 ff9c 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800171c:	2340      	movs	r3, #64	; 0x40
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	4b48      	ldr	r3, [pc, #288]	; (8001844 <MX_GPIO_Init+0x2fc>)
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	4619      	mov	r1, r3
 800172e:	483c      	ldr	r0, [pc, #240]	; (8001820 <MX_GPIO_Init+0x2d8>)
 8001730:	f001 ff90 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001734:	2320      	movs	r3, #32
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	4835      	ldr	r0, [pc, #212]	; (8001820 <MX_GPIO_Init+0x2d8>)
 800174c:	f001 ff82 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8001750:	f241 030e 	movw	r3, #4110	; 0x100e
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	482e      	ldr	r0, [pc, #184]	; (8001824 <MX_GPIO_Init+0x2dc>)
 800176a:	f001 ff73 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800176e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001780:	4619      	mov	r1, r3
 8001782:	482e      	ldr	r0, [pc, #184]	; (800183c <MX_GPIO_Init+0x2f4>)
 8001784:	f001 ff66 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001788:	2308      	movs	r3, #8
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179c:	4619      	mov	r1, r3
 800179e:	4822      	ldr	r0, [pc, #136]	; (8001828 <MX_GPIO_Init+0x2e0>)
 80017a0:	f001 ff58 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017a4:	2310      	movs	r3, #16
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	481a      	ldr	r0, [pc, #104]	; (8001820 <MX_GPIO_Init+0x2d8>)
 80017b8:	f001 ff4c 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80017bc:	f248 0304 	movw	r3, #32772	; 0x8004
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4816      	ldr	r0, [pc, #88]	; (800182c <MX_GPIO_Init+0x2e4>)
 80017d2:	f001 ff3f 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80017d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	4619      	mov	r1, r3
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <MX_GPIO_Init+0x2e4>)
 80017f0:	f001 ff30 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_GPIO_Init+0x2fc>)
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_GPIO_Init+0x2dc>)
 800180a:	f001 ff23 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800180e:	2310      	movs	r3, #16
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	e016      	b.n	8001848 <MX_GPIO_Init+0x300>
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40022000 	.word	0x40022000
 8001828:	40022800 	.word	0x40022800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40021800 	.word	0x40021800
 8001834:	40021000 	.word	0x40021000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40022400 	.word	0x40022400
 8001844:	10120000 	.word	0x10120000
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800184e:	230a      	movs	r3, #10
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	4828      	ldr	r0, [pc, #160]	; (80018fc <MX_GPIO_Init+0x3b4>)
 800185a:	f001 fefb 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800185e:	23c8      	movs	r3, #200	; 0xc8
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	4822      	ldr	r0, [pc, #136]	; (8001900 <MX_GPIO_Init+0x3b8>)
 8001876:	f001 feed 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800187a:	2305      	movs	r3, #5
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800188a:	230a      	movs	r3, #10
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <MX_GPIO_Init+0x3bc>)
 8001896:	f001 fedd 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800189a:	2304      	movs	r3, #4
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018aa:	4619      	mov	r1, r3
 80018ac:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_GPIO_Init+0x3b8>)
 80018ae:	f001 fed1 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018b2:	2328      	movs	r3, #40	; 0x28
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018c2:	230a      	movs	r3, #10
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	4619      	mov	r1, r3
 80018cc:	480e      	ldr	r0, [pc, #56]	; (8001908 <MX_GPIO_Init+0x3c0>)
 80018ce:	f001 fec1 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80018d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e4:	2305      	movs	r3, #5
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_GPIO_Init+0x3c4>)
 80018f0:	f001 feb0 	bl	8003654 <HAL_GPIO_Init>

}
 80018f4:	bf00      	nop
 80018f6:	3740      	adds	r7, #64	; 0x40
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021c00 	.word	0x40021c00
 8001900:	40021800 	.word	0x40021800
 8001904:	40020800 	.word	0x40020800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001922:	f000 ff9b 	bl	800285c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40001000 	.word	0x40001000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	210f      	movs	r1, #15
 800197e:	f06f 0001 	mvn.w	r0, #1
 8001982:	f001 faed 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_ADC_MspInit+0xa4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d13c      	bne.n	8001a30 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_ADC_MspInit+0xa8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80019fe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a02:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_ADC_MspInit+0xac>)
 8001a14:	f001 fe1e 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_ADC_MspInit+0xb0>)
 8001a2c:	f001 fe12 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40012200 	.word	0x40012200
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_CRC_MspInit+0x38>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10b      	bne.n	8001a72 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_CRC_MspInit+0x3c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_CRC_MspInit+0x3c>)
 8001a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_CRC_MspInit+0x3c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023000 	.word	0x40023000
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	; (8001be8 <HAL_DCMI_MspInit+0x160>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 809a 	bne.w	8001be0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac4:	4b49      	ldr	r3, [pc, #292]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a48      	ldr	r2, [pc, #288]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4a3c      	ldr	r2, [pc, #240]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afe:	6313      	str	r3, [r2, #48]	; 0x30
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_DCMI_MspInit+0x164>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b3c:	2360      	movs	r3, #96	; 0x60
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b4c:	230d      	movs	r3, #13
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4826      	ldr	r0, [pc, #152]	; (8001bf0 <HAL_DCMI_MspInit+0x168>)
 8001b58:	f001 fd7c 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b6c:	230d      	movs	r3, #13
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <HAL_DCMI_MspInit+0x16c>)
 8001b78:	f001 fd6c 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b8e:	230d      	movs	r3, #13
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <HAL_DCMI_MspInit+0x170>)
 8001b9a:	f001 fd5b 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b9e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bb0:	230d      	movs	r3, #13
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <HAL_DCMI_MspInit+0x174>)
 8001bbc:	f001 fd4a 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001bc0:	2350      	movs	r3, #80	; 0x50
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bd0:	230d      	movs	r3, #13
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <HAL_DCMI_MspInit+0x178>)
 8001bdc:	f001 fd3a 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3738      	adds	r7, #56	; 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	50050000 	.word	0x50050000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40021800 	.word	0x40021800
 8001bfc:	40021c00 	.word	0x40021c00
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_DMA2D_MspInit+0x44>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d113      	bne.n	8001c3e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_DMA2D_MspInit+0x48>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_DMA2D_MspInit+0x48>)
 8001c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_DMA2D_MspInit+0x48>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	205a      	movs	r0, #90	; 0x5a
 8001c34:	f001 f994 	bl	8002f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c38:	205a      	movs	r0, #90	; 0x5a
 8001c3a:	f001 f9ad 	bl	8002f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	4002b000 	.word	0x4002b000
 8001c4c:	40023800 	.word	0x40023800

08001c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <HAL_I2C_MspInit+0xdc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d129      	bne.n	8001cc6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c90:	2312      	movs	r3, #18
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4823      	ldr	r0, [pc, #140]	; (8001d34 <HAL_I2C_MspInit+0xe4>)
 8001ca8:	f001 fcd4 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cc4:	e02d      	b.n	8001d22 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_I2C_MspInit+0xe8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d128      	bne.n	8001d22 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ce8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <HAL_I2C_MspInit+0xec>)
 8001d06:	f001 fca5 	bl	8003654 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_I2C_MspInit+0xe0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
}
 8001d22:	bf00      	nop
 8001d24:	3730      	adds	r7, #48	; 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40005400 	.word	0x40005400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40005c00 	.word	0x40005c00
 8001d3c:	40021c00 	.word	0x40021c00

08001d40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a55      	ldr	r2, [pc, #340]	; (8001eb4 <HAL_LTDC_MspInit+0x174>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f040 80a3 	bne.w	8001eaa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d64:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	4a53      	ldr	r2, [pc, #332]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d70:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6313      	str	r3, [r2, #48]	; 0x30
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d94:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a47      	ldr	r2, [pc, #284]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a35      	ldr	r2, [pc, #212]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_LTDC_MspInit+0x178>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001df4:	2310      	movs	r3, #16
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e04:	230e      	movs	r3, #14
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482b      	ldr	r0, [pc, #172]	; (8001ebc <HAL_LTDC_MspInit+0x17c>)
 8001e10:	f001 fc20 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e14:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e26:	230e      	movs	r3, #14
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <HAL_LTDC_MspInit+0x180>)
 8001e32:	f001 fc0f 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001e36:	23f7      	movs	r3, #247	; 0xf7
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e46:	230e      	movs	r3, #14
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481c      	ldr	r0, [pc, #112]	; (8001ec4 <HAL_LTDC_MspInit+0x184>)
 8001e52:	f001 fbff 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e68:	2309      	movs	r3, #9
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	4815      	ldr	r0, [pc, #84]	; (8001ec8 <HAL_LTDC_MspInit+0x188>)
 8001e74:	f001 fbee 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e78:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <HAL_LTDC_MspInit+0x18c>)
 8001e96:	f001 fbdd 	bl	8003654 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2058      	movs	r0, #88	; 0x58
 8001ea0:	f001 f85e 	bl	8002f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ea4:	2058      	movs	r0, #88	; 0x58
 8001ea6:	f001 f877 	bl	8002f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001eaa:	bf00      	nop
 8001eac:	3738      	adds	r7, #56	; 0x38
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40016800 	.word	0x40016800
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40022400 	.word	0x40022400
 8001ec4:	40022800 	.word	0x40022800
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_QSPI_MspInit+0x10c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d170      	bne.n	8001fd4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6393      	str	r3, [r2, #56]	; 0x38
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_QSPI_MspInit+0x110>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f52:	2304      	movs	r3, #4
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f62:	2309      	movs	r3, #9
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481d      	ldr	r0, [pc, #116]	; (8001fe4 <HAL_QSPI_MspInit+0x114>)
 8001f6e:	f001 fb71 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f82:	230a      	movs	r3, #10
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4816      	ldr	r0, [pc, #88]	; (8001fe8 <HAL_QSPI_MspInit+0x118>)
 8001f8e:	f001 fb61 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f92:	2304      	movs	r3, #4
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fa2:	2309      	movs	r3, #9
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <HAL_QSPI_MspInit+0x118>)
 8001fae:	f001 fb51 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001fb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <HAL_QSPI_MspInit+0x11c>)
 8001fd0:	f001 fb40 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3730      	adds	r7, #48	; 0x30
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	a0001000 	.word	0xa0001000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_RTC_MspInit+0x2c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d105      	bne.n	800200e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RTC_MspInit+0x30>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_RTC_MspInit+0x30>)
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40002800 	.word	0x40002800
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002044:	d127      	bne.n	8002096 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_SPDIFRX_MspInit+0x7c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002086:	2308      	movs	r3, #8
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <HAL_SPDIFRX_MspInit+0x80>)
 8002092:	f001 fadf 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020c00 	.word	0x40020c00

080020a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <HAL_TIM_Base_MspInit+0xc8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10c      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020d2:	e046      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d10c      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]
}
 80020f6:	e034      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_TIM_Base_MspInit+0xd0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10c      	bne.n	800211c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
}
 800211a:	e022      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_TIM_Base_MspInit+0xd4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
}
 800213e:	e010      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_TIM_Base_MspInit+0xd8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10b      	bne.n	8002162 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	40023800 	.word	0x40023800
 8002178:	40000400 	.word	0x40000400
 800217c:	40000c00 	.word	0x40000c00
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_TIM_PWM_MspInit+0x38>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40001800 	.word	0x40001800
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_TIM_MspPostInit+0x178>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11d      	bne.n	8002222 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	484a      	ldr	r0, [pc, #296]	; (8002344 <HAL_TIM_MspPostInit+0x180>)
 800221c:	f001 fa1a 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002220:	e087      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d11d      	bne.n	8002268 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002256:	2301      	movs	r3, #1
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4838      	ldr	r0, [pc, #224]	; (8002344 <HAL_TIM_MspPostInit+0x180>)
 8002262:	f001 f9f7 	bl	8003654 <HAL_GPIO_Init>
}
 8002266:	e064      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_TIM_MspPostInit+0x184>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11c      	bne.n	80022ac <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a32      	ldr	r2, [pc, #200]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800228a:	2310      	movs	r3, #16
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229a:	2302      	movs	r3, #2
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4829      	ldr	r0, [pc, #164]	; (800234c <HAL_TIM_MspPostInit+0x188>)
 80022a6:	f001 f9d5 	bl	8003654 <HAL_GPIO_Init>
}
 80022aa:	e042      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_TIM_MspPostInit+0x18c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11c      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022de:	2302      	movs	r3, #2
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	481a      	ldr	r0, [pc, #104]	; (8002354 <HAL_TIM_MspPostInit+0x190>)
 80022ea:	f001 f9b3 	bl	8003654 <HAL_GPIO_Init>
}
 80022ee:	e020      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_TIM_MspPostInit+0x194>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11b      	bne.n	8002332 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002322:	2309      	movs	r3, #9
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_TIM_MspPostInit+0x198>)
 800232e:	f001 f991 	bl	8003654 <HAL_GPIO_Init>
}
 8002332:	bf00      	nop
 8002334:	3730      	adds	r7, #48	; 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	40000400 	.word	0x40000400
 800234c:	40020400 	.word	0x40020400
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40022000 	.word	0x40022000
 8002358:	40001800 	.word	0x40001800
 800235c:	40021c00 	.word	0x40021c00

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <HAL_UART_MspInit+0x110>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d145      	bne.n	800240e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_UART_MspInit+0x114>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_UART_MspInit+0x114>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_UART_MspInit+0x114>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_UART_MspInit+0x114>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_UART_MspInit+0x114>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_UART_MspInit+0x114>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	4619      	mov	r1, r3
 80023e4:	4824      	ldr	r0, [pc, #144]	; (8002478 <HAL_UART_MspInit+0x118>)
 80023e6:	f001 f935 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fc:	2307      	movs	r3, #7
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	481d      	ldr	r0, [pc, #116]	; (800247c <HAL_UART_MspInit+0x11c>)
 8002408:	f001 f924 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800240c:	e02c      	b.n	8002468 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_UART_MspInit+0x120>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d127      	bne.n	8002468 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_UART_MspInit+0x114>)
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	4a15      	ldr	r2, [pc, #84]	; (8002474 <HAL_UART_MspInit+0x114>)
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	6453      	str	r3, [r2, #68]	; 0x44
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_UART_MspInit+0x114>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_UART_MspInit+0x114>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002448:	23c0      	movs	r3, #192	; 0xc0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002458:	2308      	movs	r3, #8
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4808      	ldr	r0, [pc, #32]	; (8002484 <HAL_UART_MspInit+0x124>)
 8002464:	f001 f8f6 	bl	8003654 <HAL_GPIO_Init>
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	; 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40011000 	.word	0x40011000
 8002474:	40023800 	.word	0x40023800
 8002478:	40020400 	.word	0x40020400
 800247c:	40020000 	.word	0x40020000
 8002480:	40011400 	.word	0x40011400
 8002484:	40020800 	.word	0x40020800

08002488 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_FMC_MspInit+0x100>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d16d      	bne.n	8002580 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80024a4:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_FMC_MspInit+0x100>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024aa:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_FMC_MspInit+0x104>)
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	4a37      	ldr	r2, [pc, #220]	; (800258c <HAL_FMC_MspInit+0x104>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6393      	str	r3, [r2, #56]	; 0x38
 80024b6:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_FMC_MspInit+0x104>)
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80024c2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024c6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d4:	230c      	movs	r3, #12
 80024d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	482c      	ldr	r0, [pc, #176]	; (8002590 <HAL_FMC_MspInit+0x108>)
 80024de:	f001 f8b9 	bl	8003654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80024e2:	f248 1333 	movw	r3, #33075	; 0x8133
 80024e6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024f4:	230c      	movs	r3, #12
 80024f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4825      	ldr	r0, [pc, #148]	; (8002594 <HAL_FMC_MspInit+0x10c>)
 80024fe:	f001 f8a9 	bl	8003654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002502:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002506:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002514:	230c      	movs	r3, #12
 8002516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4619      	mov	r1, r3
 800251c:	481e      	ldr	r0, [pc, #120]	; (8002598 <HAL_FMC_MspInit+0x110>)
 800251e:	f001 f899 	bl	8003654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002522:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002526:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002534:	230c      	movs	r3, #12
 8002536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <HAL_FMC_MspInit+0x114>)
 800253e:	f001 f889 	bl	8003654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002542:	2328      	movs	r3, #40	; 0x28
 8002544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002552:	230c      	movs	r3, #12
 8002554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <HAL_FMC_MspInit+0x118>)
 800255c:	f001 f87a 	bl	8003654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002560:	2308      	movs	r3, #8
 8002562:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002570:	230c      	movs	r3, #12
 8002572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4619      	mov	r1, r3
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <HAL_FMC_MspInit+0x11c>)
 800257a:	f001 f86b 	bl	8003654 <HAL_GPIO_Init>
 800257e:	e000      	b.n	8002582 <HAL_FMC_MspInit+0xfa>
    return;
 8002580:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000002c 	.word	0x2000002c
 800258c:	40023800 	.word	0x40023800
 8002590:	40021000 	.word	0x40021000
 8002594:	40021800 	.word	0x40021800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021c00 	.word	0x40021c00
 80025a4:	40020800 	.word	0x40020800

080025a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80025b0:	f7ff ff6a 	bl	8002488 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	; (8002678 <HAL_SAI_MspInit+0xbc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d124      	bne.n	8002618 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_SAI_MspInit+0xc0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 80025dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_SAI_MspInit+0xc0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_SAI_MspInit+0xc0>)
 80025f6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80025f8:	23f0      	movs	r3, #240	; 0xf0
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002608:	230a      	movs	r3, #10
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	481c      	ldr	r0, [pc, #112]	; (8002684 <HAL_SAI_MspInit+0xc8>)
 8002614:	f001 f81e 	bl	8003654 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_SAI_MspInit+0xcc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d125      	bne.n	800266e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_SAI_MspInit+0xc0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_SAI_MspInit+0xc4>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_SAI_MspInit+0xc0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_SAI_MspInit+0xc0>)
 800264a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800265e:	230a      	movs	r3, #10
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <HAL_SAI_MspInit+0xd0>)
 800266a:	f000 fff3 	bl	8003654 <HAL_GPIO_Init>

    }
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40015c04 	.word	0x40015c04
 800267c:	20000030 	.word	0x20000030
 8002680:	40023800 	.word	0x40023800
 8002684:	40022000 	.word	0x40022000
 8002688:	40015c24 	.word	0x40015c24
 800268c:	40021800 	.word	0x40021800

08002690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	2036      	movs	r0, #54	; 0x36
 80026a6:	f000 fc5b 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026aa:	2036      	movs	r0, #54	; 0x36
 80026ac:	f000 fc74 	bl	8002f98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_InitTick+0xa0>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_InitTick+0xa0>)
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HAL_InitTick+0xa0>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c8:	f107 0210 	add.w	r2, r7, #16
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fdb0 	bl	8006238 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80026d8:	f003 fd86 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 80026dc:	4603      	mov	r3, r0
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_InitTick+0xa4>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	3b01      	subs	r3, #1
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_InitTick+0xa8>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_InitTick+0xac>)
 80026f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_InitTick+0xa8>)
 80026f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_InitTick+0xa8>)
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_InitTick+0xa8>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_InitTick+0xa8>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002710:	4809      	ldr	r0, [pc, #36]	; (8002738 <HAL_InitTick+0xa8>)
 8002712:	f005 f8df 	bl	80078d4 <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800271c:	4806      	ldr	r0, [pc, #24]	; (8002738 <HAL_InitTick+0xa8>)
 800271e:	f005 f905 	bl	800792c <HAL_TIM_Base_Start_IT>
 8002722:	4603      	mov	r3, r0
 8002724:	e000      	b.n	8002728 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3730      	adds	r7, #48	; 0x30
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	431bde83 	.word	0x431bde83
 8002738:	2000081c 	.word	0x2000081c
 800273c:	40001000 	.word	0x40001000

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <TIM6_DAC_IRQHandler+0x10>)
 800277a:	f005 f92c 	bl	80079d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000081c 	.word	0x2000081c

08002788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <OTG_FS_IRQHandler+0x10>)
 800278e:	f001 f93e 	bl	8003a0e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000860 	.word	0x20000860

0800279c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <LTDC_IRQHandler+0x10>)
 80027a2:	f002 fd17 	bl	80051d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200003f4 	.word	0x200003f4

080027b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <DMA2D_IRQHandler+0x10>)
 80027b6:	f000 fdab 	bl	8003310 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000694 	.word	0x20000694

080027c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <SystemInit+0x28>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <SystemInit+0x28>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SystemInit+0x28>)
 80027da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027de:	609a      	str	r2, [r3, #8]
#endif
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002828 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027f6:	e003      	b.n	8002800 <LoopCopyDataInit>

080027f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027fe:	3104      	adds	r1, #4

08002800 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002804:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002806:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002808:	d3f6      	bcc.n	80027f8 <CopyDataInit>
  ldr  r2, =_sbss
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800280c:	e002      	b.n	8002814 <LoopFillZerobss>

0800280e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800280e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002810:	f842 3b04 	str.w	r3, [r2], #4

08002814 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002816:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002818:	d3f9      	bcc.n	800280e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800281a:	f7ff ffd3 	bl	80027c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281e:	f008 fa67 	bl	800acf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002822:	f7fd fe81 	bl	8000528 <main>
  bx  lr    
 8002826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002828:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800282c:	0800ada0 	.word	0x0800ada0
  ldr  r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002834:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002838:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800283c:	20000b24 	.word	0x20000b24

08002840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC_IRQHandler>

08002842 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002846:	2003      	movs	r0, #3
 8002848:	f000 fb7f 	bl	8002f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff ff1f 	bl	8002690 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002852:	f7ff f877 	bl	8001944 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000008 	.word	0x20000008
 8002880:	2000085c 	.word	0x2000085c

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000085c 	.word	0x2000085c

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_Delay+0x40>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000008 	.word	0x20000008

080028e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e031      	b.n	800295a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff f848 	bl	8001994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_ADC_Init+0x84>)
 8002924:	4013      	ands	r3, r2
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f964 	bl	8002bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
 800294a:	e001      	b.n	8002950 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	ffffeefd 	.word	0xffffeefd

08002968 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e12a      	b.n	8002bda <HAL_ADC_ConfigChannel+0x272>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d93a      	bls.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299c:	d035      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	2207      	movs	r2, #7
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a87      	ldr	r2, [pc, #540]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	061a      	lsls	r2, r3, #24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e2:	e035      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4403      	add	r3, r0
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	409a      	lsls	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a08:	e022      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6919      	ldr	r1, [r3, #16]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	409a      	lsls	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d824      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b05      	subs	r3, #5
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b05      	subs	r3, #5
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa0:	e04c      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d824      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b23      	subs	r3, #35	; 0x23
 8002abc:	221f      	movs	r2, #31
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b23      	subs	r3, #35	; 0x23
 8002ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	e023      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b41      	subs	r3, #65	; 0x41
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b41      	subs	r3, #65	; 0x41
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d109      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x212>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_ADC_ConfigChannel+0x284>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d125      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x22e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d11c      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_ADC_ConfigChannel+0x288>)
 8002b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_ADC_ConfigChannel+0x280>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_ADC_ConfigChannel+0x28c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_ADC_ConfigChannel+0x290>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9a      	lsrs	r2, r3, #18
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	10000012 	.word	0x10000012
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40012300 	.word	0x40012300
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <ADC_Init+0x1ec>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <ADC_Init+0x1ec>)
 8002c0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <ADC_Init+0x1ec>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4973      	ldr	r1, [pc, #460]	; (8002de8 <ADC_Init+0x1ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <ADC_Init+0x1f0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e00f      	b.n	8002cf6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0202 	bic.w	r2, r2, #2
 8002d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	035a      	lsls	r2, r3, #13
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e007      	b.n	8002d6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	051a      	lsls	r2, r3, #20
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dae:	025a      	lsls	r2, r3, #9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	029a      	lsls	r2, r3, #10
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40012300 	.word	0x40012300
 8002dec:	0f000001 	.word	0x0f000001

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <__NVIC_SetPriorityGrouping+0x40>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <__NVIC_SetPriorityGrouping+0x40>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	05fa0000 	.word	0x05fa0000

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff4c 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f72:	f7ff ff61 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f7ff ffb1 	bl	8002ee4 <NVIC_EncodePriority>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff80 	bl	8002e90 <__NVIC_SetPriority>
}
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff54 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e054      	b.n	8003070 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7f5b      	ldrb	r3, [r3, #29]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fd36 	bl	8001a48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	791b      	ldrb	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_CRC_Init+0xc4>)
 8002ff0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0218 	bic.w	r2, r2, #24
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	e00c      	b.n	800301e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f834 	bl	800307c <HAL_CRCEx_Polynomial_Set>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e028      	b.n	8003070 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	795b      	ldrb	r3, [r3, #5]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f04f 32ff 	mov.w	r2, #4294967295
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	e004      	b.n	800303c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6912      	ldr	r2, [r2, #16]
 800303a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	04c11db7 	.word	0x04c11db7

0800307c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800308c:	231f      	movs	r3, #31
 800308e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003090:	bf00      	nop
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	613a      	str	r2, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b18      	cmp	r3, #24
 80030b4:	d846      	bhi.n	8003144 <HAL_CRCEx_Polynomial_Set+0xc8>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	0800314b 	.word	0x0800314b
 80030c0:	08003145 	.word	0x08003145
 80030c4:	08003145 	.word	0x08003145
 80030c8:	08003145 	.word	0x08003145
 80030cc:	08003145 	.word	0x08003145
 80030d0:	08003145 	.word	0x08003145
 80030d4:	08003145 	.word	0x08003145
 80030d8:	08003145 	.word	0x08003145
 80030dc:	08003139 	.word	0x08003139
 80030e0:	08003145 	.word	0x08003145
 80030e4:	08003145 	.word	0x08003145
 80030e8:	08003145 	.word	0x08003145
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003145 	.word	0x08003145
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003145 	.word	0x08003145
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	08003145 	.word	0x08003145
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
 8003110:	08003145 	.word	0x08003145
 8003114:	08003145 	.word	0x08003145
 8003118:	08003145 	.word	0x08003145
 800311c:	08003121 	.word	0x08003121
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d913      	bls.n	800314e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800312a:	e010      	b.n	800314e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b07      	cmp	r3, #7
 8003130:	d90f      	bls.n	8003152 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003136:	e00c      	b.n	8003152 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	d90b      	bls.n	8003156 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003142:	e008      	b.n	8003156 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	e006      	b.n	8003158 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003156:	bf00      	nop
  }
  if (status == HAL_OK)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 0118 	bic.w	r1, r3, #24
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800317a:	7dfb      	ldrb	r3, [r7, #23]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e069      	b.n	800326e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fc6e 	bl	8001a88 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_DCMI_Init+0xf0>)
 80031ce:	400b      	ands	r3, r1
 80031d0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80031e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80031f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80031fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800320a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003216:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b10      	cmp	r3, #16
 8003226:	d112      	bne.n	800324e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7f1b      	ldrb	r3, [r3, #28]
 800322c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7f5b      	ldrb	r3, [r3, #29]
 8003232:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003234:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f9b      	ldrb	r3, [r3, #30]
 800323a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800323c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7fdb      	ldrb	r3, [r3, #31]
 8003244:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800324a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800324c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 021e 	orr.w	r2, r2, #30
 800325c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	ffe0f007 	.word	0xffe0f007

0800327c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e039      	b.n	8003302 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fe fcae 	bl	8001c04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	f023 0107 	bic.w	r1, r3, #7
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_DMA2D_Init+0x90>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d1      	ldr	r1, [r2, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	ffffc000 	.word	0xffffc000

08003310 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d026      	beq.n	8003380 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d021      	beq.n	8003380 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d026      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d021      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f043 0202 	orr.w	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2204      	movs	r2, #4
 80033bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d026      	beq.n	8003430 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d021      	beq.n	8003430 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2204      	movs	r2, #4
 8003414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d013      	beq.n	8003462 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2204      	movs	r2, #4
 800345a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f853 	bl	8003508 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d024      	beq.n	80034b6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01f      	beq.n	80034b6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003484:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2202      	movs	r2, #2
 800348c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01f      	beq.n	8003500 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01a      	beq.n	8003500 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034d8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f80e 	bl	800351c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_DMA2D_ConfigLayer+0x20>
 800354c:	2302      	movs	r3, #2
 800354e:	e079      	b.n	8003644 <HAL_DMA2D_ConfigLayer+0x114>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	3318      	adds	r3, #24
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800357a:	4b35      	ldr	r3, [pc, #212]	; (8003650 <HAL_DMA2D_ConfigLayer+0x120>)
 800357c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b0a      	cmp	r3, #10
 8003584:	d003      	beq.n	800358e <HAL_DMA2D_ConfigLayer+0x5e>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b09      	cmp	r3, #9
 800358c:	d107      	bne.n	800359e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e005      	b.n	80035aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d120      	bne.n	80035f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	ea02 0103 	and.w	r1, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b0a      	cmp	r3, #10
 80035d8:	d003      	beq.n	80035e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b09      	cmp	r3, #9
 80035e0:	d127      	bne.n	8003632 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
 80035f0:	e01f      	b.n	8003632 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	ea02 0103 	and.w	r1, r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b0a      	cmp	r3, #10
 800361a:	d003      	beq.n	8003624 <HAL_DMA2D_ConfigLayer+0xf4>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d106      	bne.n	8003632 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003630:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	ff03000f 	.word	0xff03000f

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e175      	b.n	8003960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003674:	2201      	movs	r2, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	f040 8164 	bne.w	800395a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d00b      	beq.n	80036b2 <HAL_GPIO_Init+0x5e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d007      	beq.n	80036b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a6:	2b11      	cmp	r3, #17
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b12      	cmp	r3, #18
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x100>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b12      	cmp	r3, #18
 8003752:	d123      	bne.n	800379c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	08da      	lsrs	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3208      	adds	r2, #8
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	08da      	lsrs	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3208      	adds	r2, #8
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0203 	and.w	r2, r3, #3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80be 	beq.w	800395a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_GPIO_Init+0x320>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4a64      	ldr	r2, [pc, #400]	; (8003974 <HAL_GPIO_Init+0x320>)
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_GPIO_Init+0x320>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037f6:	4a60      	ldr	r2, [pc, #384]	; (8003978 <HAL_GPIO_Init+0x324>)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_GPIO_Init+0x328>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d037      	beq.n	8003892 <HAL_GPIO_Init+0x23e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a56      	ldr	r2, [pc, #344]	; (8003980 <HAL_GPIO_Init+0x32c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d031      	beq.n	800388e <HAL_GPIO_Init+0x23a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_GPIO_Init+0x330>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02b      	beq.n	800388a <HAL_GPIO_Init+0x236>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_GPIO_Init+0x334>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d025      	beq.n	8003886 <HAL_GPIO_Init+0x232>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_GPIO_Init+0x338>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01f      	beq.n	8003882 <HAL_GPIO_Init+0x22e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_GPIO_Init+0x33c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d019      	beq.n	800387e <HAL_GPIO_Init+0x22a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_GPIO_Init+0x340>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_GPIO_Init+0x226>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_GPIO_Init+0x344>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00d      	beq.n	8003876 <HAL_GPIO_Init+0x222>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4f      	ldr	r2, [pc, #316]	; (800399c <HAL_GPIO_Init+0x348>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <HAL_GPIO_Init+0x21e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4e      	ldr	r2, [pc, #312]	; (80039a0 <HAL_GPIO_Init+0x34c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_GPIO_Init+0x21a>
 800386a:	2309      	movs	r3, #9
 800386c:	e012      	b.n	8003894 <HAL_GPIO_Init+0x240>
 800386e:	230a      	movs	r3, #10
 8003870:	e010      	b.n	8003894 <HAL_GPIO_Init+0x240>
 8003872:	2308      	movs	r3, #8
 8003874:	e00e      	b.n	8003894 <HAL_GPIO_Init+0x240>
 8003876:	2307      	movs	r3, #7
 8003878:	e00c      	b.n	8003894 <HAL_GPIO_Init+0x240>
 800387a:	2306      	movs	r3, #6
 800387c:	e00a      	b.n	8003894 <HAL_GPIO_Init+0x240>
 800387e:	2305      	movs	r3, #5
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x240>
 8003882:	2304      	movs	r3, #4
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x240>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x240>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x240>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x240>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038a4:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_GPIO_Init+0x324>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b2:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <HAL_GPIO_Init+0x350>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d6:	4a33      	ldr	r2, [pc, #204]	; (80039a4 <HAL_GPIO_Init+0x350>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_GPIO_Init+0x350>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_GPIO_Init+0x350>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_GPIO_Init+0x350>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_GPIO_Init+0x350>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <HAL_GPIO_Init+0x350>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_GPIO_Init+0x350>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f ae86 	bls.w	8003674 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	3724      	adds	r7, #36	; 0x24
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40023800 	.word	0x40023800
 8003978:	40013800 	.word	0x40013800
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021400 	.word	0x40021400
 8003994:	40021800 	.word	0x40021800
 8003998:	40021c00 	.word	0x40021c00
 800399c:	40022000 	.word	0x40022000
 80039a0:	40022400 	.word	0x40022400
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039f2:	887b      	ldrh	r3, [r7, #2]
 80039f4:	041a      	lsls	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80039fa:	e002      	b.n	8003a02 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039fc:	887a      	ldrh	r2, [r7, #2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f005 fd8d 	bl	8009544 <USB_GetMode>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 80ef 	bne.w	8003c10 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f005 fd71 	bl	800951e <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80e5 	beq.w	8003c0e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f005 fd68 	bl	800951e <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a58:	d104      	bne.n	8003a64 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a62:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 fd58 	bl	800951e <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a78:	d104      	bne.n	8003a84 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f005 fd48 	bl	800951e <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a98:	d104      	bne.n	8003aa4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003aa2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f005 fd38 	bl	800951e <USB_ReadInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d103      	bne.n	8003ac0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2202      	movs	r2, #2
 8003abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f005 fd2a 	bl	800951e <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad4:	d115      	bne.n	8003b02 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ade:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f007 f879 	bl	800abe8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 fd2f 	bl	8009560 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 fd09 	bl	800951e <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b16:	d102      	bne.n	8003b1e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f001 f8ef 	bl	8004cfc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f005 fcfb 	bl	800951e <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d106      	bne.n	8003b40 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 f83c 	bl	800abb0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f005 fcea 	bl	800951e <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b54:	d138      	bne.n	8003bc8 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f005 fd3a 	bl	80095d4 <USB_HC_ReadInterrupt>
 8003b60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e025      	b.n	8003bb4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d018      	beq.n	8003bae <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d106      	bne.n	8003ba2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f858 	bl	8003c50 <HCD_HC_IN_IRQHandler>
 8003ba0:	e005      	b.n	8003bae <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fc86 	bl	80044ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3d4      	bcc.n	8003b68 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f005 fca6 	bl	800951e <USB_ReadInterrupts>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d101      	bne.n	8003be0 <HAL_HCD_IRQHandler+0x1d2>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_HCD_IRQHandler+0x1d4>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d014      	beq.n	8003c10 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0210 	bic.w	r2, r2, #16
 8003bf4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 ffd4 	bl	8004ba4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0210 	orr.w	r2, r2, #16
 8003c0a:	619a      	str	r2, [r3, #24]
 8003c0c:	e000      	b.n	8003c10 <HAL_HCD_IRQHandler+0x202>
      return;
 8003c0e:	bf00      	nop
    }
  }
}
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_HCD_Stop+0x16>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e00d      	b.n	8003c48 <HAL_HCD_Stop+0x32>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f005 fddb 	bl	80097f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d119      	bne.n	8003cb4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2304      	movs	r3, #4
 8003c90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	0151      	lsls	r1, r2, #5
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	60d3      	str	r3, [r2, #12]
 8003cb2:	e0ce      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cca:	d12c      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	335d      	adds	r3, #93	; 0x5d
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 fc69 	bl	80095f6 <USB_HC_Halt>
 8003d24:	e095      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d109      	bne.n	8003d50 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2320      	movs	r3, #32
 8003d4c:	6093      	str	r3, [r2, #8]
 8003d4e:	e080      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d134      	bne.n	8003dd0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335d      	adds	r3, #93	; 0x5d
 8003d96:	2205      	movs	r2, #5
 8003d98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	461a      	mov	r2, r3
 8003da8:	2310      	movs	r3, #16
 8003daa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	2308      	movs	r3, #8
 8003dbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 fc14 	bl	80095f6 <USB_HC_Halt>
 8003dce:	e040      	b.n	8003e52 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d134      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e02:	f043 0302 	orr.w	r3, r3, #2
 8003e06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f005 fbef 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	2310      	movs	r3, #16
 8003e28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	335d      	adds	r3, #93	; 0x5d
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e50:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d122      	bne.n	8003eb0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f005 fbae 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003eae:	e300      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	f040 80fd 	bne.w	80040c2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	3348      	adds	r3, #72	; 0x48
 8003ee0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	0159      	lsls	r1, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003ef4:	1ad1      	subs	r1, r2, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4403      	add	r3, r0
 8003f04:	334c      	adds	r3, #76	; 0x4c
 8003f06:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	335d      	adds	r3, #93	; 0x5d
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	3358      	adds	r3, #88	; 0x58
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2301      	movs	r3, #1
 8003f40:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	333f      	adds	r3, #63	; 0x3f
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	440b      	add	r3, r1
 8003f66:	333f      	adds	r3, #63	; 0x3f
 8003f68:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d121      	bne.n	8003fb2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fb2c 	bl	80095f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	461a      	mov	r2, r3
 8003fac:	2310      	movs	r3, #16
 8003fae:	6093      	str	r3, [r2, #8]
 8003fb0:	e070      	b.n	8004094 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	333f      	adds	r3, #63	; 0x3f
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d12a      	bne.n	800401e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fe6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	b2d8      	uxtb	r0, r3
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4601      	mov	r1, r0
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f006 fdf4 	bl	800ac04 <HAL_HCD_HC_NotifyURBChange_Callback>
 800401c:	e03a      	b.n	8004094 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	333f      	adds	r3, #63	; 0x3f
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d12f      	bne.n	8004094 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	440b      	add	r3, r1
 8004042:	335c      	adds	r3, #92	; 0x5c
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	3350      	adds	r3, #80	; 0x50
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2d8      	uxtb	r0, r3
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	3350      	adds	r3, #80	; 0x50
 8004070:	4602      	mov	r2, r0
 8004072:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	b2d8      	uxtb	r0, r3
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	335c      	adds	r3, #92	; 0x5c
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	4601      	mov	r1, r0
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f006 fdb8 	bl	800ac04 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	3350      	adds	r3, #80	; 0x50
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2d8      	uxtb	r0, r3
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	3350      	adds	r3, #80	; 0x50
 80040bc:	4602      	mov	r2, r0
 80040be:	701a      	strb	r2, [r3, #0]
}
 80040c0:	e1f7      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f040 811a 	bne.w	800430e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f4:	f023 0302 	bic.w	r3, r3, #2
 80040f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	335d      	adds	r3, #93	; 0x5d
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10a      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	440b      	add	r3, r1
 800411e:	335c      	adds	r3, #92	; 0x5c
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e0d9      	b.n	80042da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	440b      	add	r3, r1
 8004134:	335d      	adds	r3, #93	; 0x5d
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d10a      	bne.n	8004152 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	335c      	adds	r3, #92	; 0x5c
 800414c:	2205      	movs	r2, #5
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e0c3      	b.n	80042da <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335d      	adds	r3, #93	; 0x5d
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d00a      	beq.n	800417e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	335d      	adds	r3, #93	; 0x5d
 8004178:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800417a:	2b08      	cmp	r3, #8
 800417c:	d156      	bne.n	800422c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	3358      	adds	r3, #88	; 0x58
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4403      	add	r3, r0
 80041a0:	3358      	adds	r3, #88	; 0x58
 80041a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	3358      	adds	r3, #88	; 0x58
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d914      	bls.n	80041e4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	3358      	adds	r3, #88	; 0x58
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	440b      	add	r3, r1
 80041dc:	335c      	adds	r3, #92	; 0x5c
 80041de:	2204      	movs	r2, #4
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e009      	b.n	80041f8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	440b      	add	r3, r1
 80041f2:	335c      	adds	r3, #92	; 0x5c
 80041f4:	2202      	movs	r2, #2
 80041f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800420e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004216:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e056      	b.n	80042da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	335d      	adds	r3, #93	; 0x5d
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d123      	bne.n	800428a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	440b      	add	r3, r1
 8004250:	335c      	adds	r3, #92	; 0x5c
 8004252:	2202      	movs	r2, #2
 8004254:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004274:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e027      	b.n	80042da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	335d      	adds	r3, #93	; 0x5d
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b07      	cmp	r3, #7
 800429e:	d11c      	bne.n	80042da <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3358      	adds	r3, #88	; 0x58
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4403      	add	r3, r0
 80042c2:	3358      	adds	r3, #88	; 0x58
 80042c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	440b      	add	r3, r1
 80042d4:	335c      	adds	r3, #92	; 0x5c
 80042d6:	2204      	movs	r2, #4
 80042d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	461a      	mov	r2, r3
 80042e8:	2302      	movs	r3, #2
 80042ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	b2d8      	uxtb	r0, r3
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	440b      	add	r3, r1
 80042fe:	335c      	adds	r3, #92	; 0x5c
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	4601      	mov	r1, r0
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f006 fc7c 	bl	800ac04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800430c:	e0d1      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d13e      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	440a      	add	r2, r1
 800433a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433e:	f043 0302 	orr.w	r3, r3, #2
 8004342:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	3358      	adds	r3, #88	; 0x58
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	1c59      	adds	r1, r3, #1
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4403      	add	r3, r0
 8004366:	3358      	adds	r3, #88	; 0x58
 8004368:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	335d      	adds	r3, #93	; 0x5d
 800437a:	2206      	movs	r2, #6
 800437c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f005 f934 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	6093      	str	r3, [r2, #8]
}
 80043a0:	e087      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d17c      	bne.n	80044b2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	440b      	add	r3, r1
 80043c6:	333f      	adds	r3, #63	; 0x3f
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d122      	bne.n	8004414 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3358      	adds	r3, #88	; 0x58
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043fc:	f043 0302 	orr.w	r3, r3, #2
 8004400:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f005 f8f2 	bl	80095f6 <USB_HC_Halt>
 8004412:	e045      	b.n	80044a0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	333f      	adds	r3, #63	; 0x3f
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	440b      	add	r3, r1
 8004438:	333f      	adds	r3, #63	; 0x3f
 800443a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800443c:	2b02      	cmp	r3, #2
 800443e:	d12f      	bne.n	80044a0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	3358      	adds	r3, #88	; 0x58
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d121      	bne.n	80044a0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	335d      	adds	r3, #93	; 0x5d
 800446c:	2203      	movs	r2, #3
 800446e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	440a      	add	r2, r1
 8004486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800448a:	f043 0302 	orr.w	r3, r3, #2
 800448e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f005 f8ab 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	2310      	movs	r3, #16
 80044b0:	6093      	str	r3, [r2, #8]
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d119      	bne.n	800451e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f6:	461a      	mov	r2, r3
 80044f8:	2304      	movs	r3, #4
 80044fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	440a      	add	r2, r1
 8004512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800451c:	e33e      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d141      	bne.n	80045b8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004540:	461a      	mov	r2, r3
 8004542:	2320      	movs	r3, #32
 8004544:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	333d      	adds	r3, #61	; 0x3d
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	f040 831f 	bne.w	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	333d      	adds	r3, #61	; 0x3d
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	440a      	add	r2, r1
 800459c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f005 f820 	bl	80095f6 <USB_HC_Halt>
}
 80045b6:	e2f1      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d13f      	bne.n	800464e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	335d      	adds	r3, #93	; 0x5d
 80045de:	2204      	movs	r2, #4
 80045e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	333d      	adds	r3, #61	; 0x3d
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3358      	adds	r3, #88	; 0x58
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	440a      	add	r2, r1
 8004620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f004 ffde 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	6093      	str	r3, [r2, #8]
}
 800464c:	e2a6      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d122      	bne.n	80046ac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	440a      	add	r2, r1
 800467c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f004 ffb0 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a8:	6093      	str	r3, [r2, #8]
}
 80046aa:	e277      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d135      	bne.n	800472e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	440b      	add	r3, r1
 80046d0:	3358      	adds	r3, #88	; 0x58
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f004 ff78 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	461a      	mov	r2, r3
 8004714:	2301      	movs	r3, #1
 8004716:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	335d      	adds	r3, #93	; 0x5d
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
}
 800472c:	e236      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d12b      	bne.n	800479c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	2308      	movs	r3, #8
 8004754:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	440a      	add	r2, r1
 800476c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f004 ff38 	bl	80095f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	335d      	adds	r3, #93	; 0x5d
 8004796:	2205      	movs	r2, #5
 8004798:	701a      	strb	r2, [r3, #0]
}
 800479a:	e1ff      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d155      	bne.n	800485e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	440b      	add	r3, r1
 80047c0:	3358      	adds	r3, #88	; 0x58
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	440b      	add	r3, r1
 80047d4:	335d      	adds	r3, #93	; 0x5d
 80047d6:	2203      	movs	r2, #3
 80047d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	440b      	add	r3, r1
 80047e8:	333d      	adds	r3, #61	; 0x3d
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d114      	bne.n	800481a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	440b      	add	r3, r1
 80047fe:	333c      	adds	r3, #60	; 0x3c
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	333d      	adds	r3, #61	; 0x3d
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	440a      	add	r2, r1
 8004830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004834:	f043 0302 	orr.w	r3, r3, #2
 8004838:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f004 fed6 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	461a      	mov	r2, r3
 8004858:	2310      	movs	r3, #16
 800485a:	6093      	str	r3, [r2, #8]
}
 800485c:	e19e      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d12b      	bne.n	80048cc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	440a      	add	r2, r1
 800488a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800488e:	f043 0302 	orr.w	r3, r3, #2
 8004892:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f004 fea9 	bl	80095f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	335d      	adds	r3, #93	; 0x5d
 80048b4:	2206      	movs	r2, #6
 80048b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	6093      	str	r3, [r2, #8]
}
 80048ca:	e167      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d135      	bne.n	8004950 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f004 fe71 	bl	80095f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	461a      	mov	r2, r3
 8004922:	2310      	movs	r3, #16
 8004924:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	461a      	mov	r2, r3
 8004934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004938:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	335d      	adds	r3, #93	; 0x5d
 800494a:	2208      	movs	r2, #8
 800494c:	701a      	strb	r2, [r3, #0]
}
 800494e:	e125      	b.n	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4413      	add	r3, r2
 8004958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	f040 811a 	bne.w	8004b9c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	440a      	add	r2, r1
 800497e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004982:	f023 0302 	bic.w	r3, r3, #2
 8004986:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	440b      	add	r3, r1
 8004996:	335d      	adds	r3, #93	; 0x5d
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d137      	bne.n	8004a0e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	335c      	adds	r3, #92	; 0x5c
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	333f      	adds	r3, #63	; 0x3f
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d00b      	beq.n	80049e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	440b      	add	r3, r1
 80049d6:	333f      	adds	r3, #63	; 0x3f
 80049d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049da:	2b03      	cmp	r3, #3
 80049dc:	f040 80c5 	bne.w	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	440b      	add	r3, r1
 80049ee:	3351      	adds	r3, #81	; 0x51
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f083 0301 	eor.w	r3, r3, #1
 80049f6:	b2d8      	uxtb	r0, r3
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	3351      	adds	r3, #81	; 0x51
 8004a08:	4602      	mov	r2, r0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e0ad      	b.n	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	335d      	adds	r3, #93	; 0x5d
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d10a      	bne.n	8004a3a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	335c      	adds	r3, #92	; 0x5c
 8004a34:	2202      	movs	r2, #2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e097      	b.n	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	335d      	adds	r3, #93	; 0x5d
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d10a      	bne.n	8004a66 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	335c      	adds	r3, #92	; 0x5c
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e081      	b.n	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	335d      	adds	r3, #93	; 0x5d
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d10a      	bne.n	8004a92 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	335c      	adds	r3, #92	; 0x5c
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e06b      	b.n	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	335d      	adds	r3, #93	; 0x5d
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d00a      	beq.n	8004abe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	335d      	adds	r3, #93	; 0x5d
 8004ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d155      	bne.n	8004b6a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	440b      	add	r3, r1
 8004acc:	3358      	adds	r3, #88	; 0x58
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1c59      	adds	r1, r3, #1
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4403      	add	r3, r0
 8004ae0:	3358      	adds	r3, #88	; 0x58
 8004ae2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	440b      	add	r3, r1
 8004af2:	3358      	adds	r3, #88	; 0x58
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d914      	bls.n	8004b24 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	3358      	adds	r3, #88	; 0x58
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	335c      	adds	r3, #92	; 0x5c
 8004b1e:	2204      	movs	r2, #4
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e009      	b.n	8004b38 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	440b      	add	r3, r1
 8004b32:	335c      	adds	r3, #92	; 0x5c
 8004b34:	2202      	movs	r2, #2
 8004b36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	461a      	mov	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	2302      	movs	r3, #2
 8004b7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	b2d8      	uxtb	r0, r3
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	335c      	adds	r3, #92	; 0x5c
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4601      	mov	r1, r0
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f006 f834 	bl	800ac04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	0c5b      	lsrs	r3, r3, #17
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d003      	beq.n	8004be8 <HCD_RXQLVL_IRQHandler+0x44>
 8004be0:	2b05      	cmp	r3, #5
 8004be2:	f000 8082 	beq.w	8004cea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004be6:	e083      	b.n	8004cf0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d07f      	beq.n	8004cee <HCD_RXQLVL_IRQHandler+0x14a>
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3344      	adds	r3, #68	; 0x44
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d074      	beq.n	8004cee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	440b      	add	r3, r1
 8004c16:	3344      	adds	r3, #68	; 0x44
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f004 fc54 	bl	80094cc <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	440b      	add	r3, r1
 8004c32:	3344      	adds	r3, #68	; 0x44
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	18d1      	adds	r1, r2, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4403      	add	r3, r0
 8004c48:	3344      	adds	r3, #68	; 0x44
 8004c4a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	334c      	adds	r3, #76	; 0x4c
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	18d1      	adds	r1, r2, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4403      	add	r3, r0
 8004c70:	334c      	adds	r3, #76	; 0x4c
 8004c72:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <HCD_RXQLVL_IRQHandler+0x154>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d031      	beq.n	8004cee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ca0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	3350      	adds	r3, #80	; 0x50
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f083 0301 	eor.w	r3, r3, #1
 8004cd2:	b2d8      	uxtb	r0, r3
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3350      	adds	r3, #80	; 0x50
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	701a      	strb	r2, [r3, #0]
      break;
 8004ce8:	e001      	b.n	8004cee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004cee:	bf00      	nop
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	1ff80000 	.word	0x1ff80000

08004cfc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d28:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d10b      	bne.n	8004d4c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f005 ff44 	bl	800abcc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d132      	bne.n	8004dbc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d126      	bne.n	8004db6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d113      	bne.n	8004d98 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d7a:	d106      	bne.n	8004d8a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2102      	movs	r1, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f004 fbec 	bl	8009560 <USB_InitFSLSPClkSel>
 8004d88:	e011      	b.n	8004dae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2101      	movs	r1, #1
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fbe5 	bl	8009560 <USB_InitFSLSPClkSel>
 8004d96:	e00a      	b.n	8004dae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da6:	461a      	mov	r2, r3
 8004da8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004dac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f005 ff3a 	bl	800ac28 <HAL_HCD_PortEnabled_Callback>
 8004db4:	e002      	b.n	8004dbc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f005 ff44 	bl	800ac44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d103      	bne.n	8004dce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e07f      	b.n	8004ef6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc ff20 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2224      	movs	r2, #36	; 0x24
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	e006      	b.n	8004e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d104      	bne.n	8004e7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_I2C_Init+0x11c>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	02008000 	.word	0x02008000

08004f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d138      	bne.n	8004f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e032      	b.n	8004f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2224      	movs	r2, #36	; 0x24
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d139      	bne.n	8005024 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e033      	b.n	8005026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2224      	movs	r2, #36	; 0x24
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0bf      	b.n	80051c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fe70 	bl	8001d40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005076:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800508c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b4a      	ldr	r3, [pc, #296]	; (80051d0 <HAL_LTDC_Init+0x19c>)
 80050a8:	400b      	ands	r3, r1
 80050aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6899      	ldr	r1, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <HAL_LTDC_Init+0x19c>)
 80050d6:	400b      	ands	r3, r1
 80050d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68d9      	ldr	r1, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6919      	ldr	r1, [r3, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <HAL_LTDC_Init+0x19c>)
 8005104:	400b      	ands	r3, r1
 8005106:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	041b      	lsls	r3, r3, #16
 800510e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6919      	ldr	r1, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6959      	ldr	r1, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <HAL_LTDC_Init+0x19c>)
 8005132:	400b      	ands	r3, r1
 8005134:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6959      	ldr	r1, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0206 	orr.w	r2, r2, #6
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	f000f800 	.word	0xf000f800

080051d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d023      	beq.n	800523e <HAL_LTDC_IRQHandler+0x6a>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2204      	movs	r2, #4
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800521e:	f043 0201 	orr.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f86f 	bl	800531c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d023      	beq.n	8005290 <HAL_LTDC_IRQHandler+0xbc>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01e      	beq.n	8005290 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0202 	bic.w	r2, r2, #2
 8005260:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2202      	movs	r2, #2
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005270:	f043 0202 	orr.w	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f846 	bl	800531c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01b      	beq.n	80052d2 <HAL_LTDC_IRQHandler+0xfe>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d016      	beq.n	80052d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2201      	movs	r2, #1
 80052ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f82f 	bl	8005330 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <HAL_LTDC_IRQHandler+0x140>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0208 	bic.w	r2, r2, #8
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2208      	movs	r2, #8
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f818 	bl	8005344 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005358:	b5b0      	push	{r4, r5, r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_LTDC_ConfigLayer+0x1a>
 800536e:	2302      	movs	r3, #2
 8005370:	e02c      	b.n	80053cc <HAL_LTDC_ConfigLayer+0x74>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2134      	movs	r1, #52	; 0x34
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4614      	mov	r4, r2
 8005396:	461d      	mov	r5, r3
 8005398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800539c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f811 	bl	80053d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bdb0      	pop	{r4, r5, r7, pc}

080053d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	4413      	add	r3, r2
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	01db      	lsls	r3, r3, #7
 8005400:	4413      	add	r3, r2
 8005402:	3384      	adds	r3, #132	; 0x84
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	4611      	mov	r1, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	01d2      	lsls	r2, r2, #7
 8005410:	440a      	add	r2, r1
 8005412:	3284      	adds	r2, #132	; 0x84
 8005414:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005418:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542a:	4413      	add	r3, r2
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	01db      	lsls	r3, r3, #7
 8005438:	440b      	add	r3, r1
 800543a:	3384      	adds	r3, #132	; 0x84
 800543c:	4619      	mov	r1, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005452:	4413      	add	r3, r2
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4413      	add	r3, r2
 8005464:	3384      	adds	r3, #132	; 0x84
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4611      	mov	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	01d2      	lsls	r2, r2, #7
 8005472:	440a      	add	r2, r1
 8005474:	3284      	adds	r2, #132	; 0x84
 8005476:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800547a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800548a:	4413      	add	r3, r2
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	440b      	add	r3, r1
 800549a:	3384      	adds	r3, #132	; 0x84
 800549c:	4619      	mov	r1, r3
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	4413      	add	r3, r2
 80054b0:	3384      	adds	r3, #132	; 0x84
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	4611      	mov	r1, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	01d2      	lsls	r2, r2, #7
 80054be:	440a      	add	r2, r1
 80054c0:	3284      	adds	r2, #132	; 0x84
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	01db      	lsls	r3, r3, #7
 80054d2:	4413      	add	r3, r2
 80054d4:	3384      	adds	r3, #132	; 0x84
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	061b      	lsls	r3, r3, #24
 80054f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	; 0x84
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	4413      	add	r3, r2
 8005516:	3384      	adds	r3, #132	; 0x84
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005524:	461a      	mov	r2, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	431a      	orrs	r2, r3
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	440b      	add	r3, r1
 800553a:	3384      	adds	r3, #132	; 0x84
 800553c:	4619      	mov	r1, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	01db      	lsls	r3, r3, #7
 800554e:	4413      	add	r3, r2
 8005550:	3384      	adds	r3, #132	; 0x84
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	4611      	mov	r1, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	01d2      	lsls	r2, r2, #7
 800555e:	440a      	add	r2, r1
 8005560:	3284      	adds	r2, #132	; 0x84
 8005562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005566:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	; 0x84
 8005576:	461a      	mov	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	4413      	add	r3, r2
 800558a:	3384      	adds	r3, #132	; 0x84
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	440b      	add	r3, r1
 800559a:	3384      	adds	r3, #132	; 0x84
 800559c:	4619      	mov	r1, r3
 800559e:	4b58      	ldr	r3, [pc, #352]	; (8005700 <LTDC_SetConfig+0x32c>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	6809      	ldr	r1, [r1, #0]
 80055b0:	4608      	mov	r0, r1
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	01c9      	lsls	r1, r1, #7
 80055b6:	4401      	add	r1, r0
 80055b8:	3184      	adds	r1, #132	; 0x84
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4413      	add	r3, r2
 80055ca:	3384      	adds	r3, #132	; 0x84
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	4413      	add	r3, r2
 80055da:	3384      	adds	r3, #132	; 0x84
 80055dc:	461a      	mov	r2, r3
 80055de:	2300      	movs	r3, #0
 80055e0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	4413      	add	r3, r2
 80055ee:	3384      	adds	r3, #132	; 0x84
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005600:	2304      	movs	r3, #4
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e01b      	b.n	800563e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d102      	bne.n	8005614 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800560e:	2303      	movs	r3, #3
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e014      	b.n	800563e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b04      	cmp	r3, #4
 800561a:	d00b      	beq.n	8005634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005620:	2b02      	cmp	r3, #2
 8005622:	d007      	beq.n	8005634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005630:	2b07      	cmp	r3, #7
 8005632:	d102      	bne.n	800563a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005634:	2302      	movs	r3, #2
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e001      	b.n	800563e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	01db      	lsls	r3, r3, #7
 8005648:	4413      	add	r3, r2
 800564a:	3384      	adds	r3, #132	; 0x84
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	4611      	mov	r1, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	01d2      	lsls	r2, r2, #7
 8005658:	440a      	add	r2, r1
 800565a:	3284      	adds	r2, #132	; 0x84
 800565c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005660:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	041a      	lsls	r2, r3, #16
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1acb      	subs	r3, r1, r3
 8005678:	69f9      	ldr	r1, [r7, #28]
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	3303      	adds	r3, #3
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	6809      	ldr	r1, [r1, #0]
 8005684:	4608      	mov	r0, r1
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	01c9      	lsls	r1, r1, #7
 800568a:	4401      	add	r1, r0
 800568c:	3184      	adds	r1, #132	; 0x84
 800568e:	4313      	orrs	r3, r2
 8005690:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	01db      	lsls	r3, r3, #7
 800569c:	4413      	add	r3, r2
 800569e:	3384      	adds	r3, #132	; 0x84
 80056a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	440b      	add	r3, r1
 80056ae:	3384      	adds	r3, #132	; 0x84
 80056b0:	4619      	mov	r1, r3
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <LTDC_SetConfig+0x330>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	3384      	adds	r3, #132	; 0x84
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4413      	add	r3, r2
 80056da:	3384      	adds	r3, #132	; 0x84
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	6812      	ldr	r2, [r2, #0]
 80056e2:	4611      	mov	r1, r2
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	01d2      	lsls	r2, r2, #7
 80056e8:	440a      	add	r2, r1
 80056ea:	3284      	adds	r2, #132	; 0x84
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6013      	str	r3, [r2, #0]
}
 80056f2:	bf00      	nop
 80056f4:	3724      	adds	r7, #36	; 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	fffff8f8 	.word	0xfffff8f8
 8005704:	fffff800 	.word	0xfffff800

08005708 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40007000 	.word	0x40007000

08005728 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005756:	f7fd f895 	bl	8002884 <HAL_GetTick>
 800575a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800575c:	e009      	b.n	8005772 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800575e:	f7fd f891 	bl	8002884 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576c:	d901      	bls.n	8005772 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e022      	b.n	80057b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577e:	d1ee      	bne.n	800575e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005780:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800578c:	f7fd f87a 	bl	8002884 <HAL_GetTick>
 8005790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005792:	e009      	b.n	80057a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005794:	f7fd f876 	bl	8002884 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a2:	d901      	bls.n	80057a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e007      	b.n	80057b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057b4:	d1ee      	bne.n	8005794 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000

080057c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80057d0:	f7fd f858 	bl	8002884 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e067      	b.n	80058b0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fc fb6b 	bl	8001ed0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80057fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f85e 	bl	80058c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	3b01      	subs	r3, #1
 8005814:	021a      	lsls	r2, r3, #8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	2120      	movs	r1, #32
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f856 	bl	80058dc <QSPI_WaitFlagStateUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d135      	bne.n	80058a6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <HAL_QSPI_Init+0xf0>)
 8005842:	4013      	ands	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	0611      	lsls	r1, r2, #24
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68d2      	ldr	r2, [r2, #12]
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	69d2      	ldr	r2, [r2, #28]
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6a12      	ldr	r2, [r2, #32]
 800585a:	4311      	orrs	r1, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	430b      	orrs	r3, r1
 8005862:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b14      	ldr	r3, [pc, #80]	; (80058bc <HAL_QSPI_Init+0xf4>)
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6912      	ldr	r2, [r2, #16]
 8005872:	0411      	lsls	r1, r2, #16
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6952      	ldr	r2, [r2, #20]
 8005878:	4311      	orrs	r1, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6992      	ldr	r2, [r2, #24]
 800587e:	4311      	orrs	r1, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	430b      	orrs	r3, r1
 8005886:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80058ae:	7afb      	ldrb	r3, [r7, #11]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	00ffff2f 	.word	0x00ffff2f
 80058bc:	ffe0f8fe 	.word	0xffe0f8fe

080058c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058ec:	e01a      	b.n	8005924 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d016      	beq.n	8005924 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f6:	f7fc ffc5 	bl	8002884 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2204      	movs	r2, #4
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f043 0201 	orr.w	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e00e      	b.n	8005942 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d1d6      	bne.n	80058ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005954:	2300      	movs	r3, #0
 8005956:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e291      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8087 	beq.w	8005a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005970:	4b96      	ldr	r3, [pc, #600]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b04      	cmp	r3, #4
 800597a:	d00c      	beq.n	8005996 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800597c:	4b93      	ldr	r3, [pc, #588]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b08      	cmp	r3, #8
 8005986:	d112      	bne.n	80059ae <HAL_RCC_OscConfig+0x62>
 8005988:	4b90      	ldr	r3, [pc, #576]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005994:	d10b      	bne.n	80059ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005996:	4b8d      	ldr	r3, [pc, #564]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d06c      	beq.n	8005a7c <HAL_RCC_OscConfig+0x130>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d168      	bne.n	8005a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e26b      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b6:	d106      	bne.n	80059c6 <HAL_RCC_OscConfig+0x7a>
 80059b8:	4b84      	ldr	r3, [pc, #528]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a83      	ldr	r2, [pc, #524]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e02e      	b.n	8005a24 <HAL_RCC_OscConfig+0xd8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10c      	bne.n	80059e8 <HAL_RCC_OscConfig+0x9c>
 80059ce:	4b7f      	ldr	r3, [pc, #508]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a7e      	ldr	r2, [pc, #504]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	4b7c      	ldr	r3, [pc, #496]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a7b      	ldr	r2, [pc, #492]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	e01d      	b.n	8005a24 <HAL_RCC_OscConfig+0xd8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0xc0>
 80059f2:	4b76      	ldr	r3, [pc, #472]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a75      	ldr	r2, [pc, #468]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 80059f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b73      	ldr	r3, [pc, #460]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a72      	ldr	r2, [pc, #456]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCC_OscConfig+0xd8>
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a6e      	ldr	r2, [pc, #440]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	4b6c      	ldr	r3, [pc, #432]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a6b      	ldr	r2, [pc, #428]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fc ff2a 	bl	8002884 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a34:	f7fc ff26 	bl	8002884 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	; 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e21f      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a46:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0xe8>
 8005a52:	e014      	b.n	8005a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fc ff16 	bl	8002884 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fc ff12 	bl	8002884 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e20b      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6e:	4b57      	ldr	r3, [pc, #348]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x110>
 8005a7a:	e000      	b.n	8005a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d069      	beq.n	8005b5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a8a:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a96:	4b4d      	ldr	r3, [pc, #308]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 030c 	and.w	r3, r3, #12
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d11c      	bne.n	8005adc <HAL_RCC_OscConfig+0x190>
 8005aa2:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d116      	bne.n	8005adc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x17a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e1df      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	493d      	ldr	r1, [pc, #244]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ada:	e040      	b.n	8005b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d023      	beq.n	8005b2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a38      	ldr	r2, [pc, #224]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fc fec8 	bl	8002884 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af8:	f7fc fec4 	bl	8002884 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e1bd      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0a:	4b30      	ldr	r3, [pc, #192]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4929      	ldr	r1, [pc, #164]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
 8005b2a:	e018      	b.n	8005b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2c:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fc fea4 	bl	8002884 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b40:	f7fc fea0 	bl	8002884 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e199      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d038      	beq.n	8005bdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d019      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7e:	f7fc fe81 	bl	8002884 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b86:	f7fc fe7d 	bl	8002884 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e176      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_OscConfig+0x23a>
 8005ba4:	e01a      	b.n	8005bdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005baa:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <HAL_RCC_OscConfig+0x280>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb2:	f7fc fe67 	bl	8002884 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bba:	f7fc fe63 	bl	8002884 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d903      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e15c      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
 8005bcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	4b91      	ldr	r3, [pc, #580]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ee      	bne.n	8005bba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a4 	beq.w	8005d32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bea:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10d      	bne.n	8005c12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf6:	4b88      	ldr	r3, [pc, #544]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4a87      	ldr	r2, [pc, #540]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6413      	str	r3, [r2, #64]	; 0x40
 8005c02:	4b85      	ldr	r3, [pc, #532]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c12:	4b82      	ldr	r3, [pc, #520]	; (8005e1c <HAL_RCC_OscConfig+0x4d0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d118      	bne.n	8005c50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005c1e:	4b7f      	ldr	r3, [pc, #508]	; (8005e1c <HAL_RCC_OscConfig+0x4d0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a7e      	ldr	r2, [pc, #504]	; (8005e1c <HAL_RCC_OscConfig+0x4d0>)
 8005c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c2a:	f7fc fe2b 	bl	8002884 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c32:	f7fc fe27 	bl	8002884 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b64      	cmp	r3, #100	; 0x64
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e120      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c44:	4b75      	ldr	r3, [pc, #468]	; (8005e1c <HAL_RCC_OscConfig+0x4d0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <HAL_RCC_OscConfig+0x31a>
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	4a6e      	ldr	r2, [pc, #440]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6713      	str	r3, [r2, #112]	; 0x70
 8005c64:	e02d      	b.n	8005cc2 <HAL_RCC_OscConfig+0x376>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x33c>
 8005c6e:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	4a69      	ldr	r2, [pc, #420]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	6713      	str	r3, [r2, #112]	; 0x70
 8005c7a:	4b67      	ldr	r3, [pc, #412]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a66      	ldr	r2, [pc, #408]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70
 8005c86:	e01c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x376>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCC_OscConfig+0x35e>
 8005c90:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a60      	ldr	r2, [pc, #384]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c96:	f043 0304 	orr.w	r3, r3, #4
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	4b5e      	ldr	r3, [pc, #376]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a5d      	ldr	r2, [pc, #372]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca8:	e00b      	b.n	8005cc2 <HAL_RCC_OscConfig+0x376>
 8005caa:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	4a5a      	ldr	r2, [pc, #360]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb6:	4b58      	ldr	r3, [pc, #352]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	4a57      	ldr	r2, [pc, #348]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005cbc:	f023 0304 	bic.w	r3, r3, #4
 8005cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d015      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cca:	f7fc fddb 	bl	8002884 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fc fdd7 	bl	8002884 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0ce      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0ee      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x386>
 8005cf4:	e014      	b.n	8005d20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf6:	f7fc fdc5 	bl	8002884 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfc:	e00a      	b.n	8005d14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfe:	f7fc fdc1 	bl	8002884 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e0b8      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d14:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1ee      	bne.n	8005cfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d26:	4b3c      	ldr	r3, [pc, #240]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80a4 	beq.w	8005e84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d3c:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d06b      	beq.n	8005e20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d149      	bne.n	8005de4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d50:	4b31      	ldr	r3, [pc, #196]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a30      	ldr	r2, [pc, #192]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fd92 	bl	8002884 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fc fd8e 	bl	8002884 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e087      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d76:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	4313      	orrs	r3, r2
 8005da8:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fd62 	bl	8002884 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc fd5e 	bl	8002884 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e057      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd6:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x478>
 8005de2:	e04f      	b.n	8005e84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a0b      	ldr	r2, [pc, #44]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fc fd48 	bl	8002884 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fc fd44 	bl	8002884 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e03d      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <HAL_RCC_OscConfig+0x4cc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x4ac>
 8005e16:	e035      	b.n	8005e84 <HAL_RCC_OscConfig+0x538>
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x544>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d028      	beq.n	8005e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d121      	bne.n	8005e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11a      	bne.n	8005e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0d0      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eac:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d910      	bls.n	8005edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eba:	4b67      	ldr	r3, [pc, #412]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 020f 	bic.w	r2, r3, #15
 8005ec2:	4965      	ldr	r1, [pc, #404]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b63      	ldr	r3, [pc, #396]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0b8      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a58      	ldr	r2, [pc, #352]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005efe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a52      	ldr	r2, [pc, #328]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f18:	4b50      	ldr	r3, [pc, #320]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	494d      	ldr	r1, [pc, #308]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d040      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d115      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d107      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e073      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f66:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e06b      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f76:	4b39      	ldr	r3, [pc, #228]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 0203 	bic.w	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	4936      	ldr	r1, [pc, #216]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f88:	f7fc fc7c 	bl	8002884 <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f90:	f7fc fc78 	bl	8002884 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e053      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 020c 	and.w	r2, r3, #12
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d1eb      	bne.n	8005f90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b27      	ldr	r3, [pc, #156]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d210      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 020f 	bic.w	r2, r3, #15
 8005fce:	4922      	ldr	r1, [pc, #136]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e032      	b.n	800604e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4916      	ldr	r1, [pc, #88]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	490e      	ldr	r1, [pc, #56]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006026:	f000 f821 	bl	800606c <HAL_RCC_GetSysClockFreq>
 800602a:	4601      	mov	r1, r0
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <HAL_RCC_ClockConfig+0x1cc>)
 8006038:	5cd3      	ldrb	r3, [r2, r3]
 800603a:	fa21 f303 	lsr.w	r3, r1, r3
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <HAL_RCC_ClockConfig+0x1d0>)
 8006040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_ClockConfig+0x1d4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fc fb22 	bl	8002690 <HAL_InitTick>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40023c00 	.word	0x40023c00
 800605c:	40023800 	.word	0x40023800
 8006060:	0800ad78 	.word	0x0800ad78
 8006064:	20000000 	.word	0x20000000
 8006068:	20000004 	.word	0x20000004

0800606c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	2300      	movs	r3, #0
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006082:	4b50      	ldr	r3, [pc, #320]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
 800608a:	2b04      	cmp	r3, #4
 800608c:	d007      	beq.n	800609e <HAL_RCC_GetSysClockFreq+0x32>
 800608e:	2b08      	cmp	r3, #8
 8006090:	d008      	beq.n	80060a4 <HAL_RCC_GetSysClockFreq+0x38>
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 808d 	bne.w	80061b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006098:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800609a:	60bb      	str	r3, [r7, #8]
      break;
 800609c:	e08c      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800609e:	4b4b      	ldr	r3, [pc, #300]	; (80061cc <HAL_RCC_GetSysClockFreq+0x160>)
 80060a0:	60bb      	str	r3, [r7, #8]
      break;
 80060a2:	e089      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a4:	4b47      	ldr	r3, [pc, #284]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80060ae:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d023      	beq.n	8006102 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ba:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	099b      	lsrs	r3, r3, #6
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	ea03 0501 	and.w	r5, r3, r1
 80060d0:	ea04 0602 	and.w	r6, r4, r2
 80060d4:	4a3d      	ldr	r2, [pc, #244]	; (80061cc <HAL_RCC_GetSysClockFreq+0x160>)
 80060d6:	fb02 f106 	mul.w	r1, r2, r6
 80060da:	2200      	movs	r2, #0
 80060dc:	fb02 f205 	mul.w	r2, r2, r5
 80060e0:	440a      	add	r2, r1
 80060e2:	493a      	ldr	r1, [pc, #232]	; (80061cc <HAL_RCC_GetSysClockFreq+0x160>)
 80060e4:	fba5 0101 	umull	r0, r1, r5, r1
 80060e8:	1853      	adds	r3, r2, r1
 80060ea:	4619      	mov	r1, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f04f 0400 	mov.w	r4, #0
 80060f2:	461a      	mov	r2, r3
 80060f4:	4623      	mov	r3, r4
 80060f6:	f7fa f88b 	bl	8000210 <__aeabi_uldivmod>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e049      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006102:	4b30      	ldr	r3, [pc, #192]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	099b      	lsrs	r3, r3, #6
 8006108:	f04f 0400 	mov.w	r4, #0
 800610c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	ea03 0501 	and.w	r5, r3, r1
 8006118:	ea04 0602 	and.w	r6, r4, r2
 800611c:	4629      	mov	r1, r5
 800611e:	4632      	mov	r2, r6
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	f04f 0400 	mov.w	r4, #0
 8006128:	0154      	lsls	r4, r2, #5
 800612a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800612e:	014b      	lsls	r3, r1, #5
 8006130:	4619      	mov	r1, r3
 8006132:	4622      	mov	r2, r4
 8006134:	1b49      	subs	r1, r1, r5
 8006136:	eb62 0206 	sbc.w	r2, r2, r6
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 0400 	mov.w	r4, #0
 8006142:	0194      	lsls	r4, r2, #6
 8006144:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006148:	018b      	lsls	r3, r1, #6
 800614a:	1a5b      	subs	r3, r3, r1
 800614c:	eb64 0402 	sbc.w	r4, r4, r2
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	00e2      	lsls	r2, r4, #3
 800615a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800615e:	00d9      	lsls	r1, r3, #3
 8006160:	460b      	mov	r3, r1
 8006162:	4614      	mov	r4, r2
 8006164:	195b      	adds	r3, r3, r5
 8006166:	eb44 0406 	adc.w	r4, r4, r6
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	02a2      	lsls	r2, r4, #10
 8006174:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006178:	0299      	lsls	r1, r3, #10
 800617a:	460b      	mov	r3, r1
 800617c:	4614      	mov	r4, r2
 800617e:	4618      	mov	r0, r3
 8006180:	4621      	mov	r1, r4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f04f 0400 	mov.w	r4, #0
 8006188:	461a      	mov	r2, r3
 800618a:	4623      	mov	r3, r4
 800618c:	f7fa f840 	bl	8000210 <__aeabi_uldivmod>
 8006190:	4603      	mov	r3, r0
 8006192:	460c      	mov	r4, r1
 8006194:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006196:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	3301      	adds	r3, #1
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	60bb      	str	r3, [r7, #8]
      break;
 80061b0:	e002      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80061b4:	60bb      	str	r3, [r7, #8]
      break;
 80061b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b8:	68bb      	ldr	r3, [r7, #8]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	00f42400 	.word	0x00f42400
 80061cc:	017d7840 	.word	0x017d7840

080061d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000000 	.word	0x20000000

080061e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061ec:	f7ff fff0 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 80061f0:	4601      	mov	r1, r0
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0a9b      	lsrs	r3, r3, #10
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4a03      	ldr	r2, [pc, #12]	; (800620c <HAL_RCC_GetPCLK1Freq+0x24>)
 80061fe:	5cd3      	ldrb	r3, [r2, r3]
 8006200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	0800ad88 	.word	0x0800ad88

08006210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006214:	f7ff ffdc 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 8006218:	4601      	mov	r1, r0
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0b5b      	lsrs	r3, r3, #13
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4a03      	ldr	r2, [pc, #12]	; (8006234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40023800 	.word	0x40023800
 8006234:	0800ad88 	.word	0x0800ad88

08006238 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	220f      	movs	r2, #15
 8006246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006248:	4b12      	ldr	r3, [pc, #72]	; (8006294 <HAL_RCC_GetClockConfig+0x5c>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0203 	and.w	r2, r3, #3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <HAL_RCC_GetClockConfig+0x5c>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <HAL_RCC_GetClockConfig+0x5c>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_RCC_GetClockConfig+0x5c>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_RCC_GetClockConfig+0x60>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	601a      	str	r2, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40023800 	.word	0x40023800
 8006298:	40023c00 	.word	0x40023c00

0800629c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062c4:	4b69      	ldr	r3, [pc, #420]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a68      	ldr	r2, [pc, #416]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062ce:	6093      	str	r3, [r2, #8]
 80062d0:	4b66      	ldr	r3, [pc, #408]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	4964      	ldr	r1, [pc, #400]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80062e6:	2301      	movs	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d017      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f6:	4b5d      	ldr	r3, [pc, #372]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006304:	4959      	ldr	r1, [pc, #356]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006314:	d101      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006316:	2301      	movs	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006322:	2301      	movs	r3, #1
 8006324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d017      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006332:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	494a      	ldr	r1, [pc, #296]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006350:	d101      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006352:	2301      	movs	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800635e:	2301      	movs	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800636e:	2301      	movs	r3, #1
 8006370:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 808b 	beq.w	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006380:	4b3a      	ldr	r3, [pc, #232]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	4a39      	ldr	r2, [pc, #228]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	6413      	str	r3, [r2, #64]	; 0x40
 800638c:	4b37      	ldr	r3, [pc, #220]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a34      	ldr	r2, [pc, #208]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800639e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a4:	f7fc fa6e 	bl	8002884 <HAL_GetTick>
 80063a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ac:	f7fc fa6a 	bl	8002884 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b64      	cmp	r3, #100	; 0x64
 80063b8:	d901      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e355      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80063be:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063ca:	4b28      	ldr	r3, [pc, #160]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d035      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d02e      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063f2:	4b1e      	ldr	r3, [pc, #120]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f6:	4a1d      	ldr	r2, [pc, #116]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063fe:	4b1b      	ldr	r3, [pc, #108]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006402:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800640a:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006410:	4b16      	ldr	r3, [pc, #88]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d114      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc fa32 	bl	8002884 <HAL_GetTick>
 8006420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006422:	e00a      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006424:	f7fc fa2e 	bl	8002884 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006432:	4293      	cmp	r3, r2
 8006434:	d901      	bls.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e317      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ee      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006452:	d111      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006462:	400b      	ands	r3, r1
 8006464:	4901      	ldr	r1, [pc, #4]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
 800646a:	e00b      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800646c:	40023800 	.word	0x40023800
 8006470:	40007000 	.word	0x40007000
 8006474:	0ffffcff 	.word	0x0ffffcff
 8006478:	4bb0      	ldr	r3, [pc, #704]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4aaf      	ldr	r2, [pc, #700]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800647e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006482:	6093      	str	r3, [r2, #8]
 8006484:	4bad      	ldr	r3, [pc, #692]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006490:	49aa      	ldr	r1, [pc, #680]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006492:	4313      	orrs	r3, r2
 8006494:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064a2:	4ba6      	ldr	r3, [pc, #664]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	4aa4      	ldr	r2, [pc, #656]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80064b2:	4ba2      	ldr	r3, [pc, #648]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	499f      	ldr	r1, [pc, #636]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064d0:	4b9a      	ldr	r3, [pc, #616]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064de:	4997      	ldr	r1, [pc, #604]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064f2:	4b92      	ldr	r3, [pc, #584]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006500:	498e      	ldr	r1, [pc, #568]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006514:	4b89      	ldr	r3, [pc, #548]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	4986      	ldr	r1, [pc, #536]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006536:	4b81      	ldr	r3, [pc, #516]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	497d      	ldr	r1, [pc, #500]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006558:	4b78      	ldr	r3, [pc, #480]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	4975      	ldr	r1, [pc, #468]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800657a:	4b70      	ldr	r3, [pc, #448]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006580:	f023 020c 	bic.w	r2, r3, #12
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	496c      	ldr	r1, [pc, #432]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800659c:	4b67      	ldr	r3, [pc, #412]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	4964      	ldr	r1, [pc, #400]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065be:	4b5f      	ldr	r3, [pc, #380]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065cc:	495b      	ldr	r1, [pc, #364]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065e0:	4b56      	ldr	r3, [pc, #344]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	4953      	ldr	r1, [pc, #332]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006602:	4b4e      	ldr	r3, [pc, #312]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	494a      	ldr	r1, [pc, #296]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006624:	4b45      	ldr	r3, [pc, #276]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	4942      	ldr	r1, [pc, #264]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006646:	4b3d      	ldr	r3, [pc, #244]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006654:	4939      	ldr	r1, [pc, #228]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006668:	4b34      	ldr	r3, [pc, #208]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	4931      	ldr	r1, [pc, #196]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800668a:	4b2c      	ldr	r3, [pc, #176]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006690:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006698:	4928      	ldr	r1, [pc, #160]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a8:	d101      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80066aa:	2301      	movs	r3, #1
 80066ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ca:	4b1c      	ldr	r3, [pc, #112]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d8:	4918      	ldr	r1, [pc, #96]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fc:	490f      	ldr	r1, [pc, #60]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d005      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006712:	f040 80d8 	bne.w	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800671c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fc f8af 	bl	8002884 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006728:	e00a      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800672a:	f7fc f8ab 	bl	8002884 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b64      	cmp	r3, #100	; 0x64
 8006736:	d903      	bls.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e196      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800673c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006740:	4b6c      	ldr	r3, [pc, #432]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ee      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d021      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d11d      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006760:	4b64      	ldr	r3, [pc, #400]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800676e:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006774:	0e1b      	lsrs	r3, r3, #24
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	019a      	lsls	r2, r3, #6
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	431a      	orrs	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	071b      	lsls	r3, r3, #28
 8006794:	4957      	ldr	r1, [pc, #348]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c6:	d129      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80067c8:	4b4a      	ldr	r3, [pc, #296]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067d6:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067dc:	0f1b      	lsrs	r3, r3, #28
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	019a      	lsls	r2, r3, #6
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	431a      	orrs	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	071b      	lsls	r3, r3, #28
 80067fc:	493d      	ldr	r1, [pc, #244]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006804:	4b3b      	ldr	r3, [pc, #236]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680a:	f023 021f 	bic.w	r2, r3, #31
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	3b01      	subs	r3, #1
 8006814:	4937      	ldr	r1, [pc, #220]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006828:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800682e:	0e1b      	lsrs	r3, r3, #24
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683c:	0f1b      	lsrs	r3, r3, #28
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	019a      	lsls	r2, r3, #6
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	431a      	orrs	r2, r3
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	431a      	orrs	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	071b      	lsls	r3, r3, #28
 800685c:	4925      	ldr	r1, [pc, #148]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d011      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	019a      	lsls	r2, r3, #6
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	061b      	lsls	r3, r3, #24
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	071b      	lsls	r3, r3, #28
 800688c:	4919      	ldr	r1, [pc, #100]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006894:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800689a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800689e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a0:	f7fb fff0 	bl	8002884 <HAL_GetTick>
 80068a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068a8:	f7fb ffec 	bl	8002884 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e0d7      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068ba:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	f040 80cd 	bne.w	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fb ffd3 	bl	8002884 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068e0:	e00a      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068e2:	f7fb ffcf 	bl	8002884 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b64      	cmp	r3, #100	; 0x64
 80068ee:	d903      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e0ba      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80068f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068f8:	4b5e      	ldr	r3, [pc, #376]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006904:	d0ed      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006922:	2b00      	cmp	r3, #0
 8006924:	d02e      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d12a      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800692e:	4b51      	ldr	r3, [pc, #324]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800693c:	4b4d      	ldr	r3, [pc, #308]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	019a      	lsls	r2, r3, #6
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	061b      	lsls	r3, r3, #24
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	071b      	lsls	r3, r3, #28
 8006962:	4944      	ldr	r1, [pc, #272]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800696a:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800696c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	3b01      	subs	r3, #1
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	493d      	ldr	r1, [pc, #244]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d022      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006998:	d11d      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800699a:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a0:	0e1b      	lsrs	r3, r3, #24
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069a8:	4b32      	ldr	r3, [pc, #200]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	0f1b      	lsrs	r3, r3, #28
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	019a      	lsls	r2, r3, #6
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	431a      	orrs	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	061b      	lsls	r3, r3, #24
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	071b      	lsls	r3, r3, #28
 80069ce:	4929      	ldr	r1, [pc, #164]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d028      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	0e1b      	lsrs	r3, r3, #24
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069f0:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	019a      	lsls	r2, r3, #6
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	061b      	lsls	r3, r3, #24
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	071b      	lsls	r3, r3, #28
 8006a16:	4917      	ldr	r1, [pc, #92]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006a1e:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4911      	ldr	r1, [pc, #68]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a0e      	ldr	r2, [pc, #56]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a40:	f7fb ff20 	bl	8002884 <HAL_GetTick>
 8006a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a48:	f7fb ff1c 	bl	8002884 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e007      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a66:	d1ef      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800

08006a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a96:	f040 8086 	bne.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006aa8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab0:	d03e      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab6:	d073      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d000      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006abc:	e074      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006abe:	4b84      	ldr	r3, [pc, #528]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006aca:	4b81      	ldr	r3, [pc, #516]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ad2:	4a80      	ldr	r2, [pc, #512]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e007      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006adc:	4b7c      	ldr	r3, [pc, #496]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae4:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006aec:	4b78      	ldr	r3, [pc, #480]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	0e1b      	lsrs	r3, r3, #24
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006afa:	4b75      	ldr	r3, [pc, #468]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b00:	099b      	lsrs	r3, r3, #6
 8006b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	fb02 f203 	mul.w	r2, r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006b14:	4b6e      	ldr	r3, [pc, #440]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]
        break;
 8006b2e:	e03b      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006b30:	4b67      	ldr	r3, [pc, #412]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d108      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b3c:	4b64      	ldr	r3, [pc, #400]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b44:	4a63      	ldr	r2, [pc, #396]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e007      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006b4e:	4b60      	ldr	r3, [pc, #384]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b56:	4a60      	ldr	r2, [pc, #384]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006b5e:	4b5c      	ldr	r3, [pc, #368]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b64:	0e1b      	lsrs	r3, r3, #24
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006b6c:	4b58      	ldr	r3, [pc, #352]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b72:	099b      	lsrs	r3, r3, #6
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	fb02 f203 	mul.w	r2, r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006b86:	4b52      	ldr	r3, [pc, #328]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	617b      	str	r3, [r7, #20]
        break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ba0:	4b4e      	ldr	r3, [pc, #312]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006ba2:	617b      	str	r3, [r7, #20]
        break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006ba6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bae:	f040 8086 	bne.w	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006bc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bce:	d073      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d000      	beq.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006bd4:	e074      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006bd6:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006be2:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bea:	4a3a      	ldr	r2, [pc, #232]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e007      	b.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006bf4:	4b36      	ldr	r3, [pc, #216]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bfc:	4a36      	ldr	r2, [pc, #216]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006c04:	4b32      	ldr	r3, [pc, #200]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	0e1b      	lsrs	r3, r3, #24
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006c12:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c18:	099b      	lsrs	r3, r3, #6
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	fb02 f203 	mul.w	r2, r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]
        break;
 8006c46:	e03b      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c48:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d108      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	e007      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6e:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006c84:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	fb02 f203 	mul.w	r2, r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
        break;
 8006cb6:	e003      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cb8:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006cba:	617b      	str	r3, [r7, #20]
        break;
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006cbe:	bf00      	nop

  return frequency;
 8006cc0:	697b      	ldr	r3, [r7, #20]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	00f42400 	.word	0x00f42400
 8006cd8:	017d7840 	.word	0x017d7840
 8006cdc:	00bb8000 	.word	0x00bb8000

08006ce0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e06b      	b.n	8006dca <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7f5b      	ldrb	r3, [r3, #29]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fb f974 	bl	8001ff0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	22ca      	movs	r2, #202	; 0xca
 8006d14:	625a      	str	r2, [r3, #36]	; 0x24
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2253      	movs	r2, #83	; 0x53
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb00 	bl	8007324 <RTC_EnterInitMode>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e046      	b.n	8006dca <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6899      	ldr	r1, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <HAL_RTC_Init+0xf4>)
 8006d48:	400b      	ands	r3, r1
 8006d4a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68d2      	ldr	r2, [r2, #12]
 8006d72:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6919      	ldr	r1, [r3, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	041a      	lsls	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d96:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0208 	bic.w	r2, r2, #8
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	ff8fffbf 	.word	0xff8fffbf

08006dd8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7f1b      	ldrb	r3, [r3, #28]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_RTC_SetTime+0x1c>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0a8      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d126      	bne.n	8006e54 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 faac 	bl	800737c <RTC_ByteToBcd2>
 8006e24:	4603      	mov	r3, r0
 8006e26:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 faa5 	bl	800737c <RTC_ByteToBcd2>
 8006e32:	4603      	mov	r3, r0
 8006e34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e36:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fa9d 	bl	800737c <RTC_ByteToBcd2>
 8006e42:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006e44:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7b1b      	ldrb	r3, [r3, #12]
 8006e4c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	e018      	b.n	8006e86 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e74:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006e7a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	22ca      	movs	r2, #202	; 0xca
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2253      	movs	r2, #83	; 0x53
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fa44 	bl	8007324 <RTC_EnterInitMode>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	22ff      	movs	r2, #255	; 0xff
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2204      	movs	r2, #4
 8006eae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e045      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <HAL_RTC_SetTime+0x178>)
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ed4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d111      	bne.n	8006f30 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f9e1 	bl	80072d4 <HAL_RTC_WaitForSynchro>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	22ff      	movs	r2, #255	; 0xff
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2204      	movs	r2, #4
 8006f24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e00a      	b.n	8006f46 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006f44:	2300      	movs	r3, #0
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd90      	pop	{r4, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	007f7f7f 	.word	0x007f7f7f

08006f54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	7f1b      	ldrb	r3, [r3, #28]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_RTC_SetDate+0x1c>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e092      	b.n	8007096 <HAL_RTC_SetDate+0x142>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10e      	bne.n	8006fa0 <HAL_RTC_SetDate+0x4c>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	f023 0310 	bic.w	r3, r3, #16
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	330a      	adds	r3, #10
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11c      	bne.n	8006fe0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f9e6 	bl	800737c <RTC_ByteToBcd2>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f9df 	bl	800737c <RTC_ByteToBcd2>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006fc2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f9d7 	bl	800737c <RTC_ByteToBcd2>
 8006fce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006fd0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e00e      	b.n	8006ffe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	78db      	ldrb	r3, [r3, #3]
 8006fe4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006fec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006ff2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	22ca      	movs	r2, #202	; 0xca
 8007004:	625a      	str	r2, [r3, #36]	; 0x24
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2253      	movs	r2, #83	; 0x53
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f988 	bl	8007324 <RTC_EnterInitMode>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	22ff      	movs	r2, #255	; 0xff
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2204      	movs	r2, #4
 8007026:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e031      	b.n	8007096 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	6979      	ldr	r1, [r7, #20]
 8007038:	4b19      	ldr	r3, [pc, #100]	; (80070a0 <HAL_RTC_SetDate+0x14c>)
 800703a:	400b      	ands	r3, r1
 800703c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800704c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d111      	bne.n	8007080 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f939 	bl	80072d4 <HAL_RTC_WaitForSynchro>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2204      	movs	r2, #4
 8007074:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e00a      	b.n	8007096 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007094:	2300      	movs	r3, #0
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}
 800709e:	bf00      	nop
 80070a0:	00ffff3f 	.word	0x00ffff3f

080070a4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b089      	sub	sp, #36	; 0x24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	7f1b      	ldrb	r3, [r3, #28]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_RTC_SetAlarm+0x24>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e101      	b.n	80072cc <HAL_RTC_SetAlarm+0x228>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2202      	movs	r2, #2
 80070d2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d137      	bne.n	800714a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f942 	bl	800737c <RTC_ByteToBcd2>
 80070f8:	4603      	mov	r3, r0
 80070fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f93b 	bl	800737c <RTC_ByteToBcd2>
 8007106:	4603      	mov	r3, r0
 8007108:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800710a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	789b      	ldrb	r3, [r3, #2]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f933 	bl	800737c <RTC_ByteToBcd2>
 8007116:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007118:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	7b1b      	ldrb	r3, [r3, #12]
 8007120:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007122:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800712c:	4618      	mov	r0, r3
 800712e:	f000 f925 	bl	800737c <RTC_ByteToBcd2>
 8007132:	4603      	mov	r3, r0
 8007134:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007136:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800713e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007144:	4313      	orrs	r3, r2
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e023      	b.n	8007192 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	785b      	ldrb	r3, [r3, #1]
 8007168:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800716a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007170:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	7b1b      	ldrb	r3, [r3, #12]
 8007176:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007178:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007180:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007182:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007188:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800718e:	4313      	orrs	r3, r2
 8007190:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	22ca      	movs	r2, #202	; 0xca
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2253      	movs	r2, #83	; 0x53
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b6:	d13f      	bne.n	8007238 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071d8:	f7fb fb54 	bl	8002884 <HAL_GetTick>
 80071dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80071de:	e013      	b.n	8007208 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80071e0:	f7fb fb50 	bl	8002884 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ee:	d90b      	bls.n	8007208 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2203      	movs	r2, #3
 80071fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e061      	b.n	80072cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0e4      	beq.n	80071e0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	e03e      	b.n	80072b6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007246:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007256:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007258:	f7fb fb14 	bl	8002884 <HAL_GetTick>
 800725c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800725e:	e013      	b.n	8007288 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007260:	f7fb fb10 	bl	8002884 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726e:	d90b      	bls.n	8007288 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2203      	movs	r2, #3
 800727c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e021      	b.n	80072cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0e4      	beq.n	8007260 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	22ff      	movs	r2, #255	; 0xff
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3724      	adds	r7, #36	; 0x24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd90      	pop	{r4, r7, pc}

080072d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072f0:	f7fb fac8 	bl	8002884 <HAL_GetTick>
 80072f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80072f6:	e009      	b.n	800730c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80072f8:	f7fb fac4 	bl	8002884 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007306:	d901      	bls.n	800730c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e007      	b.n	800731c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0ee      	beq.n	80072f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d119      	bne.n	8007372 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007348:	f7fb fa9c 	bl	8002884 <HAL_GetTick>
 800734c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800734e:	e009      	b.n	8007364 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007350:	f7fb fa98 	bl	8002884 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800735e:	d901      	bls.n	8007364 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e007      	b.n	8007374 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0ee      	beq.n	8007350 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800738a:	e005      	b.n	8007398 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	3b0a      	subs	r3, #10
 8007396:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	2b09      	cmp	r3, #9
 800739c:	d8f6      	bhi.n	800738c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	b2db      	uxtb	r3, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	7f1b      	ldrb	r3, [r3, #28]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e03e      	b.n	8007452 <HAL_RTCEx_SetTimeStamp+0x9a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2202      	movs	r2, #2
 80073de:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	4b1e      	ldr	r3, [pc, #120]	; (8007460 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	22ca      	movs	r2, #202	; 0xca
 80073fa:	625a      	str	r2, [r3, #36]	; 0x24
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2253      	movs	r2, #83	; 0x53
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0206 	bic.w	r2, r2, #6
 8007412:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	430a      	orrs	r2, r1
 8007422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	22ff      	movs	r2, #255	; 0xff
 8007442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	fffff7f7 	.word	0xfffff7f7

08007464 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e149      	b.n	8007716 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fb f890 	bl	80025bc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f94f 	bl	8007748 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d007      	beq.n	80074c2 <HAL_SAI_Init+0x5e>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d302      	bcc.n	80074bc <HAL_SAI_Init+0x58>
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d006      	beq.n	80074c8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80074ba:	e008      	b.n	80074ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]
      break;
 80074c0:	e005      	b.n	80074ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80074c2:	2310      	movs	r3, #16
 80074c4:	61fb      	str	r3, [r7, #28]
      break;
 80074c6:	e002      	b.n	80074ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80074c8:	2320      	movs	r3, #32
 80074ca:	61fb      	str	r3, [r7, #28]
      break;
 80074cc:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d81d      	bhi.n	8007512 <HAL_SAI_Init+0xae>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_SAI_Init+0x78>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074f3 	.word	0x080074f3
 80074e4:	080074fb 	.word	0x080074fb
 80074e8:	08007503 	.word	0x08007503
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
      }
      break;
 80074f0:	e010      	b.n	8007514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80074f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f6:	617b      	str	r3, [r7, #20]
      }
      break;
 80074f8:	e00c      	b.n	8007514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80074fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074fe:	617b      	str	r3, [r7, #20]
      }
      break;
 8007500:	e008      	b.n	8007514 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007506:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f043 0301 	orr.w	r3, r3, #1
 800750e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007510:	e000      	b.n	8007514 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007512:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a81      	ldr	r2, [pc, #516]	; (8007720 <HAL_SAI_Init+0x2bc>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_SAI_Init+0xc4>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a80      	ldr	r2, [pc, #512]	; (8007724 <HAL_SAI_Init+0x2c0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d103      	bne.n	8007530 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007528:	4a7f      	ldr	r2, [pc, #508]	; (8007728 <HAL_SAI_Init+0x2c4>)
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	e002      	b.n	8007536 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007530:	4a7e      	ldr	r2, [pc, #504]	; (800772c <HAL_SAI_Init+0x2c8>)
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d043      	beq.n	80075c6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a76      	ldr	r2, [pc, #472]	; (8007720 <HAL_SAI_Init+0x2bc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_SAI_Init+0xf2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a74      	ldr	r2, [pc, #464]	; (8007724 <HAL_SAI_Init+0x2c0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d104      	bne.n	8007560 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007556:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800755a:	f7ff fa8d 	bl	8006a78 <HAL_RCCEx_GetPeriphCLKFreq>
 800755e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a72      	ldr	r2, [pc, #456]	; (8007730 <HAL_SAI_Init+0x2cc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_SAI_Init+0x110>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a71      	ldr	r2, [pc, #452]	; (8007734 <HAL_SAI_Init+0x2d0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d104      	bne.n	800757e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007574:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007578:	f7ff fa7e 	bl	8006a78 <HAL_RCCEx_GetPeriphCLKFreq>
 800757c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	461a      	mov	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	025b      	lsls	r3, r3, #9
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a67      	ldr	r2, [pc, #412]	; (8007738 <HAL_SAI_Init+0x2d4>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	08da      	lsrs	r2, r3, #3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	4b64      	ldr	r3, [pc, #400]	; (8007738 <HAL_SAI_Init+0x2d4>)
 80075a8:	fba3 2301 	umull	r2, r3, r3, r1
 80075ac:	08da      	lsrs	r2, r3, #3
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	1aca      	subs	r2, r1, r3
 80075b8:	2a08      	cmp	r2, #8
 80075ba:	d904      	bls.n	80075c6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_SAI_Init+0x172>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d109      	bne.n	80075ea <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_SAI_Init+0x17e>
 80075de:	2300      	movs	r3, #0
 80075e0:	e001      	b.n	80075e6 <HAL_SAI_Init+0x182>
 80075e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e008      	b.n	80075fc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_SAI_Init+0x194>
 80075f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075f6:	e000      	b.n	80075fa <HAL_SAI_Init+0x196>
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b4d      	ldr	r3, [pc, #308]	; (800773c <HAL_SAI_Init+0x2d8>)
 8007608:	400b      	ands	r3, r1
 800760a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007620:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	431a      	orrs	r2, r3
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007634:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007640:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	051b      	lsls	r3, r3, #20
 8007648:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6859      	ldr	r1, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b38      	ldr	r3, [pc, #224]	; (8007740 <HAL_SAI_Init+0x2dc>)
 800765e:	400b      	ands	r3, r1
 8007660:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6859      	ldr	r1, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b2e      	ldr	r3, [pc, #184]	; (8007744 <HAL_SAI_Init+0x2e0>)
 800768c:	400b      	ands	r3, r1
 800768e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6899      	ldr	r1, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80076a0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80076a6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80076ac:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	3b01      	subs	r3, #1
 80076b4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80076b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68d9      	ldr	r1, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	f24f 0320 	movw	r3, #61472	; 0xf020
 80076ce:	400b      	ands	r3, r1
 80076d0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68d9      	ldr	r1, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ee:	3b01      	subs	r3, #1
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40015804 	.word	0x40015804
 8007724:	40015824 	.word	0x40015824
 8007728:	40015800 	.word	0x40015800
 800772c:	40015c00 	.word	0x40015c00
 8007730:	40015c04 	.word	0x40015c04
 8007734:	40015c24 	.word	0x40015c24
 8007738:	cccccccd 	.word	0xcccccccd
 800773c:	ff05c010 	.word	0xff05c010
 8007740:	ffff1ff0 	.word	0xffff1ff0
 8007744:	fff88000 	.word	0xfff88000

08007748 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007748:	b490      	push	{r4, r7}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007750:	4b16      	ldr	r3, [pc, #88]	; (80077ac <SAI_Disable+0x64>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a16      	ldr	r2, [pc, #88]	; (80077b0 <SAI_Disable+0x68>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	0b1b      	lsrs	r3, r3, #12
 800775c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007770:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007772:	4623      	mov	r3, r4
 8007774:	1e5c      	subs	r4, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007780:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	73fb      	strb	r3, [r7, #15]
      break;
 800778e:	e006      	b.n	800779e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e9      	bne.n	8007772 <SAI_Disable+0x2a>

  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc90      	pop	{r4, r7}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000000 	.word	0x20000000
 80077b0:	95cbec1b 	.word	0x95cbec1b

080077b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e025      	b.n	8007814 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fa fee3 	bl	80025a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f001 fd0d 	bl	8009214 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	461a      	mov	r2, r3
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	f001 fd77 	bl	80092f8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e04c      	b.n	80078c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fa fbee 	bl	8002024 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0203 	bic.w	r2, r2, #3
 800785e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <HAL_SPDIFRX_Init+0xb4>)
 800786c:	4013      	ands	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007878:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800787e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007884:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800788a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007890:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007896:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800789c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80078a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80078a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	fff88407 	.word	0xfff88407

080078d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e01d      	b.n	8007922 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fa fbd4 	bl	80020a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 fb78 	bl	8008008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <HAL_TIM_Base_Start_IT+0x50>)
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b06      	cmp	r3, #6
 8007954:	d00b      	beq.n	800796e <HAL_TIM_Base_Start_IT+0x42>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795c:	d007      	beq.n	800796e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0201 	orr.w	r2, r2, #1
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	00010007 	.word	0x00010007

08007980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e01d      	b.n	80079ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fa fbec 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f000 fb22 	bl	8008008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d122      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d11b      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f06f 0202 	mvn.w	r2, #2
 8007a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fad7 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007a1e:	e005      	b.n	8007a2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fac9 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fada 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d122      	bne.n	8007a86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d11b      	bne.n	8007a86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0204 	mvn.w	r2, #4
 8007a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 faad 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007a72:	e005      	b.n	8007a80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fa9f 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fab0 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d122      	bne.n	8007ada <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d11b      	bne.n	8007ada <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f06f 0208 	mvn.w	r2, #8
 8007aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa83 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007ac6:	e005      	b.n	8007ad4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fa75 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa86 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d122      	bne.n	8007b2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d11b      	bne.n	8007b2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f06f 0210 	mvn.w	r2, #16
 8007afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2208      	movs	r2, #8
 8007b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fa59 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007b1a:	e005      	b.n	8007b28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa4b 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa5c 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10e      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d107      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f06f 0201 	mvn.w	r2, #1
 8007b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7f9 fedb 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d10e      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d107      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 feef 	bl	8008964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b94:	d10e      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba0:	2b80      	cmp	r3, #128	; 0x80
 8007ba2:	d107      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fee2 	bl	8008978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b40      	cmp	r3, #64	; 0x40
 8007bc0:	d10e      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d107      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa0a 	bl	8007ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d10e      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d107      	bne.n	8007c0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0220 	mvn.w	r2, #32
 8007c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fea2 	bl	8008950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e105      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x226>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b14      	cmp	r3, #20
 8007c42:	f200 80f0 	bhi.w	8007e26 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007ca1 	.word	0x08007ca1
 8007c50:	08007e27 	.word	0x08007e27
 8007c54:	08007e27 	.word	0x08007e27
 8007c58:	08007e27 	.word	0x08007e27
 8007c5c:	08007ce1 	.word	0x08007ce1
 8007c60:	08007e27 	.word	0x08007e27
 8007c64:	08007e27 	.word	0x08007e27
 8007c68:	08007e27 	.word	0x08007e27
 8007c6c:	08007d23 	.word	0x08007d23
 8007c70:	08007e27 	.word	0x08007e27
 8007c74:	08007e27 	.word	0x08007e27
 8007c78:	08007e27 	.word	0x08007e27
 8007c7c:	08007d63 	.word	0x08007d63
 8007c80:	08007e27 	.word	0x08007e27
 8007c84:	08007e27 	.word	0x08007e27
 8007c88:	08007e27 	.word	0x08007e27
 8007c8c:	08007da5 	.word	0x08007da5
 8007c90:	08007e27 	.word	0x08007e27
 8007c94:	08007e27 	.word	0x08007e27
 8007c98:	08007e27 	.word	0x08007e27
 8007c9c:	08007de5 	.word	0x08007de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fa4e 	bl	8008148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0208 	orr.w	r2, r2, #8
 8007cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6999      	ldr	r1, [r3, #24]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	619a      	str	r2, [r3, #24]
      break;
 8007cde:	e0a3      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 faa0 	bl	800822c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6999      	ldr	r1, [r3, #24]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	619a      	str	r2, [r3, #24]
      break;
 8007d20:	e082      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 faf7 	bl	800831c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0208 	orr.w	r2, r2, #8
 8007d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0204 	bic.w	r2, r2, #4
 8007d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69d9      	ldr	r1, [r3, #28]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	61da      	str	r2, [r3, #28]
      break;
 8007d60:	e062      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fb4d 	bl	8008408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69d9      	ldr	r1, [r3, #28]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	021a      	lsls	r2, r3, #8
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	61da      	str	r2, [r3, #28]
      break;
 8007da2:	e041      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fb84 	bl	80084b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0208 	orr.w	r2, r2, #8
 8007dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0204 	bic.w	r2, r2, #4
 8007dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	691a      	ldr	r2, [r3, #16]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007de2:	e021      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fbb6 	bl	800855c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	021a      	lsls	r2, r3, #8
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e24:	e000      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007e26:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop

08007e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIM_ConfigClockSource+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e0a6      	b.n	8007faa <HAL_TIM_ConfigClockSource+0x166>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4b4f      	ldr	r3, [pc, #316]	; (8007fb4 <HAL_TIM_ConfigClockSource+0x170>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	d067      	beq.n	8007f64 <HAL_TIM_ConfigClockSource+0x120>
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d80b      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x6c>
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d073      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x140>
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d802      	bhi.n	8007ea6 <HAL_TIM_ConfigClockSource+0x62>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d06f      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ea4:	e078      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d06c      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x140>
 8007eaa:	2b30      	cmp	r3, #48	; 0x30
 8007eac:	d06a      	beq.n	8007f84 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007eae:	e073      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007eb0:	2b70      	cmp	r3, #112	; 0x70
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_TIM_ConfigClockSource+0x8c>
 8007eb4:	2b70      	cmp	r3, #112	; 0x70
 8007eb6:	d804      	bhi.n	8007ec2 <HAL_TIM_ConfigClockSource+0x7e>
 8007eb8:	2b50      	cmp	r3, #80	; 0x50
 8007eba:	d033      	beq.n	8007f24 <HAL_TIM_ConfigClockSource+0xe0>
 8007ebc:	2b60      	cmp	r3, #96	; 0x60
 8007ebe:	d041      	beq.n	8007f44 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007ec0:	e06a      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d066      	beq.n	8007f96 <HAL_TIM_ConfigClockSource+0x152>
 8007ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ecc:	d017      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007ece:	e063      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6899      	ldr	r1, [r3, #8]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f000 fc0a 	bl	80086f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ef2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	609a      	str	r2, [r3, #8]
      break;
 8007efc:	e04c      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6899      	ldr	r1, [r3, #8]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f000 fbf3 	bl	80086f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f20:	609a      	str	r2, [r3, #8]
      break;
 8007f22:	e039      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6859      	ldr	r1, [r3, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f000 fb67 	bl	8008604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2150      	movs	r1, #80	; 0x50
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fbc0 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8007f42:	e029      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	6859      	ldr	r1, [r3, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	461a      	mov	r2, r3
 8007f52:	f000 fb86 	bl	8008662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2160      	movs	r1, #96	; 0x60
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fbb0 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8007f62:	e019      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	461a      	mov	r2, r3
 8007f72:	f000 fb47 	bl	8008604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2140      	movs	r1, #64	; 0x40
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fba0 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8007f82:	e009      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f000 fb97 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8007f94:	e000      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	fffeff88 	.word	0xfffeff88

08007fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a40      	ldr	r2, [pc, #256]	; (800811c <TIM_Base_SetConfig+0x114>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008026:	d00f      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a3d      	ldr	r2, [pc, #244]	; (8008120 <TIM_Base_SetConfig+0x118>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00b      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a3c      	ldr	r2, [pc, #240]	; (8008124 <TIM_Base_SetConfig+0x11c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d007      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a3b      	ldr	r2, [pc, #236]	; (8008128 <TIM_Base_SetConfig+0x120>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a3a      	ldr	r2, [pc, #232]	; (800812c <TIM_Base_SetConfig+0x124>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d108      	bne.n	800805a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a2f      	ldr	r2, [pc, #188]	; (800811c <TIM_Base_SetConfig+0x114>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d02b      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008068:	d027      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <TIM_Base_SetConfig+0x118>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d023      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2b      	ldr	r2, [pc, #172]	; (8008124 <TIM_Base_SetConfig+0x11c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01f      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <TIM_Base_SetConfig+0x120>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01b      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a29      	ldr	r2, [pc, #164]	; (800812c <TIM_Base_SetConfig+0x124>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d017      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a28      	ldr	r2, [pc, #160]	; (8008130 <TIM_Base_SetConfig+0x128>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a27      	ldr	r2, [pc, #156]	; (8008134 <TIM_Base_SetConfig+0x12c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00f      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a26      	ldr	r2, [pc, #152]	; (8008138 <TIM_Base_SetConfig+0x130>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a25      	ldr	r2, [pc, #148]	; (800813c <TIM_Base_SetConfig+0x134>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a24      	ldr	r2, [pc, #144]	; (8008140 <TIM_Base_SetConfig+0x138>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a23      	ldr	r2, [pc, #140]	; (8008144 <TIM_Base_SetConfig+0x13c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a0a      	ldr	r2, [pc, #40]	; (800811c <TIM_Base_SetConfig+0x114>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0xf8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a0c      	ldr	r2, [pc, #48]	; (800812c <TIM_Base_SetConfig+0x124>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d103      	bne.n	8008108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	615a      	str	r2, [r3, #20]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	40010000 	.word	0x40010000
 8008120:	40000400 	.word	0x40000400
 8008124:	40000800 	.word	0x40000800
 8008128:	40000c00 	.word	0x40000c00
 800812c:	40010400 	.word	0x40010400
 8008130:	40014000 	.word	0x40014000
 8008134:	40014400 	.word	0x40014400
 8008138:	40014800 	.word	0x40014800
 800813c:	40001800 	.word	0x40001800
 8008140:	40001c00 	.word	0x40001c00
 8008144:	40002000 	.word	0x40002000

08008148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4b2b      	ldr	r3, [pc, #172]	; (8008220 <TIM_OC1_SetConfig+0xd8>)
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 0302 	bic.w	r3, r3, #2
 8008190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a21      	ldr	r2, [pc, #132]	; (8008224 <TIM_OC1_SetConfig+0xdc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_OC1_SetConfig+0x64>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a20      	ldr	r2, [pc, #128]	; (8008228 <TIM_OC1_SetConfig+0xe0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d10c      	bne.n	80081c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f023 0308 	bic.w	r3, r3, #8
 80081b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f023 0304 	bic.w	r3, r3, #4
 80081c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <TIM_OC1_SetConfig+0xdc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC1_SetConfig+0x8e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a15      	ldr	r2, [pc, #84]	; (8008228 <TIM_OC1_SetConfig+0xe0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d111      	bne.n	80081fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	fffeff8f 	.word	0xfffeff8f
 8008224:	40010000 	.word	0x40010000
 8008228:	40010400 	.word	0x40010400

0800822c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f023 0210 	bic.w	r2, r3, #16
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4b2e      	ldr	r3, [pc, #184]	; (8008310 <TIM_OC2_SetConfig+0xe4>)
 8008258:	4013      	ands	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f023 0320 	bic.w	r3, r3, #32
 8008276:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	4313      	orrs	r3, r2
 8008282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a23      	ldr	r2, [pc, #140]	; (8008314 <TIM_OC2_SetConfig+0xe8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC2_SetConfig+0x68>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a22      	ldr	r2, [pc, #136]	; (8008318 <TIM_OC2_SetConfig+0xec>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d10d      	bne.n	80082b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800829a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a18      	ldr	r2, [pc, #96]	; (8008314 <TIM_OC2_SetConfig+0xe8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d003      	beq.n	80082c0 <TIM_OC2_SetConfig+0x94>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <TIM_OC2_SetConfig+0xec>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d113      	bne.n	80082e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	4313      	orrs	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	feff8fff 	.word	0xfeff8fff
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4b2d      	ldr	r3, [pc, #180]	; (80083fc <TIM_OC3_SetConfig+0xe0>)
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a22      	ldr	r2, [pc, #136]	; (8008400 <TIM_OC3_SetConfig+0xe4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d003      	beq.n	8008382 <TIM_OC3_SetConfig+0x66>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a21      	ldr	r2, [pc, #132]	; (8008404 <TIM_OC3_SetConfig+0xe8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10d      	bne.n	800839e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800839c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a17      	ldr	r2, [pc, #92]	; (8008400 <TIM_OC3_SetConfig+0xe4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d003      	beq.n	80083ae <TIM_OC3_SetConfig+0x92>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a16      	ldr	r2, [pc, #88]	; (8008404 <TIM_OC3_SetConfig+0xe8>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d113      	bne.n	80083d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	fffeff8f 	.word	0xfffeff8f
 8008400:	40010000 	.word	0x40010000
 8008404:	40010400 	.word	0x40010400

08008408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <TIM_OC4_SetConfig+0xa4>)
 8008434:	4013      	ands	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800843e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	021b      	lsls	r3, r3, #8
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	031b      	lsls	r3, r3, #12
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <TIM_OC4_SetConfig+0xa8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_OC4_SetConfig+0x68>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <TIM_OC4_SetConfig+0xac>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d109      	bne.n	8008484 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	019b      	lsls	r3, r3, #6
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	4313      	orrs	r3, r2
 8008482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	feff8fff 	.word	0xfeff8fff
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40010400 	.word	0x40010400

080084b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <TIM_OC5_SetConfig+0x98>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a12      	ldr	r2, [pc, #72]	; (8008554 <TIM_OC5_SetConfig+0x9c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_OC5_SetConfig+0x5e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a11      	ldr	r2, [pc, #68]	; (8008558 <TIM_OC5_SetConfig+0xa0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d109      	bne.n	800852a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800851c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	fffeff8f 	.word	0xfffeff8f
 8008554:	40010000 	.word	0x40010000
 8008558:	40010400 	.word	0x40010400

0800855c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4b1c      	ldr	r3, [pc, #112]	; (80085f8 <TIM_OC6_SetConfig+0x9c>)
 8008588:	4013      	ands	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	021b      	lsls	r3, r3, #8
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800859e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	051b      	lsls	r3, r3, #20
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a13      	ldr	r2, [pc, #76]	; (80085fc <TIM_OC6_SetConfig+0xa0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC6_SetConfig+0x60>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a12      	ldr	r2, [pc, #72]	; (8008600 <TIM_OC6_SetConfig+0xa4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d109      	bne.n	80085d0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	621a      	str	r2, [r3, #32]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	feff8fff 	.word	0xfeff8fff
 80085fc:	40010000 	.word	0x40010000
 8008600:	40010400 	.word	0x40010400

08008604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 030a 	bic.w	r3, r3, #10
 8008640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008662:	b480      	push	{r7}
 8008664:	b087      	sub	sp, #28
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0210 	bic.w	r2, r3, #16
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800869e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	f043 0307 	orr.w	r3, r3, #7
 80086e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	609a      	str	r2, [r3, #8]
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	021a      	lsls	r2, r3, #8
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	431a      	orrs	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4313      	orrs	r3, r2
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	609a      	str	r2, [r3, #8]
}
 800872c:	bf00      	nop
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e06d      	b.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a30      	ldr	r2, [pc, #192]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a2f      	ldr	r2, [pc, #188]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800878a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a20      	ldr	r2, [pc, #128]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c2:	d01d      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1c      	ldr	r2, [pc, #112]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1a      	ldr	r2, [pc, #104]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a15      	ldr	r2, [pc, #84]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a16      	ldr	r2, [pc, #88]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a15      	ldr	r2, [pc, #84]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10c      	bne.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	4313      	orrs	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	40014000 	.word	0x40014000
 8008850:	40001800 	.word	0x40001800

08008854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800886c:	2302      	movs	r3, #2
 800886e:	e065      	b.n	800893c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a16      	ldr	r2, [pc, #88]	; (8008948 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a14      	ldr	r2, [pc, #80]	; (800894c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d115      	bne.n	800892a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	051b      	lsls	r3, r3, #20
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	40010000 	.word	0x40010000
 800894c:	40010400 	.word	0x40010400

08008950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e040      	b.n	8008a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7f9 fcd6 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2224      	movs	r2, #36	; 0x24
 80089b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0201 	bic.w	r2, r2, #1
 80089c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f82c 	bl	8008a28 <UART_SetConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e022      	b.n	8008a20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 faca 	bl	8008f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fb51 	bl	80090c0 <UART_CheckIdleState>
 8008a1e:	4603      	mov	r3, r0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4bb1      	ldr	r3, [pc, #708]	; (8008d1c <UART_SetConfig+0x2f4>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	6939      	ldr	r1, [r7, #16]
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a9f      	ldr	r2, [pc, #636]	; (8008d20 <UART_SetConfig+0x2f8>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d121      	bne.n	8008aec <UART_SetConfig+0xc4>
 8008aa8:	4b9e      	ldr	r3, [pc, #632]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d816      	bhi.n	8008ae4 <UART_SetConfig+0xbc>
 8008ab6:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <UART_SetConfig+0x94>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008ad3 	.word	0x08008ad3
 8008ac8:	08008adf 	.word	0x08008adf
 8008acc:	2301      	movs	r3, #1
 8008ace:	77fb      	strb	r3, [r7, #31]
 8008ad0:	e151      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	77fb      	strb	r3, [r7, #31]
 8008ad6:	e14e      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ad8:	2304      	movs	r3, #4
 8008ada:	77fb      	strb	r3, [r7, #31]
 8008adc:	e14b      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ade:	2308      	movs	r3, #8
 8008ae0:	77fb      	strb	r3, [r7, #31]
 8008ae2:	e148      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	77fb      	strb	r3, [r7, #31]
 8008ae8:	bf00      	nop
 8008aea:	e144      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a8d      	ldr	r2, [pc, #564]	; (8008d28 <UART_SetConfig+0x300>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d134      	bne.n	8008b60 <UART_SetConfig+0x138>
 8008af6:	4b8b      	ldr	r3, [pc, #556]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afc:	f003 030c 	and.w	r3, r3, #12
 8008b00:	2b0c      	cmp	r3, #12
 8008b02:	d829      	bhi.n	8008b58 <UART_SetConfig+0x130>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <UART_SetConfig+0xe4>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b41 	.word	0x08008b41
 8008b10:	08008b59 	.word	0x08008b59
 8008b14:	08008b59 	.word	0x08008b59
 8008b18:	08008b59 	.word	0x08008b59
 8008b1c:	08008b4d 	.word	0x08008b4d
 8008b20:	08008b59 	.word	0x08008b59
 8008b24:	08008b59 	.word	0x08008b59
 8008b28:	08008b59 	.word	0x08008b59
 8008b2c:	08008b47 	.word	0x08008b47
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b59 	.word	0x08008b59
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008b53 	.word	0x08008b53
 8008b40:	2300      	movs	r3, #0
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e117      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b46:	2302      	movs	r3, #2
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e114      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e111      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b52:	2308      	movs	r3, #8
 8008b54:	77fb      	strb	r3, [r7, #31]
 8008b56:	e10e      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	77fb      	strb	r3, [r7, #31]
 8008b5c:	bf00      	nop
 8008b5e:	e10a      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a71      	ldr	r2, [pc, #452]	; (8008d2c <UART_SetConfig+0x304>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d120      	bne.n	8008bac <UART_SetConfig+0x184>
 8008b6a:	4b6e      	ldr	r3, [pc, #440]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d00f      	beq.n	8008b98 <UART_SetConfig+0x170>
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d802      	bhi.n	8008b82 <UART_SetConfig+0x15a>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <UART_SetConfig+0x164>
 8008b80:	e010      	b.n	8008ba4 <UART_SetConfig+0x17c>
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	d005      	beq.n	8008b92 <UART_SetConfig+0x16a>
 8008b86:	2b30      	cmp	r3, #48	; 0x30
 8008b88:	d009      	beq.n	8008b9e <UART_SetConfig+0x176>
 8008b8a:	e00b      	b.n	8008ba4 <UART_SetConfig+0x17c>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	e0f1      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b92:	2302      	movs	r3, #2
 8008b94:	77fb      	strb	r3, [r7, #31]
 8008b96:	e0ee      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	77fb      	strb	r3, [r7, #31]
 8008b9c:	e0eb      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	77fb      	strb	r3, [r7, #31]
 8008ba2:	e0e8      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	bf00      	nop
 8008baa:	e0e4      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a5f      	ldr	r2, [pc, #380]	; (8008d30 <UART_SetConfig+0x308>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d120      	bne.n	8008bf8 <UART_SetConfig+0x1d0>
 8008bb6:	4b5b      	ldr	r3, [pc, #364]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bc0:	2b40      	cmp	r3, #64	; 0x40
 8008bc2:	d00f      	beq.n	8008be4 <UART_SetConfig+0x1bc>
 8008bc4:	2b40      	cmp	r3, #64	; 0x40
 8008bc6:	d802      	bhi.n	8008bce <UART_SetConfig+0x1a6>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <UART_SetConfig+0x1b0>
 8008bcc:	e010      	b.n	8008bf0 <UART_SetConfig+0x1c8>
 8008bce:	2b80      	cmp	r3, #128	; 0x80
 8008bd0:	d005      	beq.n	8008bde <UART_SetConfig+0x1b6>
 8008bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd4:	d009      	beq.n	8008bea <UART_SetConfig+0x1c2>
 8008bd6:	e00b      	b.n	8008bf0 <UART_SetConfig+0x1c8>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	e0cb      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008bde:	2302      	movs	r3, #2
 8008be0:	77fb      	strb	r3, [r7, #31]
 8008be2:	e0c8      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008be4:	2304      	movs	r3, #4
 8008be6:	77fb      	strb	r3, [r7, #31]
 8008be8:	e0c5      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008bea:	2308      	movs	r3, #8
 8008bec:	77fb      	strb	r3, [r7, #31]
 8008bee:	e0c2      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	bf00      	nop
 8008bf6:	e0be      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a4d      	ldr	r2, [pc, #308]	; (8008d34 <UART_SetConfig+0x30c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d124      	bne.n	8008c4c <UART_SetConfig+0x224>
 8008c02:	4b48      	ldr	r3, [pc, #288]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c10:	d012      	beq.n	8008c38 <UART_SetConfig+0x210>
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d802      	bhi.n	8008c1e <UART_SetConfig+0x1f6>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <UART_SetConfig+0x204>
 8008c1c:	e012      	b.n	8008c44 <UART_SetConfig+0x21c>
 8008c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c22:	d006      	beq.n	8008c32 <UART_SetConfig+0x20a>
 8008c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c28:	d009      	beq.n	8008c3e <UART_SetConfig+0x216>
 8008c2a:	e00b      	b.n	8008c44 <UART_SetConfig+0x21c>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e0a1      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c32:	2302      	movs	r3, #2
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e09e      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e09b      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e098      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c44:	2310      	movs	r3, #16
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	bf00      	nop
 8008c4a:	e094      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a39      	ldr	r2, [pc, #228]	; (8008d38 <UART_SetConfig+0x310>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d124      	bne.n	8008ca0 <UART_SetConfig+0x278>
 8008c56:	4b33      	ldr	r3, [pc, #204]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c64:	d012      	beq.n	8008c8c <UART_SetConfig+0x264>
 8008c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c6a:	d802      	bhi.n	8008c72 <UART_SetConfig+0x24a>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <UART_SetConfig+0x258>
 8008c70:	e012      	b.n	8008c98 <UART_SetConfig+0x270>
 8008c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c76:	d006      	beq.n	8008c86 <UART_SetConfig+0x25e>
 8008c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c7c:	d009      	beq.n	8008c92 <UART_SetConfig+0x26a>
 8008c7e:	e00b      	b.n	8008c98 <UART_SetConfig+0x270>
 8008c80:	2301      	movs	r3, #1
 8008c82:	77fb      	strb	r3, [r7, #31]
 8008c84:	e077      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c86:	2302      	movs	r3, #2
 8008c88:	77fb      	strb	r3, [r7, #31]
 8008c8a:	e074      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	77fb      	strb	r3, [r7, #31]
 8008c90:	e071      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c92:	2308      	movs	r3, #8
 8008c94:	77fb      	strb	r3, [r7, #31]
 8008c96:	e06e      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	77fb      	strb	r3, [r7, #31]
 8008c9c:	bf00      	nop
 8008c9e:	e06a      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a25      	ldr	r2, [pc, #148]	; (8008d3c <UART_SetConfig+0x314>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d124      	bne.n	8008cf4 <UART_SetConfig+0x2cc>
 8008caa:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb8:	d012      	beq.n	8008ce0 <UART_SetConfig+0x2b8>
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbe:	d802      	bhi.n	8008cc6 <UART_SetConfig+0x29e>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <UART_SetConfig+0x2ac>
 8008cc4:	e012      	b.n	8008cec <UART_SetConfig+0x2c4>
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cca:	d006      	beq.n	8008cda <UART_SetConfig+0x2b2>
 8008ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cd0:	d009      	beq.n	8008ce6 <UART_SetConfig+0x2be>
 8008cd2:	e00b      	b.n	8008cec <UART_SetConfig+0x2c4>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	e04d      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008cda:	2302      	movs	r3, #2
 8008cdc:	77fb      	strb	r3, [r7, #31]
 8008cde:	e04a      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e047      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	77fb      	strb	r3, [r7, #31]
 8008cea:	e044      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008cec:	2310      	movs	r3, #16
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	bf00      	nop
 8008cf2:	e040      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a11      	ldr	r2, [pc, #68]	; (8008d40 <UART_SetConfig+0x318>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d139      	bne.n	8008d72 <UART_SetConfig+0x34a>
 8008cfe:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <UART_SetConfig+0x2fc>)
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d0c:	d027      	beq.n	8008d5e <UART_SetConfig+0x336>
 8008d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d12:	d817      	bhi.n	8008d44 <UART_SetConfig+0x31c>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01c      	beq.n	8008d52 <UART_SetConfig+0x32a>
 8008d18:	e027      	b.n	8008d6a <UART_SetConfig+0x342>
 8008d1a:	bf00      	nop
 8008d1c:	efff69f3 	.word	0xefff69f3
 8008d20:	40011000 	.word	0x40011000
 8008d24:	40023800 	.word	0x40023800
 8008d28:	40004400 	.word	0x40004400
 8008d2c:	40004800 	.word	0x40004800
 8008d30:	40004c00 	.word	0x40004c00
 8008d34:	40005000 	.word	0x40005000
 8008d38:	40011400 	.word	0x40011400
 8008d3c:	40007800 	.word	0x40007800
 8008d40:	40007c00 	.word	0x40007c00
 8008d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d48:	d006      	beq.n	8008d58 <UART_SetConfig+0x330>
 8008d4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d4e:	d009      	beq.n	8008d64 <UART_SetConfig+0x33c>
 8008d50:	e00b      	b.n	8008d6a <UART_SetConfig+0x342>
 8008d52:	2300      	movs	r3, #0
 8008d54:	77fb      	strb	r3, [r7, #31]
 8008d56:	e00e      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	77fb      	strb	r3, [r7, #31]
 8008d5c:	e00b      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008d5e:	2304      	movs	r3, #4
 8008d60:	77fb      	strb	r3, [r7, #31]
 8008d62:	e008      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008d64:	2308      	movs	r3, #8
 8008d66:	77fb      	strb	r3, [r7, #31]
 8008d68:	e005      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	77fb      	strb	r3, [r7, #31]
 8008d6e:	bf00      	nop
 8008d70:	e001      	b.n	8008d76 <UART_SetConfig+0x34e>
 8008d72:	2310      	movs	r3, #16
 8008d74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7e:	d17f      	bne.n	8008e80 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008d80:	7ffb      	ldrb	r3, [r7, #31]
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d85c      	bhi.n	8008e40 <UART_SetConfig+0x418>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <UART_SetConfig+0x364>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008dd1 	.word	0x08008dd1
 8008d94:	08008df1 	.word	0x08008df1
 8008d98:	08008e41 	.word	0x08008e41
 8008d9c:	08008e09 	.word	0x08008e09
 8008da0:	08008e41 	.word	0x08008e41
 8008da4:	08008e41 	.word	0x08008e41
 8008da8:	08008e41 	.word	0x08008e41
 8008dac:	08008e29 	.word	0x08008e29
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db0:	f7fd fa1a 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8008db4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	61bb      	str	r3, [r7, #24]
        break;
 8008dce:	e03a      	b.n	8008e46 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dd0:	f7fd fa1e 	bl	8006210 <HAL_RCC_GetPCLK2Freq>
 8008dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	005a      	lsls	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	61bb      	str	r3, [r7, #24]
        break;
 8008dee:	e02a      	b.n	8008e46 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	085a      	lsrs	r2, r3, #1
 8008df6:	4b5f      	ldr	r3, [pc, #380]	; (8008f74 <UART_SetConfig+0x54c>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6852      	ldr	r2, [r2, #4]
 8008dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	61bb      	str	r3, [r7, #24]
        break;
 8008e06:	e01e      	b.n	8008e46 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e08:	f7fd f930 	bl	800606c <HAL_RCC_GetSysClockFreq>
 8008e0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	005a      	lsls	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	441a      	add	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	61bb      	str	r3, [r7, #24]
        break;
 8008e26:	e00e      	b.n	8008e46 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	085b      	lsrs	r3, r3, #1
 8008e2e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	61bb      	str	r3, [r7, #24]
        break;
 8008e3e:	e002      	b.n	8008e46 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
        break;
 8008e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b0f      	cmp	r3, #15
 8008e4a:	d916      	bls.n	8008e7a <UART_SetConfig+0x452>
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e52:	d212      	bcs.n	8008e7a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	f023 030f 	bic.w	r3, r3, #15
 8008e5c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	085b      	lsrs	r3, r3, #1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	897b      	ldrh	r3, [r7, #10]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	897a      	ldrh	r2, [r7, #10]
 8008e76:	60da      	str	r2, [r3, #12]
 8008e78:	e070      	b.n	8008f5c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
 8008e7e:	e06d      	b.n	8008f5c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008e80:	7ffb      	ldrb	r3, [r7, #31]
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d859      	bhi.n	8008f3a <UART_SetConfig+0x512>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0x464>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008ecf 	.word	0x08008ecf
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008f3b 	.word	0x08008f3b
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008f3b 	.word	0x08008f3b
 8008ea4:	08008f3b 	.word	0x08008f3b
 8008ea8:	08008f3b 	.word	0x08008f3b
 8008eac:	08008f23 	.word	0x08008f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb0:	f7fd f99a 	bl	80061e8 <HAL_RCC_GetPCLK1Freq>
 8008eb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	085a      	lsrs	r2, r3, #1
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	61bb      	str	r3, [r7, #24]
        break;
 8008ecc:	e038      	b.n	8008f40 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ece:	f7fd f99f 	bl	8006210 <HAL_RCC_GetPCLK2Freq>
 8008ed2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	085a      	lsrs	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	441a      	add	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	61bb      	str	r3, [r7, #24]
        break;
 8008eea:	e029      	b.n	8008f40 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	085a      	lsrs	r2, r3, #1
 8008ef2:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <UART_SetConfig+0x550>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6852      	ldr	r2, [r2, #4]
 8008efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	61bb      	str	r3, [r7, #24]
        break;
 8008f02:	e01d      	b.n	8008f40 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f04:	f7fd f8b2 	bl	800606c <HAL_RCC_GetSysClockFreq>
 8008f08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	085a      	lsrs	r2, r3, #1
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	441a      	add	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	61bb      	str	r3, [r7, #24]
        break;
 8008f20:	e00e      	b.n	8008f40 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	085b      	lsrs	r3, r3, #1
 8008f28:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	61bb      	str	r3, [r7, #24]
        break;
 8008f38:	e002      	b.n	8008f40 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
        break;
 8008f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d908      	bls.n	8008f58 <UART_SetConfig+0x530>
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d204      	bcs.n	8008f58 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	60da      	str	r2, [r3, #12]
 8008f56:	e001      	b.n	8008f5c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	01e84800 	.word	0x01e84800
 8008f78:	00f42400 	.word	0x00f42400

08008f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	f003 0304 	and.w	r3, r3, #4
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d01a      	beq.n	8009092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d10a      	bne.n	8009092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	605a      	str	r2, [r3, #4]
  }
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80090ce:	f7f9 fbd9 	bl	8002884 <HAL_GetTick>
 80090d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d10e      	bne.n	8009100 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f814 	bl	800911e <UART_WaitOnFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e00a      	b.n	8009116 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	603b      	str	r3, [r7, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912e:	e05d      	b.n	80091ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d059      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009138:	f7f9 fba4 	bl	8002884 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <UART_WaitOnFlagUntilTimeout+0x30>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d11b      	bne.n	8009186 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800915c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e042      	b.n	800920c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d02b      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800919e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091a2:	d123      	bne.n	80091ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0201 	bic.w	r2, r2, #1
 80091cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2220      	movs	r2, #32
 80091d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2220      	movs	r2, #32
 80091de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e00f      	b.n	800920c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69da      	ldr	r2, [r3, #28]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4013      	ands	r3, r2
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bf0c      	ite	eq
 80091fc:	2301      	moveq	r3, #1
 80091fe:	2300      	movne	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	429a      	cmp	r2, r3
 8009208:	d092      	beq.n	8009130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d027      	beq.n	800927e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <FMC_SDRAM_Init+0xe0>)
 8009238:	4013      	ands	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009244:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800924a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009250:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009256:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800925c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009262:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009268:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800926e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e032      	b.n	80092e4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800928a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009294:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800929a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <FMC_SDRAM_Init+0xe0>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80092b8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80092be:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80092c4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80092ca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80092d0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	ffff8000 	.word	0xffff8000

080092f8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d02e      	beq.n	8009370 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800931e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	3b01      	subs	r3, #1
 800932c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800932e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	3b01      	subs	r3, #1
 8009336:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009338:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	3b01      	subs	r3, #1
 8009340:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009342:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	3b01      	subs	r3, #1
 800934a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800934c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	3b01      	subs	r3, #1
 8009354:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009356:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	3b01      	subs	r3, #1
 800935e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009360:	4313      	orrs	r3, r2
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	609a      	str	r2, [r3, #8]
 800936e:	e039      	b.n	80093e4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	4b1e      	ldr	r3, [pc, #120]	; (80093f4 <FMC_SDRAM_Timing_Init+0xfc>)
 800937a:	4013      	ands	r3, r2
 800937c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	3b01      	subs	r3, #1
 8009384:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	3b01      	subs	r3, #1
 800938c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800938e:	4313      	orrs	r3, r2
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093a2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80093b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80093bc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80093c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80093d0:	4313      	orrs	r3, r2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	ff0f0fff 	.word	0xff0f0fff

080093f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f043 0201 	orr.w	r2, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f023 0201 	bic.w	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	019b      	lsls	r3, r3, #6
 800944e:	f043 0220 	orr.w	r2, r3, #32
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3301      	adds	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a09      	ldr	r2, [pc, #36]	; (8009484 <USB_FlushTxFifo+0x48>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d901      	bls.n	8009468 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e006      	b.n	8009476 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b20      	cmp	r3, #32
 8009472:	d0f0      	beq.n	8009456 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	00030d40 	.word	0x00030d40

08009488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2210      	movs	r2, #16
 8009498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4a09      	ldr	r2, [pc, #36]	; (80094c8 <USB_FlushRxFifo+0x40>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d901      	bls.n	80094ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e006      	b.n	80094ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f003 0310 	and.w	r3, r3, #16
 80094b4:	2b10      	cmp	r3, #16
 80094b6:	d0f0      	beq.n	800949a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	00030d40 	.word	0x00030d40

080094cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b089      	sub	sp, #36	; 0x24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80094e2:	88fb      	ldrh	r3, [r7, #6]
 80094e4:	3303      	adds	r3, #3
 80094e6:	089b      	lsrs	r3, r3, #2
 80094e8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	e00b      	b.n	8009508 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	3304      	adds	r3, #4
 8009500:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	3301      	adds	r3, #1
 8009506:	61bb      	str	r3, [r7, #24]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	429a      	cmp	r2, r3
 800950e:	d3ef      	bcc.n	80094f0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009510:	69fb      	ldr	r3, [r7, #28]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3724      	adds	r7, #36	; 0x24
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4013      	ands	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	f003 0301 	and.w	r3, r3, #1
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800957e:	f023 0303 	bic.w	r3, r3, #3
 8009582:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009598:	4313      	orrs	r3, r2
 800959a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d107      	bne.n	80095b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095a8:	461a      	mov	r2, r3
 80095aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80095ae:	6053      	str	r3, [r2, #4]
 80095b0:	e009      	b.n	80095c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d106      	bne.n	80095c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095be:	461a      	mov	r2, r3
 80095c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80095c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	b29b      	uxth	r3, r3
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b087      	sub	sp, #28
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	0c9b      	lsrs	r3, r3, #18
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <USB_HC_Halt+0x3a>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d16c      	bne.n	800970a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	4413      	add	r3, r2
 8009638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	440a      	add	r2, r1
 8009646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800964e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d143      	bne.n	80096e4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	440a      	add	r2, r1
 8009672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	4413      	add	r3, r2
 8009684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	440a      	add	r2, r1
 8009692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800969a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	3301      	adds	r3, #1
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c8:	d81d      	bhi.n	8009706 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e0:	d0ec      	beq.n	80096bc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096e2:	e080      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009702:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009704:	e06f      	b.n	80097e6 <USB_HC_Halt+0x1f0>
          break;
 8009706:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009708:	e06d      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	4413      	add	r3, r2
 8009712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	440a      	add	r2, r1
 8009720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009728:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d143      	bne.n	80097c2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	440a      	add	r2, r1
 8009750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009758:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	4413      	add	r3, r2
 8009762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	440a      	add	r2, r1
 8009770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009778:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4413      	add	r3, r2
 8009782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	440a      	add	r2, r1
 8009790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009798:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	3301      	adds	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a6:	d81d      	bhi.n	80097e4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097be:	d0ec      	beq.n	800979a <USB_HC_Halt+0x1a4>
 80097c0:	e011      	b.n	80097e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	e000      	b.n	80097e6 <USB_HC_Halt+0x1f0>
          break;
 80097e4:	bf00      	nop
    }
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fe08 	bl	800941a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800980a:	2110      	movs	r1, #16
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fe15 	bl	800943c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fe38 	bl	8009488 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	e01f      	b.n	800985e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009834:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800983c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009844:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009852:	461a      	mov	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3301      	adds	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b0f      	cmp	r3, #15
 8009862:	d9dc      	bls.n	800981e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	e034      	b.n	80098d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009880:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009888:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009890:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989e:	461a      	mov	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	3301      	adds	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098b0:	d80c      	bhi.n	80098cc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c8:	d0ec      	beq.n	80098a4 <USB_StopHost+0xb0>
 80098ca:	e000      	b.n	80098ce <USB_StopHost+0xda>
        break;
 80098cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2b0f      	cmp	r3, #15
 80098d8:	d9c7      	bls.n	800986a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098e0:	461a      	mov	r2, r3
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295
 80098e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff fd81 	bl	80093f8 <USB_EnableGlobalInt>

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f804 	bl	8009924 <USBH_HandleSof>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b0b      	cmp	r3, #11
 8009934:	d10a      	bne.n	800994c <USBH_HandleSof+0x28>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
  }
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009978:	2200      	movs	r2, #0
 800997a:	4619      	mov	r1, r3
 800997c:	f000 f8ae 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009980:	bf00      	nop
}
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009998:	bf00      	nop
}
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80099d8:	2200      	movs	r2, #0
 80099da:	4619      	mov	r1, r3
 80099dc:	f000 f87e 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f928 	bl	800ac60 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	791b      	ldrb	r3, [r3, #4]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f830 	bl	8009a7c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	795b      	ldrb	r3, [r3, #5]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f82a 	bl	8009a7c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f000 f84c 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f000 f835 	bl	8009adc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	2b0a      	cmp	r3, #10
 8009a8c:	d80d      	bhi.n	8009aaa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	33e0      	adds	r3, #224	; 0xe0
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	33e0      	adds	r3, #224	; 0xe0
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	440b      	add	r3, r1
 8009aa8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	607b      	str	r3, [r7, #4]
  return(result);
 8009ac4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bf14      	ite	ne
 8009aca:	2301      	movne	r3, #1
 8009acc:	2300      	moveq	r3, #0
 8009ace:	b2db      	uxtb	r3, r3
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <osMessagePut+0x1e>
    ticks = 1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009afa:	f7ff ffdd 	bl	8009ab8 <inHandlerMode>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d018      	beq.n	8009b36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009b04:	f107 0210 	add.w	r2, r7, #16
 8009b08:	f107 0108 	add.w	r1, r7, #8
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f9ae 	bl	8009e70 <xQueueGenericSendFromISR>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d001      	beq.n	8009b1e <osMessagePut+0x42>
      return osErrorOS;
 8009b1a:	23ff      	movs	r3, #255	; 0xff
 8009b1c:	e018      	b.n	8009b50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d014      	beq.n	8009b4e <osMessagePut+0x72>
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <osMessagePut+0x7c>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	e00b      	b.n	8009b4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009b36:	f107 0108 	add.w	r1, r7, #8
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 f894 	bl	8009c6c <xQueueGenericSend>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d001      	beq.n	8009b4e <osMessagePut+0x72>
      return osErrorOS;
 8009b4a:	23ff      	movs	r3, #255	; 0xff
 8009b4c:	e000      	b.n	8009b50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	601a      	str	r2, [r3, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d103      	bne.n	8009bc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e00c      	b.n	8009bde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e002      	b.n	8009bd2 <vListInsert+0x2e>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d2f6      	bcs.n	8009bcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6892      	ldr	r2, [r2, #8]
 8009c2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6852      	ldr	r2, [r2, #4]
 8009c36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d103      	bne.n	8009c4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	1e5a      	subs	r2, r3, #1
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	; 0x38
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10b      	bne.n	8009ca0 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c9e:	e7fe      	b.n	8009c9e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <xQueueGenericSend+0x42>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <xQueueGenericSend+0x46>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e000      	b.n	8009cb4 <xQueueGenericSend+0x48>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10b      	bne.n	8009cd0 <xQueueGenericSend+0x64>
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	b672      	cpsid	i
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	b662      	cpsie	i
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cce:	e7fe      	b.n	8009cce <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d103      	bne.n	8009cde <xQueueGenericSend+0x72>
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <xQueueGenericSend+0x76>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericSend+0x78>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <xQueueGenericSend+0x94>
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	b672      	cpsid	i
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	b662      	cpsie	i
 8009cfc:	623b      	str	r3, [r7, #32]
 8009cfe:	e7fe      	b.n	8009cfe <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d00:	f000 fd3e 	bl	800a780 <xTaskGetSchedulerState>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <xQueueGenericSend+0xa4>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <xQueueGenericSend+0xa8>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <xQueueGenericSend+0xaa>
 8009d14:	2300      	movs	r3, #0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <xQueueGenericSend+0xc6>
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e7fe      	b.n	8009d30 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d32:	f000 fe49 	bl	800a9c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d302      	bcc.n	8009d48 <xQueueGenericSend+0xdc>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d129      	bne.n	8009d9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d4e:	f000 f92b 	bl	8009fa8 <prvCopyDataToQueue>
 8009d52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	3324      	adds	r3, #36	; 0x24
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fc03 	bl	800a56c <xTaskRemoveFromEventList>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d013      	beq.n	8009d94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d6c:	4b3f      	ldr	r3, [pc, #252]	; (8009e6c <xQueueGenericSend+0x200>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	e00a      	b.n	8009d94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d84:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <xQueueGenericSend+0x200>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d94:	f000 fe4a 	bl	800aa2c <vPortExitCritical>
				return pdPASS;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e063      	b.n	8009e64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009da2:	f000 fe43 	bl	800aa2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	e05c      	b.n	8009e64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009db0:	f107 0314 	add.w	r3, r7, #20
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fc3d 	bl	800a634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dbe:	f000 fe35 	bl	800aa2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dc2:	f000 f9c5 	bl	800a150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dc6:	f000 fdff 	bl	800a9c8 <vPortEnterCritical>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dd0:	b25b      	sxtb	r3, r3
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d103      	bne.n	8009de0 <xQueueGenericSend+0x174>
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de6:	b25b      	sxtb	r3, r3
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dec:	d103      	bne.n	8009df6 <xQueueGenericSend+0x18a>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df6:	f000 fe19 	bl	800aa2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dfa:	1d3a      	adds	r2, r7, #4
 8009dfc:	f107 0314 	add.w	r3, r7, #20
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fc2c 	bl	800a660 <xTaskCheckForTimeOut>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d124      	bne.n	8009e58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e10:	f000 f986 	bl	800a120 <prvIsQueueFull>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d018      	beq.n	8009e4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	3310      	adds	r3, #16
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fb7c 	bl	800a520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e2a:	f000 f927 	bl	800a07c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e2e:	f000 f99d 	bl	800a16c <xTaskResumeAll>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f47f af7c 	bne.w	8009d32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <xQueueGenericSend+0x200>)
 8009e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	e772      	b.n	8009d32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4e:	f000 f915 	bl	800a07c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e52:	f000 f98b 	bl	800a16c <xTaskResumeAll>
 8009e56:	e76c      	b.n	8009d32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e5a:	f000 f90f 	bl	800a07c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e5e:	f000 f985 	bl	800a16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3738      	adds	r7, #56	; 0x38
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	e000ed04 	.word	0xe000ed04

08009e70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08e      	sub	sp, #56	; 0x38
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xQueueGenericSendFromISR+0x30>
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	b672      	cpsid	i
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	b662      	cpsie	i
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9e:	e7fe      	b.n	8009e9e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSendFromISR+0x3e>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <xQueueGenericSendFromISR+0x42>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueGenericSendFromISR+0x44>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <xQueueGenericSendFromISR+0x60>
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	b672      	cpsid	i
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	b662      	cpsie	i
 8009ecc:	623b      	str	r3, [r7, #32]
 8009ece:	e7fe      	b.n	8009ece <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d103      	bne.n	8009ede <xQueueGenericSendFromISR+0x6e>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <xQueueGenericSendFromISR+0x72>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e000      	b.n	8009ee4 <xQueueGenericSendFromISR+0x74>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <xQueueGenericSendFromISR+0x90>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	b672      	cpsid	i
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	b662      	cpsie	i
 8009efc:	61fb      	str	r3, [r7, #28]
 8009efe:	e7fe      	b.n	8009efe <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f00:	f000 fe14 	bl	800ab2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f04:	f3ef 8211 	mrs	r2, BASEPRI
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	b672      	cpsid	i
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	b662      	cpsie	i
 8009f1c:	61ba      	str	r2, [r7, #24]
 8009f1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d302      	bcc.n	8009f36 <xQueueGenericSendFromISR+0xc6>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d12c      	bne.n	8009f90 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f46:	f000 f82f 	bl	8009fa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f52:	d112      	bne.n	8009f7a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d016      	beq.n	8009f8a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	3324      	adds	r3, #36	; 0x24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fb03 	bl	800a56c <xTaskRemoveFromEventList>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00e      	beq.n	8009f8a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00b      	beq.n	8009f8a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	e007      	b.n	8009f8a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f7e:	3301      	adds	r3, #1
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	b25a      	sxtb	r2, r3
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009f8e:	e001      	b.n	8009f94 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3738      	adds	r7, #56	; 0x38
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10d      	bne.n	8009fe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d14d      	bne.n	800a06a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fbf2 	bl	800a7bc <xTaskPriorityDisinherit>
 8009fd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	609a      	str	r2, [r3, #8]
 8009fe0:	e043      	b.n	800a06a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d119      	bne.n	800a01c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6858      	ldr	r0, [r3, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	f000 fea0 	bl	800ad38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d32b      	bcc.n	800a06a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	e026      	b.n	800a06a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68d8      	ldr	r0, [r3, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a024:	461a      	mov	r2, r3
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	f000 fe86 	bl	800ad38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	425b      	negs	r3, r3
 800a036:	441a      	add	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d207      	bcs.n	800a058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a050:	425b      	negs	r3, r3
 800a052:	441a      	add	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d105      	bne.n	800a06a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	3b01      	subs	r3, #1
 800a068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a072:	697b      	ldr	r3, [r7, #20]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a084:	f000 fca0 	bl	800a9c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a08e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a090:	e011      	b.n	800a0b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d012      	beq.n	800a0c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3324      	adds	r3, #36	; 0x24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fa64 	bl	800a56c <xTaskRemoveFromEventList>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0aa:	f000 fb3d 	bl	800a728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dce9      	bgt.n	800a092 <prvUnlockQueue+0x16>
 800a0be:	e000      	b.n	800a0c2 <prvUnlockQueue+0x46>
					break;
 800a0c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0ca:	f000 fcaf 	bl	800aa2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0ce:	f000 fc7b 	bl	800a9c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0da:	e011      	b.n	800a100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d012      	beq.n	800a10a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3310      	adds	r3, #16
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fa3f 	bl	800a56c <xTaskRemoveFromEventList>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0f4:	f000 fb18 	bl	800a728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	dce9      	bgt.n	800a0dc <prvUnlockQueue+0x60>
 800a108:	e000      	b.n	800a10c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a10a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	22ff      	movs	r2, #255	; 0xff
 800a110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a114:	f000 fc8a 	bl	800aa2c <vPortExitCritical>
}
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a128:	f000 fc4e 	bl	800a9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a134:	429a      	cmp	r2, r3
 800a136:	d102      	bne.n	800a13e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a138:	2301      	movs	r3, #1
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	e001      	b.n	800a142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a142:	f000 fc73 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 800a146:	68fb      	ldr	r3, [r7, #12]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a154:	4b04      	ldr	r3, [pc, #16]	; (800a168 <vTaskSuspendAll+0x18>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3301      	adds	r3, #1
 800a15a:	4a03      	ldr	r2, [pc, #12]	; (800a168 <vTaskSuspendAll+0x18>)
 800a15c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a15e:	bf00      	nop
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	20000114 	.word	0x20000114

0800a16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a17a:	4b42      	ldr	r3, [pc, #264]	; (800a284 <xTaskResumeAll+0x118>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <xTaskResumeAll+0x2e>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	b672      	cpsid	i
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	b662      	cpsie	i
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	e7fe      	b.n	800a198 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a19a:	f000 fc15 	bl	800a9c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a19e:	4b39      	ldr	r3, [pc, #228]	; (800a284 <xTaskResumeAll+0x118>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	4a37      	ldr	r2, [pc, #220]	; (800a284 <xTaskResumeAll+0x118>)
 800a1a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1a8:	4b36      	ldr	r3, [pc, #216]	; (800a284 <xTaskResumeAll+0x118>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d161      	bne.n	800a274 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1b0:	4b35      	ldr	r3, [pc, #212]	; (800a288 <xTaskResumeAll+0x11c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d05d      	beq.n	800a274 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1b8:	e02e      	b.n	800a218 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ba:	4b34      	ldr	r3, [pc, #208]	; (800a28c <xTaskResumeAll+0x120>)
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fd25 	bl	8009c16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fd20 	bl	8009c16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	2201      	movs	r2, #1
 800a1dc:	409a      	lsls	r2, r3
 800a1de:	4b2c      	ldr	r3, [pc, #176]	; (800a290 <xTaskResumeAll+0x124>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	4a2a      	ldr	r2, [pc, #168]	; (800a290 <xTaskResumeAll+0x124>)
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4a27      	ldr	r2, [pc, #156]	; (800a294 <xTaskResumeAll+0x128>)
 800a1f6:	441a      	add	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f7ff fcac 	bl	8009b5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a208:	4b23      	ldr	r3, [pc, #140]	; (800a298 <xTaskResumeAll+0x12c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	429a      	cmp	r2, r3
 800a210:	d302      	bcc.n	800a218 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a212:	4b22      	ldr	r3, [pc, #136]	; (800a29c <xTaskResumeAll+0x130>)
 800a214:	2201      	movs	r2, #1
 800a216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a218:	4b1c      	ldr	r3, [pc, #112]	; (800a28c <xTaskResumeAll+0x120>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1cc      	bne.n	800a1ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a226:	f000 fa8b 	bl	800a740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <xTaskResumeAll+0x134>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d010      	beq.n	800a258 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a236:	f000 f837 	bl	800a2a8 <xTaskIncrementTick>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a240:	4b16      	ldr	r3, [pc, #88]	; (800a29c <xTaskResumeAll+0x130>)
 800a242:	2201      	movs	r2, #1
 800a244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f1      	bne.n	800a236 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <xTaskResumeAll+0x134>)
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a258:	4b10      	ldr	r3, [pc, #64]	; (800a29c <xTaskResumeAll+0x130>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a260:	2301      	movs	r3, #1
 800a262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a264:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <xTaskResumeAll+0x138>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a274:	f000 fbda 	bl	800aa2c <vPortExitCritical>

	return xAlreadyYielded;
 800a278:	68bb      	ldr	r3, [r7, #8]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000114 	.word	0x20000114
 800a288:	200000f4 	.word	0x200000f4
 800a28c:	200000cc 	.word	0x200000cc
 800a290:	200000fc 	.word	0x200000fc
 800a294:	20000038 	.word	0x20000038
 800a298:	20000034 	.word	0x20000034
 800a29c:	20000108 	.word	0x20000108
 800a2a0:	20000104 	.word	0x20000104
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2b2:	4b4f      	ldr	r3, [pc, #316]	; (800a3f0 <xTaskIncrementTick+0x148>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f040 8089 	bne.w	800a3ce <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2bc:	4b4d      	ldr	r3, [pc, #308]	; (800a3f4 <xTaskIncrementTick+0x14c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2c4:	4a4b      	ldr	r2, [pc, #300]	; (800a3f4 <xTaskIncrementTick+0x14c>)
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d121      	bne.n	800a314 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2d0:	4b49      	ldr	r3, [pc, #292]	; (800a3f8 <xTaskIncrementTick+0x150>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00b      	beq.n	800a2f2 <xTaskIncrementTick+0x4a>
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	b672      	cpsid	i
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	b662      	cpsie	i
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	e7fe      	b.n	800a2f0 <xTaskIncrementTick+0x48>
 800a2f2:	4b41      	ldr	r3, [pc, #260]	; (800a3f8 <xTaskIncrementTick+0x150>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	4b40      	ldr	r3, [pc, #256]	; (800a3fc <xTaskIncrementTick+0x154>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a3e      	ldr	r2, [pc, #248]	; (800a3f8 <xTaskIncrementTick+0x150>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	4a3e      	ldr	r2, [pc, #248]	; (800a3fc <xTaskIncrementTick+0x154>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	4b3e      	ldr	r3, [pc, #248]	; (800a400 <xTaskIncrementTick+0x158>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3301      	adds	r3, #1
 800a30c:	4a3c      	ldr	r2, [pc, #240]	; (800a400 <xTaskIncrementTick+0x158>)
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	f000 fa16 	bl	800a740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a314:	4b3b      	ldr	r3, [pc, #236]	; (800a404 <xTaskIncrementTick+0x15c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d348      	bcc.n	800a3b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a31e:	4b36      	ldr	r3, [pc, #216]	; (800a3f8 <xTaskIncrementTick+0x150>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a328:	4b36      	ldr	r3, [pc, #216]	; (800a404 <xTaskIncrementTick+0x15c>)
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295
 800a32e:	601a      	str	r2, [r3, #0]
					break;
 800a330:	e03e      	b.n	800a3b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <xTaskIncrementTick+0x150>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d203      	bcs.n	800a352 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a34a:	4a2e      	ldr	r2, [pc, #184]	; (800a404 <xTaskIncrementTick+0x15c>)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a350:	e02e      	b.n	800a3b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3304      	adds	r3, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fc5d 	bl	8009c16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3318      	adds	r3, #24
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fc54 	bl	8009c16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	2201      	movs	r2, #1
 800a374:	409a      	lsls	r2, r3
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <xTaskIncrementTick+0x160>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	4a22      	ldr	r2, [pc, #136]	; (800a408 <xTaskIncrementTick+0x160>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a1f      	ldr	r2, [pc, #124]	; (800a40c <xTaskIncrementTick+0x164>)
 800a38e:	441a      	add	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7ff fbe0 	bl	8009b5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a0:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <xTaskIncrementTick+0x168>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d3b9      	bcc.n	800a31e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ae:	e7b6      	b.n	800a31e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3b0:	4b17      	ldr	r3, [pc, #92]	; (800a410 <xTaskIncrementTick+0x168>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	4915      	ldr	r1, [pc, #84]	; (800a40c <xTaskIncrementTick+0x164>)
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	440b      	add	r3, r1
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d907      	bls.n	800a3d8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	e004      	b.n	800a3d8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <xTaskIncrementTick+0x16c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	4a0f      	ldr	r2, [pc, #60]	; (800a414 <xTaskIncrementTick+0x16c>)
 800a3d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <xTaskIncrementTick+0x170>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a3e4:	697b      	ldr	r3, [r7, #20]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000114 	.word	0x20000114
 800a3f4:	200000f8 	.word	0x200000f8
 800a3f8:	200000c4 	.word	0x200000c4
 800a3fc:	200000c8 	.word	0x200000c8
 800a400:	2000010c 	.word	0x2000010c
 800a404:	20000110 	.word	0x20000110
 800a408:	200000fc 	.word	0x200000fc
 800a40c:	20000038 	.word	0x20000038
 800a410:	20000034 	.word	0x20000034
 800a414:	20000104 	.word	0x20000104
 800a418:	20000108 	.word	0x20000108

0800a41c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a422:	4b3a      	ldr	r3, [pc, #232]	; (800a50c <vTaskSwitchContext+0xf0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a42a:	4b39      	ldr	r3, [pc, #228]	; (800a510 <vTaskSwitchContext+0xf4>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a430:	e067      	b.n	800a502 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a432:	4b37      	ldr	r3, [pc, #220]	; (800a510 <vTaskSwitchContext+0xf4>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a438:	4b36      	ldr	r3, [pc, #216]	; (800a514 <vTaskSwitchContext+0xf8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d111      	bne.n	800a474 <vTaskSwitchContext+0x58>
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	3304      	adds	r3, #4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d10b      	bne.n	800a474 <vTaskSwitchContext+0x58>
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	3308      	adds	r3, #8
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	429a      	cmp	r2, r3
 800a466:	d105      	bne.n	800a474 <vTaskSwitchContext+0x58>
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	330c      	adds	r3, #12
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	429a      	cmp	r2, r3
 800a472:	d008      	beq.n	800a486 <vTaskSwitchContext+0x6a>
 800a474:	4b27      	ldr	r3, [pc, #156]	; (800a514 <vTaskSwitchContext+0xf8>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4b26      	ldr	r3, [pc, #152]	; (800a514 <vTaskSwitchContext+0xf8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3334      	adds	r3, #52	; 0x34
 800a47e:	4619      	mov	r1, r3
 800a480:	4610      	mov	r0, r2
 800a482:	f7f6 f845 	bl	8000510 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a486:	4b24      	ldr	r3, [pc, #144]	; (800a518 <vTaskSwitchContext+0xfc>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	fab3 f383 	clz	r3, r3
 800a492:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	f1c3 031f 	rsb	r3, r3, #31
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	491f      	ldr	r1, [pc, #124]	; (800a51c <vTaskSwitchContext+0x100>)
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <vTaskSwitchContext+0xac>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	b672      	cpsid	i
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	b662      	cpsie	i
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e7fe      	b.n	800a4c6 <vTaskSwitchContext+0xaa>
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4a12      	ldr	r2, [pc, #72]	; (800a51c <vTaskSwitchContext+0x100>)
 800a4d4:	4413      	add	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	605a      	str	r2, [r3, #4]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d104      	bne.n	800a4f8 <vTaskSwitchContext+0xdc>
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	4a05      	ldr	r2, [pc, #20]	; (800a514 <vTaskSwitchContext+0xf8>)
 800a500:	6013      	str	r3, [r2, #0]
}
 800a502:	bf00      	nop
 800a504:	3720      	adds	r7, #32
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000114 	.word	0x20000114
 800a510:	20000108 	.word	0x20000108
 800a514:	20000034 	.word	0x20000034
 800a518:	200000fc 	.word	0x200000fc
 800a51c:	20000038 	.word	0x20000038

0800a520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10b      	bne.n	800a548 <vTaskPlaceOnEventList+0x28>
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	b672      	cpsid	i
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	b662      	cpsie	i
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e7fe      	b.n	800a546 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <vTaskPlaceOnEventList+0x48>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3318      	adds	r3, #24
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fb27 	bl	8009ba4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a556:	2101      	movs	r1, #1
 800a558:	6838      	ldr	r0, [r7, #0]
 800a55a:	f000 f9b7 	bl	800a8cc <prvAddCurrentTaskToDelayedList>
}
 800a55e:	bf00      	nop
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000034 	.word	0x20000034

0800a56c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <xTaskRemoveFromEventList+0x2e>
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	b672      	cpsid	i
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	b662      	cpsie	i
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e7fe      	b.n	800a598 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	3318      	adds	r3, #24
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fb39 	bl	8009c16 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <xTaskRemoveFromEventList+0xb0>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d11c      	bne.n	800a5e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fb30 	bl	8009c16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	409a      	lsls	r2, r3
 800a5be:	4b18      	ldr	r3, [pc, #96]	; (800a620 <xTaskRemoveFromEventList+0xb4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	4a16      	ldr	r2, [pc, #88]	; (800a620 <xTaskRemoveFromEventList+0xb4>)
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4a13      	ldr	r2, [pc, #76]	; (800a624 <xTaskRemoveFromEventList+0xb8>)
 800a5d6:	441a      	add	r2, r3
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f7ff fabc 	bl	8009b5c <vListInsertEnd>
 800a5e4:	e005      	b.n	800a5f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3318      	adds	r3, #24
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	480e      	ldr	r0, [pc, #56]	; (800a628 <xTaskRemoveFromEventList+0xbc>)
 800a5ee:	f7ff fab5 	bl	8009b5c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <xTaskRemoveFromEventList+0xc0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d905      	bls.n	800a60c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a604:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <xTaskRemoveFromEventList+0xc4>)
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e001      	b.n	800a610 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a610:	697b      	ldr	r3, [r7, #20]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000114 	.word	0x20000114
 800a620:	200000fc 	.word	0x200000fc
 800a624:	20000038 	.word	0x20000038
 800a628:	200000cc 	.word	0x200000cc
 800a62c:	20000034 	.word	0x20000034
 800a630:	20000108 	.word	0x20000108

0800a634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a63c:	4b06      	ldr	r3, [pc, #24]	; (800a658 <vTaskInternalSetTimeOutState+0x24>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <vTaskInternalSetTimeOutState+0x28>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	605a      	str	r2, [r3, #4]
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	2000010c 	.word	0x2000010c
 800a65c:	200000f8 	.word	0x200000f8

0800a660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10b      	bne.n	800a688 <xTaskCheckForTimeOut+0x28>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	b672      	cpsid	i
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	b662      	cpsie	i
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	e7fe      	b.n	800a686 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10b      	bne.n	800a6a6 <xTaskCheckForTimeOut+0x46>
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	b672      	cpsid	i
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	b662      	cpsie	i
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	e7fe      	b.n	800a6a4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800a6a6:	f000 f98f 	bl	800a9c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6aa:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <xTaskCheckForTimeOut+0xc0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d102      	bne.n	800a6ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	e023      	b.n	800a712 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b15      	ldr	r3, [pc, #84]	; (800a724 <xTaskCheckForTimeOut+0xc4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d007      	beq.n	800a6e6 <xTaskCheckForTimeOut+0x86>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d302      	bcc.n	800a6e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	e015      	b.n	800a712 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d20b      	bcs.n	800a708 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff ff99 	bl	800a634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a702:	2300      	movs	r3, #0
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	e004      	b.n	800a712 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a70e:	2301      	movs	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a712:	f000 f98b 	bl	800aa2c <vPortExitCritical>

	return xReturn;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	200000f8 	.word	0x200000f8
 800a724:	2000010c 	.word	0x2000010c

0800a728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a72c:	4b03      	ldr	r3, [pc, #12]	; (800a73c <vTaskMissedYield+0x14>)
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20000108 	.word	0x20000108

0800a740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvResetNextTaskUnblockTime+0x38>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <prvResetNextTaskUnblockTime+0x3c>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a758:	e008      	b.n	800a76c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75a:	4b07      	ldr	r3, [pc, #28]	; (800a778 <prvResetNextTaskUnblockTime+0x38>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4a04      	ldr	r2, [pc, #16]	; (800a77c <prvResetNextTaskUnblockTime+0x3c>)
 800a76a:	6013      	str	r3, [r2, #0]
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	200000c4 	.word	0x200000c4
 800a77c:	20000110 	.word	0x20000110

0800a780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a786:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <xTaskGetSchedulerState+0x34>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a78e:	2301      	movs	r3, #1
 800a790:	607b      	str	r3, [r7, #4]
 800a792:	e008      	b.n	800a7a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <xTaskGetSchedulerState+0x38>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a79c:	2302      	movs	r3, #2
 800a79e:	607b      	str	r3, [r7, #4]
 800a7a0:	e001      	b.n	800a7a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7a6:	687b      	ldr	r3, [r7, #4]
	}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20000100 	.word	0x20000100
 800a7b8:	20000114 	.word	0x20000114

0800a7bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d070      	beq.n	800a8b4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7d2:	4b3b      	ldr	r3, [pc, #236]	; (800a8c0 <xTaskPriorityDisinherit+0x104>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d00b      	beq.n	800a7f4 <xTaskPriorityDisinherit+0x38>
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	b672      	cpsid	i
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	b662      	cpsie	i
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e7fe      	b.n	800a7f2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10b      	bne.n	800a814 <xTaskPriorityDisinherit+0x58>
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	b672      	cpsid	i
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	b662      	cpsie	i
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	e7fe      	b.n	800a812 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a826:	429a      	cmp	r2, r3
 800a828:	d044      	beq.n	800a8b4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d140      	bne.n	800a8b4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	3304      	adds	r3, #4
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff f9ed 	bl	8009c16 <uxListRemove>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d115      	bne.n	800a86e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	491f      	ldr	r1, [pc, #124]	; (800a8c4 <xTaskPriorityDisinherit+0x108>)
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xTaskPriorityDisinherit+0xb2>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	2201      	movs	r2, #1
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	43da      	mvns	r2, r3
 800a864:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <xTaskPriorityDisinherit+0x10c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4013      	ands	r3, r2
 800a86a:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <xTaskPriorityDisinherit+0x10c>)
 800a86c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	f1c3 0207 	rsb	r2, r3, #7
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	2201      	movs	r2, #1
 800a888:	409a      	lsls	r2, r3
 800a88a:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <xTaskPriorityDisinherit+0x10c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4313      	orrs	r3, r2
 800a890:	4a0d      	ldr	r2, [pc, #52]	; (800a8c8 <xTaskPriorityDisinherit+0x10c>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <xTaskPriorityDisinherit+0x108>)
 800a8a2:	441a      	add	r2, r3
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	f7ff f956 	bl	8009b5c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8b4:	697b      	ldr	r3, [r7, #20]
	}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000034 	.word	0x20000034
 800a8c4:	20000038 	.word	0x20000038
 800a8c8:	200000fc 	.word	0x200000fc

0800a8cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8d6:	4b29      	ldr	r3, [pc, #164]	; (800a97c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8dc:	4b28      	ldr	r3, [pc, #160]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff f997 	bl	8009c16 <uxListRemove>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10b      	bne.n	800a906 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a8ee:	4b24      	ldr	r3, [pc, #144]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fa:	43da      	mvns	r2, r3
 800a8fc:	4b21      	ldr	r3, [pc, #132]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4013      	ands	r3, r2
 800a902:	4a20      	ldr	r2, [pc, #128]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a904:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d10a      	bne.n	800a924 <prvAddCurrentTaskToDelayedList+0x58>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a914:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	481a      	ldr	r0, [pc, #104]	; (800a988 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a91e:	f7ff f91d 	bl	8009b5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a922:	e026      	b.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a92c:	4b14      	ldr	r3, [pc, #80]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d209      	bcs.n	800a950 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a93c:	4b13      	ldr	r3, [pc, #76]	; (800a98c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3304      	adds	r3, #4
 800a946:	4619      	mov	r1, r3
 800a948:	4610      	mov	r0, r2
 800a94a:	f7ff f92b 	bl	8009ba4 <vListInsert>
}
 800a94e:	e010      	b.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3304      	adds	r3, #4
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f7ff f921 	bl	8009ba4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d202      	bcs.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a96c:	4a09      	ldr	r2, [pc, #36]	; (800a994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	6013      	str	r3, [r2, #0]
}
 800a972:	bf00      	nop
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	200000f8 	.word	0x200000f8
 800a980:	20000034 	.word	0x20000034
 800a984:	200000fc 	.word	0x200000fc
 800a988:	200000e0 	.word	0x200000e0
 800a98c:	200000c8 	.word	0x200000c8
 800a990:	200000c4 	.word	0x200000c4
 800a994:	20000110 	.word	0x20000110
	...

0800a9a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	b672      	cpsid	i
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	b662      	cpsie	i
 800a9e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9e4:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <vPortEnterCritical+0x5c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	4a0e      	ldr	r2, [pc, #56]	; (800aa24 <vPortEnterCritical+0x5c>)
 800a9ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <vPortEnterCritical+0x5c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d110      	bne.n	800aa18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <vPortEnterCritical+0x60>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <vPortEnterCritical+0x50>
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	b672      	cpsid	i
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	b662      	cpsie	i
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	e7fe      	b.n	800aa16 <vPortEnterCritical+0x4e>
	}
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	2000000c 	.word	0x2000000c
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa32:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <vPortExitCritical+0x50>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10b      	bne.n	800aa52 <vPortExitCritical+0x26>
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	b672      	cpsid	i
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	b662      	cpsie	i
 800aa4e:	607b      	str	r3, [r7, #4]
 800aa50:	e7fe      	b.n	800aa50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800aa52:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <vPortExitCritical+0x50>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	4a08      	ldr	r2, [pc, #32]	; (800aa7c <vPortExitCritical+0x50>)
 800aa5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa5c:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <vPortExitCritical+0x50>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <vPortExitCritical+0x42>
 800aa64:	2300      	movs	r3, #0
 800aa66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	2000000c 	.word	0x2000000c

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <pxCurrentTCBConst>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f01e 0f10 	tst.w	lr, #16
 800aa90:	bf08      	it	eq
 800aa92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aaa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aaa4:	b672      	cpsid	i
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	b662      	cpsie	i
 800aab4:	f7ff fcb2 	bl	800a41c <vTaskSwitchContext>
 800aab8:	f04f 0000 	mov.w	r0, #0
 800aabc:	f380 8811 	msr	BASEPRI, r0
 800aac0:	bc09      	pop	{r0, r3}
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	6808      	ldr	r0, [r1, #0]
 800aac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	f01e 0f10 	tst.w	lr, #16
 800aace:	bf08      	it	eq
 800aad0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aad4:	f380 8809 	msr	PSP, r0
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop

0800aae0 <pxCurrentTCBConst>:
 800aae0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop

0800aae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	b672      	cpsid	i
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	b662      	cpsie	i
 800ab02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab04:	f7ff fbd0 	bl	800a2a8 <xTaskIncrementTick>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab0e:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <SysTick_Handler+0x40>)
 800ab10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	2300      	movs	r3, #0
 800ab18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab32:	f3ef 8305 	mrs	r3, IPSR
 800ab36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d915      	bls.n	800ab6a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab3e:	4a18      	ldr	r2, [pc, #96]	; (800aba0 <vPortValidateInterruptPriority+0x74>)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab48:	4b16      	ldr	r3, [pc, #88]	; (800aba4 <vPortValidateInterruptPriority+0x78>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	7afa      	ldrb	r2, [r7, #11]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d20b      	bcs.n	800ab6a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	b672      	cpsid	i
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	b662      	cpsie	i
 800ab66:	607b      	str	r3, [r7, #4]
 800ab68:	e7fe      	b.n	800ab68 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <vPortValidateInterruptPriority+0x7c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab72:	4b0e      	ldr	r3, [pc, #56]	; (800abac <vPortValidateInterruptPriority+0x80>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d90b      	bls.n	800ab92 <vPortValidateInterruptPriority+0x66>
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	b672      	cpsid	i
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	b662      	cpsie	i
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	e7fe      	b.n	800ab90 <vPortValidateInterruptPriority+0x64>
	}
 800ab92:	bf00      	nop
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000e3f0 	.word	0xe000e3f0
 800aba4:	20000118 	.word	0x20000118
 800aba8:	e000ed0c 	.word	0xe000ed0c
 800abac:	2000011c 	.word	0x2000011c

0800abb0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fe9e 	bl	8009900 <USBH_LL_IncTimer>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fee2 	bl	80099a4 <USBH_LL_Connect>
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe fef7 	bl	80099ea <USBH_LL_Disconnect>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
 800ac10:	4613      	mov	r3, r2
 800ac12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe ff17 	bl	8009a4e <USBH_LL_NotifyURBChange>
#endif
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fe8c 	bl	8009954 <USBH_LL_PortEnabled>
}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fe98 	bl	8009988 <USBH_LL_PortDisabled>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f8 ffcd 	bl	8003c16 <HAL_HCD_Stop>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 f808 	bl	800ac98 <USBH_Get_USB_Status>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
	...

0800ac98 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d817      	bhi.n	800acdc <USBH_Get_USB_Status+0x44>
 800acac:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <USBH_Get_USB_Status+0x1c>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800accb 	.word	0x0800accb
 800acbc:	0800acd1 	.word	0x0800acd1
 800acc0:	0800acd7 	.word	0x0800acd7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
    break;
 800acc8:	e00b      	b.n	800ace2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800acca:	2302      	movs	r3, #2
 800accc:	73fb      	strb	r3, [r7, #15]
    break;
 800acce:	e008      	b.n	800ace2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800acd0:	2301      	movs	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]
    break;
 800acd4:	e005      	b.n	800ace2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800acd6:	2302      	movs	r3, #2
 800acd8:	73fb      	strb	r3, [r7, #15]
    break;
 800acda:	e002      	b.n	800ace2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800acdc:	2302      	movs	r3, #2
 800acde:	73fb      	strb	r3, [r7, #15]
    break;
 800ace0:	bf00      	nop
  }
  return usb_status;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <__libc_init_array>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	4e0d      	ldr	r6, [pc, #52]	; (800ad28 <__libc_init_array+0x38>)
 800acf4:	4c0d      	ldr	r4, [pc, #52]	; (800ad2c <__libc_init_array+0x3c>)
 800acf6:	1ba4      	subs	r4, r4, r6
 800acf8:	10a4      	asrs	r4, r4, #2
 800acfa:	2500      	movs	r5, #0
 800acfc:	42a5      	cmp	r5, r4
 800acfe:	d109      	bne.n	800ad14 <__libc_init_array+0x24>
 800ad00:	4e0b      	ldr	r6, [pc, #44]	; (800ad30 <__libc_init_array+0x40>)
 800ad02:	4c0c      	ldr	r4, [pc, #48]	; (800ad34 <__libc_init_array+0x44>)
 800ad04:	f000 f82c 	bl	800ad60 <_init>
 800ad08:	1ba4      	subs	r4, r4, r6
 800ad0a:	10a4      	asrs	r4, r4, #2
 800ad0c:	2500      	movs	r5, #0
 800ad0e:	42a5      	cmp	r5, r4
 800ad10:	d105      	bne.n	800ad1e <__libc_init_array+0x2e>
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad18:	4798      	blx	r3
 800ad1a:	3501      	adds	r5, #1
 800ad1c:	e7ee      	b.n	800acfc <__libc_init_array+0xc>
 800ad1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad22:	4798      	blx	r3
 800ad24:	3501      	adds	r5, #1
 800ad26:	e7f2      	b.n	800ad0e <__libc_init_array+0x1e>
 800ad28:	0800ad98 	.word	0x0800ad98
 800ad2c:	0800ad98 	.word	0x0800ad98
 800ad30:	0800ad98 	.word	0x0800ad98
 800ad34:	0800ad9c 	.word	0x0800ad9c

0800ad38 <memcpy>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	1e43      	subs	r3, r0, #1
 800ad3c:	440a      	add	r2, r1
 800ad3e:	4291      	cmp	r1, r2
 800ad40:	d100      	bne.n	800ad44 <memcpy+0xc>
 800ad42:	bd10      	pop	{r4, pc}
 800ad44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad4c:	e7f7      	b.n	800ad3e <memcpy+0x6>

0800ad4e <memset>:
 800ad4e:	4402      	add	r2, r0
 800ad50:	4603      	mov	r3, r0
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d100      	bne.n	800ad58 <memset+0xa>
 800ad56:	4770      	bx	lr
 800ad58:	f803 1b01 	strb.w	r1, [r3], #1
 800ad5c:	e7f9      	b.n	800ad52 <memset+0x4>
	...

0800ad60 <_init>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	bf00      	nop
 800ad64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad66:	bc08      	pop	{r3}
 800ad68:	469e      	mov	lr, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_fini>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr
