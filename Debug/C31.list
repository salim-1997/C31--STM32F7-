
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  08016d64  08016d64  00026d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018acc  08018acc  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08018acc  08018acc  00028acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018ad4  08018ad4  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018ad4  08018ad4  00028ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018ad8  08018ad8  00028ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08018adc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bfdc  200000d8  08018bb4  000300d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c0b4  08018bb4  0003c0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000486ea  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000800f  00000000  00000000  000787f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000032c8  00000000  00000000  00080808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f48  00000000  00000000  00083ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036132  00000000  00000000  00086a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003141c  00000000  00000000  000bcb4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a78a  00000000  00000000  000edf66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002186f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dba8  00000000  00000000  0021876c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016d4c 	.word	0x08016d4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08016d4c 	.word	0x08016d4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <TimeDoctor_START>:




void TimeDoctor_START()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009ce:	f3ef 8310 	mrs	r3, PRIMASK
 80009d2:	607b      	str	r3, [r7, #4]
  return(result);
 80009d4:	687b      	ldr	r3, [r7, #4]
	PROLOG();
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f383 8810 	msr	PRIMASK, r3
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d845      	bhi.n	8000a7c <TimeDoctor_START+0xb4>

	buffer_used += sprintf( buffer+buffer_used, "SPEED %lu\r\n", TD_GET_TICK_FREQ() );
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <TimeDoctor_START+0xcc>)
 80009f8:	18d0      	adds	r0, r2, r3
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <TimeDoctor_START+0xd0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4926      	ldr	r1, [pc, #152]	; (8000a9c <TimeDoctor_START+0xd4>)
 8000a02:	f015 fc9b 	bl	801633c <siprintf>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a10:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "MEMSPEED %lu\r\n", TD_GET_TICK_FREQ() );
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a1a:	18d0      	adds	r0, r2, r3
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <TimeDoctor_START+0xd8>)
 8000a24:	f015 fc8a 	bl	801633c <siprintf>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a32:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "TIME %lu\r\n", TD_GET_TICK_FREQ() );
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a3c:	18d0      	adds	r0, r2, r3
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <TimeDoctor_START+0xdc>)
 8000a46:	f015 fc79 	bl	801633c <siprintf>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a54:	6013      	str	r3, [r2, #0]

	TD_INIT_TICK();
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	60d3      	str	r3, [r2, #12]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <TimeDoctor_START+0xe8>)
 8000a66:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20009e30 	.word	0x20009e30
 8000a94:	20009e34 	.word	0x20009e34
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08016d64 	.word	0x08016d64
 8000aa0:	08016d70 	.word	0x08016d70
 8000aa4:	08016d80 	.word	0x08016d80
 8000aa8:	e000edf0 	.word	0xe000edf0
 8000aac:	e0001000 	.word	0xe0001000
 8000ab0:	c5acce55 	.word	0xc5acce55

08000ab4 <TimeDoctor_STOP>:

void TimeDoctor_STOP()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aba:	f3ef 8310 	mrs	r3, PRIMASK
 8000abe:	603b      	str	r3, [r7, #0]
  return(result);
 8000ac0:	683b      	ldr	r3, [r7, #0]
	PROLOG0();
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f383 8810 	msr	PRIMASK, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TimeDoctor_SAVE>:

void TimeDoctor_SAVE( int(*putchar_function)(int) )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	for( int i=0; i<buffer_used; ++i ) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00a      	b.n	8000b08 <TimeDoctor_SAVE+0x24>
		putchar_function(buffer[i]);
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <TimeDoctor_SAVE+0x50>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4610      	mov	r0, r2
 8000b00:	4798      	blx	r3
	for( int i=0; i<buffer_used; ++i ) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <TimeDoctor_SAVE+0x54>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbef      	blt.n	8000af2 <TimeDoctor_SAVE+0xe>
	}
	putchar_function('E');
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2045      	movs	r0, #69	; 0x45
 8000b16:	4798      	blx	r3
	putchar_function('N');
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	204e      	movs	r0, #78	; 0x4e
 8000b1c:	4798      	blx	r3
	putchar_function('D');
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2044      	movs	r0, #68	; 0x44
 8000b22:	4798      	blx	r3
	putchar_function('\n');
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	200a      	movs	r0, #10
 8000b28:	4798      	blx	r3
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20009e34 	.word	0x20009e34
 8000b38:	20009e30 	.word	0x20009e30

08000b3c <TimeDoctor_CREATE>:


/////////////////////// trace functions for task //////////////////////////////////////

void TimeDoctor_CREATE(  uint32_t uxTaskNumber, char* taskName )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b46:	f3ef 8211 	mrs	r2, BASEPRI
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	b672      	cpsid	i
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	b662      	cpsie	i
 8000b5e:	613a      	str	r2, [r7, #16]
 8000b60:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b62:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d820      	bhi.n	8000bb6 <TimeDoctor_CREATE+0x7a>

	buffer_used += sprintf( buffer+buffer_used, "CRE 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK());
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b7c:	18d0      	adds	r0, r2, r3
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <TimeDoctor_CREATE+0x94>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <TimeDoctor_CREATE+0x98>)
 8000b86:	f015 fbd9 	bl	801633c <siprintf>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 0 %lu %s\r\n", uxTaskNumber, taskName );
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b9e:	18d0      	adds	r0, r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <TimeDoctor_CREATE+0x9c>)
 8000ba6:	f015 fbc9 	bl	801633c <siprintf>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bb4:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f383 8811 	msr	BASEPRI, r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20009e30 	.word	0x20009e30
 8000bcc:	20009e34 	.word	0x20009e34
 8000bd0:	e0001000 	.word	0xe0001000
 8000bd4:	08016e0c 	.word	0x08016e0c
 8000bd8:	08016e1c 	.word	0x08016e1c

08000bdc <TimeDoctor_TASK_SWITCHED_IN>:

void TimeDoctor_TASK_SWITCHED_IN( uint32_t uxTaskNumber )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000be4:	f3ef 8211 	mrs	r2, BASEPRI
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	b672      	cpsid	i
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	b662      	cpsie	i
 8000bfc:	613a      	str	r2, [r7, #16]
 8000bfe:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c00:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d810      	bhi.n	8000c34 <TimeDoctor_TASK_SWITCHED_IN+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STA 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <TimeDoctor_TASK_SWITCHED_IN+0x70>)
 8000c1a:	18d0      	adds	r0, r2, r3
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <TimeDoctor_TASK_SWITCHED_IN+0x74>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <TimeDoctor_TASK_SWITCHED_IN+0x78>)
 8000c24:	f015 fb8a 	bl	801633c <siprintf>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c32:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20009e30 	.word	0x20009e30
 8000c4c:	20009e34 	.word	0x20009e34
 8000c50:	e0001000 	.word	0xe0001000
 8000c54:	08016e2c 	.word	0x08016e2c

08000c58 <TimeDoctor_TASK_SWITCHED_OUT>:

void TimeDoctor_TASK_SWITCHED_OUT(uint32_t uxTaskNumber )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000c60:	f3ef 8211 	mrs	r2, BASEPRI
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	b672      	cpsid	i
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	b662      	cpsie	i
 8000c78:	613a      	str	r2, [r7, #16]
 8000c7a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c7c:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d810      	bhi.n	8000cb0 <TimeDoctor_TASK_SWITCHED_OUT+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <TimeDoctor_TASK_SWITCHED_OUT+0x70>)
 8000c96:	18d0      	adds	r0, r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <TimeDoctor_TASK_SWITCHED_OUT+0x74>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <TimeDoctor_TASK_SWITCHED_OUT+0x78>)
 8000ca0:	f015 fb4c 	bl	801633c <siprintf>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000cae:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f383 8811 	msr	BASEPRI, r3
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20009e30 	.word	0x20009e30
 8000cc8:	20009e34 	.word	0x20009e34
 8000ccc:	e0001000 	.word	0xe0001000
 8000cd0:	08016e3c 	.word	0x08016e3c

08000cd4 <TimeDoctor_TASK_SUSPEND>:

	EPILOG();
}

void TimeDoctor_TASK_SUSPEND ( uint32_t uxTaskNumber)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	b672      	cpsid	i
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	b662      	cpsie	i
 8000cf4:	613a      	str	r2, [r7, #16]
 8000cf6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000cf8:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d810      	bhi.n	8000d2c <TimeDoctor_TASK_SUSPEND+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <TimeDoctor_TASK_SUSPEND+0x70>)
 8000d12:	18d0      	adds	r0, r2, r3
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <TimeDoctor_TASK_SUSPEND+0x74>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <TimeDoctor_TASK_SUSPEND+0x78>)
 8000d1c:	f015 fb0e 	bl	801633c <siprintf>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d2a:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f383 8811 	msr	BASEPRI, r3
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20009e30 	.word	0x20009e30
 8000d44:	20009e34 	.word	0x20009e34
 8000d48:	e0001000 	.word	0xe0001000
 8000d4c:	08016e3c 	.word	0x08016e3c

08000d50 <TimeDoctor_QUEUE_CREATE>:


/////////////////////// trace functions for queue //////////////////////////////////////

void TimeDoctor_QUEUE_CREATE( uint32_t *uxQueueNumber )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000d58:	f3ef 8211 	mrs	r2, BASEPRI
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	b672      	cpsid	i
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	b662      	cpsie	i
 8000d70:	613a      	str	r2, [r7, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000d74:	693b      	ldr	r3, [r7, #16]
	static uint32_t nextQueueNumber = 0;

	PROLOG();
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d818      	bhi.n	8000db8 <TimeDoctor_QUEUE_CREATE+0x68>

	*uxQueueNumber = nextQueueNumber++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d8e:	600a      	str	r2, [r1, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
 	buffer_used += sprintf( buffer+buffer_used, "CRE 3 %lu %lu\r\n", *uxQueueNumber, TD_GET_TICK() );
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <TimeDoctor_QUEUE_CREATE+0x84>)
 8000d9c:	18d0      	adds	r0, r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <TimeDoctor_QUEUE_CREATE+0x88>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <TimeDoctor_QUEUE_CREATE+0x8c>)
 8000da8:	f015 fac8 	bl	801633c <siprintf>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db6:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f383 8811 	msr	BASEPRI, r3
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20009e30 	.word	0x20009e30
 8000dd0:	200000f4 	.word	0x200000f4
 8000dd4:	20009e34 	.word	0x20009e34
 8000dd8:	e0001000 	.word	0xe0001000
 8000ddc:	08016e5c 	.word	0x08016e5c

08000de0 <Timedoctor_QUEUE_REGISTRY_ADD>:

void Timedoctor_QUEUE_REGISTRY_ADD( uint32_t uxQueueNumber, const char *pcQueueName )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 3 %lu %s\r\n", uxQueueNumber, pcQueueName );
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <Timedoctor_QUEUE_REGISTRY_ADD+0x38>)
 8000df2:	18d0      	adds	r0, r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <Timedoctor_QUEUE_REGISTRY_ADD+0x3c>)
 8000dfa:	f015 fa9f 	bl	801633c <siprintf>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20009e30 	.word	0x20009e30
 8000e18:	20009e34 	.word	0x20009e34
 8000e1c:	08016e6c 	.word	0x08016e6c

08000e20 <TimeDoctor_QUEUE_SEND>:

void TimeDoctor_QUEUE_SEND(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	b672      	cpsid	i
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	b662      	cpsie	i
 8000e42:	613a      	str	r2, [r7, #16]
 8000e44:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000e46:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d813      	bhi.n	8000e80 <TimeDoctor_QUEUE_SEND+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <TimeDoctor_QUEUE_SEND+0x78>)
 8000e60:	18d0      	adds	r0, r2, r3
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <TimeDoctor_QUEUE_SEND+0x7c>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2301      	movs	r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <TimeDoctor_QUEUE_SEND+0x80>)
 8000e70:	f015 fa64 	bl	801633c <siprintf>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e7e:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f383 8811 	msr	BASEPRI, r3
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20009e30 	.word	0x20009e30
 8000e98:	20009e34 	.word	0x20009e34
 8000e9c:	e0001000 	.word	0xe0001000
 8000ea0:	08016e7c 	.word	0x08016e7c

08000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>:

void TimeDoctor_QUEUE_SEND_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000eae:	f3ef 8211 	mrs	r2, BASEPRI
 8000eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb6:	b672      	cpsid	i
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	b662      	cpsie	i
 8000ec6:	613a      	str	r2, [r7, #16]
 8000ec8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000eca:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d813      	bhi.n	8000f04 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <TimeDoctor_QUEUE_SEND_FROM_ISR+0x78>)
 8000ee4:	18d0      	adds	r0, r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x7c>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x80>)
 8000ef4:	f015 fa22 	bl	801633c <siprintf>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000f02:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20009e30 	.word	0x20009e30
 8000f1c:	20009e34 	.word	0x20009e34
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	08016e7c 	.word	0x08016e7c

08000f28 <TimeDoctor_QUEUE_RECEIVE>:

void TimeDoctor_QUEUE_RECEIVE(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting) /*The number of items currently in the queue. */
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000f32:	f3ef 8211 	mrs	r2, BASEPRI
 8000f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3a:	b672      	cpsid	i
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	b662      	cpsie	i
 8000f4a:	613a      	str	r2, [r7, #16]
 8000f4c:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000f4e:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d813      	bhi.n	8000f88 <TimeDoctor_QUEUE_RECEIVE+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <TimeDoctor_QUEUE_RECEIVE+0x78>)
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <TimeDoctor_QUEUE_RECEIVE+0x7c>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <TimeDoctor_QUEUE_RECEIVE+0x80>)
 8000f78:	f015 f9e0 	bl	801633c <siprintf>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f86:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f383 8811 	msr	BASEPRI, r3
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20009e30 	.word	0x20009e30
 8000fa0:	20009e34 	.word	0x20009e34
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	08016e90 	.word	0x08016e90

08000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>:

void TimeDoctor_QUEUE_RECEIVE_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	b672      	cpsid	i
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	b662      	cpsie	i
 8000fce:	613a      	str	r2, [r7, #16]
 8000fd0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000fd2:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d813      	bhi.n	800100c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x78>)
 8000fec:	18d0      	adds	r0, r2, r3
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x7c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	490c      	ldr	r1, [pc, #48]	; (800102c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x80>)
 8000ffc:	f015 f99e 	bl	801633c <siprintf>
 8001000:	4602      	mov	r2, r0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 800100a:	6013      	str	r3, [r2, #0]

	EPILOG();
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f383 8811 	msr	BASEPRI, r3
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20009e30 	.word	0x20009e30
 8001024:	20009e34 	.word	0x20009e34
 8001028:	e0001000 	.word	0xe0001000
 800102c:	08016e90 	.word	0x08016e90

08001030 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
#define AUDIO_IN_SAMPLES_RATE 16000
#define AUDIO_IN_SAMPLES (AUDIO_IN_SAMPLES_RATE/10)
int16_t audio_in_buffer[AUDIO_IN_SAMPLES*2]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[0] , 0 , 0);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>)
 8001074:	f011 fe36 	bl	8012ce4 <osMessageQueuePut>
 8001078:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f113 0f03 	cmn.w	r3, #3
 8001080:	d004      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		Error_Handler();
 8001088:	f001 fc2c 	bl	80028e4 <Error_Handler>
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20019b10 	.word	0x20019b10
 8001098:	20019d34 	.word	0x20019d34

0800109c <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[AUDIO_IN_SAMPLES/2] , 0 , 0);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x30>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>)
 80010ac:	f011 fe1a 	bl	8012ce4 <osMessageQueuePut>
 80010b0:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f113 0f03 	cmn.w	r3, #3
 80010b8:	d004      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		Error_Handler();
 80010c0:	f001 fc10 	bl	80028e4 <Error_Handler>
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20019b10 	.word	0x20019b10
 80010d0:	2001a374 	.word	0x2001a374

080010d4 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <AudioRecordingFunction>:
void AudioRecordingFunction(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t ok;
	  ok = BSP_AUDIO_IN_Init(AUDIO_IN_SAMPLES_RATE, 16, 2);
 80010ec:	2202      	movs	r2, #2
 80010ee:	2110      	movs	r1, #16
 80010f0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010f4:	f004 fa41 	bl	800557a <BSP_AUDIO_IN_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <AudioRecordingFunction+0x22>
		  Error_Handler();
 8001102:	f001 fbef 	bl	80028e4 <Error_Handler>
	  }
	  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 8001106:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <AudioRecordingFunction+0x4c>)
 800110c:	f004 fab4 	bl	8005678 <BSP_AUDIO_IN_Record>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <AudioRecordingFunction+0x3a>
	  	  Error_Handler();
 800111a:	f001 fbe3 	bl	80028e4 <Error_Handler>
	    }
	  osThreadSuspend(audioRecordingHandle);
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <AudioRecordingFunction+0x50>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f011 fc5c 	bl	80129e0 <osThreadSuspend>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20019d34 	.word	0x20019d34
 8001134:	2001b6b4 	.word	0x2001b6b4

08001138 <calcdBFS>:
float calcdBFS(int16_t buffer[], int len){
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	float sum = 0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	e01b      	b.n	8001186 <calcdBFS+0x4e>
				sum += buffer[i]*buffer[i];
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	4619      	mov	r1, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	fb03 f301 	mul.w	r3, r3, r1
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed97 7a07 	vldr	s14, [r7, #28]
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	edc7 7a07 	vstr	s15, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3302      	adds	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbdf      	blt.n	800114e <calcdBFS+0x16>
			}
			sum /=  len/2 ;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da00      	bge.n	8001196 <calcdBFS+0x5e>
 8001194:	3301      	adds	r3, #1
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	edc7 7a07 	vstr	s15, [r7, #28]
			//float moyenne = sum / AUDIO_IN_SAMPLES*2/2;

			float maxSignal = (1<<15)-1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <calcdBFS+0xbc>)
 80011ae:	617b      	str	r3, [r7, #20]
			float maxMoyenne = maxSignal*maxSignal;
 80011b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a04 	vstr	s15, [r7, #16]

			float dBFS = 10 * log10f(sum/maxMoyenne);
 80011c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011cc:	eeb0 0a66 	vmov.f32	s0, s13
 80011d0:	f015 fbf8 	bl	80169c4 <log10f>
 80011d4:	eeb0 7a40 	vmov.f32	s14, s0
 80011d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]

	    return dBFS;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	46fffe00 	.word	0x46fffe00

080011f8 <AudioProcessingFunction>:
void AudioProcessingFunction(void *argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	int x = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;){
		static int16_t buffer[AUDIO_IN_SAMPLES*2/2];
		osStatus_t status = osMessageQueueGet(audioQueue, &buffer[0], NULL, 1000);
 8001204:	4b49      	ldr	r3, [pc, #292]	; (800132c <AudioProcessingFunction+0x134>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	2200      	movs	r2, #0
 800120e:	4948      	ldr	r1, [pc, #288]	; (8001330 <AudioProcessingFunction+0x138>)
 8001210:	f011 fddc 	bl	8012dcc <osMessageQueueGet>
 8001214:	61b8      	str	r0, [r7, #24]
		if(status != osOK){
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <AudioProcessingFunction+0x28>
			Error_Handler();
 800121c:	f001 fb62 	bl	80028e4 <Error_Handler>
		}
		float dBFS_A = calcdBFS(&buffer[0], AUDIO_IN_SAMPLES*2/2);
 8001220:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001224:	4842      	ldr	r0, [pc, #264]	; (8001330 <AudioProcessingFunction+0x138>)
 8001226:	f7ff ff87 	bl	8001138 <calcdBFS>
 800122a:	ed87 0a05 	vstr	s0, [r7, #20]
		float dBFS_B = calcdBFS(&buffer[1], AUDIO_IN_SAMPLES*2/2);
 800122e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001232:	4840      	ldr	r0, [pc, #256]	; (8001334 <AudioProcessingFunction+0x13c>)
 8001234:	f7ff ff80 	bl	8001138 <calcdBFS>
 8001238:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("dBFS= %4d\n", (int)dBFS);
		//BSP_LED_Toggle(LED1);
		float min =-60;
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <AudioProcessingFunction+0x140>)
 800123e:	60fb      	str	r3, [r7, #12]
		float max =0;
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]

		int h_A = (int)(BSP_LCD_GetYSize()/2 * (dBFS_A-min)/(max-min));
 8001246:	f004 fc45 	bl	8005ad4 <BSP_LCD_GetYSize>
 800124a:	4603      	mov	r3, r0
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001256:	edd7 6a05 	vldr	s13, [r7, #20]
 800125a:	edd7 7a03 	vldr	s15, [r7, #12]
 800125e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001262:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001266:	ed97 7a02 	vldr	s14, [r7, #8]
 800126a:	edd7 7a03 	vldr	s15, [r7, #12]
 800126e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	623b      	str	r3, [r7, #32]
		if(h_A <= 0 ){
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2b00      	cmp	r3, #0
 8001284:	dc01      	bgt.n	800128a <AudioProcessingFunction+0x92>
			h_A = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
		}
		BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2,h_A);
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	b29c      	uxth	r4, r3
 800128e:	f004 fc21 	bl	8005ad4 <BSP_LCD_GetYSize>
 8001292:	4603      	mov	r3, r0
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	6a3a      	ldr	r2, [r7, #32]
 800129a:	b292      	uxth	r2, r2
 800129c:	4619      	mov	r1, r3
 800129e:	4620      	mov	r0, r4
 80012a0:	f004 fe08 	bl	8005eb4 <BSP_LCD_DrawVLine>

		int h_B = (int)(BSP_LCD_GetYSize()/2 * (dBFS_B-min)/(max-min));
 80012a4:	f004 fc16 	bl	8005ad4 <BSP_LCD_GetYSize>
 80012a8:	4603      	mov	r3, r0
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80012b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	61fb      	str	r3, [r7, #28]
		if(h_B <= 0 ){
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dc01      	bgt.n	80012e8 <AudioProcessingFunction+0xf0>
			h_B = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
		}
		BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2-h_B,h_B);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	b29c      	uxth	r4, r3
 80012ec:	f004 fbf2 	bl	8005ad4 <BSP_LCD_GetYSize>
 80012f0:	4603      	mov	r3, r0
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	b292      	uxth	r2, r2
 8001302:	4619      	mov	r1, r3
 8001304:	4620      	mov	r0, r4
 8001306:	f004 fdd5 	bl	8005eb4 <BSP_LCD_DrawVLine>
		x++;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
		if(x == BSP_LCD_GetXSize()){
 8001310:	f004 fbcc 	bl	8005aac <BSP_LCD_GetXSize>
 8001314:	4602      	mov	r2, r0
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	429a      	cmp	r2, r3
 800131a:	f47f af73 	bne.w	8001204 <AudioProcessingFunction+0xc>
			BSP_LCD_Clear(LCD_COLOR_GRAY);
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <AudioProcessingFunction+0x144>)
 8001320:	f004 fc98 	bl	8005c54 <BSP_LCD_Clear>
			x = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;){
 8001328:	e76c      	b.n	8001204 <AudioProcessingFunction+0xc>
 800132a:	bf00      	nop
 800132c:	20019b10 	.word	0x20019b10
 8001330:	200000f8 	.word	0x200000f8
 8001334:	200000fa 	.word	0x200000fa
 8001338:	c2700000 	.word	0xc2700000
 800133c:	ff808080 	.word	0xff808080

08001340 <myPutchar>:
		}
	}
}
int myPutchar(int ch)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001348:	1d39      	adds	r1, r7, #4
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	2201      	movs	r2, #1
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <myPutchar+0x20>)
 8001352:	f00d fbf7 	bl	800eb44 <HAL_UART_Transmit>
	return ch;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20019c54 	.word	0x20019c54

08001364 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
	TimeDoctor_STOP();
 800136e:	f7ff fba1 	bl	8000ab4 <TimeDoctor_STOP>
	// save output to UART1
	TimeDoctor_SAVE(&myPutchar);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001374:	f7ff fbb6 	bl	8000ae4 <TimeDoctor_SAVE>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	08001341 	.word	0x08001341

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <main+0x134>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <main+0x134>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001394:	f005 f9e8 	bl	8006768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f8ae 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f001 f888 	bl	80024b0 <MX_GPIO_Init>
  MX_ADC3_Init();
 80013a0:	f000 f968 	bl	8001674 <MX_ADC3_Init>
  MX_CRC_Init();
 80013a4:	f000 f9b8 	bl	8001718 <MX_CRC_Init>
  MX_DCMI_Init();
 80013a8:	f000 f9d8 	bl	800175c <MX_DCMI_Init>
  MX_DMA2D_Init();
 80013ac:	f000 fa0a 	bl	80017c4 <MX_DMA2D_Init>
  MX_ETH_Init();
 80013b0:	f000 fa3a 	bl	8001828 <MX_ETH_Init>
  MX_FMC_Init();
 80013b4:	f001 f82c 	bl	8002410 <MX_FMC_Init>
  MX_I2C1_Init();
 80013b8:	f000 fa3e 	bl	8001838 <MX_I2C1_Init>
  MX_I2C3_Init();
 80013bc:	f000 fa7c 	bl	80018b8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013c0:	f000 faba 	bl	8001938 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80013c4:	f000 fb6e 	bl	8001aa4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80013c8:	f000 fb98 	bl	8001afc <MX_RTC_Init>
  MX_SAI2_Init();
 80013cc:	f000 fc3c 	bl	8001c48 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 80013d0:	f000 fce2 	bl	8001d98 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80013d4:	f000 fd10 	bl	8001df8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013d8:	f000 fdba 	bl	8001f50 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013dc:	f000 fe2e 	bl	800203c <MX_TIM3_Init>
  MX_TIM5_Init();
 80013e0:	f000 fea4 	bl	800212c <MX_TIM5_Init>
  MX_TIM8_Init();
 80013e4:	f000 ff1a 	bl	800221c <MX_TIM8_Init>
  MX_TIM12_Init();
 80013e8:	f000 ff6c 	bl	80022c4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80013ec:	f000 ffb0 	bl	8002350 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80013f0:	f000 ffde 	bl	80023b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80013f4:	f004 faea 	bl	80059cc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80013f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80013fc:	2000      	movs	r0, #0
 80013fe:	f004 fb7d 	bl	8005afc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 8001402:	482e      	ldr	r0, [pc, #184]	; (80014bc <main+0x138>)
 8001404:	f004 fc26 	bl	8005c54 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001408:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800140c:	f004 fbd6 	bl	8005bbc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 8001410:	482a      	ldr	r0, [pc, #168]	; (80014bc <main+0x138>)
 8001412:	f004 fbeb 	bl	8005bec <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 8001416:	f004 fb5d 	bl	8005ad4 <BSP_LCD_GetYSize>
 800141a:	4603      	mov	r3, r0
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	b299      	uxth	r1, r3
 8001420:	2301      	movs	r3, #1
 8001422:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <main+0x13c>)
 8001424:	2000      	movs	r0, #0
 8001426:	f004 fc81 	bl	8005d2c <BSP_LCD_DisplayStringAt>
  //LCD_LOG_Init();
  //LCD_LOG_SetHeader("Header");
  //LCD_LOG_SetFooter("Footer");


  TimeDoctor_START();
 800142a:	f7ff facd 	bl	80009c8 <TimeDoctor_START>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800142e:	f011 f9c7 	bl	80127c0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 8001432:	4824      	ldr	r0, [pc, #144]	; (80014c4 <main+0x140>)
 8001434:	f011 fb36 	bl	8012aa4 <osMutexNew>
 8001438:	4602      	mov	r2, r0
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <main+0x144>)
 800143c:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <main+0x144>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <main+0xc6>
	  Error_Handler();
 8001446:	f001 fa4d 	bl	80028e4 <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  audioQueue = osMessageQueueNew(2, sizeof(audio_in_buffer)/2 , &audioQueue_attributes);
 800144a:	4a20      	ldr	r2, [pc, #128]	; (80014cc <main+0x148>)
 800144c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8001450:	2002      	movs	r0, #2
 8001452:	f011 fbc1 	bl	8012bd8 <osMessageQueueNew>
 8001456:	4602      	mov	r2, r0
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <main+0x14c>)
 800145a:	601a      	str	r2, [r3, #0]
  if (audioQueue == NULL){
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <main+0x14c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <main+0xe4>
	  Error_Handler();
 8001464:	f001 fa3e 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001468:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <main+0x150>)
 800146a:	2100      	movs	r1, #0
 800146c:	481a      	ldr	r0, [pc, #104]	; (80014d8 <main+0x154>)
 800146e:	f011 fa11 	bl	8012894 <osThreadNew>
 8001472:	4602      	mov	r2, r0
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <main+0x158>)
 8001476:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  audioRecordingHandle = osThreadNew(&AudioRecordingFunction, NULL, &audioRecording_attributes);
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <main+0x15c>)
 800147a:	2100      	movs	r1, #0
 800147c:	4819      	ldr	r0, [pc, #100]	; (80014e4 <main+0x160>)
 800147e:	f011 fa09 	bl	8012894 <osThreadNew>
 8001482:	4602      	mov	r2, r0
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <main+0x164>)
 8001486:	601a      	str	r2, [r3, #0]
  if (audioRecordingHandle == NULL){
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <main+0x164>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <main+0x110>
	  Error_Handler();
 8001490:	f001 fa28 	bl	80028e4 <Error_Handler>
  }
  audioProcessingHandle = osThreadNew(&AudioProcessingFunction, NULL, &audioProcessing_attributes);
 8001494:	4a15      	ldr	r2, [pc, #84]	; (80014ec <main+0x168>)
 8001496:	2100      	movs	r1, #0
 8001498:	4815      	ldr	r0, [pc, #84]	; (80014f0 <main+0x16c>)
 800149a:	f011 f9fb 	bl	8012894 <osThreadNew>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0x170>)
 80014a2:	601a      	str	r2, [r3, #0]
  if (audioProcessingHandle == NULL){
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <main+0x170>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <main+0x12c>
	  Error_Handler();
 80014ac:	f001 fa1a 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014b0:	f011 f9ba 	bl	8012828 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <main+0x130>
 80014b6:	bf00      	nop
 80014b8:	e0042000 	.word	0xe0042000
 80014bc:	ff808080 	.word	0xff808080
 80014c0:	08016eec 	.word	0x08016eec
 80014c4:	08016f90 	.word	0x08016f90
 80014c8:	20019a88 	.word	0x20019a88
 80014cc:	08016fa0 	.word	0x08016fa0
 80014d0:	20019b10 	.word	0x20019b10
 80014d4:	08016f24 	.word	0x08016f24
 80014d8:	080028ad 	.word	0x080028ad
 80014dc:	200198b8 	.word	0x200198b8
 80014e0:	08016f48 	.word	0x08016f48
 80014e4:	080010e5 	.word	0x080010e5
 80014e8:	2001b6b4 	.word	0x2001b6b4
 80014ec:	08016f6c 	.word	0x08016f6c
 80014f0:	080011f9 	.word	0x080011f9
 80014f4:	20019a8c 	.word	0x20019a8c

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0b4      	sub	sp, #208	; 0xd0
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001502:	2230      	movs	r2, #48	; 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f014 fe57 	bl	80161ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2284      	movs	r2, #132	; 0x84
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f014 fe48 	bl	80161ba <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800152a:	f009 feab 	bl	800b284 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <SystemClock_Config+0x170>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <SystemClock_Config+0x170>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <SystemClock_Config+0x170>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <SystemClock_Config+0x174>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a48      	ldr	r2, [pc, #288]	; (800166c <SystemClock_Config+0x174>)
 800154c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <SystemClock_Config+0x174>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800155e:	2309      	movs	r3, #9
 8001560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001580:	2319      	movs	r3, #25
 8001582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001586:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800158a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001594:	2309      	movs	r3, #9
 8001596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 ff92 	bl	800b4c8 <HAL_RCC_OscConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80015aa:	f001 f99b 	bl	80028e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015ae:	f009 fe79 	bl	800b2a4 <HAL_PWREx_EnableOverDrive>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015b8:	f001 f994 	bl	80028e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015bc:	230f      	movs	r3, #15
 80015be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80015de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015e2:	2106      	movs	r1, #6
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a fa13 	bl	800ba10 <HAL_RCC_ClockConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80015f0:	f001 f978 	bl	80028e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <SystemClock_Config+0x178>)
 80015f6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80015f8:	2364      	movs	r3, #100	; 0x64
 80015fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001600:	2302      	movs	r3, #2
 8001602:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001604:	2302      	movs	r3, #2
 8001606:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001608:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800160c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800160e:	2305      	movs	r3, #5
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001616:	2303      	movs	r3, #3
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800162e:	2300      	movs	r3, #0
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001632:	2300      	movs	r3, #0
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001636:	2300      	movs	r3, #0
 8001638:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163a:	2300      	movs	r3, #0
 800163c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800163e:	2300      	movs	r3, #0
 8001640:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4618      	mov	r0, r3
 8001650:	f00a fbe2 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x166>
  {
    Error_Handler();
 800165a:	f001 f943 	bl	80028e4 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	37d0      	adds	r7, #208	; 0xd0
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40007000 	.word	0x40007000
 8001670:	01314868 	.word	0x01314868

08001674 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167a:	463b      	mov	r3, r7
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_ADC3_Init+0x98>)
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <MX_ADC3_Init+0x9c>)
 800168a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_ADC3_Init+0x98>)
 800168e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001692:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_ADC3_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_ADC3_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_ADC3_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_ADC3_Init+0x98>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_ADC3_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_ADC3_Init+0x98>)
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_ADC3_Init+0xa0>)
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_ADC3_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_ADC3_Init+0x98>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_ADC3_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_ADC3_Init+0x98>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_ADC3_Init+0x98>)
 80016d6:	f005 f897 	bl	8006808 <HAL_ADC_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016e0:	f001 f900 	bl	80028e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_ADC3_Init+0x98>)
 80016f6:	f005 f8cb 	bl	8006890 <HAL_ADC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001700:	f001 f8f0 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20019bbc 	.word	0x20019bbc
 8001710:	40012200 	.word	0x40012200
 8001714:	0f000001 	.word	0x0f000001

08001718 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MX_CRC_Init+0x3c>)
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <MX_CRC_Init+0x40>)
 8001720:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_CRC_Init+0x3c>)
 8001724:	2200      	movs	r2, #0
 8001726:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_CRC_Init+0x3c>)
 800172a:	2200      	movs	r2, #0
 800172c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_CRC_Init+0x3c>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_CRC_Init+0x3c>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_CRC_Init+0x3c>)
 800173c:	2201      	movs	r2, #1
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_CRC_Init+0x3c>)
 8001742:	f005 fbcb 	bl	8006edc <HAL_CRC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800174c:	f001 f8ca 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20019a64 	.word	0x20019a64
 8001758:	40023000 	.word	0x40023000

0800175c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_DCMI_Init+0x60>)
 8001762:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <MX_DCMI_Init+0x64>)
 8001764:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_DCMI_Init+0x60>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_DCMI_Init+0x60>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_DCMI_Init+0x60>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_DCMI_Init+0x60>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_DCMI_Init+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <MX_DCMI_Init+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_DCMI_Init+0x60>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_DCMI_Init+0x60>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_DCMI_Init+0x60>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_DCMI_Init+0x60>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_DCMI_Init+0x60>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_DCMI_Init+0x60>)
 80017aa:	f005 fc81 	bl	80070b0 <HAL_DCMI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80017b4:	f001 f896 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20019c04 	.word	0x20019c04
 80017c0:	50050000 	.word	0x50050000

080017c4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <MX_DMA2D_Init+0x60>)
 80017cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_DMA2D_Init+0x5c>)
 80017fa:	f006 f8a7 	bl	800794c <HAL_DMA2D_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001804:	f001 f86e 	bl	80028e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001808:	2101      	movs	r1, #1
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_DMA2D_Init+0x5c>)
 800180c:	f006 fb0c 	bl	8007e28 <HAL_DMA2D_ConfigLayer>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001816:	f001 f865 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2001b6b8 	.word	0x2001b6b8
 8001824:	4002b000 	.word	0x4002b000

08001828 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */
return;
 800182c:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_I2C1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_I2C1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_I2C1_Init+0x74>)
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_I2C1_Init+0x7c>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_I2C1_Init+0x74>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_I2C1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <MX_I2C1_Init+0x74>)
 8001874:	f008 fbde 	bl	800a034 <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187e:	f001 f831 	bl	80028e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <MX_I2C1_Init+0x74>)
 8001886:	f009 f8ed 	bl	800aa64 <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001890:	f001 f828 	bl	80028e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_I2C1_Init+0x74>)
 8001898:	f009 f92f 	bl	800aafa <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f001 f81f 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20019a18 	.word	0x20019a18
 80018b0:	40005400 	.word	0x40005400
 80018b4:	00c0eaff 	.word	0x00c0eaff

080018b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_I2C3_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <MX_I2C3_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_I2C3_Init+0x74>)
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <MX_I2C3_Init+0x7c>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_I2C3_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_I2C3_Init+0x74>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_I2C3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_I2C3_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C3_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C3_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C3_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <MX_I2C3_Init+0x74>)
 80018f4:	f008 fb9e 	bl	800a034 <HAL_I2C_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018fe:	f000 fff1 	bl	80028e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <MX_I2C3_Init+0x74>)
 8001906:	f009 f8ad 	bl	800aa64 <HAL_I2CEx_ConfigAnalogFilter>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001910:	f000 ffe8 	bl	80028e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_I2C3_Init+0x74>)
 8001918:	f009 f8ef 	bl	800aafa <HAL_I2CEx_ConfigDigitalFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 ffdf 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200198bc 	.word	0x200198bc
 8001930:	40005c00 	.word	0x40005c00
 8001934:	00c0eaff 	.word	0x00c0eaff

08001938 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09a      	sub	sp, #104	; 0x68
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800193e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001942:	2234      	movs	r2, #52	; 0x34
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f014 fc37 	bl	80161ba <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2234      	movs	r2, #52	; 0x34
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f014 fc31 	bl	80161ba <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <MX_LTDC_Init+0x164>)
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <MX_LTDC_Init+0x168>)
 800195c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800195e:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800196a:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <MX_LTDC_Init+0x164>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001976:	4b49      	ldr	r3, [pc, #292]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001978:	2228      	movs	r2, #40	; 0x28
 800197a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <MX_LTDC_Init+0x164>)
 800197e:	2209      	movs	r2, #9
 8001980:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001982:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001984:	2235      	movs	r2, #53	; 0x35
 8001986:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001988:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <MX_LTDC_Init+0x164>)
 800198a:	220b      	movs	r2, #11
 800198c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001990:	f240 2215 	movw	r2, #533	; 0x215
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001998:	f240 121b 	movw	r2, #283	; 0x11b
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019a0:	f240 2235 	movw	r2, #565	; 0x235
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019a8:	f240 121d 	movw	r2, #285	; 0x11d
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <MX_LTDC_Init+0x164>)
 80019c8:	f009 f8e4 	bl	800ab94 <HAL_LTDC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80019d2:	f000 ff87 	bl	80028e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80019da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80019e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019e8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019ea:	2302      	movs	r3, #2
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80019ee:	23ff      	movs	r3, #255	; 0xff
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019fa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019fc:	2307      	movs	r3, #7
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001a00:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001a06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001a0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a10:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001a2e:	f009 fa43 	bl	800aeb8 <HAL_LTDC_ConfigLayer>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001a38:	f000 ff54 	bl	80028e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_LTDC_Init+0x164>)
 8001a84:	f009 fa18 	bl	800aeb8 <HAL_LTDC_ConfigLayer>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8001a8e:	f000 ff29 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3768      	adds	r7, #104	; 0x68
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20019b14 	.word	0x20019b14
 8001aa0:	40016800 	.word	0x40016800

08001aa4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <MX_QUADSPI_Init+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_QUADSPI_Init+0x50>)
 8001ae0:	f009 fc30 	bl	800b344 <HAL_QSPI_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001aea:	f000 fefb 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2001b7f4 	.word	0x2001b7f4
 8001af8:	a0001000 	.word	0xa0001000

08001afc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	; 0x48
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	222c      	movs	r2, #44	; 0x2c
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f014 fb4b 	bl	80161ba <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b26:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <MX_RTC_Init+0x148>)
 8001b28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b2a:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b30:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b32:	227f      	movs	r2, #127	; 0x7f
 8001b34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b38:	22ff      	movs	r2, #255	; 0xff
 8001b3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b3c:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b48:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b4e:	483c      	ldr	r0, [pc, #240]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b50:	f00a ff90 	bl	800ca74 <HAL_RTC_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001b5a:	f000 fec3 	bl	80028e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4619      	mov	r1, r3
 8001b80:	482f      	ldr	r0, [pc, #188]	; (8001c40 <MX_RTC_Init+0x144>)
 8001b82:	f00a fff3 	bl	800cb6c <HAL_RTC_SetTime>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001b8c:	f000 feaa 	bl	80028e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	2201      	movs	r2, #1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4823      	ldr	r0, [pc, #140]	; (8001c40 <MX_RTC_Init+0x144>)
 8001bb2:	f00b f899 	bl	800cce8 <HAL_RTC_SetDate>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001bbc:	f000 fe92 	bl	80028e4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <MX_RTC_Init+0x144>)
 8001bf8:	f00b f91e 	bl	800ce38 <HAL_RTC_SetAlarm>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001c02:	f000 fe6f 	bl	80028e4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4619      	mov	r1, r3
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <MX_RTC_Init+0x144>)
 8001c14:	f00b f910 	bl	800ce38 <HAL_RTC_SetAlarm>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001c1e:	f000 fe61 	bl	80028e4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c22:	2202      	movs	r2, #2
 8001c24:	2100      	movs	r1, #0
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_RTC_Init+0x144>)
 8001c28:	f00b fa90 	bl	800d14c <HAL_RTCEx_SetTimeStamp>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001c32:	f000 fe57 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3748      	adds	r7, #72	; 0x48
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20019cd4 	.word	0x20019cd4
 8001c44:	40002800 	.word	0x40002800

08001c48 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <MX_SAI2_Init+0x140>)
 8001c50:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c52:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c70:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c82:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c88:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <MX_SAI2_Init+0x144>)
 8001c8c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001ca8:	2208      	movs	r2, #8
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cca:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001cdc:	4829      	ldr	r0, [pc, #164]	; (8001d84 <MX_SAI2_Init+0x13c>)
 8001cde:	f00b fa8b 	bl	800d1f8 <HAL_SAI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001ce8:	f000 fdfc 	bl	80028e4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <MX_SAI2_Init+0x14c>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_SAI2_Init+0x148>)
 8001d72:	f00b fa41 	bl	800d1f8 <HAL_SAI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001d7c:	f000 fdb2 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20019994 	.word	0x20019994
 8001d88:	40015c04 	.word	0x40015c04
 8001d8c:	0002ee00 	.word	0x0002ee00
 8001d90:	20019834 	.word	0x20019834
 8001d94:	40015c24 	.word	0x40015c24

08001d98 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001d9e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001da2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_SPDIFRX_Init+0x5c>)
 8001de2:	f00b fda9 	bl	800d938 <HAL_SPDIFRX_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001dec:	f000 fd7a 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20019948 	.word	0x20019948

08001df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b09a      	sub	sp, #104	; 0x68
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]
 8001e2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	222c      	movs	r2, #44	; 0x2c
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f014 f9c1 	bl	80161ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e38:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e3a:	4a44      	ldr	r2, [pc, #272]	; (8001f4c <MX_TIM1_Init+0x154>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e3e:	4b42      	ldr	r3, [pc, #264]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e64:	4838      	ldr	r0, [pc, #224]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e66:	f00b fdc3 	bl	800d9f0 <HAL_TIM_Base_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e70:	f000 fd38 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4831      	ldr	r0, [pc, #196]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e82:	f00c f86d 	bl	800df60 <HAL_TIM_ConfigClockSource>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e8c:	f000 fd2a 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e90:	482d      	ldr	r0, [pc, #180]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001e92:	f00b fe03 	bl	800da9c <HAL_TIM_PWM_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e9c:	f000 fd22 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4825      	ldr	r0, [pc, #148]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001eb4:	f00c fcce 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ebe:	f000 fd11 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001ee8:	f00b ff22 	bl	800dd30 <HAL_TIM_PWM_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001ef2:	f000 fcf7 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001f2c:	f00c fd20 	bl	800e970 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001f36:	f000 fcd5 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM1_Init+0x150>)
 8001f3c:	f001 f952 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3768      	adds	r7, #104	; 0x68
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20019cf4 	.word	0x20019cf4
 8001f4c:	40010000 	.word	0x40010000

08001f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001f84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001faa:	4823      	ldr	r0, [pc, #140]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001fac:	f00b fd20 	bl	800d9f0 <HAL_TIM_Base_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001fb6:	f000 fc95 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481c      	ldr	r0, [pc, #112]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001fc8:	f00b ffca 	bl	800df60 <HAL_TIM_ConfigClockSource>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001fd2:	f000 fc87 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001fd8:	f00b fd60 	bl	800da9c <HAL_TIM_PWM_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001fe2:	f000 fc7f 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4810      	ldr	r0, [pc, #64]	; (8002038 <MX_TIM2_Init+0xe8>)
 8001ff6:	f00c fc2d 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002000:	f000 fc70 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002004:	2360      	movs	r3, #96	; 0x60
 8002006:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <MX_TIM2_Init+0xe8>)
 800201c:	f00b fe88 	bl	800dd30 <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002026:	f000 fc5d 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800202a:	4803      	ldr	r0, [pc, #12]	; (8002038 <MX_TIM2_Init+0xe8>)
 800202c:	f001 f8da 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002030:	bf00      	nop
 8002032:	3738      	adds	r7, #56	; 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2001b6f8 	.word	0x2001b6f8

0800203c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <MX_TIM3_Init+0xec>)
 8002072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <MX_TIM3_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <MX_TIM3_Init+0xe8>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002094:	4823      	ldr	r0, [pc, #140]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002096:	f00b fcab 	bl	800d9f0 <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80020a0:	f000 fc20 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	4619      	mov	r1, r3
 80020b0:	481c      	ldr	r0, [pc, #112]	; (8002124 <MX_TIM3_Init+0xe8>)
 80020b2:	f00b ff55 	bl	800df60 <HAL_TIM_ConfigClockSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80020bc:	f000 fc12 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020c0:	4818      	ldr	r0, [pc, #96]	; (8002124 <MX_TIM3_Init+0xe8>)
 80020c2:	f00b fceb 	bl	800da9c <HAL_TIM_PWM_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80020cc:	f000 fc0a 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4811      	ldr	r0, [pc, #68]	; (8002124 <MX_TIM3_Init+0xe8>)
 80020e0:	f00c fbb8 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020ea:	f000 fbfb 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ee:	2360      	movs	r3, #96	; 0x60
 80020f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002106:	f00b fe13 	bl	800dd30 <HAL_TIM_PWM_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002110:	f000 fbe8 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <MX_TIM3_Init+0xe8>)
 8002116:	f001 f865 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 800211a:	bf00      	nop
 800211c:	3738      	adds	r7, #56	; 0x38
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20019ad0 	.word	0x20019ad0
 8002128:	40000400 	.word	0x40000400

0800212c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	; 0x38
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002160:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <MX_TIM5_Init+0xec>)
 8002162:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002166:	2200      	movs	r2, #0
 8002168:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MX_TIM5_Init+0xe8>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <MX_TIM5_Init+0xe8>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002184:	4823      	ldr	r0, [pc, #140]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002186:	f00b fc33 	bl	800d9f0 <HAL_TIM_Base_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002190:	f000 fba8 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800219a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219e:	4619      	mov	r1, r3
 80021a0:	481c      	ldr	r0, [pc, #112]	; (8002214 <MX_TIM5_Init+0xe8>)
 80021a2:	f00b fedd 	bl	800df60 <HAL_TIM_ConfigClockSource>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80021ac:	f000 fb9a 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021b0:	4818      	ldr	r0, [pc, #96]	; (8002214 <MX_TIM5_Init+0xe8>)
 80021b2:	f00b fc73 	bl	800da9c <HAL_TIM_PWM_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80021bc:	f000 fb92 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4619      	mov	r1, r3
 80021ce:	4811      	ldr	r0, [pc, #68]	; (8002214 <MX_TIM5_Init+0xe8>)
 80021d0:	f00c fb40 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80021da:	f000 fb83 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021de:	2360      	movs	r3, #96	; 0x60
 80021e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ee:	463b      	mov	r3, r7
 80021f0:	220c      	movs	r2, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <MX_TIM5_Init+0xe8>)
 80021f6:	f00b fd9b 	bl	800dd30 <HAL_TIM_PWM_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002200:	f000 fb70 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <MX_TIM5_Init+0xe8>)
 8002206:	f000 ffed 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 800220a:	bf00      	nop
 800220c:	3738      	adds	r7, #56	; 0x38
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20019a90 	.word	0x20019a90
 8002218:	40000c00 	.word	0x40000c00

0800221c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0310 	add.w	r3, r7, #16
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <MX_TIM8_Init+0xa0>)
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <MX_TIM8_Init+0xa4>)
 800223e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <MX_TIM8_Init+0xa0>)
 800224e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002252:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_TIM8_Init+0xa0>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002266:	4815      	ldr	r0, [pc, #84]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002268:	f00b fbc2 	bl	800d9f0 <HAL_TIM_Base_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002272:	f000 fb37 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4619      	mov	r1, r3
 8002282:	480e      	ldr	r0, [pc, #56]	; (80022bc <MX_TIM8_Init+0xa0>)
 8002284:	f00b fe6c 	bl	800df60 <HAL_TIM_ConfigClockSource>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800228e:	f000 fb29 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_TIM8_Init+0xa0>)
 80022a4:	f00c fad6 	bl	800e854 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022ae:	f000 fb19 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20019908 	.word	0x20019908
 80022c0:	40010400 	.word	0x40010400

080022c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_TIM12_Init+0x84>)
 80022de:	4a1b      	ldr	r2, [pc, #108]	; (800234c <MX_TIM12_Init+0x88>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <MX_TIM12_Init+0x84>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_TIM12_Init+0x84>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MX_TIM12_Init+0x84>)
 80022f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_TIM12_Init+0x84>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_TIM12_Init+0x84>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002302:	4811      	ldr	r0, [pc, #68]	; (8002348 <MX_TIM12_Init+0x84>)
 8002304:	f00b fbca 	bl	800da9c <HAL_TIM_PWM_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800230e:	f000 fae9 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002312:	2360      	movs	r3, #96	; 0x60
 8002314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <MX_TIM12_Init+0x84>)
 800232a:	f00b fd01 	bl	800dd30 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002334:	f000 fad6 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <MX_TIM12_Init+0x84>)
 800233a:	f000 ff53 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2001b738 	.word	0x2001b738
 800234c:	40001800 	.word	0x40001800

08002350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <MX_USART1_UART_Init+0x5c>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART1_UART_Init+0x58>)
 8002394:	f00c fb88 	bl	800eaa8 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800239e:	f000 faa1 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20019c54 	.word	0x20019c54
 80023ac:	40011000 	.word	0x40011000

080023b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <MX_USART6_UART_Init+0x5c>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_USART6_UART_Init+0x58>)
 80023f4:	f00c fb58 	bl	800eaa8 <HAL_UART_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80023fe:	f000 fa71 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2001b634 	.word	0x2001b634
 800240c:	40011400 	.word	0x40011400

08002410 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
 8002424:	615a      	str	r2, [r3, #20]
 8002426:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <MX_FMC_Init+0x98>)
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <MX_FMC_Init+0x9c>)
 800242c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <MX_FMC_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <MX_FMC_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <MX_FMC_Init+0x98>)
 800243c:	2204      	movs	r2, #4
 800243e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <MX_FMC_Init+0x98>)
 8002442:	2210      	movs	r2, #16
 8002444:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_FMC_Init+0x98>)
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <MX_FMC_Init+0x98>)
 800244e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002452:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_FMC_Init+0x98>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_FMC_Init+0x98>)
 800245c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002460:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_FMC_Init+0x98>)
 8002464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_FMC_Init+0x98>)
 800246c:	2200      	movs	r2, #0
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002470:	2302      	movs	r3, #2
 8002472:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002474:	2307      	movs	r3, #7
 8002476:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002478:	2304      	movs	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800247c:	2307      	movs	r3, #7
 800247e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002480:	2303      	movs	r3, #3
 8002482:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_FMC_Init+0x98>)
 8002492:	f00b f9d2 	bl	800d83a <HAL_SDRAM_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800249c:	f000 fa22 	bl	80028e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	2001b778 	.word	0x2001b778
 80024ac:	a0000140 	.word	0xa0000140

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b090      	sub	sp, #64	; 0x40
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c6:	4baf      	ldr	r3, [pc, #700]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4aae      	ldr	r2, [pc, #696]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4bac      	ldr	r3, [pc, #688]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024de:	4ba9      	ldr	r3, [pc, #676]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4aa8      	ldr	r2, [pc, #672]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4ba6      	ldr	r3, [pc, #664]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	4ba3      	ldr	r3, [pc, #652]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4aa2      	ldr	r2, [pc, #648]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4ba0      	ldr	r3, [pc, #640]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800250e:	4b9d      	ldr	r3, [pc, #628]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a9c      	ldr	r2, [pc, #624]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b9a      	ldr	r3, [pc, #616]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002526:	4b97      	ldr	r3, [pc, #604]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a96      	ldr	r2, [pc, #600]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b94      	ldr	r3, [pc, #592]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b91      	ldr	r3, [pc, #580]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a90      	ldr	r2, [pc, #576]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002556:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800255c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b88      	ldr	r3, [pc, #544]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a84      	ldr	r2, [pc, #528]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <MX_GPIO_Init+0x2d4>)
 800258c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <MX_GPIO_Init+0x2d4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800259e:	4b79      	ldr	r3, [pc, #484]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a78      	ldr	r2, [pc, #480]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a72      	ldr	r2, [pc, #456]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <MX_GPIO_Init+0x2d4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2120      	movs	r1, #32
 80025d2:	486d      	ldr	r0, [pc, #436]	; (8002788 <MX_GPIO_Init+0x2d8>)
 80025d4:	f006 f80a 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	210e      	movs	r1, #14
 80025dc:	486b      	ldr	r0, [pc, #428]	; (800278c <MX_GPIO_Init+0x2dc>)
 80025de:	f006 f805 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2108      	movs	r1, #8
 80025e6:	486a      	ldr	r0, [pc, #424]	; (8002790 <MX_GPIO_Init+0x2e0>)
 80025e8:	f006 f800 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	4866      	ldr	r0, [pc, #408]	; (800278c <MX_GPIO_Init+0x2dc>)
 80025f4:	f005 fffa 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025fe:	4865      	ldr	r0, [pc, #404]	; (8002794 <MX_GPIO_Init+0x2e4>)
 8002600:	f005 fff4 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	21c8      	movs	r1, #200	; 0xc8
 8002608:	4863      	ldr	r0, [pc, #396]	; (8002798 <MX_GPIO_Init+0x2e8>)
 800260a:	f005 ffef 	bl	80085ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800260e:	2308      	movs	r3, #8
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002612:	2300      	movs	r3, #0
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261e:	4619      	mov	r1, r3
 8002620:	485e      	ldr	r0, [pc, #376]	; (800279c <MX_GPIO_Init+0x2ec>)
 8002622:	f005 fd2f 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002626:	f643 4323 	movw	r3, #15395	; 0x3c23
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002638:	230a      	movs	r3, #10
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002640:	4619      	mov	r1, r3
 8002642:	4857      	ldr	r0, [pc, #348]	; (80027a0 <MX_GPIO_Init+0x2f0>)
 8002644:	f005 fd1e 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002648:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800265a:	230c      	movs	r3, #12
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	484f      	ldr	r0, [pc, #316]	; (80027a4 <MX_GPIO_Init+0x2f4>)
 8002666:	f005 fd0d 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267c:	4619      	mov	r1, r3
 800267e:	484a      	ldr	r0, [pc, #296]	; (80027a8 <MX_GPIO_Init+0x2f8>)
 8002680:	f005 fd00 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002684:	2340      	movs	r3, #64	; 0x40
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <MX_GPIO_Init+0x2fc>)
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002694:	4619      	mov	r1, r3
 8002696:	483c      	ldr	r0, [pc, #240]	; (8002788 <MX_GPIO_Init+0x2d8>)
 8002698:	f005 fcf4 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800269c:	2320      	movs	r3, #32
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b0:	4619      	mov	r1, r3
 80026b2:	4835      	ldr	r0, [pc, #212]	; (8002788 <MX_GPIO_Init+0x2d8>)
 80026b4:	f005 fce6 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80026b8:	f241 030e 	movw	r3, #4110	; 0x100e
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ce:	4619      	mov	r1, r3
 80026d0:	482e      	ldr	r0, [pc, #184]	; (800278c <MX_GPIO_Init+0x2dc>)
 80026d2:	f005 fcd7 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e8:	4619      	mov	r1, r3
 80026ea:	482e      	ldr	r0, [pc, #184]	; (80027a4 <MX_GPIO_Init+0x2f4>)
 80026ec:	f005 fcca 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80026f0:	2308      	movs	r3, #8
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f4:	2301      	movs	r3, #1
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002704:	4619      	mov	r1, r3
 8002706:	4822      	ldr	r0, [pc, #136]	; (8002790 <MX_GPIO_Init+0x2e0>)
 8002708:	f005 fcbc 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800270c:	2310      	movs	r3, #16
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002710:	2300      	movs	r3, #0
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	481a      	ldr	r0, [pc, #104]	; (8002788 <MX_GPIO_Init+0x2d8>)
 8002720:	f005 fcb0 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002724:	f248 0304 	movw	r3, #32772	; 0x8004
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272a:	2300      	movs	r3, #0
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002736:	4619      	mov	r1, r3
 8002738:	4816      	ldr	r0, [pc, #88]	; (8002794 <MX_GPIO_Init+0x2e4>)
 800273a:	f005 fca3 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800273e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	480f      	ldr	r0, [pc, #60]	; (8002794 <MX_GPIO_Init+0x2e4>)
 8002758:	f005 fc94 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800275c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_GPIO_Init+0x300>)
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_GPIO_Init+0x2dc>)
 8002772:	f005 fc87 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <MX_GPIO_Init+0x2fc>)
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
 8002780:	e018      	b.n	80027b4 <MX_GPIO_Init+0x304>
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40022000 	.word	0x40022000
 8002790:	40022800 	.word	0x40022800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40021800 	.word	0x40021800
 800279c:	40021000 	.word	0x40021000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40022400 	.word	0x40022400
 80027ac:	10120000 	.word	0x10120000
 80027b0:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027bc:	4619      	mov	r1, r3
 80027be:	4835      	ldr	r0, [pc, #212]	; (8002894 <MX_GPIO_Init+0x3e4>)
 80027c0:	f005 fc60 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80027c4:	2310      	movs	r3, #16
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80027d4:	230a      	movs	r3, #10
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027dc:	4619      	mov	r1, r3
 80027de:	482e      	ldr	r0, [pc, #184]	; (8002898 <MX_GPIO_Init+0x3e8>)
 80027e0:	f005 fc50 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80027e4:	23c8      	movs	r3, #200	; 0xc8
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f8:	4619      	mov	r1, r3
 80027fa:	4828      	ldr	r0, [pc, #160]	; (800289c <MX_GPIO_Init+0x3ec>)
 80027fc:	f005 fc42 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002800:	2305      	movs	r3, #5
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002810:	230a      	movs	r3, #10
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002818:	4619      	mov	r1, r3
 800281a:	4821      	ldr	r0, [pc, #132]	; (80028a0 <MX_GPIO_Init+0x3f0>)
 800281c:	f005 fc32 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002820:	2304      	movs	r3, #4
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	481a      	ldr	r0, [pc, #104]	; (800289c <MX_GPIO_Init+0x3ec>)
 8002834:	f005 fc26 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002838:	2328      	movs	r3, #40	; 0x28
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002848:	230a      	movs	r3, #10
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	4814      	ldr	r0, [pc, #80]	; (80028a4 <MX_GPIO_Init+0x3f4>)
 8002854:	f005 fc16 	bl	8008084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002858:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800286a:	2305      	movs	r3, #5
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <MX_GPIO_Init+0x3f8>)
 8002876:	f005 fc05 	bl	8008084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	2028      	movs	r0, #40	; 0x28
 8002880:	f004 fb02 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002884:	2028      	movs	r0, #40	; 0x28
 8002886:	f004 fb1b 	bl	8006ec0 <HAL_NVIC_EnableIRQ>

}
 800288a:	bf00      	nop
 800288c:	3740      	adds	r7, #64	; 0x40
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40021c00 	.word	0x40021c00
 800289c:	40021800 	.word	0x40021800
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400

080028ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80028b4:	f013 f946 	bl	8015b44 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f010 f8c5 	bl	8012a48 <osDelay>
 80028be:	e7fb      	b.n	80028b8 <StartDefaultTask+0xc>

080028c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028d2:	f003 ff57 	bl	8006784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40001000 	.word	0x40001000

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1);
 80028e8:	e7fe      	b.n	80028e8 <Error_Handler+0x4>
	...

080028ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_MspInit+0x4c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_MspInit+0x4c>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_MspInit+0x4c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_MspInit+0x4c>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_MspInit+0x4c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	210f      	movs	r1, #15
 8002926:	f06f 0001 	mvn.w	r0, #1
 800292a:	f004 faad 	bl	8006e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_ADC_MspInit+0xa4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13c      	bne.n	80029d8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 800297c:	f043 0320 	orr.w	r3, r3, #32
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_ADC_MspInit+0xa8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80029a6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80029aa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ac:	2303      	movs	r3, #3
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	480b      	ldr	r0, [pc, #44]	; (80029e8 <HAL_ADC_MspInit+0xac>)
 80029bc:	f005 fb62 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80029c0:	2301      	movs	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029c4:	2303      	movs	r3, #3
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	4806      	ldr	r0, [pc, #24]	; (80029ec <HAL_ADC_MspInit+0xb0>)
 80029d4:	f005 fb56 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40012200 	.word	0x40012200
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40020000 	.word	0x40020000

080029f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_CRC_MspInit+0x38>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10b      	bne.n	8002a1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_CRC_MspInit+0x3c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_CRC_MspInit+0x3c>)
 8002a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_CRC_MspInit+0x3c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023000 	.word	0x40023000
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <HAL_DCMI_MspInit+0x160>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f040 809a 	bne.w	8002b88 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4a48      	ldr	r2, [pc, #288]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	6313      	str	r3, [r2, #48]	; 0x30
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a84:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a36      	ldr	r2, [pc, #216]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4a30      	ldr	r2, [pc, #192]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_DCMI_MspInit+0x164>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002ae4:	2360      	movs	r3, #96	; 0x60
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002af4:	230d      	movs	r3, #13
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afc:	4619      	mov	r1, r3
 8002afe:	4826      	ldr	r0, [pc, #152]	; (8002b98 <HAL_DCMI_MspInit+0x168>)
 8002b00:	f005 fac0 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b04:	2308      	movs	r3, #8
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b14:	230d      	movs	r3, #13
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	481f      	ldr	r0, [pc, #124]	; (8002b9c <HAL_DCMI_MspInit+0x16c>)
 8002b20:	f005 fab0 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b36:	230d      	movs	r3, #13
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4817      	ldr	r0, [pc, #92]	; (8002ba0 <HAL_DCMI_MspInit+0x170>)
 8002b42:	f005 fa9f 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002b46:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b58:	230d      	movs	r3, #13
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4810      	ldr	r0, [pc, #64]	; (8002ba4 <HAL_DCMI_MspInit+0x174>)
 8002b64:	f005 fa8e 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002b68:	2350      	movs	r3, #80	; 0x50
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b78:	230d      	movs	r3, #13
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b80:	4619      	mov	r1, r3
 8002b82:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <HAL_DCMI_MspInit+0x178>)
 8002b84:	f005 fa7e 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	3738      	adds	r7, #56	; 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	50050000 	.word	0x50050000
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00
 8002ba8:	40020000 	.word	0x40020000

08002bac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_DMA2D_MspInit+0x44>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_DMA2D_MspInit+0x48>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_DMA2D_MspInit+0x48>)
 8002bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_DMA2D_MspInit+0x48>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	205a      	movs	r0, #90	; 0x5a
 8002bdc:	f004 f954 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002be0:	205a      	movs	r0, #90	; 0x5a
 8002be2:	f004 f96d 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	4002b000 	.word	0x4002b000
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_I2C_MspInit+0xdc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d129      	bne.n	8002c6e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a2e      	ldr	r2, [pc, #184]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c38:	2312      	movs	r3, #18
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c44:	2304      	movs	r3, #4
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4823      	ldr	r0, [pc, #140]	; (8002cdc <HAL_I2C_MspInit+0xe4>)
 8002c50:	f005 fa18 	bl	8008084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c6c:	e02d      	b.n	8002cca <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_I2C_MspInit+0xe8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d128      	bne.n	8002cca <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	6313      	str	r3, [r2, #48]	; 0x30
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002c90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c96:	2312      	movs	r3, #18
 8002c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	4619      	mov	r1, r3
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <HAL_I2C_MspInit+0xec>)
 8002cae:	f005 f9e9 	bl	8008084 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_I2C_MspInit+0xe0>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	bf00      	nop
 8002ccc:	3730      	adds	r7, #48	; 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020400 	.word	0x40020400
 8002ce0:	40005c00 	.word	0x40005c00
 8002ce4:	40021c00 	.word	0x40021c00

08002ce8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_I2C_MspDeInit+0x64>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d110      	bne.n	8002d1c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_I2C_MspDeInit+0x68>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_I2C_MspDeInit+0x68>)
 8002d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d0a:	4812      	ldr	r0, [pc, #72]	; (8002d54 <HAL_I2C_MspDeInit+0x6c>)
 8002d0c:	f005 fb64 	bl	80083d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d14:	480f      	ldr	r0, [pc, #60]	; (8002d54 <HAL_I2C_MspDeInit+0x6c>)
 8002d16:	f005 fb5f 	bl	80083d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002d1a:	e013      	b.n	8002d44 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_I2C_MspDeInit+0x70>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_I2C_MspDeInit+0x68>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_I2C_MspDeInit+0x68>)
 8002d2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_I2C_MspDeInit+0x74>)
 8002d36:	f005 fb4f 	bl	80083d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d3e:	4807      	ldr	r0, [pc, #28]	; (8002d5c <HAL_I2C_MspDeInit+0x74>)
 8002d40:	f005 fb4a 	bl	80083d8 <HAL_GPIO_DeInit>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40005400 	.word	0x40005400
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40005c00 	.word	0x40005c00
 8002d5c:	40021c00 	.word	0x40021c00

08002d60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_LTDC_MspInit+0x174>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	f040 80a3 	bne.w	8002eca <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d84:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002db4:	4b48      	ldr	r3, [pc, #288]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a47      	ldr	r2, [pc, #284]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dcc:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002de4:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a3b      	ldr	r2, [pc, #236]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e06:	6313      	str	r3, [r2, #48]	; 0x30
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_LTDC_MspInit+0x178>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002e14:	2310      	movs	r3, #16
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e24:	230e      	movs	r3, #14
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	482b      	ldr	r0, [pc, #172]	; (8002edc <HAL_LTDC_MspInit+0x17c>)
 8002e30:	f005 f928 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002e34:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e46:	230e      	movs	r3, #14
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4823      	ldr	r0, [pc, #140]	; (8002ee0 <HAL_LTDC_MspInit+0x180>)
 8002e52:	f005 f917 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002e56:	23f7      	movs	r3, #247	; 0xf7
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e66:	230e      	movs	r3, #14
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <HAL_LTDC_MspInit+0x184>)
 8002e72:	f005 f907 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <HAL_LTDC_MspInit+0x188>)
 8002e94:	f005 f8f6 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002e98:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eaa:	230e      	movs	r3, #14
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <HAL_LTDC_MspInit+0x18c>)
 8002eb6:	f005 f8e5 	bl	8008084 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2058      	movs	r0, #88	; 0x58
 8002ec0:	f003 ffe2 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ec4:	2058      	movs	r0, #88	; 0x58
 8002ec6:	f003 fffb 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40016800 	.word	0x40016800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40022800 	.word	0x40022800
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40022000 	.word	0x40022000

08002ef0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <HAL_QSPI_MspInit+0x10c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d170      	bne.n	8002ff4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f30:	f043 0310 	orr.w	r3, r3, #16
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a28      	ldr	r2, [pc, #160]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <HAL_QSPI_MspInit+0x110>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002f72:	2304      	movs	r3, #4
 8002f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f82:	2309      	movs	r3, #9
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	481d      	ldr	r0, [pc, #116]	; (8003004 <HAL_QSPI_MspInit+0x114>)
 8002f8e:	f005 f879 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002f92:	2340      	movs	r3, #64	; 0x40
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 031c 	add.w	r3, r7, #28
 8002faa:	4619      	mov	r1, r3
 8002fac:	4816      	ldr	r0, [pc, #88]	; (8003008 <HAL_QSPI_MspInit+0x118>)
 8002fae:	f005 f869 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fc2:	2309      	movs	r3, #9
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <HAL_QSPI_MspInit+0x118>)
 8002fce:	f005 f859 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002fd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	4619      	mov	r1, r3
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <HAL_QSPI_MspInit+0x11c>)
 8002ff0:	f005 f848 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	a0001000 	.word	0xa0001000
 8003000:	40023800 	.word	0x40023800
 8003004:	40021000 	.word	0x40021000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020c00 	.word	0x40020c00

08003010 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RTC_MspInit+0x2c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d105      	bne.n	800302e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RTC_MspInit+0x30>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_RTC_MspInit+0x30>)
 8003028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40002800 	.word	0x40002800
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003064:	d127      	bne.n	80030b6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_SPDIFRX_MspInit+0x7c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80030a6:	2308      	movs	r3, #8
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	4619      	mov	r1, r3
 80030b0:	4804      	ldr	r0, [pc, #16]	; (80030c4 <HAL_SPDIFRX_MspInit+0x80>)
 80030b2:	f004 ffe7 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020c00 	.word	0x40020c00

080030c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <HAL_TIM_Base_MspInit+0xc8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10c      	bne.n	80030f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80030f2:	e046      	b.n	8003182 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d10c      	bne.n	8003118 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fe:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a24      	ldr	r2, [pc, #144]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	69bb      	ldr	r3, [r7, #24]
}
 8003116:	e034      	b.n	8003182 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_TIM_Base_MspInit+0xd0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10c      	bne.n	800313c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
}
 800313a:	e022      	b.n	8003182 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_TIM_Base_MspInit+0xd4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10c      	bne.n	8003160 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 800314c:	f043 0308 	orr.w	r3, r3, #8
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
}
 800315e:	e010      	b.n	8003182 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_TIM_Base_MspInit+0xd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10b      	bne.n	8003182 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_TIM_Base_MspInit+0xcc>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
}
 8003182:	bf00      	nop
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40023800 	.word	0x40023800
 8003198:	40000400 	.word	0x40000400
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40010400 	.word	0x40010400

080031a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_TIM_PWM_MspInit+0x38>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10b      	bne.n	80031ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80031bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40001800 	.word	0x40001800
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 031c 	add.w	r3, r7, #28
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a56      	ldr	r2, [pc, #344]	; (800335c <HAL_TIM_MspPostInit+0x178>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11d      	bne.n	8003242 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b56      	ldr	r3, [pc, #344]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a55      	ldr	r2, [pc, #340]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800321e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003230:	2301      	movs	r3, #1
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	484a      	ldr	r0, [pc, #296]	; (8003364 <HAL_TIM_MspPostInit+0x180>)
 800323c:	f004 ff22 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003240:	e087      	b.n	8003352 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d11d      	bne.n	8003288 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	4b44      	ldr	r3, [pc, #272]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a43      	ldr	r2, [pc, #268]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003272:	2300      	movs	r3, #0
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003276:	2301      	movs	r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	4838      	ldr	r0, [pc, #224]	; (8003364 <HAL_TIM_MspPostInit+0x180>)
 8003282:	f004 feff 	bl	8008084 <HAL_GPIO_Init>
}
 8003286:	e064      	b.n	8003352 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_TIM_MspPostInit+0x184>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d11c      	bne.n	80032cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80032aa:	2310      	movs	r3, #16
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ba:	2302      	movs	r3, #2
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	4619      	mov	r1, r3
 80032c4:	4829      	ldr	r0, [pc, #164]	; (800336c <HAL_TIM_MspPostInit+0x188>)
 80032c6:	f004 fedd 	bl	8008084 <HAL_GPIO_Init>
}
 80032ca:	e042      	b.n	8003352 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_TIM_MspPostInit+0x18c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11c      	bne.n	8003310 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032fe:	2302      	movs	r3, #2
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	481a      	ldr	r0, [pc, #104]	; (8003374 <HAL_TIM_MspPostInit+0x190>)
 800330a:	f004 febb 	bl	8008084 <HAL_GPIO_Init>
}
 800330e:	e020      	b.n	8003352 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <HAL_TIM_MspPostInit+0x194>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11b      	bne.n	8003352 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_TIM_MspPostInit+0x17c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003342:	2309      	movs	r3, #9
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	480b      	ldr	r0, [pc, #44]	; (800337c <HAL_TIM_MspPostInit+0x198>)
 800334e:	f004 fe99 	bl	8008084 <HAL_GPIO_Init>
}
 8003352:	bf00      	nop
 8003354:	3730      	adds	r7, #48	; 0x30
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000
 8003368:	40000400 	.word	0x40000400
 800336c:	40020400 	.word	0x40020400
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40022000 	.word	0x40022000
 8003378:	40001800 	.word	0x40001800
 800337c:	40021c00 	.word	0x40021c00

08003380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	; 0x30
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <HAL_UART_MspInit+0x110>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d145      	bne.n	800342e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_UART_MspInit+0x114>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033fa:	2307      	movs	r3, #7
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4619      	mov	r1, r3
 8003404:	4824      	ldr	r0, [pc, #144]	; (8003498 <HAL_UART_MspInit+0x118>)
 8003406:	f004 fe3d 	bl	8008084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800340a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800341c:	2307      	movs	r3, #7
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	481d      	ldr	r0, [pc, #116]	; (800349c <HAL_UART_MspInit+0x11c>)
 8003428:	f004 fe2c 	bl	8008084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800342c:	e02c      	b.n	8003488 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_UART_MspInit+0x120>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d127      	bne.n	8003488 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_UART_MspInit+0x114>)
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_UART_MspInit+0x114>)
 800343e:	f043 0320 	orr.w	r3, r3, #32
 8003442:	6453      	str	r3, [r2, #68]	; 0x44
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_UART_MspInit+0x114>)
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_UART_MspInit+0x114>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_UART_MspInit+0x114>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_UART_MspInit+0x114>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003468:	23c0      	movs	r3, #192	; 0xc0
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003474:	2303      	movs	r3, #3
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003478:	2308      	movs	r3, #8
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	4808      	ldr	r0, [pc, #32]	; (80034a4 <HAL_UART_MspInit+0x124>)
 8003484:	f004 fdfe 	bl	8008084 <HAL_GPIO_Init>
}
 8003488:	bf00      	nop
 800348a:	3730      	adds	r7, #48	; 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40011000 	.word	0x40011000
 8003494:	40023800 	.word	0x40023800
 8003498:	40020400 	.word	0x40020400
 800349c:	40020000 	.word	0x40020000
 80034a0:	40011400 	.word	0x40011400
 80034a4:	40020800 	.word	0x40020800

080034a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_FMC_MspInit+0x100>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d16d      	bne.n	80035a0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_FMC_MspInit+0x100>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_FMC_MspInit+0x104>)
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4a37      	ldr	r2, [pc, #220]	; (80035ac <HAL_FMC_MspInit+0x104>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6393      	str	r3, [r2, #56]	; 0x38
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_FMC_MspInit+0x104>)
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80034e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034e6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034f4:	230c      	movs	r3, #12
 80034f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	482c      	ldr	r0, [pc, #176]	; (80035b0 <HAL_FMC_MspInit+0x108>)
 80034fe:	f004 fdc1 	bl	8008084 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003502:	f248 1333 	movw	r3, #33075	; 0x8133
 8003506:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003514:	230c      	movs	r3, #12
 8003516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4825      	ldr	r0, [pc, #148]	; (80035b4 <HAL_FMC_MspInit+0x10c>)
 800351e:	f004 fdb1 	bl	8008084 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003522:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003526:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003534:	230c      	movs	r3, #12
 8003536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4619      	mov	r1, r3
 800353c:	481e      	ldr	r0, [pc, #120]	; (80035b8 <HAL_FMC_MspInit+0x110>)
 800353e:	f004 fda1 	bl	8008084 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003542:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003546:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003554:	230c      	movs	r3, #12
 8003556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4817      	ldr	r0, [pc, #92]	; (80035bc <HAL_FMC_MspInit+0x114>)
 800355e:	f004 fd91 	bl	8008084 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003562:	2328      	movs	r3, #40	; 0x28
 8003564:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356e:	2303      	movs	r3, #3
 8003570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003572:	230c      	movs	r3, #12
 8003574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4811      	ldr	r0, [pc, #68]	; (80035c0 <HAL_FMC_MspInit+0x118>)
 800357c:	f004 fd82 	bl	8008084 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003580:	2308      	movs	r3, #8
 8003582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003590:	230c      	movs	r3, #12
 8003592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4619      	mov	r1, r3
 8003598:	480a      	ldr	r0, [pc, #40]	; (80035c4 <HAL_FMC_MspInit+0x11c>)
 800359a:	f004 fd73 	bl	8008084 <HAL_GPIO_Init>
 800359e:	e000      	b.n	80035a2 <HAL_FMC_MspInit+0xfa>
    return;
 80035a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000d78 	.word	0x20000d78
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40021800 	.word	0x40021800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021400 	.word	0x40021400
 80035c0:	40021c00 	.word	0x40021c00
 80035c4:	40020800 	.word	0x40020800

080035c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80035d0:	f7ff ff6a 	bl	80034a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <HAL_SAI_MspInit+0xbc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d124      	bne.n	8003638 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_SAI_MspInit+0xc0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 80035fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003600:	6453      	str	r3, [r2, #68]	; 0x44
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_SAI_MspInit+0xc0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	4a21      	ldr	r2, [pc, #132]	; (800369c <HAL_SAI_MspInit+0xc0>)
 8003616:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003618:	23f0      	movs	r3, #240	; 0xf0
 800361a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003628:	230a      	movs	r3, #10
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	481c      	ldr	r0, [pc, #112]	; (80036a4 <HAL_SAI_MspInit+0xc8>)
 8003634:	f004 fd26 	bl	8008084 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_SAI_MspInit+0xcc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d125      	bne.n	800368e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_SAI_MspInit+0xc0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 8003650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_SAI_MspInit+0xc4>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_SAI_MspInit+0xc0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a0c      	ldr	r2, [pc, #48]	; (800369c <HAL_SAI_MspInit+0xc0>)
 800366a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800366c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800367e:	230a      	movs	r3, #10
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4619      	mov	r1, r3
 8003688:	4808      	ldr	r0, [pc, #32]	; (80036ac <HAL_SAI_MspInit+0xd0>)
 800368a:	f004 fcfb 	bl	8008084 <HAL_GPIO_Init>

    }
}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40015c04 	.word	0x40015c04
 800369c:	20000d7c 	.word	0x20000d7c
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40015c24 	.word	0x40015c24
 80036ac:	40021800 	.word	0x40021800

080036b0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_SAI_MspDeInit+0x74>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d112      	bne.n	80036e8 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036ca:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_SAI_MspDeInit+0x7c>)
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_SAI_MspDeInit+0x7c>)
 80036da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036de:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80036e0:	21f0      	movs	r1, #240	; 0xf0
 80036e2:	4813      	ldr	r0, [pc, #76]	; (8003730 <HAL_SAI_MspDeInit+0x80>)
 80036e4:	f004 fe78 	bl	80083d8 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <HAL_SAI_MspDeInit+0x84>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d113      	bne.n	800371a <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036fa:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_SAI_MspDeInit+0x78>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_SAI_MspDeInit+0x7c>)
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <HAL_SAI_MspDeInit+0x7c>)
 800370a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800370e:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8003710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003714:	4808      	ldr	r0, [pc, #32]	; (8003738 <HAL_SAI_MspDeInit+0x88>)
 8003716:	f004 fe5f 	bl	80083d8 <HAL_GPIO_DeInit>

    }
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40015c04 	.word	0x40015c04
 8003728:	20000d7c 	.word	0x20000d7c
 800372c:	40023800 	.word	0x40023800
 8003730:	40022000 	.word	0x40022000
 8003734:	40015c24 	.word	0x40015c24
 8003738:	40021800 	.word	0x40021800

0800373c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800374c:	2200      	movs	r2, #0
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	2036      	movs	r0, #54	; 0x36
 8003752:	f003 fb99 	bl	8006e88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003756:	2036      	movs	r0, #54	; 0x36
 8003758:	f003 fbb2 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_InitTick+0xa0>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_InitTick+0xa0>)
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	6413      	str	r3, [r2, #64]	; 0x40
 8003768:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_InitTick+0xa0>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003774:	f107 0210 	add.w	r2, r7, #16
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f008 fb18 	bl	800bdb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003784:	f008 faee 	bl	800bd64 <HAL_RCC_GetPCLK1Freq>
 8003788:	4603      	mov	r3, r0
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <HAL_InitTick+0xa4>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	3b01      	subs	r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_InitTick+0xa8>)
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_InitTick+0xac>)
 80037a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_InitTick+0xa8>)
 80037a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_InitTick+0xa8>)
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_InitTick+0xa8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_InitTick+0xa8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <HAL_InitTick+0xa8>)
 80037be:	f00a f917 	bl	800d9f0 <HAL_TIM_Base_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037c8:	4806      	ldr	r0, [pc, #24]	; (80037e4 <HAL_InitTick+0xa8>)
 80037ca:	f00a f93d 	bl	800da48 <HAL_TIM_Base_Start_IT>
 80037ce:	4603      	mov	r3, r0
 80037d0:	e000      	b.n	80037d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	2001b840 	.word	0x2001b840
 80037e8:	40001000 	.word	0x40001000

080037ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <MemManage_Handler+0x4>

08003806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <BusFault_Handler+0x4>

0800380c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <UsageFault_Handler+0x4>

08003812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003828:	f004 fefa 	bl	8008620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <TIM6_DAC_IRQHandler+0x10>)
 8003836:	f00a f95c 	bl	800daf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2001b840 	.word	0x2001b840

08003844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <OTG_FS_IRQHandler+0x10>)
 800384a:	f005 f991 	bl	8008b70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2001bdec 	.word	0x2001bdec

08003858 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <LTDC_IRQHandler+0x10>)
 800385e:	f007 fa69 	bl	800ad34 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20019b14 	.word	0x20019b14

0800386c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA2D_IRQHandler+0x10>)
 8003872:	f004 f9c9 	bl	8007c08 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2001b6b8 	.word	0x2001b6b8

08003880 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <DMA2_Stream7_IRQHandler+0x14>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4618      	mov	r0, r3
 800388a:	f003 fdf7 	bl	800747c <HAL_DMA_IRQHandler>
 }
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000e5c 	.word	0x20000e5c

08003898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a0:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <_sbrk+0x5c>)
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <_sbrk+0x60>)
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <_sbrk+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <_sbrk+0x64>)
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <_sbrk+0x68>)
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <_sbrk+0x64>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d207      	bcs.n	80038d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038c8:	f012 fc32 	bl	8016130 <__errno>
 80038cc:	4602      	mov	r2, r0
 80038ce:	230c      	movs	r3, #12
 80038d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	e009      	b.n	80038ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <_sbrk+0x64>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <_sbrk+0x64>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <_sbrk+0x64>)
 80038e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20050000 	.word	0x20050000
 80038f8:	00000400 	.word	0x00000400
 80038fc:	20000d80 	.word	0x20000d80
 8003900:	2001c0b8 	.word	0x2001c0b8

08003904 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <SystemInit+0x28>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <SystemInit+0x28>)
 8003910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <SystemInit+0x28>)
 800391a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800391e:	609a      	str	r2, [r3, #8]
#endif
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003936:	e003      	b.n	8003940 <LoopCopyDataInit>

08003938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800393a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800393c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800393e:	3104      	adds	r1, #4

08003940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003948:	d3f6      	bcc.n	8003938 <CopyDataInit>
  ldr  r2, =_sbss
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800394c:	e002      	b.n	8003954 <LoopFillZerobss>

0800394e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800394e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003950:	f842 3b04 	str.w	r3, [r2], #4

08003954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003958:	d3f9      	bcc.n	800394e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800395a:	f7ff ffd3 	bl	8003904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800395e:	f012 fbed 	bl	801613c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003962:	f7fd fd0f 	bl	8001384 <main>
  bx  lr    
 8003966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003968:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800396c:	08018adc 	.word	0x08018adc
  ldr  r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003974:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8003978:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 800397c:	2001c0b4 	.word	0x2001c0b4

08003980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC_IRQHandler>
	...

08003984 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	4603      	mov	r3, r0
 800398e:	81fb      	strh	r3, [r7, #14]
 8003990:	460b      	mov	r3, r1
 8003992:	81bb      	strh	r3, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800399c:	89bb      	ldrh	r3, [r7, #12]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80039a2:	89bb      	ldrh	r3, [r7, #12]
 80039a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039a8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80039ae:	f001 fc29 	bl	8005204 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2203      	movs	r2, #3
 80039b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fab3 	bl	8004f28 <CODEC_IO_Write>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2200      	movs	r2, #0
 80039d2:	f640 0117 	movw	r1, #2071	; 0x817
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 faa6 	bl	8004f28 <CODEC_IO_Write>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80039e6:	89fb      	ldrh	r3, [r7, #14]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2200      	movs	r2, #0
 80039ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fa99 	bl	8004f28 <CODEC_IO_Write>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	226c      	movs	r2, #108	; 0x6c
 8003a06:	2139      	movs	r1, #57	; 0x39
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fa8d 	bl	8004f28 <CODEC_IO_Write>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003a18:	8afb      	ldrh	r3, [r7, #22]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2213      	movs	r2, #19
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 fa7e 	bl	8004f28 <CODEC_IO_Write>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e00b      	b.n	8003a50 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fa71 	bl	8004f28 <CODEC_IO_Write>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8003a50:	2032      	movs	r0, #50	; 0x32
 8003a52:	f001 fc3f 	bl	80052d4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8003a56:	8b3b      	ldrh	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 815b 	beq.w	8003d14 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8003a5e:	4bbc      	ldr	r3, [pc, #752]	; (8003d50 <wm8994_Init+0x3cc>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8003a64:	8b3b      	ldrh	r3, [r7, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d047      	beq.n	8003afa <wm8994_Init+0x176>
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	f000 8087 	beq.w	8003b7e <wm8994_Init+0x1fa>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 810c 	bne.w	8003c8e <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003a7e:	2105      	movs	r1, #5
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fa51 	bl	8004f28 <CODEC_IO_Write>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	f240 6101 	movw	r1, #1537	; 0x601
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 fa44 	bl	8004f28 <CODEC_IO_Write>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f240 6102 	movw	r1, #1538	; 0x602
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fa37 	bl	8004f28 <CODEC_IO_Write>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003ac4:	89fb      	ldrh	r3, [r7, #14]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f240 6104 	movw	r1, #1540	; 0x604
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 fa2a 	bl	8004f28 <CODEC_IO_Write>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003ade:	89fb      	ldrh	r3, [r7, #14]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f240 6105 	movw	r1, #1541	; 0x605
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 fa1d 	bl	8004f28 <CODEC_IO_Write>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]
      break;
 8003af8:	e10f      	b.n	8003d1a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003afa:	89fb      	ldrh	r3, [r7, #14]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f240 3203 	movw	r2, #771	; 0x303
 8003b02:	2105      	movs	r1, #5
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fa0f 	bl	8004f28 <CODEC_IO_Write>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f240 6101 	movw	r1, #1537	; 0x601
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fa02 	bl	8004f28 <CODEC_IO_Write>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	f240 6102 	movw	r1, #1538	; 0x602
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 f9f5 	bl	8004f28 <CODEC_IO_Write>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f240 6104 	movw	r1, #1540	; 0x604
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f9e8 	bl	8004f28 <CODEC_IO_Write>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2200      	movs	r2, #0
 8003b68:	f240 6105 	movw	r1, #1541	; 0x605
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f9db 	bl	8004f28 <CODEC_IO_Write>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	61fb      	str	r3, [r7, #28]
      break;
 8003b7c:	e0cd      	b.n	8003d1a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b84:	d141      	bne.n	8003c0a <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003b8e:	2105      	movs	r1, #5
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f9c9 	bl	8004f28 <CODEC_IO_Write>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f240 6101 	movw	r1, #1537	; 0x601
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f9bc 	bl	8004f28 <CODEC_IO_Write>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	f240 6102 	movw	r1, #1538	; 0x602
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f9af 	bl	8004f28 <CODEC_IO_Write>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003bd4:	89fb      	ldrh	r3, [r7, #14]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f240 6104 	movw	r1, #1540	; 0x604
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f9a2 	bl	8004f28 <CODEC_IO_Write>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	f240 6105 	movw	r1, #1541	; 0x605
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f995 	bl	8004f28 <CODEC_IO_Write>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8003c08:	e087      	b.n	8003d1a <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003c12:	2105      	movs	r1, #5
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f987 	bl	8004f28 <CODEC_IO_Write>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4413      	add	r3, r2
 8003c22:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f240 6101 	movw	r1, #1537	; 0x601
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f97a 	bl	8004f28 <CODEC_IO_Write>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2201      	movs	r2, #1
 8003c44:	f240 6102 	movw	r1, #1538	; 0x602
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f96d 	bl	8004f28 <CODEC_IO_Write>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f240 6104 	movw	r1, #1540	; 0x604
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f960 	bl	8004f28 <CODEC_IO_Write>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2202      	movs	r2, #2
 8003c78:	f240 6105 	movw	r1, #1541	; 0x605
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f953 	bl	8004f28 <CODEC_IO_Write>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	61fb      	str	r3, [r7, #28]
      break;
 8003c8c:	e045      	b.n	8003d1a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f240 3203 	movw	r2, #771	; 0x303
 8003c96:	2105      	movs	r1, #5
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f945 	bl	8004f28 <CODEC_IO_Write>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2201      	movs	r2, #1
 8003cae:	f240 6101 	movw	r1, #1537	; 0x601
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f938 	bl	8004f28 <CODEC_IO_Write>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003cc2:	89fb      	ldrh	r3, [r7, #14]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f240 6102 	movw	r1, #1538	; 0x602
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f92b 	bl	8004f28 <CODEC_IO_Write>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f240 6104 	movw	r1, #1540	; 0x604
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f91e 	bl	8004f28 <CODEC_IO_Write>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f240 6105 	movw	r1, #1541	; 0x605
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f911 	bl	8004f28 <CODEC_IO_Write>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
      break;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <wm8994_Init+0x3cc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8003d1a:	8afb      	ldrh	r3, [r7, #22]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 81a7 	beq.w	8004070 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <wm8994_Init+0x3d0>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8003d28:	8afb      	ldrh	r3, [r7, #22]
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d013      	beq.n	8003d58 <wm8994_Init+0x3d4>
 8003d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d34:	dc04      	bgt.n	8003d40 <wm8994_Init+0x3bc>
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	f000 80cf 	beq.w	8003edc <wm8994_Init+0x558>
 8003d3e:	e192      	b.n	8004066 <wm8994_Init+0x6e2>
 8003d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d44:	d057      	beq.n	8003df6 <wm8994_Init+0x472>
 8003d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4a:	f000 8116 	beq.w	8003f7a <wm8994_Init+0x5f6>
 8003d4e:	e18a      	b.n	8004066 <wm8994_Init+0x6e2>
 8003d50:	20000d84 	.word	0x20000d84
 8003d54:	20000d88 	.word	0x20000d88
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8003d58:	89fb      	ldrh	r3, [r7, #14]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8003d60:	2104      	movs	r1, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f8e0 	bl	8004f28 <CODEC_IO_Write>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003d72:	89fb      	ldrh	r3, [r7, #14]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	22db      	movs	r2, #219	; 0xdb
 8003d78:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f8d3 	bl	8004f28 <CODEC_IO_Write>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f8c6 	bl	8004f28 <CODEC_IO_Write>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003da6:	89fb      	ldrh	r3, [r7, #14]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2202      	movs	r2, #2
 8003dac:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 f8b9 	bl	8004f28 <CODEC_IO_Write>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f240 6109 	movw	r1, #1545	; 0x609
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f8ac 	bl	8004f28 <CODEC_IO_Write>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8003dda:	89fb      	ldrh	r3, [r7, #14]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	220e      	movs	r2, #14
 8003de0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 f89f 	bl	8004f28 <CODEC_IO_Write>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	61fb      	str	r3, [r7, #28]
      break;
 8003df4:	e13f      	b.n	8004076 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8003df6:	89fb      	ldrh	r3, [r7, #14]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2211      	movs	r2, #17
 8003dfc:	2128      	movs	r1, #40	; 0x28
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f892 	bl	8004f28 <CODEC_IO_Write>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2235      	movs	r2, #53	; 0x35
 8003e14:	2129      	movs	r1, #41	; 0x29
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f886 	bl	8004f28 <CODEC_IO_Write>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8003e26:	89fb      	ldrh	r3, [r7, #14]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2235      	movs	r2, #53	; 0x35
 8003e2c:	212a      	movs	r1, #42	; 0x2a
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f87a 	bl	8004f28 <CODEC_IO_Write>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f240 3203 	movw	r2, #771	; 0x303
 8003e46:	2104      	movs	r1, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f86d 	bl	8004f28 <CODEC_IO_Write>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003e58:	89fb      	ldrh	r3, [r7, #14]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	22db      	movs	r2, #219	; 0xdb
 8003e5e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f860 	bl	8004f28 <CODEC_IO_Write>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f246 3250 	movw	r2, #25424	; 0x6350
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 f853 	bl	8004f28 <CODEC_IO_Write>
 8003e82:	4603      	mov	r3, r0
 8003e84:	461a      	mov	r2, r3
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2202      	movs	r2, #2
 8003e92:	f240 6106 	movw	r1, #1542	; 0x606
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f846 	bl	8004f28 <CODEC_IO_Write>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f240 6107 	movw	r1, #1543	; 0x607
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f839 	bl	8004f28 <CODEC_IO_Write>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003ec0:	89fb      	ldrh	r3, [r7, #14]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	220d      	movs	r2, #13
 8003ec6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f82c 	bl	8004f28 <CODEC_IO_Write>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]
      break;
 8003eda:	e0cc      	b.n	8004076 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f81e 	bl	8004f28 <CODEC_IO_Write>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	22db      	movs	r2, #219	; 0xdb
 8003efc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 f811 	bl	8004f28 <CODEC_IO_Write>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003f10:	89fb      	ldrh	r3, [r7, #14]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f246 3250 	movw	r2, #25424	; 0x6350
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 f804 	bl	8004f28 <CODEC_IO_Write>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f240 6106 	movw	r1, #1542	; 0x606
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fff7 	bl	8004f28 <CODEC_IO_Write>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f240 6107 	movw	r1, #1543	; 0x607
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 ffea 	bl	8004f28 <CODEC_IO_Write>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	220d      	movs	r2, #13
 8003f64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 ffdd 	bl	8004f28 <CODEC_IO_Write>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]
      break; 
 8003f78:	e07d      	b.n	8004076 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003f82:	2104      	movs	r1, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 ffcf 	bl	8004f28 <CODEC_IO_Write>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003f94:	89fb      	ldrh	r3, [r7, #14]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	22db      	movs	r2, #219	; 0xdb
 8003f9a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 ffc2 	bl	8004f28 <CODEC_IO_Write>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003fae:	89fb      	ldrh	r3, [r7, #14]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	22db      	movs	r2, #219	; 0xdb
 8003fb4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ffb5 	bl	8004f28 <CODEC_IO_Write>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 ffa8 	bl	8004f28 <CODEC_IO_Write>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f240 6106 	movw	r1, #1542	; 0x606
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ff9b 	bl	8004f28 <CODEC_IO_Write>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003ffc:	89fb      	ldrh	r3, [r7, #14]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2202      	movs	r2, #2
 8004002:	f240 6107 	movw	r1, #1543	; 0x607
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff8e 	bl	8004f28 <CODEC_IO_Write>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004016:	89fb      	ldrh	r3, [r7, #14]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2202      	movs	r2, #2
 800401c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ff81 	bl	8004f28 <CODEC_IO_Write>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004030:	89fb      	ldrh	r3, [r7, #14]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2202      	movs	r2, #2
 8004036:	f240 6109 	movw	r1, #1545	; 0x609
 800403a:	4618      	mov	r0, r3
 800403c:	f000 ff74 	bl	8004f28 <CODEC_IO_Write>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	220d      	movs	r2, #13
 8004050:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004054:	4618      	mov	r0, r3
 8004056:	f000 ff67 	bl	8004f28 <CODEC_IO_Write>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	61fb      	str	r3, [r7, #28]
      break;    
 8004064:	e007      	b.n	8004076 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
      break;
 800406c:	bf00      	nop
 800406e:	e002      	b.n	8004076 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8004070:	4b95      	ldr	r3, [pc, #596]	; (80042c8 <wm8994_Init+0x944>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f245 6222 	movw	r2, #22050	; 0x5622
 800407c:	4293      	cmp	r3, r2
 800407e:	d076      	beq.n	800416e <wm8994_Init+0x7ea>
 8004080:	f245 6222 	movw	r2, #22050	; 0x5622
 8004084:	4293      	cmp	r3, r2
 8004086:	d80a      	bhi.n	800409e <wm8994_Init+0x71a>
 8004088:	f642 3211 	movw	r2, #11025	; 0x2b11
 800408c:	4293      	cmp	r3, r2
 800408e:	d060      	beq.n	8004152 <wm8994_Init+0x7ce>
 8004090:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004094:	d025      	beq.n	80040e2 <wm8994_Init+0x75e>
 8004096:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800409a:	d014      	beq.n	80040c6 <wm8994_Init+0x742>
 800409c:	e083      	b.n	80041a6 <wm8994_Init+0x822>
 800409e:	f64a 4244 	movw	r2, #44100	; 0xac44
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d071      	beq.n	800418a <wm8994_Init+0x806>
 80040a6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d803      	bhi.n	80040b6 <wm8994_Init+0x732>
 80040ae:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80040b2:	d024      	beq.n	80040fe <wm8994_Init+0x77a>
 80040b4:	e077      	b.n	80041a6 <wm8994_Init+0x822>
 80040b6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02d      	beq.n	800411a <wm8994_Init+0x796>
 80040be:	4a83      	ldr	r2, [pc, #524]	; (80042cc <wm8994_Init+0x948>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d038      	beq.n	8004136 <wm8994_Init+0x7b2>
 80040c4:	e06f      	b.n	80041a6 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2203      	movs	r2, #3
 80040cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ff29 	bl	8004f28 <CODEC_IO_Write>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	61fb      	str	r3, [r7, #28]
    break;
 80040e0:	e06f      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2233      	movs	r2, #51	; 0x33
 80040e8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ff1b 	bl	8004f28 <CODEC_IO_Write>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
    break;
 80040fc:	e061      	b.n	80041c2 <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2263      	movs	r2, #99	; 0x63
 8004104:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ff0d 	bl	8004f28 <CODEC_IO_Write>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	61fb      	str	r3, [r7, #28]
    break;
 8004118:	e053      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2283      	movs	r2, #131	; 0x83
 8004120:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004124:	4618      	mov	r0, r3
 8004126:	f000 feff 	bl	8004f28 <CODEC_IO_Write>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	61fb      	str	r3, [r7, #28]
    break;
 8004134:	e045      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	22a3      	movs	r2, #163	; 0xa3
 800413c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fef1 	bl	8004f28 <CODEC_IO_Write>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
    break;
 8004150:	e037      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004152:	89fb      	ldrh	r3, [r7, #14]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2213      	movs	r2, #19
 8004158:	f44f 7104 	mov.w	r1, #528	; 0x210
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fee3 	bl	8004f28 <CODEC_IO_Write>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	61fb      	str	r3, [r7, #28]
    break;
 800416c:	e029      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800416e:	89fb      	ldrh	r3, [r7, #14]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2243      	movs	r2, #67	; 0x43
 8004174:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fed5 	bl	8004f28 <CODEC_IO_Write>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	61fb      	str	r3, [r7, #28]
    break;
 8004188:	e01b      	b.n	80041c2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2273      	movs	r2, #115	; 0x73
 8004190:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fec7 	bl	8004f28 <CODEC_IO_Write>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
    break; 
 80041a4:	e00d      	b.n	80041c2 <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2283      	movs	r2, #131	; 0x83
 80041ac:	f44f 7104 	mov.w	r1, #528	; 0x210
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 feb9 	bl	8004f28 <CODEC_IO_Write>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]
    break; 
 80041c0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c8:	d10e      	bne.n	80041e8 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f244 0218 	movw	r2, #16408	; 0x4018
 80041d2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fea6 	bl	8004f28 <CODEC_IO_Write>
 80041dc:	4603      	mov	r3, r0
 80041de:	461a      	mov	r2, r3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e00d      	b.n	8004204 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80041e8:	89fb      	ldrh	r3, [r7, #14]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f244 0210 	movw	r2, #16400	; 0x4010
 80041f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fe97 	bl	8004f28 <CODEC_IO_Write>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004204:	89fb      	ldrh	r3, [r7, #14]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2200      	movs	r2, #0
 800420a:	f240 3102 	movw	r1, #770	; 0x302
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe8a 	bl	8004f28 <CODEC_IO_Write>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	220a      	movs	r2, #10
 8004224:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fe7d 	bl	8004f28 <CODEC_IO_Write>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004238:	89fb      	ldrh	r3, [r7, #14]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2201      	movs	r2, #1
 800423e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fe70 	bl	8004f28 <CODEC_IO_Write>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004252:	8b3b      	ldrh	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 817b 	beq.w	8004550 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800425a:	8b3b      	ldrh	r3, [r7, #24]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d157      	bne.n	8004310 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004260:	89fb      	ldrh	r3, [r7, #14]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004268:	212d      	movs	r1, #45	; 0x2d
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe5c 	bl	8004f28 <CODEC_IO_Write>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004282:	212e      	movs	r1, #46	; 0x2e
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe4f 	bl	8004f28 <CODEC_IO_Write>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <wm8994_Init+0x94c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80042a4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe3d 	bl	8004f28 <CODEC_IO_Write>
 80042ae:	4603      	mov	r3, r0
 80042b0:	461a      	mov	r2, r3
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <wm8994_Init+0x94c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80042be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80042c2:	f001 f807 	bl	80052d4 <AUDIO_IO_Delay>
 80042c6:	e016      	b.n	80042f6 <wm8994_Init+0x972>
 80042c8:	20000d88 	.word	0x20000d88
 80042cc:	00017700 	.word	0x00017700
 80042d0:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f248 1208 	movw	r2, #33032	; 0x8108
 80042dc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fe21 	bl	8004f28 <CODEC_IO_Write>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80042f0:	2032      	movs	r0, #50	; 0x32
 80042f2:	f000 ffef 	bl	80052d4 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2200      	movs	r2, #0
 80042fc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fe11 	bl	8004f28 <CODEC_IO_Write>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004318:	2103      	movs	r1, #3
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fe04 	bl	8004f28 <CODEC_IO_Write>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2200      	movs	r2, #0
 8004330:	2122      	movs	r1, #34	; 0x22
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fdf8 	bl	8004f28 <CODEC_IO_Write>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004342:	89fb      	ldrh	r3, [r7, #14]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2200      	movs	r2, #0
 8004348:	2123      	movs	r1, #35	; 0x23
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fdec 	bl	8004f28 <CODEC_IO_Write>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004362:	2136      	movs	r1, #54	; 0x36
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fddf 	bl	8004f28 <CODEC_IO_Write>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f243 0203 	movw	r2, #12291	; 0x3003
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fdd2 	bl	8004f28 <CODEC_IO_Write>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d10d      	bne.n	80043b2 <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004396:	89fb      	ldrh	r3, [r7, #14]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f240 2205 	movw	r2, #517	; 0x205
 800439e:	2151      	movs	r1, #81	; 0x51
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fdc1 	bl	8004f28 <CODEC_IO_Write>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e00b      	b.n	80043ca <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2205      	movs	r2, #5
 80043b8:	2151      	movs	r1, #81	; 0x51
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fdb4 	bl	8004f28 <CODEC_IO_Write>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80043ca:	8b7b      	ldrh	r3, [r7, #26]
 80043cc:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80043d0:	f043 0303 	orr.w	r3, r3, #3
 80043d4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	8b7a      	ldrh	r2, [r7, #26]
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fda2 	bl	8004f28 <CODEC_IO_Write>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80043ee:	89fb      	ldrh	r3, [r7, #14]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2222      	movs	r2, #34	; 0x22
 80043f4:	2160      	movs	r1, #96	; 0x60
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fd96 	bl	8004f28 <CODEC_IO_Write>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f649 7225 	movw	r2, #40741	; 0x9f25
 800440e:	214c      	movs	r1, #76	; 0x4c
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd89 	bl	8004f28 <CODEC_IO_Write>
 8004416:	4603      	mov	r3, r0
 8004418:	461a      	mov	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004420:	200f      	movs	r0, #15
 8004422:	f000 ff57 	bl	80052d4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004426:	89fb      	ldrh	r3, [r7, #14]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2201      	movs	r2, #1
 800442c:	212d      	movs	r1, #45	; 0x2d
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fd7a 	bl	8004f28 <CODEC_IO_Write>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2201      	movs	r2, #1
 8004444:	212e      	movs	r1, #46	; 0x2e
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd6e 	bl	8004f28 <CODEC_IO_Write>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800445e:	2103      	movs	r1, #3
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fd61 	bl	8004f28 <CODEC_IO_Write>
 8004466:	4603      	mov	r3, r0
 8004468:	461a      	mov	r2, r3
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004470:	89fb      	ldrh	r3, [r7, #14]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2233      	movs	r2, #51	; 0x33
 8004476:	2154      	movs	r1, #84	; 0x54
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd55 	bl	8004f28 <CODEC_IO_Write>
 800447e:	4603      	mov	r3, r0
 8004480:	461a      	mov	r2, r3
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004488:	f240 1001 	movw	r0, #257	; 0x101
 800448c:	f000 ff22 	bl	80052d4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	22ee      	movs	r2, #238	; 0xee
 8004496:	2160      	movs	r1, #96	; 0x60
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd45 	bl	8004f28 <CODEC_IO_Write>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	22c0      	movs	r2, #192	; 0xc0
 80044ae:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd38 	bl	8004f28 <CODEC_IO_Write>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	22c0      	movs	r2, #192	; 0xc0
 80044c8:	f240 6111 	movw	r1, #1553	; 0x611
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fd2b 	bl	8004f28 <CODEC_IO_Write>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80044dc:	89fb      	ldrh	r3, [r7, #14]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2210      	movs	r2, #16
 80044e2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fd1e 	bl	8004f28 <CODEC_IO_Write>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80044f6:	89fb      	ldrh	r3, [r7, #14]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	22c0      	movs	r2, #192	; 0xc0
 80044fc:	f240 6112 	movw	r1, #1554	; 0x612
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fd11 	bl	8004f28 <CODEC_IO_Write>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	22c0      	movs	r2, #192	; 0xc0
 8004516:	f240 6113 	movw	r1, #1555	; 0x613
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fd04 	bl	8004f28 <CODEC_IO_Write>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2210      	movs	r2, #16
 8004530:	f240 4122 	movw	r1, #1058	; 0x422
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fcf7 	bl	8004f28 <CODEC_IO_Write>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004544:	7afa      	ldrb	r2, [r7, #11]
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f984 	bl	8004858 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004550:	8afb      	ldrh	r3, [r7, #22]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a6 	beq.w	80046a4 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004558:	8afb      	ldrh	r3, [r7, #22]
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d003      	beq.n	8004568 <wm8994_Init+0xbe4>
 8004560:	8afb      	ldrh	r3, [r7, #22]
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d12b      	bne.n	80045c0 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f043 0313 	orr.w	r3, r3, #19
 800456e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004570:	89fb      	ldrh	r3, [r7, #14]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	8b7a      	ldrh	r2, [r7, #26]
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fcd5 	bl	8004f28 <CODEC_IO_Write>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004588:	89fb      	ldrh	r3, [r7, #14]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2202      	movs	r2, #2
 800458e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fcc8 	bl	8004f28 <CODEC_IO_Write>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80045a2:	89fb      	ldrh	r3, [r7, #14]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045aa:	f240 4111 	movw	r1, #1041	; 0x411
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fcba 	bl	8004f28 <CODEC_IO_Write>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e06b      	b.n	8004698 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80045c0:	8afb      	ldrh	r3, [r7, #22]
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c6:	d139      	bne.n	800463c <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	f043 0313 	orr.w	r3, r3, #19
 80045ce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80045d0:	89fb      	ldrh	r3, [r7, #14]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	8b7a      	ldrh	r2, [r7, #26]
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fca5 	bl	8004f28 <CODEC_IO_Write>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2202      	movs	r2, #2
 80045ee:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fc98 	bl	8004f28 <CODEC_IO_Write>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004602:	89fb      	ldrh	r3, [r7, #14]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800460a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fc8a 	bl	8004f28 <CODEC_IO_Write>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004626:	f240 4111 	movw	r1, #1041	; 0x411
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fc7c 	bl	8004f28 <CODEC_IO_Write>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e02d      	b.n	8004698 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800463c:	8afb      	ldrh	r3, [r7, #22]
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d003      	beq.n	800464c <wm8994_Init+0xcc8>
 8004644:	8afb      	ldrh	r3, [r7, #22]
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d125      	bne.n	8004698 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	220b      	movs	r2, #11
 8004652:	2118      	movs	r1, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fc67 	bl	8004f28 <CODEC_IO_Write>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	220b      	movs	r2, #11
 800466a:	211a      	movs	r1, #26
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fc5b 	bl	8004f28 <CODEC_IO_Write>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004684:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fc4d 	bl	8004f28 <CODEC_IO_Write>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004698:	7afa      	ldrb	r2, [r7, #11]
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8da 	bl	8004858 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop

080046b0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80046b4:	f000 fdb0 	bl	8005218 <AUDIO_IO_DeInit>
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}

080046bc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80046c6:	f000 fd9d 	bl	8005204 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fdd3 	bl	800527c <AUDIO_IO_Read>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	80fb      	strh	r3, [r7, #6]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f9d1 	bl	8004aa0 <wm8994_SetMute>
 80046fe:	4602      	mov	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f9bc 	bl	8004aa0 <wm8994_SetMute>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2201      	movs	r2, #1
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fbf5 	bl	8004f28 <CODEC_IO_Write>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004748:	68fb      	ldr	r3, [r7, #12]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f99b 	bl	8004aa0 <wm8994_SetMute>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004772:	68fb      	ldr	r3, [r7, #12]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <wm8994_Stop+0xd8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05a      	beq.n	800484a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f981 	bl	8004aa0 <wm8994_SetMute>
 800479e:	4602      	mov	r2, r0
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d04e      	beq.n	800484a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fbb5 	bl	8004f28 <CODEC_IO_Write>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d0:	f240 4122 	movw	r1, #1058	; 0x422
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fba7 	bl	8004f28 <CODEC_IO_Write>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2200      	movs	r2, #0
 80047ea:	212d      	movs	r1, #45	; 0x2d
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fb9b 	bl	8004f28 <CODEC_IO_Write>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2200      	movs	r2, #0
 8004802:	212e      	movs	r1, #46	; 0x2e
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fb8f 	bl	8004f28 <CODEC_IO_Write>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2200      	movs	r2, #0
 800481a:	2105      	movs	r1, #5
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fb83 	bl	8004f28 <CODEC_IO_Write>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2200      	movs	r2, #0
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fb77 	bl	8004f28 <CODEC_IO_Write>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <wm8994_Stop+0xd8>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000d84 	.word	0x20000d84

08004858 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	460a      	mov	r2, r1
 8004862:	80fb      	strh	r3, [r7, #6]
 8004864:	4613      	mov	r3, r2
 8004866:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800486c:	797b      	ldrb	r3, [r7, #5]
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d80b      	bhi.n	800488a <wm8994_SetVolume+0x32>
 8004872:	797a      	ldrb	r2, [r7, #5]
 8004874:	4613      	mov	r3, r2
 8004876:	019b      	lsls	r3, r3, #6
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	4a86      	ldr	r2, [pc, #536]	; (8004a94 <wm8994_SetVolume+0x23c>)
 800487c:	fb82 1203 	smull	r1, r2, r2, r3
 8004880:	1152      	asrs	r2, r2, #5
 8004882:	17db      	asrs	r3, r3, #31
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e000      	b.n	800488c <wm8994_SetVolume+0x34>
 800488a:	2364      	movs	r3, #100	; 0x64
 800488c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800488e:	4b82      	ldr	r3, [pc, #520]	; (8004a98 <wm8994_SetVolume+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 809b 	beq.w	80049ce <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	2b3e      	cmp	r3, #62	; 0x3e
 800489c:	d93d      	bls.n	800491a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f8fc 	bl	8004aa0 <wm8994_SetMute>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f240 127f 	movw	r2, #383	; 0x17f
 80048b8:	211c      	movs	r1, #28
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fb34 	bl	8004f28 <CODEC_IO_Write>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f240 127f 	movw	r2, #383	; 0x17f
 80048d2:	211d      	movs	r1, #29
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fb27 	bl	8004f28 <CODEC_IO_Write>
 80048da:	4603      	mov	r3, r0
 80048dc:	461a      	mov	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f240 127f 	movw	r2, #383	; 0x17f
 80048ec:	2126      	movs	r1, #38	; 0x26
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fb1a 	bl	8004f28 <CODEC_IO_Write>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f240 127f 	movw	r2, #383	; 0x17f
 8004906:	2127      	movs	r1, #39	; 0x27
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fb0d 	bl	8004f28 <CODEC_IO_Write>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e059      	b.n	80049ce <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800491a:	797b      	ldrb	r3, [r7, #5]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f8bb 	bl	8004aa0 <wm8994_SetMute>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e04c      	b.n	80049ce <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f8b1 	bl	8004aa0 <wm8994_SetMute>
 800493e:	4602      	mov	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	b2d8      	uxtb	r0, r3
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	b21b      	sxth	r3, r3
 800494e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004952:	b21b      	sxth	r3, r3
 8004954:	b29b      	uxth	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	211c      	movs	r1, #28
 800495a:	f000 fae5 	bl	8004f28 <CODEC_IO_Write>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	b2d8      	uxtb	r0, r3
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	b21b      	sxth	r3, r3
 8004970:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004974:	b21b      	sxth	r3, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	211d      	movs	r1, #29
 800497c:	f000 fad4 	bl	8004f28 <CODEC_IO_Write>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	b2d8      	uxtb	r0, r3
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	b21b      	sxth	r3, r3
 8004992:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004996:	b21b      	sxth	r3, r3
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	2126      	movs	r1, #38	; 0x26
 800499e:	f000 fac3 	bl	8004f28 <CODEC_IO_Write>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	b2d8      	uxtb	r0, r3
 80049b0:	7afb      	ldrb	r3, [r7, #11]
 80049b2:	b21b      	sxth	r3, r3
 80049b4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	2127      	movs	r1, #39	; 0x27
 80049c0:	f000 fab2 	bl	8004f28 <CODEC_IO_Write>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80049ce:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <wm8994_SetVolume+0x244>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d059      	beq.n	8004a8a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80049d6:	797b      	ldrb	r3, [r7, #5]
 80049d8:	2b63      	cmp	r3, #99	; 0x63
 80049da:	d80c      	bhi.n	80049f6 <wm8994_SetVolume+0x19e>
 80049dc:	797a      	ldrb	r2, [r7, #5]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <wm8994_SetVolume+0x23c>)
 80049e8:	fb82 1203 	smull	r1, r2, r2, r3
 80049ec:	1152      	asrs	r2, r2, #5
 80049ee:	17db      	asrs	r3, r3, #31
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e000      	b.n	80049f8 <wm8994_SetVolume+0x1a0>
 80049f6:	23ef      	movs	r3, #239	; 0xef
 80049f8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	b2d8      	uxtb	r0, r3
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	b21b      	sxth	r3, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a10:	f000 fa8a 	bl	8004f28 <CODEC_IO_Write>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	b2d8      	uxtb	r0, r3
 8004a22:	7afb      	ldrb	r3, [r7, #11]
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f240 4101 	movw	r1, #1025	; 0x401
 8004a34:	f000 fa78 	bl	8004f28 <CODEC_IO_Write>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	b2d8      	uxtb	r0, r3
 8004a46:	7afb      	ldrb	r3, [r7, #11]
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4e:	b21b      	sxth	r3, r3
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	f240 4104 	movw	r1, #1028	; 0x404
 8004a58:	f000 fa66 	bl	8004f28 <CODEC_IO_Write>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	b2d8      	uxtb	r0, r3
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a72:	b21b      	sxth	r3, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	f240 4105 	movw	r1, #1029	; 0x405
 8004a7c:	f000 fa54 	bl	8004f28 <CODEC_IO_Write>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461a      	mov	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	51eb851f 	.word	0x51eb851f
 8004a98:	20000d84 	.word	0x20000d84
 8004a9c:	20000d88 	.word	0x20000d88

08004aa0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <wm8994_SetMute+0x98>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d039      	beq.n	8004b2c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d11c      	bne.n	8004af8 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fa2c 	bl	8004f28 <CODEC_IO_Write>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae2:	f240 4122 	movw	r1, #1058	; 0x422
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fa1e 	bl	8004f28 <CODEC_IO_Write>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e019      	b.n	8004b2c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2210      	movs	r2, #16
 8004afe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fa10 	bl	8004f28 <CODEC_IO_Write>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2210      	movs	r2, #16
 8004b18:	f240 4122 	movw	r1, #1058	; 0x422
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fa03 	bl	8004f28 <CODEC_IO_Write>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000d84 	.word	0x20000d84

08004b3c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	460a      	mov	r2, r1
 8004b46:	80fb      	strh	r3, [r7, #6]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004b50:	797b      	ldrb	r3, [r7, #5]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d047      	beq.n	8004be6 <wm8994_SetOutputMode+0xaa>
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	f000 8087 	beq.w	8004c6a <wm8994_SetOutputMode+0x12e>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	f040 80c6 	bne.w	8004cee <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004b6a:	2105      	movs	r1, #5
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f9db 	bl	8004f28 <CODEC_IO_Write>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2200      	movs	r2, #0
 8004b82:	f240 6101 	movw	r1, #1537	; 0x601
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f9ce 	bl	8004f28 <CODEC_IO_Write>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f240 6102 	movw	r1, #1538	; 0x602
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f9c1 	bl	8004f28 <CODEC_IO_Write>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f240 6104 	movw	r1, #1540	; 0x604
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f9b4 	bl	8004f28 <CODEC_IO_Write>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f240 6105 	movw	r1, #1541	; 0x605
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f9a7 	bl	8004f28 <CODEC_IO_Write>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    break;
 8004be4:	e0c5      	b.n	8004d72 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f240 3203 	movw	r2, #771	; 0x303
 8004bee:	2105      	movs	r1, #5
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f999 	bl	8004f28 <CODEC_IO_Write>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2201      	movs	r2, #1
 8004c06:	f240 6101 	movw	r1, #1537	; 0x601
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f98c 	bl	8004f28 <CODEC_IO_Write>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f240 6102 	movw	r1, #1538	; 0x602
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f97f 	bl	8004f28 <CODEC_IO_Write>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f240 6104 	movw	r1, #1540	; 0x604
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f972 	bl	8004f28 <CODEC_IO_Write>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2200      	movs	r2, #0
 8004c54:	f240 6105 	movw	r1, #1541	; 0x605
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f965 	bl	8004f28 <CODEC_IO_Write>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    break;
 8004c68:	e083      	b.n	8004d72 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004c72:	2105      	movs	r1, #5
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f957 	bl	8004f28 <CODEC_IO_Write>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f240 6101 	movw	r1, #1537	; 0x601
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f94a 	bl	8004f28 <CODEC_IO_Write>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f240 6102 	movw	r1, #1538	; 0x602
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f93d 	bl	8004f28 <CODEC_IO_Write>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f240 6104 	movw	r1, #1540	; 0x604
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f930 	bl	8004f28 <CODEC_IO_Write>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f240 6105 	movw	r1, #1541	; 0x605
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f923 	bl	8004f28 <CODEC_IO_Write>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
    break;
 8004cec:	e041      	b.n	8004d72 <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f240 3203 	movw	r2, #771	; 0x303
 8004cf6:	2105      	movs	r1, #5
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f915 	bl	8004f28 <CODEC_IO_Write>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f240 6101 	movw	r1, #1537	; 0x601
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f908 	bl	8004f28 <CODEC_IO_Write>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2201      	movs	r2, #1
 8004d28:	f240 6102 	movw	r1, #1538	; 0x602
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f8fb 	bl	8004f28 <CODEC_IO_Write>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2200      	movs	r2, #0
 8004d42:	f240 6104 	movw	r1, #1540	; 0x604
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f8ee 	bl	8004f28 <CODEC_IO_Write>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f240 6105 	movw	r1, #1541	; 0x605
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f8e1 	bl	8004f28 <CODEC_IO_Write>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    break;    
 8004d70:	bf00      	nop
  }  
  return counter;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d076      	beq.n	8004e84 <wm8994_SetFrequency+0x108>
 8004d96:	f245 6222 	movw	r2, #22050	; 0x5622
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d80a      	bhi.n	8004db4 <wm8994_SetFrequency+0x38>
 8004d9e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d060      	beq.n	8004e68 <wm8994_SetFrequency+0xec>
 8004da6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004daa:	d025      	beq.n	8004df8 <wm8994_SetFrequency+0x7c>
 8004dac:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004db0:	d014      	beq.n	8004ddc <wm8994_SetFrequency+0x60>
 8004db2:	e083      	b.n	8004ebc <wm8994_SetFrequency+0x140>
 8004db4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d071      	beq.n	8004ea0 <wm8994_SetFrequency+0x124>
 8004dbc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d803      	bhi.n	8004dcc <wm8994_SetFrequency+0x50>
 8004dc4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004dc8:	d024      	beq.n	8004e14 <wm8994_SetFrequency+0x98>
 8004dca:	e077      	b.n	8004ebc <wm8994_SetFrequency+0x140>
 8004dcc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d02d      	beq.n	8004e30 <wm8994_SetFrequency+0xb4>
 8004dd4:	4a43      	ldr	r2, [pc, #268]	; (8004ee4 <wm8994_SetFrequency+0x168>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d038      	beq.n	8004e4c <wm8994_SetFrequency+0xd0>
 8004dda:	e06f      	b.n	8004ebc <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2203      	movs	r2, #3
 8004de2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f89e 	bl	8004f28 <CODEC_IO_Write>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
    break;
 8004df6:	e06f      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2233      	movs	r2, #51	; 0x33
 8004dfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f890 	bl	8004f28 <CODEC_IO_Write>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    break;
 8004e12:	e061      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2263      	movs	r2, #99	; 0x63
 8004e1a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f882 	bl	8004f28 <CODEC_IO_Write>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
    break;
 8004e2e:	e053      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2283      	movs	r2, #131	; 0x83
 8004e36:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f874 	bl	8004f28 <CODEC_IO_Write>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
    break;
 8004e4a:	e045      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	22a3      	movs	r2, #163	; 0xa3
 8004e52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f866 	bl	8004f28 <CODEC_IO_Write>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
    break;
 8004e66:	e037      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2213      	movs	r2, #19
 8004e6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f858 	bl	8004f28 <CODEC_IO_Write>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
    break;
 8004e82:	e029      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2243      	movs	r2, #67	; 0x43
 8004e8a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f84a 	bl	8004f28 <CODEC_IO_Write>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
    break;
 8004e9e:	e01b      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2273      	movs	r2, #115	; 0x73
 8004ea6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f83c 	bl	8004f28 <CODEC_IO_Write>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
    break; 
 8004eba:	e00d      	b.n	8004ed8 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2283      	movs	r2, #131	; 0x83
 8004ec2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f82e 	bl	8004f28 <CODEC_IO_Write>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
    break; 
 8004ed6:	bf00      	nop
  }
  return counter;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	00017700 	.word	0x00017700

08004ee8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2200      	movs	r2, #0
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f812 	bl	8004f28 <CODEC_IO_Write>
 8004f04:	4603      	mov	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <wm8994_Reset+0x38>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <wm8994_Reset+0x3c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

  return counter;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000d84 	.word	0x20000d84
 8004f24:	20000d88 	.word	0x20000d88

08004f28 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
 8004f32:	460b      	mov	r3, r1
 8004f34:	80bb      	strh	r3, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	88b9      	ldrh	r1, [r7, #4]
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f96f 	bl	8005228 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	b2db      	uxtb	r3, r3
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <I2Cx_MspInit+0x150>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d14d      	bne.n	8005004 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f68:	4b50      	ldr	r3, [pc, #320]	; (80050ac <I2Cx_MspInit+0x154>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4a4f      	ldr	r2, [pc, #316]	; (80050ac <I2Cx_MspInit+0x154>)
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	6313      	str	r3, [r2, #48]	; 0x30
 8004f74:	4b4d      	ldr	r3, [pc, #308]	; (80050ac <I2Cx_MspInit+0x154>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f84:	2312      	movs	r3, #18
 8004f86:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004f90:	2304      	movs	r3, #4
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f94:	f107 031c 	add.w	r3, r7, #28
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4845      	ldr	r0, [pc, #276]	; (80050b0 <I2Cx_MspInit+0x158>)
 8004f9c:	f003 f872 	bl	8008084 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004fa6:	f107 031c 	add.w	r3, r7, #28
 8004faa:	4619      	mov	r1, r3
 8004fac:	4840      	ldr	r0, [pc, #256]	; (80050b0 <I2Cx_MspInit+0x158>)
 8004fae:	f003 f869 	bl	8008084 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004fca:	4b38      	ldr	r3, [pc, #224]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a37      	ldr	r2, [pc, #220]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fd4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004fd6:	4b35      	ldr	r3, [pc, #212]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a34      	ldr	r2, [pc, #208]	; (80050ac <I2Cx_MspInit+0x154>)
 8004fdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fe0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	210f      	movs	r1, #15
 8004fe6:	2048      	movs	r0, #72	; 0x48
 8004fe8:	f001 ff4e 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004fec:	2048      	movs	r0, #72	; 0x48
 8004fee:	f001 ff67 	bl	8006ec0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	210f      	movs	r1, #15
 8004ff6:	2049      	movs	r0, #73	; 0x49
 8004ff8:	f001 ff46 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004ffc:	2049      	movs	r0, #73	; 0x49
 8004ffe:	f001 ff5f 	bl	8006ec0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005002:	e04d      	b.n	80050a0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005004:	4b29      	ldr	r3, [pc, #164]	; (80050ac <I2Cx_MspInit+0x154>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4a28      	ldr	r2, [pc, #160]	; (80050ac <I2Cx_MspInit+0x154>)
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	6313      	str	r3, [r2, #48]	; 0x30
 8005010:	4b26      	ldr	r3, [pc, #152]	; (80050ac <I2Cx_MspInit+0x154>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800501c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005020:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005022:	2312      	movs	r3, #18
 8005024:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800502a:	2302      	movs	r3, #2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800502e:	2304      	movs	r3, #4
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005032:	f107 031c 	add.w	r3, r7, #28
 8005036:	4619      	mov	r1, r3
 8005038:	481e      	ldr	r0, [pc, #120]	; (80050b4 <I2Cx_MspInit+0x15c>)
 800503a:	f003 f823 	bl	8008084 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800503e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005044:	f107 031c 	add.w	r3, r7, #28
 8005048:	4619      	mov	r1, r3
 800504a:	481a      	ldr	r0, [pc, #104]	; (80050b4 <I2Cx_MspInit+0x15c>)
 800504c:	f003 f81a 	bl	8008084 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005050:	4b16      	ldr	r3, [pc, #88]	; (80050ac <I2Cx_MspInit+0x154>)
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <I2Cx_MspInit+0x154>)
 8005056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800505a:	6413      	str	r3, [r2, #64]	; 0x40
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <I2Cx_MspInit+0x154>)
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005068:	4b10      	ldr	r3, [pc, #64]	; (80050ac <I2Cx_MspInit+0x154>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <I2Cx_MspInit+0x154>)
 800506e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005072:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <I2Cx_MspInit+0x154>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <I2Cx_MspInit+0x154>)
 800507a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800507e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005080:	2200      	movs	r2, #0
 8005082:	210f      	movs	r1, #15
 8005084:	201f      	movs	r0, #31
 8005086:	f001 feff 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800508a:	201f      	movs	r0, #31
 800508c:	f001 ff18 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005090:	2200      	movs	r2, #0
 8005092:	210f      	movs	r1, #15
 8005094:	2020      	movs	r0, #32
 8005096:	f001 fef7 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800509a:	2020      	movs	r0, #32
 800509c:	f001 ff10 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 80050a0:	bf00      	nop
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000d8c 	.word	0x20000d8c
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40021c00 	.word	0x40021c00
 80050b4:	40020400 	.word	0x40020400

080050b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f005 faa5 	bl	800a610 <HAL_I2C_GetState>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d125      	bne.n	8005118 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a14      	ldr	r2, [pc, #80]	; (8005120 <I2Cx_Init+0x68>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d103      	bne.n	80050dc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <I2Cx_Init+0x6c>)
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e002      	b.n	80050e2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a12      	ldr	r2, [pc, #72]	; (8005128 <I2Cx_Init+0x70>)
 80050e0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a11      	ldr	r2, [pc, #68]	; (800512c <I2Cx_Init+0x74>)
 80050e6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff23 	bl	8004f58 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f004 ff8e 	bl	800a034 <HAL_I2C_Init>
  }
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000d8c 	.word	0x20000d8c
 8005124:	40005c00 	.word	0x40005c00
 8005128:	40005400 	.word	0x40005400
 800512c:	40912732 	.word	0x40912732

08005130 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af04      	add	r7, sp, #16
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	72fb      	strb	r3, [r7, #11]
 8005142:	460b      	mov	r3, r1
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	b299      	uxth	r1, r3
 8005152:	88f8      	ldrh	r0, [r7, #6]
 8005154:	893a      	ldrh	r2, [r7, #8]
 8005156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4603      	mov	r3, r0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f005 f938 	bl	800a3dc <HAL_I2C_Mem_Read>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	4619      	mov	r1, r3
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f832 	bl	80051e4 <I2Cx_Error>
  }
  return status;    
 8005180:	7dfb      	ldrb	r3, [r7, #23]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b08a      	sub	sp, #40	; 0x28
 800518e:	af04      	add	r7, sp, #16
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	4608      	mov	r0, r1
 8005194:	4611      	mov	r1, r2
 8005196:	461a      	mov	r2, r3
 8005198:	4603      	mov	r3, r0
 800519a:	72fb      	strb	r3, [r7, #11]
 800519c:	460b      	mov	r3, r1
 800519e:	813b      	strh	r3, [r7, #8]
 80051a0:	4613      	mov	r3, r2
 80051a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	b299      	uxth	r1, r3
 80051ac:	88f8      	ldrh	r0, [r7, #6]
 80051ae:	893a      	ldrh	r2, [r7, #8]
 80051b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051b4:	9302      	str	r3, [sp, #8]
 80051b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	4603      	mov	r3, r0
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f004 fff7 	bl	800a1b4 <HAL_I2C_Mem_Write>
 80051c6:	4603      	mov	r3, r0
 80051c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f805 	bl	80051e4 <I2Cx_Error>
  }
  return status;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f004 ffaf 	bl	800a154 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff ff5e 	bl	80050b8 <I2Cx_Init>
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8005208:	4802      	ldr	r0, [pc, #8]	; (8005214 <AUDIO_IO_Init+0x10>)
 800520a:	f7ff ff55 	bl	80050b8 <I2Cx_Init>
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000d8c 	.word	0x20000d8c

08005218 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
 8005232:	460b      	mov	r3, r1
 8005234:	80bb      	strh	r3, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	b29b      	uxth	r3, r3
 8005244:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	b29b      	uxth	r3, r3
 800524c:	b21a      	sxth	r2, r3
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	b21b      	sxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b21b      	sxth	r3, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800525a:	88ba      	ldrh	r2, [r7, #4]
 800525c:	79f9      	ldrb	r1, [r7, #7]
 800525e:	2302      	movs	r3, #2
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	1cbb      	adds	r3, r7, #2
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2302      	movs	r3, #2
 8005268:	4803      	ldr	r0, [pc, #12]	; (8005278 <AUDIO_IO_Write+0x50>)
 800526a:	f7ff ff8e 	bl	800518a <I2Cx_WriteMultiple>
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000d8c 	.word	0x20000d8c

0800527c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af02      	add	r7, sp, #8
 8005282:	4603      	mov	r3, r0
 8005284:	460a      	mov	r2, r1
 8005286:	71fb      	strb	r3, [r7, #7]
 8005288:	4613      	mov	r3, r2
 800528a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	81bb      	strh	r3, [r7, #12]
 8005290:	2300      	movs	r3, #0
 8005292:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8005294:	88ba      	ldrh	r2, [r7, #4]
 8005296:	79f9      	ldrb	r1, [r7, #7]
 8005298:	2302      	movs	r3, #2
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2302      	movs	r3, #2
 80052a4:	480a      	ldr	r0, [pc, #40]	; (80052d0 <AUDIO_IO_Read+0x54>)
 80052a6:	f7ff ff43 	bl	8005130 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80052aa:	89bb      	ldrh	r3, [r7, #12]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80052b0:	89bb      	ldrh	r3, [r7, #12]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	b21a      	sxth	r2, r3
 80052b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052bc:	4313      	orrs	r3, r2
 80052be:	b21b      	sxth	r3, r3
 80052c0:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80052c6:	89bb      	ldrh	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000d8c 	.word	0x20000d8c

080052d4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fa71 	bl	80067c4 <HAL_Delay>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80052f4:	480e      	ldr	r0, [pc, #56]	; (8005330 <HAL_SAI_ErrorCallback+0x44>)
 80052f6:	f008 f9b5 	bl	800d664 <HAL_SAI_GetState>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80052fe:	480d      	ldr	r0, [pc, #52]	; (8005334 <HAL_SAI_ErrorCallback+0x48>)
 8005300:	f008 f9b0 	bl	800d664 <HAL_SAI_GetState>
 8005304:	4603      	mov	r3, r0
 8005306:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d002      	beq.n	8005314 <HAL_SAI_ErrorCallback+0x28>
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b12      	cmp	r3, #18
 8005312:	d101      	bne.n	8005318 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8005314:	f000 f810 	bl	8005338 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d002      	beq.n	8005324 <HAL_SAI_ErrorCallback+0x38>
 800531e:	7bbb      	ldrb	r3, [r7, #14]
 8005320:	2b22      	cmp	r3, #34	; 0x22
 8005322:	d101      	bne.n	8005328 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8005324:	f7fb fed6 	bl	80010d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000dd8 	.word	0x20000dd8
 8005334:	20000e5c 	.word	0x20000e5c

08005338 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8005348:	b580      	push	{r7, lr}
 800534a:	b08c      	sub	sp, #48	; 0x30
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005352:	4b63      	ldr	r3, [pc, #396]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	4a62      	ldr	r2, [pc, #392]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800535c:	6453      	str	r3, [r2, #68]	; 0x44
 800535e:	4b60      	ldr	r3, [pc, #384]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800536a:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	4a5c      	ldr	r2, [pc, #368]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6313      	str	r3, [r2, #48]	; 0x30
 8005376:	4b5a      	ldr	r3, [pc, #360]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	4a56      	ldr	r2, [pc, #344]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538c:	6313      	str	r3, [r2, #48]	; 0x30
 800538e:	4b54      	ldr	r3, [pc, #336]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800539a:	4b51      	ldr	r3, [pc, #324]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	4a50      	ldr	r2, [pc, #320]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a4:	6313      	str	r3, [r2, #48]	; 0x30
 80053a6:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053b6:	2302      	movs	r3, #2
 80053b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053be:	2303      	movs	r3, #3
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80053c2:	230a      	movs	r3, #10
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80053c6:	f107 031c 	add.w	r3, r7, #28
 80053ca:	4619      	mov	r1, r3
 80053cc:	4845      	ldr	r0, [pc, #276]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80053ce:	f002 fe59 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80053d2:	2320      	movs	r3, #32
 80053d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053d6:	2302      	movs	r3, #2
 80053d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053de:	2303      	movs	r3, #3
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80053e2:	230a      	movs	r3, #10
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	4619      	mov	r1, r3
 80053ec:	483d      	ldr	r0, [pc, #244]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80053ee:	f002 fe49 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80053f6:	2302      	movs	r3, #2
 80053f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80053fe:	2303      	movs	r3, #3
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005402:	230a      	movs	r3, #10
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005406:	f107 031c 	add.w	r3, r7, #28
 800540a:	4619      	mov	r1, r3
 800540c:	4835      	ldr	r0, [pc, #212]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800540e:	f002 fe39 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005412:	2310      	movs	r3, #16
 8005414:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005416:	2302      	movs	r3, #2
 8005418:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800541e:	2303      	movs	r3, #3
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005422:	230a      	movs	r3, #10
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8005426:	f107 031c 	add.w	r3, r7, #28
 800542a:	4619      	mov	r1, r3
 800542c:	482d      	ldr	r0, [pc, #180]	; (80054e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800542e:	f002 fe29 	bl	8008084 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800543c:	6313      	str	r3, [r2, #48]	; 0x30
 800543e:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d138      	bne.n	80054c6 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8005454:	4b25      	ldr	r3, [pc, #148]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005456:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800545a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800545c:	4b23      	ldr	r3, [pc, #140]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800545e:	2240      	movs	r2, #64	; 0x40
 8005460:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005464:	2200      	movs	r2, #0
 8005466:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005468:	4b20      	ldr	r3, [pc, #128]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800546a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800546e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005470:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005476:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8005478:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800547a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800547e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005486:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800548a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800548e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005490:	4b16      	ldr	r3, [pc, #88]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005492:	2204      	movs	r2, #4
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005498:	2203      	movs	r2, #3
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800549e:	2200      	movs	r2, #0
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054aa:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80054ac:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80054ba:	480c      	ldr	r0, [pc, #48]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054bc:	f001 ff20 	bl	8007300 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80054c0:	480a      	ldr	r0, [pc, #40]	; (80054ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80054c2:	f001 fe6f 	bl	80071a4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80054c6:	2200      	movs	r2, #0
 80054c8:	210e      	movs	r1, #14
 80054ca:	203c      	movs	r0, #60	; 0x3c
 80054cc:	f001 fcdc 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80054d0:	203c      	movs	r0, #60	; 0x3c
 80054d2:	f001 fcf5 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 80054d6:	bf00      	nop
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40022000 	.word	0x40022000
 80054e8:	40015c04 	.word	0x40015c04
 80054ec:	20000ee0 	.word	0x20000ee0
 80054f0:	40026470 	.word	0x40026470

080054f4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0a6      	sub	sp, #152	; 0x98
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4618      	mov	r0, r3
 8005506:	f007 f875 	bl	800c5f4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f245 6222 	movw	r2, #22050	; 0x5622
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005524:	4293      	cmp	r3, r2
 8005526:	d112      	bne.n	800554e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005528:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800552c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800552e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005532:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005534:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005538:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800553a:	2302      	movs	r3, #2
 800553c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800553e:	2313      	movs	r3, #19
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4618      	mov	r0, r3
 8005548:	f006 fc66 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
 800554c:	e011      	b.n	8005572 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800554e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005552:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005558:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800555a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800555e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8005560:	2307      	movs	r3, #7
 8005562:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8005564:	2301      	movs	r3, #1
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4618      	mov	r0, r3
 800556e:	f006 fc53 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005572:	bf00      	nop
 8005574:	3798      	adds	r7, #152	; 0x98
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005590:	f000 f806 	bl	80055a0 <BSP_AUDIO_IN_InitEx>
 8005594:	4603      	mov	r3, r0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b089      	sub	sp, #36	; 0x24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4603      	mov	r3, r0
 80055ae:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055be:	d006      	beq.n	80055ce <BSP_AUDIO_IN_InitEx+0x2e>
 80055c0:	89fb      	ldrh	r3, [r7, #14]
 80055c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c6:	d002      	beq.n	80055ce <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e046      	b.n	800565c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80055ce:	f000 f9e7 	bl	80059a0 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80055d2:	2200      	movs	r2, #0
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4824      	ldr	r0, [pc, #144]	; (8005668 <BSP_AUDIO_IN_InitEx+0xc8>)
 80055d8:	f7ff ff8c 	bl	80054f4 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <BSP_AUDIO_IN_InitEx+0xc8>)
 80055de:	4a23      	ldr	r2, [pc, #140]	; (800566c <BSP_AUDIO_IN_InitEx+0xcc>)
 80055e0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80055e2:	4821      	ldr	r0, [pc, #132]	; (8005668 <BSP_AUDIO_IN_InitEx+0xc8>)
 80055e4:	f008 f83e 	bl	800d664 <HAL_SAI_GetState>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80055ee:	2100      	movs	r1, #0
 80055f0:	481d      	ldr	r0, [pc, #116]	; (8005668 <BSP_AUDIO_IN_InitEx+0xc8>)
 80055f2:	f7ff fea9 	bl	8005348 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80055f6:	2100      	movs	r1, #0
 80055f8:	481b      	ldr	r0, [pc, #108]	; (8005668 <BSP_AUDIO_IN_InitEx+0xc8>)
 80055fa:	f000 f869 	bl	80056d0 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80055fe:	89fb      	ldrh	r3, [r7, #14]
 8005600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005604:	d102      	bne.n	800560c <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8005606:	230a      	movs	r3, #10
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e001      	b.n	8005610 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800560c:	2305      	movs	r3, #5
 800560e:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	69b9      	ldr	r1, [r7, #24]
 8005614:	2001      	movs	r0, #1
 8005616:	f000 f90d 	bl	8005834 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <BSP_AUDIO_IN_InitEx+0xd0>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2034      	movs	r0, #52	; 0x34
 8005620:	4798      	blx	r3
 8005622:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f648 1294 	movw	r2, #35220	; 0x8994
 800562a:	4293      	cmp	r3, r2
 800562c:	d109      	bne.n	8005642 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	2034      	movs	r0, #52	; 0x34
 8005634:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <BSP_AUDIO_IN_InitEx+0xd4>)
 8005638:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <BSP_AUDIO_IN_InitEx+0xd0>)
 800563a:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e001      	b.n	8005646 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8005646:	7ffb      	ldrb	r3, [r7, #31]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d107      	bne.n	800565c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <BSP_AUDIO_IN_InitEx+0xd4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681c      	ldr	r4, [r3, #0]
 8005652:	89f9      	ldrh	r1, [r7, #14]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2264      	movs	r2, #100	; 0x64
 8005658:	2034      	movs	r0, #52	; 0x34
 800565a:	47a0      	blx	r4
    }
  }
  return ret;
 800565c:	7ffb      	ldrb	r3, [r7, #31]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3724      	adds	r7, #36	; 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	bf00      	nop
 8005668:	20000e5c 	.word	0x20000e5c
 800566c:	40015c24 	.word	0x40015c24
 8005670:	20000004 	.word	0x20000004
 8005674:	2001b8c0 	.word	0x2001b8c0

08005678 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4805      	ldr	r0, [pc, #20]	; (80056a4 <BSP_AUDIO_IN_Record+0x2c>)
 8005690:	f007 ff5a 	bl	800d548 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	b2db      	uxtb	r3, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000e5c 	.word	0x20000e5c

080056a8 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80056b0:	f7fb fcf4 	bl	800109c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80056c4:	f7fb fcce 	bl	8001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08c      	sub	sp, #48	; 0x30
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80056da:	4b50      	ldr	r3, [pc, #320]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	4a4f      	ldr	r2, [pc, #316]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 80056e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056e4:	6453      	str	r3, [r2, #68]	; 0x44
 80056e6:	4b4d      	ldr	r3, [pc, #308]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80056f2:	4b4a      	ldr	r3, [pc, #296]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4a49      	ldr	r2, [pc, #292]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 80056f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fc:	6313      	str	r3, [r2, #48]	; 0x30
 80056fe:	4b47      	ldr	r3, [pc, #284]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005710:	2302      	movs	r3, #2
 8005712:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005714:	2300      	movs	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005718:	2302      	movs	r3, #2
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800571c:	230a      	movs	r3, #10
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005720:	f107 031c 	add.w	r3, r7, #28
 8005724:	4619      	mov	r1, r3
 8005726:	483e      	ldr	r0, [pc, #248]	; (8005820 <BSP_AUDIO_IN_MspInit+0x150>)
 8005728:	f002 fcac 	bl	8008084 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	4a3a      	ldr	r2, [pc, #232]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	6313      	str	r3, [r2, #48]	; 0x30
 8005738:	4b38      	ldr	r3, [pc, #224]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005748:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800574a:	2300      	movs	r3, #0
 800574c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005752:	2302      	movs	r3, #2
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005756:	f107 031c 	add.w	r3, r7, #28
 800575a:	4619      	mov	r1, r3
 800575c:	4831      	ldr	r0, [pc, #196]	; (8005824 <BSP_AUDIO_IN_MspInit+0x154>)
 800575e:	f002 fc91 	bl	8008084 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	4a2d      	ldr	r2, [pc, #180]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005768:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800576c:	6313      	str	r3, [r2, #48]	; 0x30
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <BSP_AUDIO_IN_MspInit+0x14c>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <BSP_AUDIO_IN_MspInit+0x158>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d137      	bne.n	80057f4 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005784:	4b29      	ldr	r3, [pc, #164]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 8005786:	2200      	movs	r2, #0
 8005788:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005790:	4b26      	ldr	r3, [pc, #152]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 8005792:	2200      	movs	r2, #0
 8005794:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 8005798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800579c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800579e:	4b23      	ldr	r3, [pc, #140]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80057a6:	4b21      	ldr	r3, [pc, #132]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ac:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80057ae:	4b1f      	ldr	r3, [pc, #124]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057bc:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80057be:	4b1b      	ldr	r3, [pc, #108]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057c6:	2203      	movs	r2, #3
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80057ca:	4b18      	ldr	r3, [pc, #96]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80057d0:	4b16      	ldr	r3, [pc, #88]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <BSP_AUDIO_IN_MspInit+0x160>)
 80057da:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a13      	ldr	r2, [pc, #76]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057e0:	671a      	str	r2, [r3, #112]	; 0x70
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80057e8:	4810      	ldr	r0, [pc, #64]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057ea:	f001 fd89 	bl	8007300 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80057ee:	480f      	ldr	r0, [pc, #60]	; (800582c <BSP_AUDIO_IN_MspInit+0x15c>)
 80057f0:	f001 fcd8 	bl	80071a4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80057f4:	2200      	movs	r2, #0
 80057f6:	210f      	movs	r1, #15
 80057f8:	2046      	movs	r0, #70	; 0x46
 80057fa:	f001 fb45 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80057fe:	2046      	movs	r0, #70	; 0x46
 8005800:	f001 fb5e 	bl	8006ec0 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005804:	2200      	movs	r2, #0
 8005806:	210f      	movs	r1, #15
 8005808:	2028      	movs	r0, #40	; 0x28
 800580a:	f001 fb3d 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800580e:	2028      	movs	r0, #40	; 0x28
 8005810:	f001 fb56 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 8005814:	bf00      	nop
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	40021800 	.word	0x40021800
 8005824:	40021c00 	.word	0x40021c00
 8005828:	40015c24 	.word	0x40015c24
 800582c:	20000f40 	.word	0x20000f40
 8005830:	400264b8 	.word	0x400264b8

08005834 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005840:	4b53      	ldr	r3, [pc, #332]	; (8005990 <SAIx_In_Init+0x15c>)
 8005842:	4a54      	ldr	r2, [pc, #336]	; (8005994 <SAIx_In_Init+0x160>)
 8005844:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005846:	4b52      	ldr	r3, [pc, #328]	; (8005990 <SAIx_In_Init+0x15c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b50      	ldr	r3, [pc, #320]	; (8005990 <SAIx_In_Init+0x15c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005854:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005856:	4a4e      	ldr	r2, [pc, #312]	; (8005990 <SAIx_In_Init+0x15c>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 800585c:	4a4c      	ldr	r2, [pc, #304]	; (8005990 <SAIx_In_Init+0x15c>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <SAIx_In_Init+0x15c>)
 8005864:	2200      	movs	r2, #0
 8005866:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005868:	4b49      	ldr	r3, [pc, #292]	; (8005990 <SAIx_In_Init+0x15c>)
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800586e:	4b48      	ldr	r3, [pc, #288]	; (8005990 <SAIx_In_Init+0x15c>)
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005874:	4b46      	ldr	r3, [pc, #280]	; (8005990 <SAIx_In_Init+0x15c>)
 8005876:	2200      	movs	r2, #0
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800587a:	4b45      	ldr	r3, [pc, #276]	; (8005990 <SAIx_In_Init+0x15c>)
 800587c:	2201      	movs	r2, #1
 800587e:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005880:	4b43      	ldr	r3, [pc, #268]	; (8005990 <SAIx_In_Init+0x15c>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8005886:	4b42      	ldr	r3, [pc, #264]	; (8005990 <SAIx_In_Init+0x15c>)
 8005888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800588c:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800588e:	4b40      	ldr	r3, [pc, #256]	; (8005990 <SAIx_In_Init+0x15c>)
 8005890:	2201      	movs	r2, #1
 8005892:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8005894:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <SAIx_In_Init+0x15c>)
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800589a:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <SAIx_In_Init+0x15c>)
 800589c:	2220      	movs	r2, #32
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80058a0:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <SAIx_In_Init+0x15c>)
 80058a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058a6:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <SAIx_In_Init+0x15c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80058ae:	4b38      	ldr	r3, [pc, #224]	; (8005990 <SAIx_In_Init+0x15c>)
 80058b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058b4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80058b6:	4b36      	ldr	r3, [pc, #216]	; (8005990 <SAIx_In_Init+0x15c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <SAIx_In_Init+0x15c>)
 80058be:	2200      	movs	r2, #0
 80058c0:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <SAIx_In_Init+0x15c>)
 80058c4:	2204      	movs	r2, #4
 80058c6:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80058c8:	4a31      	ldr	r2, [pc, #196]	; (8005990 <SAIx_In_Init+0x15c>)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80058ce:	4830      	ldr	r0, [pc, #192]	; (8005990 <SAIx_In_Init+0x15c>)
 80058d0:	f007 fc92 	bl	800d1f8 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80058d4:	4b30      	ldr	r3, [pc, #192]	; (8005998 <SAIx_In_Init+0x164>)
 80058d6:	4a31      	ldr	r2, [pc, #196]	; (800599c <SAIx_In_Init+0x168>)
 80058d8:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <SAIx_In_Init+0x164>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <SAIx_In_Init+0x164>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058e8:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80058ea:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <SAIx_In_Init+0x164>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80058f0:	4b29      	ldr	r3, [pc, #164]	; (8005998 <SAIx_In_Init+0x164>)
 80058f2:	2203      	movs	r2, #3
 80058f4:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80058f6:	4b28      	ldr	r3, [pc, #160]	; (8005998 <SAIx_In_Init+0x164>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80058fc:	4b26      	ldr	r3, [pc, #152]	; (8005998 <SAIx_In_Init+0x164>)
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005902:	4b25      	ldr	r3, [pc, #148]	; (8005998 <SAIx_In_Init+0x164>)
 8005904:	2280      	movs	r2, #128	; 0x80
 8005906:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005908:	4b23      	ldr	r3, [pc, #140]	; (8005998 <SAIx_In_Init+0x164>)
 800590a:	2200      	movs	r2, #0
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <SAIx_In_Init+0x164>)
 8005910:	2201      	movs	r2, #1
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005914:	4b20      	ldr	r3, [pc, #128]	; (8005998 <SAIx_In_Init+0x164>)
 8005916:	2201      	movs	r2, #1
 8005918:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <SAIx_In_Init+0x164>)
 800591c:	2200      	movs	r2, #0
 800591e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <SAIx_In_Init+0x164>)
 8005922:	2201      	movs	r2, #1
 8005924:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <SAIx_In_Init+0x164>)
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <SAIx_In_Init+0x164>)
 800592e:	2220      	movs	r2, #32
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005932:	4b19      	ldr	r3, [pc, #100]	; (8005998 <SAIx_In_Init+0x164>)
 8005934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005938:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800593a:	4b17      	ldr	r3, [pc, #92]	; (8005998 <SAIx_In_Init+0x164>)
 800593c:	2200      	movs	r2, #0
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <SAIx_In_Init+0x164>)
 8005942:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005946:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <SAIx_In_Init+0x164>)
 800594a:	2200      	movs	r2, #0
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <SAIx_In_Init+0x164>)
 8005950:	2200      	movs	r2, #0
 8005952:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <SAIx_In_Init+0x164>)
 8005956:	2204      	movs	r2, #4
 8005958:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800595a:	4a0f      	ldr	r2, [pc, #60]	; (8005998 <SAIx_In_Init+0x164>)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8005960:	480d      	ldr	r0, [pc, #52]	; (8005998 <SAIx_In_Init+0x164>)
 8005962:	f007 fc49 	bl	800d1f8 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <SAIx_In_Init+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4b08      	ldr	r3, [pc, #32]	; (8005990 <SAIx_In_Init+0x15c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005974:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <SAIx_In_Init+0x164>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <SAIx_In_Init+0x164>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000dd8 	.word	0x20000dd8
 8005994:	40015c04 	.word	0x40015c04
 8005998:	20000e5c 	.word	0x20000e5c
 800599c:	40015c24 	.word	0x40015c24

080059a0 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <SAIx_In_DeInit+0x24>)
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <SAIx_In_DeInit+0x28>)
 80059a8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <SAIx_In_DeInit+0x24>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <SAIx_In_DeInit+0x24>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059b8:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80059ba:	4802      	ldr	r0, [pc, #8]	; (80059c4 <SAIx_In_DeInit+0x24>)
 80059bc:	f007 fd8e 	bl	800d4dc <HAL_SAI_DeInit>
}
 80059c0:	bf00      	nop
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000e5c 	.word	0x20000e5c
 80059c8:	40015c24 	.word	0x40015c24

080059cc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059d2:	2228      	movs	r2, #40	; 0x28
 80059d4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059d8:	2209      	movs	r2, #9
 80059da:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80059dc:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059de:	2235      	movs	r2, #53	; 0x35
 80059e0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059e4:	220b      	movs	r2, #11
 80059e6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059ea:	f240 121b 	movw	r2, #283	; 0x11b
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80059f0:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059f2:	f240 2215 	movw	r2, #533	; 0x215
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <BSP_LCD_Init+0xcc>)
 80059fa:	f240 121d 	movw	r2, #285	; 0x11d
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a02:	f240 2235 	movw	r2, #565	; 0x235
 8005a06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	4823      	ldr	r0, [pc, #140]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a0c:	f000 fbd6 	bl	80061bc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005a10:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a1a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005a1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005a50:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <BSP_LCD_Init+0xd0>)
 8005a54:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005a56:	4810      	ldr	r0, [pc, #64]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a58:	f005 fa6c 	bl	800af34 <HAL_LTDC_GetState>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8005a62:	2100      	movs	r1, #0
 8005a64:	480c      	ldr	r0, [pc, #48]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a66:	f000 facf 	bl	8006008 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8005a6a:	480b      	ldr	r0, [pc, #44]	; (8005a98 <BSP_LCD_Init+0xcc>)
 8005a6c:	f005 f892 	bl	800ab94 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005a70:	2201      	movs	r2, #1
 8005a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a76:	480a      	ldr	r0, [pc, #40]	; (8005aa0 <BSP_LCD_Init+0xd4>)
 8005a78:	f002 fdb8 	bl	80085ec <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2108      	movs	r1, #8
 8005a80:	4808      	ldr	r0, [pc, #32]	; (8005aa4 <BSP_LCD_Init+0xd8>)
 8005a82:	f002 fdb3 	bl	80085ec <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005a86:	f000 fcb9 	bl	80063fc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005a8a:	4807      	ldr	r0, [pc, #28]	; (8005aa8 <BSP_LCD_Init+0xdc>)
 8005a8c:	f000 f8c8 	bl	8005c20 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2001b8c4 	.word	0x2001b8c4
 8005a9c:	40016800 	.word	0x40016800
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40022800 	.word	0x40022800
 8005aa8:	20000038 	.word	0x20000038

08005aac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <BSP_LCD_GetXSize+0x20>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <BSP_LCD_GetXSize+0x24>)
 8005ab6:	2134      	movs	r1, #52	; 0x34
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	4413      	add	r3, r2
 8005abe:	3360      	adds	r3, #96	; 0x60
 8005ac0:	681b      	ldr	r3, [r3, #0]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000fe0 	.word	0x20000fe0
 8005ad0:	2001b8c4 	.word	0x2001b8c4

08005ad4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <BSP_LCD_GetYSize+0x20>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <BSP_LCD_GetYSize+0x24>)
 8005ade:	2134      	movs	r1, #52	; 0x34
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3364      	adds	r3, #100	; 0x64
 8005ae8:	681b      	ldr	r3, [r3, #0]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	20000fe0 	.word	0x20000fe0
 8005af8:	2001b8c4 	.word	0x2001b8c4

08005afc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b090      	sub	sp, #64	; 0x40
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8005b0c:	f7ff ffce 	bl	8005aac <BSP_LCD_GetXSize>
 8005b10:	4603      	mov	r3, r0
 8005b12:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005b18:	f7ff ffdc 	bl	8005ad4 <BSP_LCD_GetYSize>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8005b28:	23ff      	movs	r3, #255	; 0xff
 8005b2a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005b42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005b48:	2307      	movs	r3, #7
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8005b4c:	f7ff ffae 	bl	8005aac <BSP_LCD_GetXSize>
 8005b50:	4603      	mov	r3, r0
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8005b54:	f7ff ffbe 	bl	8005ad4 <BSP_LCD_GetYSize>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	4619      	mov	r1, r3
 8005b64:	4812      	ldr	r0, [pc, #72]	; (8005bb0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8005b66:	f005 f9a7 	bl	800aeb8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	4911      	ldr	r1, [pc, #68]	; (8005bb4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3304      	adds	r3, #4
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	490c      	ldr	r1, [pc, #48]	; (8005bb4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3308      	adds	r3, #8
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8005b92:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	4907      	ldr	r1, [pc, #28]	; (8005bb4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8005ba6:	601a      	str	r2, [r3, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	3740      	adds	r7, #64	; 0x40
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2001b8c4 	.word	0x2001b8c4
 8005bb4:	20000fe4 	.word	0x20000fe4
 8005bb8:	20000038 	.word	0x20000038

08005bbc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <BSP_LCD_SetTextColor+0x28>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4907      	ldr	r1, [pc, #28]	; (8005be8 <BSP_LCD_SetTextColor+0x2c>)
 8005bca:	4613      	mov	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20000fe0 	.word	0x20000fe0
 8005be8:	20000fe4 	.word	0x20000fe4

08005bec <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <BSP_LCD_SetBackColor+0x2c>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4908      	ldr	r1, [pc, #32]	; (8005c1c <BSP_LCD_SetBackColor+0x30>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3304      	adds	r3, #4
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000fe0 	.word	0x20000fe0
 8005c1c:	20000fe4 	.word	0x20000fe4

08005c20 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <BSP_LCD_SetFont+0x2c>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4908      	ldr	r1, [pc, #32]	; (8005c50 <BSP_LCD_SetFont+0x30>)
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	3308      	adds	r3, #8
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000fe0 	.word	0x20000fe0
 8005c50:	20000fe4 	.word	0x20000fe4

08005c54 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <BSP_LCD_Clear+0x48>)
 8005c5e:	681c      	ldr	r4, [r3, #0]
 8005c60:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <BSP_LCD_Clear+0x48>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <BSP_LCD_Clear+0x4c>)
 8005c66:	2134      	movs	r1, #52	; 0x34
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	335c      	adds	r3, #92	; 0x5c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461d      	mov	r5, r3
 8005c74:	f7ff ff1a 	bl	8005aac <BSP_LCD_GetXSize>
 8005c78:	4606      	mov	r6, r0
 8005c7a:	f7ff ff2b 	bl	8005ad4 <BSP_LCD_GetYSize>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	2300      	movs	r3, #0
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 fb68 	bl	8006364 <LL_FillBuffer>
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	20000fe0 	.word	0x20000fe0
 8005ca0:	2001b8c4 	.word	0x2001b8c4

08005ca4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	80fb      	strh	r3, [r7, #6]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	80bb      	strh	r3, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <BSP_LCD_DisplayChar+0x80>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	491b      	ldr	r1, [pc, #108]	; (8005d28 <BSP_LCD_DisplayChar+0x84>)
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <BSP_LCD_DisplayChar+0x80>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4c14      	ldr	r4, [pc, #80]	; (8005d28 <BSP_LCD_DisplayChar+0x84>)
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4423      	add	r3, r4
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005ce8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <BSP_LCD_DisplayChar+0x80>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4c0d      	ldr	r4, [pc, #52]	; (8005d28 <BSP_LCD_DisplayChar+0x84>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4423      	add	r3, r4
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	889b      	ldrh	r3, [r3, #4]
 8005d02:	3307      	adds	r3, #7
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da00      	bge.n	8005d0a <BSP_LCD_DisplayChar+0x66>
 8005d08:	3307      	adds	r3, #7
 8005d0a:	10db      	asrs	r3, r3, #3
 8005d0c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005d10:	18ca      	adds	r2, r1, r3
 8005d12:	88b9      	ldrh	r1, [r7, #4]
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fa6c 	bl	80061f4 <DrawChar>
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}
 8005d24:	20000fe0 	.word	0x20000fe0
 8005d28:	20000fe4 	.word	0x20000fe4

08005d2c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005d2c:	b5b0      	push	{r4, r5, r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60ba      	str	r2, [r7, #8]
 8005d34:	461a      	mov	r2, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	81fb      	strh	r3, [r7, #14]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	81bb      	strh	r3, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005d42:	2301      	movs	r3, #1
 8005d44:	83fb      	strh	r3, [r7, #30]
 8005d46:	2300      	movs	r3, #0
 8005d48:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005d56:	e002      	b.n	8005d5e <BSP_LCD_DisplayStringAt+0x32>
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	617a      	str	r2, [r7, #20]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f6      	bne.n	8005d58 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005d6a:	f7ff fe9f 	bl	8005aac <BSP_LCD_GetXSize>
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	494f      	ldr	r1, [pc, #316]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3308      	adds	r3, #8
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	889b      	ldrh	r3, [r3, #4]
 8005d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d88:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d01c      	beq.n	8005dca <BSP_LCD_DisplayStringAt+0x9e>
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d017      	beq.n	8005dc4 <BSP_LCD_DisplayStringAt+0x98>
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d12e      	bne.n	8005df6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	1ad1      	subs	r1, r2, r3
 8005d9e:	4b43      	ldr	r3, [pc, #268]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4843      	ldr	r0, [pc, #268]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005da4:	4613      	mov	r3, r2
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4403      	add	r3, r0
 8005dae:	3308      	adds	r3, #8
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	889b      	ldrh	r3, [r3, #4]
 8005db4:	fb03 f301 	mul.w	r3, r3, r1
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	83fb      	strh	r3, [r7, #30]
      break;
 8005dc2:	e01b      	b.n	8005dfc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005dc4:	89fb      	ldrh	r3, [r7, #14]
 8005dc6:	83fb      	strh	r3, [r7, #30]
      break;
 8005dc8:	e018      	b.n	8005dfc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	4b36      	ldr	r3, [pc, #216]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4836      	ldr	r0, [pc, #216]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4403      	add	r3, r0
 8005de2:	3308      	adds	r3, #8
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	889b      	ldrh	r3, [r3, #4]
 8005de8:	fb11 f303 	smulbb	r3, r1, r3
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	89fb      	ldrh	r3, [r7, #14]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	83fb      	strh	r3, [r7, #30]
      break;
 8005df4:	e002      	b.n	8005dfc <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	83fb      	strh	r3, [r7, #30]
      break;
 8005dfa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005dfc:	8bfb      	ldrh	r3, [r7, #30]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <BSP_LCD_DisplayStringAt+0xde>
 8005e02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da1d      	bge.n	8005e46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005e0e:	e01a      	b.n	8005e46 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	89b9      	ldrh	r1, [r7, #12]
 8005e16:	8bfb      	ldrh	r3, [r7, #30]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff43 	bl	8005ca4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4923      	ldr	r1, [pc, #140]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	3308      	adds	r3, #8
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	889a      	ldrh	r2, [r3, #4]
 8005e34:	8bfb      	ldrh	r3, [r7, #30]
 8005e36:	4413      	add	r3, r2
 8005e38:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
    i++;
 8005e40:	8bbb      	ldrh	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf14      	ite	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	2300      	moveq	r3, #0
 8005e52:	b2dc      	uxtb	r4, r3
 8005e54:	f7ff fe2a 	bl	8005aac <BSP_LCD_GetXSize>
 8005e58:	4605      	mov	r5, r0
 8005e5a:	8bb9      	ldrh	r1, [r7, #28]
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4813      	ldr	r0, [pc, #76]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4403      	add	r3, r0
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	889b      	ldrh	r3, [r3, #4]
 8005e72:	fb03 f301 	mul.w	r3, r3, r1
 8005e76:	1aeb      	subs	r3, r5, r3
 8005e78:	b299      	uxth	r1, r3
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <BSP_LCD_DisplayStringAt+0x180>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <BSP_LCD_DisplayStringAt+0x184>)
 8005e80:	4613      	mov	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4403      	add	r3, r0
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	889b      	ldrh	r3, [r3, #4]
 8005e90:	4299      	cmp	r1, r3
 8005e92:	bf2c      	ite	cs
 8005e94:	2301      	movcs	r3, #1
 8005e96:	2300      	movcc	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4023      	ands	r3, r4
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1b6      	bne.n	8005e10 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8005ea2:	bf00      	nop
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000fe0 	.word	0x20000fe0
 8005eb0:	20000fe4 	.word	0x20000fe4

08005eb4 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	80bb      	strh	r3, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005eca:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <BSP_LCD_DrawVLine+0xb8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <BSP_LCD_DrawVLine+0xbc>)
 8005ed0:	2134      	movs	r1, #52	; 0x34
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3348      	adds	r3, #72	; 0x48
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d114      	bne.n	8005f0a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005ee0:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <BSP_LCD_DrawVLine+0xb8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <BSP_LCD_DrawVLine+0xbc>)
 8005ee6:	2134      	movs	r1, #52	; 0x34
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	335c      	adds	r3, #92	; 0x5c
 8005ef0:	681c      	ldr	r4, [r3, #0]
 8005ef2:	f7ff fddb 	bl	8005aac <BSP_LCD_GetXSize>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	88bb      	ldrh	r3, [r7, #4]
 8005efa:	fb03 f202 	mul.w	r2, r3, r2
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	4413      	add	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4423      	add	r3, r4
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e013      	b.n	8005f32 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <BSP_LCD_DrawVLine+0xb8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <BSP_LCD_DrawVLine+0xbc>)
 8005f10:	2134      	movs	r1, #52	; 0x34
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	335c      	adds	r3, #92	; 0x5c
 8005f1a:	681c      	ldr	r4, [r3, #0]
 8005f1c:	f7ff fdc6 	bl	8005aac <BSP_LCD_GetXSize>
 8005f20:	4602      	mov	r2, r0
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	fb03 f202 	mul.w	r2, r3, r2
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4423      	add	r3, r4
 8005f30:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8005f32:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <BSP_LCD_DrawVLine+0xb8>)
 8005f34:	681c      	ldr	r4, [r3, #0]
 8005f36:	68fd      	ldr	r5, [r7, #12]
 8005f38:	887e      	ldrh	r6, [r7, #2]
 8005f3a:	f7ff fdb7 	bl	8005aac <BSP_LCD_GetXSize>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	1e59      	subs	r1, r3, #1
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <BSP_LCD_DrawVLine+0xb8>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	480b      	ldr	r0, [pc, #44]	; (8005f74 <BSP_LCD_DrawVLine+0xc0>)
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4403      	add	r3, r0
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	9100      	str	r1, [sp, #0]
 8005f58:	4633      	mov	r3, r6
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 fa00 	bl	8006364 <LL_FillBuffer>
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6c:	20000fe0 	.word	0x20000fe0
 8005f70:	2001b8c4 	.word	0x2001b8c4
 8005f74:	20000fe4 	.word	0x20000fe4

08005f78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005f78:	b5b0      	push	{r4, r5, r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	603a      	str	r2, [r7, #0]
 8005f82:	80fb      	strh	r3, [r7, #6]
 8005f84:	460b      	mov	r3, r1
 8005f86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <BSP_LCD_DrawPixel+0x88>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <BSP_LCD_DrawPixel+0x8c>)
 8005f8e:	2134      	movs	r1, #52	; 0x34
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	3348      	adds	r3, #72	; 0x48
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d116      	bne.n	8005fcc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <BSP_LCD_DrawPixel+0x88>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <BSP_LCD_DrawPixel+0x8c>)
 8005fa4:	2134      	movs	r1, #52	; 0x34
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	335c      	adds	r3, #92	; 0x5c
 8005fae:	681c      	ldr	r4, [r3, #0]
 8005fb0:	88bd      	ldrh	r5, [r7, #4]
 8005fb2:	f7ff fd7b 	bl	8005aac <BSP_LCD_GetXSize>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	fb03 f205 	mul.w	r2, r3, r5
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4423      	add	r3, r4
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005fca:	e015      	b.n	8005ff8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <BSP_LCD_DrawPixel+0x88>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	; (8006004 <BSP_LCD_DrawPixel+0x8c>)
 8005fd2:	2134      	movs	r1, #52	; 0x34
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	335c      	adds	r3, #92	; 0x5c
 8005fdc:	681c      	ldr	r4, [r3, #0]
 8005fde:	88bd      	ldrh	r5, [r7, #4]
 8005fe0:	f7ff fd64 	bl	8005aac <BSP_LCD_GetXSize>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	fb03 f205 	mul.w	r2, r3, r5
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4423      	add	r3, r4
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8006000:	20000fe0 	.word	0x20000fe0
 8006004:	2001b8c4 	.word	0x2001b8c4

08006008 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b090      	sub	sp, #64	; 0x40
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006012:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	4a63      	ldr	r2, [pc, #396]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800601c:	6453      	str	r3, [r2, #68]	; 0x44
 800601e:	4b61      	ldr	r3, [pc, #388]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800602a:	4b5e      	ldr	r3, [pc, #376]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006034:	6313      	str	r3, [r2, #48]	; 0x30
 8006036:	4b5b      	ldr	r3, [pc, #364]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006042:	4b58      	ldr	r3, [pc, #352]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4a57      	ldr	r2, [pc, #348]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006048:	f043 0310 	orr.w	r3, r3, #16
 800604c:	6313      	str	r3, [r2, #48]	; 0x30
 800604e:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800605a:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	4a51      	ldr	r2, [pc, #324]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006064:	6313      	str	r3, [r2, #48]	; 0x30
 8006066:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006072:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	4a4b      	ldr	r2, [pc, #300]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6313      	str	r3, [r2, #48]	; 0x30
 800607e:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800608a:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	4a45      	ldr	r2, [pc, #276]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006094:	6313      	str	r3, [r2, #48]	; 0x30
 8006096:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80060a2:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	4a3f      	ldr	r2, [pc, #252]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ac:	6313      	str	r3, [r2, #48]	; 0x30
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80060ba:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a39      	ldr	r2, [pc, #228]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	4a33      	ldr	r2, [pc, #204]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060dc:	6313      	str	r3, [r2, #48]	; 0x30
 80060de:	4b31      	ldr	r3, [pc, #196]	; (80061a4 <BSP_LCD_MspInit+0x19c>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80060ea:	2310      	movs	r3, #16
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80060ee:	2302      	movs	r3, #2
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80060f6:	2302      	movs	r3, #2
 80060f8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80060fa:	230e      	movs	r3, #14
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80060fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006102:	4619      	mov	r1, r3
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <BSP_LCD_MspInit+0x1a0>)
 8006106:	f001 ffbd 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800610a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006110:	2302      	movs	r3, #2
 8006112:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006114:	2309      	movs	r3, #9
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800611c:	4619      	mov	r1, r3
 800611e:	4823      	ldr	r0, [pc, #140]	; (80061ac <BSP_LCD_MspInit+0x1a4>)
 8006120:	f001 ffb0 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006124:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800612a:	2302      	movs	r3, #2
 800612c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800612e:	230e      	movs	r3, #14
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006136:	4619      	mov	r1, r3
 8006138:	481d      	ldr	r0, [pc, #116]	; (80061b0 <BSP_LCD_MspInit+0x1a8>)
 800613a:	f001 ffa3 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800613e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006144:	2302      	movs	r3, #2
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006148:	230e      	movs	r3, #14
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800614c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006150:	4619      	mov	r1, r3
 8006152:	4818      	ldr	r0, [pc, #96]	; (80061b4 <BSP_LCD_MspInit+0x1ac>)
 8006154:	f001 ff96 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006158:	23f7      	movs	r3, #247	; 0xf7
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800615c:	2302      	movs	r3, #2
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006160:	230e      	movs	r3, #14
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006168:	4619      	mov	r1, r3
 800616a:	4813      	ldr	r0, [pc, #76]	; (80061b8 <BSP_LCD_MspInit+0x1b0>)
 800616c:	f001 ff8a 	bl	8008084 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006176:	2301      	movs	r3, #1
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800617a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800617e:	4619      	mov	r1, r3
 8006180:	480b      	ldr	r0, [pc, #44]	; (80061b0 <BSP_LCD_MspInit+0x1a8>)
 8006182:	f001 ff7f 	bl	8008084 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006186:	2308      	movs	r3, #8
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800618a:	2301      	movs	r3, #1
 800618c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800618e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006192:	4619      	mov	r1, r3
 8006194:	4808      	ldr	r0, [pc, #32]	; (80061b8 <BSP_LCD_MspInit+0x1b0>)
 8006196:	f001 ff75 	bl	8008084 <HAL_GPIO_Init>
}
 800619a:	bf00      	nop
 800619c:	3740      	adds	r7, #64	; 0x40
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40022400 	.word	0x40022400
 80061b8:	40022800 	.word	0x40022800

080061bc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <BSP_LCD_ClockConfig+0x34>)
 80061c8:	2208      	movs	r2, #8
 80061ca:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <BSP_LCD_ClockConfig+0x34>)
 80061ce:	22c0      	movs	r2, #192	; 0xc0
 80061d0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <BSP_LCD_ClockConfig+0x34>)
 80061d4:	2205      	movs	r2, #5
 80061d6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <BSP_LCD_ClockConfig+0x34>)
 80061da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80061e0:	4803      	ldr	r0, [pc, #12]	; (80061f0 <BSP_LCD_ClockConfig+0x34>)
 80061e2:	f005 fe19 	bl	800be18 <HAL_RCCEx_PeriphCLKConfig>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000ffc 	.word	0x20000ffc

080061f4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	603a      	str	r2, [r7, #0]
 80061fe:	80fb      	strh	r3, [r7, #6]
 8006200:	460b      	mov	r3, r1
 8006202:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800620c:	4b53      	ldr	r3, [pc, #332]	; (800635c <DrawChar+0x168>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4953      	ldr	r1, [pc, #332]	; (8006360 <DrawChar+0x16c>)
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3308      	adds	r3, #8
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006224:	4b4d      	ldr	r3, [pc, #308]	; (800635c <DrawChar+0x168>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	494d      	ldr	r1, [pc, #308]	; (8006360 <DrawChar+0x16c>)
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	3308      	adds	r3, #8
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	889b      	ldrh	r3, [r3, #4]
 800623a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800623c:	8a3b      	ldrh	r3, [r7, #16]
 800623e:	3307      	adds	r3, #7
 8006240:	2b00      	cmp	r3, #0
 8006242:	da00      	bge.n	8006246 <DrawChar+0x52>
 8006244:	3307      	adds	r3, #7
 8006246:	10db      	asrs	r3, r3, #3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	b2da      	uxtb	r2, r3
 800624e:	8a3b      	ldrh	r3, [r7, #16]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e076      	b.n	800634a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800625c:	8a3b      	ldrh	r3, [r7, #16]
 800625e:	3307      	adds	r3, #7
 8006260:	2b00      	cmp	r3, #0
 8006262:	da00      	bge.n	8006266 <DrawChar+0x72>
 8006264:	3307      	adds	r3, #7
 8006266:	10db      	asrs	r3, r3, #3
 8006268:	461a      	mov	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	fb03 f302 	mul.w	r3, r3, r2
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006276:	8a3b      	ldrh	r3, [r7, #16]
 8006278:	3307      	adds	r3, #7
 800627a:	2b00      	cmp	r3, #0
 800627c:	da00      	bge.n	8006280 <DrawChar+0x8c>
 800627e:	3307      	adds	r3, #7
 8006280:	10db      	asrs	r3, r3, #3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d002      	beq.n	800628c <DrawChar+0x98>
 8006286:	2b02      	cmp	r3, #2
 8006288:	d004      	beq.n	8006294 <DrawChar+0xa0>
 800628a:	e00c      	b.n	80062a6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	617b      	str	r3, [r7, #20]
      break;
 8006292:	e016      	b.n	80062c2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	3201      	adds	r2, #1
 800629e:	7812      	ldrb	r2, [r2, #0]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
      break;
 80062a4:	e00d      	b.n	80062c2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	041a      	lsls	r2, r3, #16
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	3301      	adds	r3, #1
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	4313      	orrs	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	3202      	adds	r2, #2
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
      break;
 80062c0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e036      	b.n	8006336 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80062c8:	8a3a      	ldrh	r2, [r7, #16]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4413      	add	r3, r2
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2201      	movs	r2, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4013      	ands	r3, r2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d012      	beq.n	800630a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	4413      	add	r3, r2
 80062ec:	b298      	uxth	r0, r3
 80062ee:	4b1b      	ldr	r3, [pc, #108]	; (800635c <DrawChar+0x168>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	491b      	ldr	r1, [pc, #108]	; (8006360 <DrawChar+0x16c>)
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	88bb      	ldrh	r3, [r7, #4]
 8006302:	4619      	mov	r1, r3
 8006304:	f7ff fe38 	bl	8005f78 <BSP_LCD_DrawPixel>
 8006308:	e012      	b.n	8006330 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	b29a      	uxth	r2, r3
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	4413      	add	r3, r2
 8006312:	b298      	uxth	r0, r3
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <DrawChar+0x168>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4911      	ldr	r1, [pc, #68]	; (8006360 <DrawChar+0x16c>)
 800631a:	4613      	mov	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3304      	adds	r3, #4
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	88bb      	ldrh	r3, [r7, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	f7ff fe24 	bl	8005f78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	3301      	adds	r3, #1
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	8a3b      	ldrh	r3, [r7, #16]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	429a      	cmp	r2, r3
 800633c:	d3c4      	bcc.n	80062c8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800633e:	88bb      	ldrh	r3, [r7, #4]
 8006340:	3301      	adds	r3, #1
 8006342:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	8a7b      	ldrh	r3, [r7, #18]
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	429a      	cmp	r2, r3
 8006350:	d384      	bcc.n	800625c <DrawChar+0x68>
  }
}
 8006352:	bf00      	nop
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000fe0 	.word	0x20000fe0
 8006360:	20000fe4 	.word	0x20000fe4

08006364 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <LL_FillBuffer+0x88>)
 8006374:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006378:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800637a:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <LL_FillBuffer+0x8c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <LL_FillBuffer+0x90>)
 8006380:	2134      	movs	r1, #52	; 0x34
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	3348      	adds	r3, #72	; 0x48
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d103      	bne.n	8006398 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006390:	4b16      	ldr	r3, [pc, #88]	; (80063ec <LL_FillBuffer+0x88>)
 8006392:	2202      	movs	r2, #2
 8006394:	609a      	str	r2, [r3, #8]
 8006396:	e002      	b.n	800639e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006398:	4b14      	ldr	r3, [pc, #80]	; (80063ec <LL_FillBuffer+0x88>)
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <LL_FillBuffer+0x88>)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <LL_FillBuffer+0x88>)
 80063a6:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <LL_FillBuffer+0x94>)
 80063a8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80063aa:	4810      	ldr	r0, [pc, #64]	; (80063ec <LL_FillBuffer+0x88>)
 80063ac:	f001 face 	bl	800794c <HAL_DMA2D_Init>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d115      	bne.n	80063e2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	480c      	ldr	r0, [pc, #48]	; (80063ec <LL_FillBuffer+0x88>)
 80063ba:	f001 fd35 	bl	8007e28 <HAL_DMA2D_ConfigLayer>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10e      	bne.n	80063e2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	4807      	ldr	r0, [pc, #28]	; (80063ec <LL_FillBuffer+0x88>)
 80063d0:	f001 fb06 	bl	80079e0 <HAL_DMA2D_Start>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80063da:	210a      	movs	r1, #10
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <LL_FillBuffer+0x88>)
 80063de:	f001 fb2a 	bl	8007a36 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000fa0 	.word	0x20000fa0
 80063f0:	20000fe0 	.word	0x20000fe0
 80063f4:	2001b8c4 	.word	0x2001b8c4
 80063f8:	4002b000 	.word	0x4002b000

080063fc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006400:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006402:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <BSP_SDRAM_Init+0xb0>)
 8006404:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 8006408:	2202      	movs	r2, #2
 800640a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800640c:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 800640e:	2207      	movs	r2, #7
 8006410:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006412:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 8006414:	2204      	movs	r2, #4
 8006416:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006418:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 800641a:	2207      	movs	r2, #7
 800641c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800641e:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 8006420:	2202      	movs	r2, #2
 8006422:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006424:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 8006426:	2202      	movs	r2, #2
 8006428:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800642a:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 800642c:	2202      	movs	r2, #2
 800642e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006432:	2200      	movs	r2, #0
 8006434:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006436:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800643c:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 800643e:	2204      	movs	r2, #4
 8006440:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006442:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006444:	2210      	movs	r2, #16
 8006446:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006454:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006458:	2200      	movs	r2, #0
 800645a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 800645e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006462:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006464:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006472:	2100      	movs	r1, #0
 8006474:	480c      	ldr	r0, [pc, #48]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 8006476:	f000 f87f 	bl	8006578 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800647a:	490d      	ldr	r1, [pc, #52]	; (80064b0 <BSP_SDRAM_Init+0xb4>)
 800647c:	480a      	ldr	r0, [pc, #40]	; (80064a8 <BSP_SDRAM_Init+0xac>)
 800647e:	f007 f9dc 	bl	800d83a <HAL_SDRAM_Init>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <BSP_SDRAM_Init+0xb8>)
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e002      	b.n	8006496 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <BSP_SDRAM_Init+0xb8>)
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006496:	f240 6003 	movw	r0, #1539	; 0x603
 800649a:	f000 f80d 	bl	80064b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <BSP_SDRAM_Init+0xb8>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2001b96c 	.word	0x2001b96c
 80064ac:	a0000140 	.word	0xa0000140
 80064b0:	20001080 	.word	0x20001080
 80064b4:	20000040 	.word	0x20000040

080064b8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80064c4:	4b2a      	ldr	r3, [pc, #168]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064cc:	2210      	movs	r2, #16
 80064ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80064dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e0:	4923      	ldr	r1, [pc, #140]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064e2:	4824      	ldr	r0, [pc, #144]	; (8006574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80064e4:	f007 f9dd 	bl	800d8a2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80064e8:	2001      	movs	r0, #1
 80064ea:	f000 f96b 	bl	80067c4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064f0:	2202      	movs	r2, #2
 80064f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80064f4:	4b1e      	ldr	r3, [pc, #120]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064f6:	2210      	movs	r2, #16
 80064f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006502:	2200      	movs	r2, #0
 8006504:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800650a:	4919      	ldr	r1, [pc, #100]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800650c:	4819      	ldr	r0, [pc, #100]	; (8006574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800650e:	f007 f9c8 	bl	800d8a2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006514:	2203      	movs	r2, #3
 8006516:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800651a:	2210      	movs	r2, #16
 800651c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006520:	2208      	movs	r2, #8
 8006522:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006526:	2200      	movs	r2, #0
 8006528:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800652a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652e:	4910      	ldr	r1, [pc, #64]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006530:	4810      	ldr	r0, [pc, #64]	; (8006574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006532:	f007 f9b6 	bl	800d8a2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006536:	f44f 7308 	mov.w	r3, #544	; 0x220
 800653a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800653c:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800653e:	2204      	movs	r2, #4
 8006540:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006544:	2210      	movs	r2, #16
 8006546:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800654a:	2201      	movs	r2, #1
 800654c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a07      	ldr	r2, [pc, #28]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006552:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006558:	4905      	ldr	r1, [pc, #20]	; (8006570 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800655a:	4806      	ldr	r0, [pc, #24]	; (8006574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800655c:	f007 f9a1 	bl	800d8a2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4804      	ldr	r0, [pc, #16]	; (8006574 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006564:	f007 f9c8 	bl	800d8f8 <HAL_SDRAM_ProgramRefreshRate>
}
 8006568:	bf00      	nop
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	2000109c 	.word	0x2000109c
 8006574:	2001b96c 	.word	0x2001b96c

08006578 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006578:	b580      	push	{r7, lr}
 800657a:	b090      	sub	sp, #64	; 0x40
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	4a6f      	ldr	r2, [pc, #444]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6393      	str	r3, [r2, #56]	; 0x38
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800659a:	4b6a      	ldr	r3, [pc, #424]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	4a69      	ldr	r2, [pc, #420]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065a4:	6313      	str	r3, [r2, #48]	; 0x30
 80065a6:	4b67      	ldr	r3, [pc, #412]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065b2:	4b64      	ldr	r3, [pc, #400]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	4a63      	ldr	r2, [pc, #396]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065b8:	f043 0304 	orr.w	r3, r3, #4
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30
 80065be:	4b61      	ldr	r3, [pc, #388]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	623b      	str	r3, [r7, #32]
 80065c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065ca:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	4a5d      	ldr	r2, [pc, #372]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	6313      	str	r3, [r2, #48]	; 0x30
 80065d6:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065e2:	4b58      	ldr	r3, [pc, #352]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	4a57      	ldr	r2, [pc, #348]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065e8:	f043 0310 	orr.w	r3, r3, #16
 80065ec:	6313      	str	r3, [r2, #48]	; 0x30
 80065ee:	4b55      	ldr	r3, [pc, #340]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80065fa:	4b52      	ldr	r3, [pc, #328]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	4a51      	ldr	r2, [pc, #324]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006600:	f043 0320 	orr.w	r3, r3, #32
 8006604:	6313      	str	r3, [r2, #48]	; 0x30
 8006606:	4b4f      	ldr	r3, [pc, #316]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006612:	4b4c      	ldr	r3, [pc, #304]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	4a4b      	ldr	r2, [pc, #300]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661c:	6313      	str	r3, [r2, #48]	; 0x30
 800661e:	4b49      	ldr	r3, [pc, #292]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800662a:	4b46      	ldr	r3, [pc, #280]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	4a45      	ldr	r2, [pc, #276]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006634:	6313      	str	r3, [r2, #48]	; 0x30
 8006636:	4b43      	ldr	r3, [pc, #268]	; (8006744 <BSP_SDRAM_MspInit+0x1cc>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006642:	2302      	movs	r3, #2
 8006644:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006646:	2301      	movs	r3, #1
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800664a:	2302      	movs	r3, #2
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800664e:	230c      	movs	r3, #12
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8006652:	2308      	movs	r3, #8
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8006656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800665a:	4619      	mov	r1, r3
 800665c:	483a      	ldr	r0, [pc, #232]	; (8006748 <BSP_SDRAM_MspInit+0x1d0>)
 800665e:	f001 fd11 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006662:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800666c:	4619      	mov	r1, r3
 800666e:	4837      	ldr	r0, [pc, #220]	; (800674c <BSP_SDRAM_MspInit+0x1d4>)
 8006670:	f001 fd08 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006674:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800667a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800667e:	4619      	mov	r1, r3
 8006680:	4833      	ldr	r0, [pc, #204]	; (8006750 <BSP_SDRAM_MspInit+0x1d8>)
 8006682:	f001 fcff 	bl	8008084 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006686:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800668c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006690:	4619      	mov	r1, r3
 8006692:	4830      	ldr	r0, [pc, #192]	; (8006754 <BSP_SDRAM_MspInit+0x1dc>)
 8006694:	f001 fcf6 	bl	8008084 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006698:	f248 1333 	movw	r3, #33075	; 0x8133
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800669e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066a2:	4619      	mov	r1, r3
 80066a4:	482c      	ldr	r0, [pc, #176]	; (8006758 <BSP_SDRAM_MspInit+0x1e0>)
 80066a6:	f001 fced 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80066aa:	2328      	movs	r3, #40	; 0x28
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80066ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066b2:	4619      	mov	r1, r3
 80066b4:	4829      	ldr	r0, [pc, #164]	; (800675c <BSP_SDRAM_MspInit+0x1e4>)
 80066b6:	f001 fce5 	bl	8008084 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80066ba:	4b29      	ldr	r3, [pc, #164]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066bc:	2200      	movs	r2, #0
 80066be:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80066c0:	4b27      	ldr	r3, [pc, #156]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066c2:	2280      	movs	r2, #128	; 0x80
 80066c4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80066ce:	4b24      	ldr	r3, [pc, #144]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066d4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066dc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80066de:	4b20      	ldr	r3, [pc, #128]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066e4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80066ec:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066f2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80066f4:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 80066fc:	2203      	movs	r2, #3
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 8006702:	2200      	movs	r2, #0
 8006704:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 800670e:	4a15      	ldr	r2, [pc, #84]	; (8006764 <BSP_SDRAM_MspInit+0x1ec>)
 8006710:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a12      	ldr	r2, [pc, #72]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
 8006718:	4a11      	ldr	r2, [pc, #68]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800671e:	4810      	ldr	r0, [pc, #64]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 8006720:	f000 fdee 	bl	8007300 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8006724:	480e      	ldr	r0, [pc, #56]	; (8006760 <BSP_SDRAM_MspInit+0x1e8>)
 8006726:	f000 fd3d 	bl	80071a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800672a:	2200      	movs	r2, #0
 800672c:	210f      	movs	r1, #15
 800672e:	2038      	movs	r0, #56	; 0x38
 8006730:	f000 fbaa 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8006734:	2038      	movs	r0, #56	; 0x38
 8006736:	f000 fbc3 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 800673a:	bf00      	nop
 800673c:	3740      	adds	r7, #64	; 0x40
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	40020800 	.word	0x40020800
 800674c:	40020c00 	.word	0x40020c00
 8006750:	40021000 	.word	0x40021000
 8006754:	40021400 	.word	0x40021400
 8006758:	40021800 	.word	0x40021800
 800675c:	40021c00 	.word	0x40021c00
 8006760:	200010ac 	.word	0x200010ac
 8006764:	40026410 	.word	0x40026410

08006768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800676c:	2003      	movs	r0, #3
 800676e:	f000 fb80 	bl	8006e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006772:	2000      	movs	r0, #0
 8006774:	f7fc ffe2 	bl	800373c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006778:	f7fc f8b8 	bl	80028ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_IncTick+0x20>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <HAL_IncTick+0x24>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4413      	add	r3, r2
 8006794:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <HAL_IncTick+0x24>)
 8006796:	6013      	str	r3, [r2, #0]
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000048 	.word	0x20000048
 80067a8:	2001b9a0 	.word	0x2001b9a0

080067ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  return uwTick;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <HAL_GetTick+0x14>)
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	2001b9a0 	.word	0x2001b9a0

080067c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067cc:	f7ff ffee 	bl	80067ac <HAL_GetTick>
 80067d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d005      	beq.n	80067ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HAL_Delay+0x40>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067ea:	bf00      	nop
 80067ec:	f7ff ffde 	bl	80067ac <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d8f7      	bhi.n	80067ec <HAL_Delay+0x28>
  {
  }
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000048 	.word	0x20000048

08006808 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e031      	b.n	8006882 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fc f888 	bl	800293c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	d116      	bne.n	8006874 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_ADC_Init+0x84>)
 800684c:	4013      	ands	r3, r2
 800684e:	f043 0202 	orr.w	r2, r3, #2
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f964 	bl	8006b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	f043 0201 	orr.w	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
 8006872:	e001      	b.n	8006878 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	ffffeefd 	.word	0xffffeefd

08006890 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x1c>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e12a      	b.n	8006b02 <HAL_ADC_ConfigChannel+0x272>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d93a      	bls.n	8006932 <HAL_ADC_ConfigChannel+0xa2>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c4:	d035      	beq.n	8006932 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68d9      	ldr	r1, [r3, #12]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	4613      	mov	r3, r2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	4413      	add	r3, r2
 80068da:	3b1e      	subs	r3, #30
 80068dc:	2207      	movs	r2, #7
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43da      	mvns	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	400a      	ands	r2, r1
 80068ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a87      	ldr	r2, [pc, #540]	; (8006b10 <HAL_ADC_ConfigChannel+0x280>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10a      	bne.n	800690c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68d9      	ldr	r1, [r3, #12]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	061a      	lsls	r2, r3, #24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800690a:	e035      	b.n	8006978 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	4618      	mov	r0, r3
 800691e:	4603      	mov	r3, r0
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4403      	add	r3, r0
 8006924:	3b1e      	subs	r3, #30
 8006926:	409a      	lsls	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006930:	e022      	b.n	8006978 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6919      	ldr	r1, [r3, #16]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	4613      	mov	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4413      	add	r3, r2
 8006946:	2207      	movs	r2, #7
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	43da      	mvns	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	400a      	ands	r2, r1
 8006954:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6919      	ldr	r1, [r3, #16]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	4618      	mov	r0, r3
 8006968:	4603      	mov	r3, r0
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	4403      	add	r3, r0
 800696e:	409a      	lsls	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b06      	cmp	r3, #6
 800697e:	d824      	bhi.n	80069ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	3b05      	subs	r3, #5
 8006992:	221f      	movs	r2, #31
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	43da      	mvns	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	400a      	ands	r2, r1
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4618      	mov	r0, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	3b05      	subs	r3, #5
 80069bc:	fa00 f203 	lsl.w	r2, r0, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	635a      	str	r2, [r3, #52]	; 0x34
 80069c8:	e04c      	b.n	8006a64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d824      	bhi.n	8006a1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	3b23      	subs	r3, #35	; 0x23
 80069e4:	221f      	movs	r2, #31
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43da      	mvns	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	400a      	ands	r2, r1
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	4618      	mov	r0, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3b23      	subs	r3, #35	; 0x23
 8006a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1a:	e023      	b.n	8006a64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3b41      	subs	r3, #65	; 0x41
 8006a2e:	221f      	movs	r2, #31
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	43da      	mvns	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	400a      	ands	r2, r1
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	3b41      	subs	r3, #65	; 0x41
 8006a58:	fa00 f203 	lsl.w	r2, r0, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <HAL_ADC_ConfigChannel+0x284>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10a      	bne.n	8006a84 <HAL_ADC_ConfigChannel+0x1f4>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a76:	d105      	bne.n	8006a84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006a78:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006a7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006a82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <HAL_ADC_ConfigChannel+0x284>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d109      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x212>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b12      	cmp	r3, #18
 8006a94:	d105      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006a96:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aa0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_ADC_ConfigChannel+0x284>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d125      	bne.n	8006af8 <HAL_ADC_ConfigChannel+0x268>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <HAL_ADC_ConfigChannel+0x280>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <HAL_ADC_ConfigChannel+0x22e>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b11      	cmp	r3, #17
 8006abc:	d11c      	bne.n	8006af8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006abe:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <HAL_ADC_ConfigChannel+0x288>)
 8006ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ac8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <HAL_ADC_ConfigChannel+0x280>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d111      	bne.n	8006af8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006ad4:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_ADC_ConfigChannel+0x28c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a11      	ldr	r2, [pc, #68]	; (8006b20 <HAL_ADC_ConfigChannel+0x290>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	0c9a      	lsrs	r2, r3, #18
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006aea:	e002      	b.n	8006af2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f9      	bne.n	8006aec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	10000012 	.word	0x10000012
 8006b14:	40012000 	.word	0x40012000
 8006b18:	40012300 	.word	0x40012300
 8006b1c:	20000000 	.word	0x20000000
 8006b20:	431bde83 	.word	0x431bde83

08006b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006b2c:	4b78      	ldr	r3, [pc, #480]	; (8006d10 <ADC_Init+0x1ec>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	4a77      	ldr	r2, [pc, #476]	; (8006d10 <ADC_Init+0x1ec>)
 8006b32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006b36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006b38:	4b75      	ldr	r3, [pc, #468]	; (8006d10 <ADC_Init+0x1ec>)
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4973      	ldr	r1, [pc, #460]	; (8006d10 <ADC_Init+0x1ec>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6859      	ldr	r1, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	021a      	lsls	r2, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6859      	ldr	r1, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	4a58      	ldr	r2, [pc, #352]	; (8006d14 <ADC_Init+0x1f0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d022      	beq.n	8006bfe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6899      	ldr	r1, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	e00f      	b.n	8006c1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0202 	bic.w	r2, r2, #2
 8006c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6899      	ldr	r1, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	005a      	lsls	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6859      	ldr	r1, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	3b01      	subs	r3, #1
 8006c78:	035a      	lsls	r2, r3, #13
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	e007      	b.n	8006c94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	051a      	lsls	r2, r3, #20
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6899      	ldr	r1, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cd6:	025a      	lsls	r2, r3, #9
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6899      	ldr	r1, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	029a      	lsls	r2, r3, #10
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	609a      	str	r2, [r3, #8]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40012300 	.word	0x40012300
 8006d14:	0f000001 	.word	0x0f000001

08006d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <__NVIC_SetPriorityGrouping+0x40>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d46:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <__NVIC_SetPriorityGrouping+0x40>)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	60d3      	str	r3, [r2, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000ed00 	.word	0xe000ed00
 8006d5c:	05fa0000 	.word	0x05fa0000

08006d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__NVIC_GetPriorityGrouping+0x18>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	f003 0307 	and.w	r3, r3, #7
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db0b      	blt.n	8006da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <__NVIC_EnableIRQ+0x38>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8006da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	e000e100 	.word	0xe000e100

08006db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db0a      	blt.n	8006de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	490c      	ldr	r1, [pc, #48]	; (8006e04 <__NVIC_SetPriority+0x4c>)
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	0112      	lsls	r2, r2, #4
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006de0:	e00a      	b.n	8006df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4908      	ldr	r1, [pc, #32]	; (8006e08 <__NVIC_SetPriority+0x50>)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	3b04      	subs	r3, #4
 8006df0:	0112      	lsls	r2, r2, #4
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	440b      	add	r3, r1
 8006df6:	761a      	strb	r2, [r3, #24]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	e000e100 	.word	0xe000e100
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f1c3 0307 	rsb	r3, r3, #7
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf28      	it	cs
 8006e2a:	2304      	movcs	r3, #4
 8006e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d902      	bls.n	8006e3c <NVIC_EncodePriority+0x30>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3b03      	subs	r3, #3
 8006e3a:	e000      	b.n	8006e3e <NVIC_EncodePriority+0x32>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43da      	mvns	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	401a      	ands	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	43d9      	mvns	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e64:	4313      	orrs	r3, r2
         );
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ff4c 	bl	8006d18 <__NVIC_SetPriorityGrouping>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e9a:	f7ff ff61 	bl	8006d60 <__NVIC_GetPriorityGrouping>
 8006e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f7ff ffb1 	bl	8006e0c <NVIC_EncodePriority>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ff80 	bl	8006db8 <__NVIC_SetPriority>
}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff ff54 	bl	8006d7c <__NVIC_EnableIRQ>
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e054      	b.n	8006f98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7f5b      	ldrb	r3, [r3, #29]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d105      	bne.n	8006f04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fb fd76 	bl	80029f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10c      	bne.n	8006f2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_CRC_Init+0xc4>)
 8006f18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0218 	bic.w	r2, r2, #24
 8006f28:	609a      	str	r2, [r3, #8]
 8006f2a:	e00c      	b.n	8006f46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f834 	bl	8006fa4 <HAL_CRCEx_Polynomial_Set>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e028      	b.n	8006f98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	795b      	ldrb	r3, [r3, #5]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	611a      	str	r2, [r3, #16]
 8006f58:	e004      	b.n	8006f64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6912      	ldr	r2, [r2, #16]
 8006f62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695a      	ldr	r2, [r3, #20]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	04c11db7 	.word	0x04c11db7

08006fa4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006fb4:	231f      	movs	r3, #31
 8006fb6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006fb8:	bf00      	nop
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1e5a      	subs	r2, r3, #1
 8006fbe:	613a      	str	r2, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_CRCEx_Polynomial_Set+0x34>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b18      	cmp	r3, #24
 8006fdc:	d846      	bhi.n	800706c <HAL_CRCEx_Polynomial_Set+0xc8>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	0800706d 	.word	0x0800706d
 8006fec:	0800706d 	.word	0x0800706d
 8006ff0:	0800706d 	.word	0x0800706d
 8006ff4:	0800706d 	.word	0x0800706d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800706d 	.word	0x0800706d
 8007000:	0800706d 	.word	0x0800706d
 8007004:	08007061 	.word	0x08007061
 8007008:	0800706d 	.word	0x0800706d
 800700c:	0800706d 	.word	0x0800706d
 8007010:	0800706d 	.word	0x0800706d
 8007014:	0800706d 	.word	0x0800706d
 8007018:	0800706d 	.word	0x0800706d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800706d 	.word	0x0800706d
 8007024:	08007055 	.word	0x08007055
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	0800706d 	.word	0x0800706d
 8007034:	0800706d 	.word	0x0800706d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800706d 	.word	0x0800706d
 8007040:	0800706d 	.word	0x0800706d
 8007044:	08007049 	.word	0x08007049
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d913      	bls.n	8007076 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007052:	e010      	b.n	8007076 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b07      	cmp	r3, #7
 8007058:	d90f      	bls.n	800707a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800705e:	e00c      	b.n	800707a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d90b      	bls.n	800707e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800706a:	e008      	b.n	800707e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
      break;
 8007070:	e006      	b.n	8007080 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800707e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10d      	bne.n	80070a2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f023 0118 	bic.w	r1, r3, #24
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e069      	b.n	8007196 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fb fcae 	bl	8002a30 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	4b2a      	ldr	r3, [pc, #168]	; (80071a0 <HAL_DCMI_Init+0xf0>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800710e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800711a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8007126:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8007132:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800713e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b10      	cmp	r3, #16
 800714e:	d112      	bne.n	8007176 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7f1b      	ldrb	r3, [r3, #28]
 8007154:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	7f5b      	ldrb	r3, [r3, #29]
 800715a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800715c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7f9b      	ldrb	r3, [r3, #30]
 8007162:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8007164:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	7fdb      	ldrb	r3, [r3, #31]
 800716c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8007172:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8007174:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 021e 	orr.w	r2, r2, #30
 8007184:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	ffe0f007 	.word	0xffe0f007

080071a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80071b0:	f7ff fafc 	bl	80067ac <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e099      	b.n	80072f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0201 	bic.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071e0:	e00f      	b.n	8007202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071e2:	f7ff fae3 	bl	80067ac <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b05      	cmp	r3, #5
 80071ee:	d908      	bls.n	8007202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e078      	b.n	80072f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e8      	bne.n	80071e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4b38      	ldr	r3, [pc, #224]	; (80072fc <HAL_DMA_Init+0x158>)
 800721c:	4013      	ands	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800722e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800723a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b04      	cmp	r3, #4
 800725a:	d107      	bne.n	800726c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	4313      	orrs	r3, r2
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0307 	bic.w	r3, r3, #7
 8007282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b04      	cmp	r3, #4
 8007294:	d117      	bne.n	80072c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fad5 	bl	8007858 <DMA_CheckFifoParam>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2240      	movs	r2, #64	; 0x40
 80072b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80072c2:	2301      	movs	r3, #1
 80072c4:	e016      	b.n	80072f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa8c 	bl	80077ec <DMA_CalcBaseAndBitshift>
 80072d4:	4603      	mov	r3, r0
 80072d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	223f      	movs	r2, #63	; 0x3f
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	f010803f 	.word	0xf010803f

08007300 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e050      	b.n	80073b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d101      	bne.n	8007322 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800731e:	2302      	movs	r3, #2
 8007320:	e048      	b.n	80073b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2200      	movs	r2, #0
 8007358:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2221      	movs	r2, #33	; 0x21
 8007360:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa42 	bl	80077ec <DMA_CalcBaseAndBitshift>
 8007368:	4603      	mov	r3, r0
 800736a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	223f      	movs	r2, #63	; 0x3f
 8007372:	409a      	lsls	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_DMA_Start_IT+0x26>
 80073de:	2302      	movs	r3, #2
 80073e0:	e048      	b.n	8007474 <HAL_DMA_Start_IT+0xb8>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d137      	bne.n	8007466 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f9c0 	bl	8007790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007414:	223f      	movs	r2, #63	; 0x3f
 8007416:	409a      	lsls	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0216 	orr.w	r2, r2, #22
 800742a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800743a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e005      	b.n	8007472 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800746e:	2302      	movs	r3, #2
 8007470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007488:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <HAL_DMA_IRQHandler+0x258>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a92      	ldr	r2, [pc, #584]	; (80076d8 <HAL_DMA_IRQHandler+0x25c>)
 800748e:	fba2 2303 	umull	r2, r3, r2, r3
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a6:	2208      	movs	r2, #8
 80074a8:	409a      	lsls	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01a      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0204 	bic.w	r2, r2, #4
 80074ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	2208      	movs	r2, #8
 80074d6:	409a      	lsls	r2, r3
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e0:	f043 0201 	orr.w	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d012      	beq.n	800751e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	2201      	movs	r2, #1
 800750c:	409a      	lsls	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007516:	f043 0202 	orr.w	r2, r3, #2
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007522:	2204      	movs	r2, #4
 8007524:	409a      	lsls	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4013      	ands	r3, r2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d012      	beq.n	8007554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	2204      	movs	r2, #4
 8007542:	409a      	lsls	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	f043 0204 	orr.w	r2, r3, #4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007558:	2210      	movs	r2, #16
 800755a:	409a      	lsls	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d043      	beq.n	80075ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d03c      	beq.n	80075ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007576:	2210      	movs	r2, #16
 8007578:	409a      	lsls	r2, r3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d108      	bne.n	80075ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d024      	beq.n	80075ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
 80075aa:	e01f      	b.n	80075ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
 80075bc:	e016      	b.n	80075ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d107      	bne.n	80075dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0208 	bic.w	r2, r2, #8
 80075da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f0:	2220      	movs	r2, #32
 80075f2:	409a      	lsls	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 808e 	beq.w	800771a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8086 	beq.w	800771a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007612:	2220      	movs	r2, #32
 8007614:	409a      	lsls	r2, r3
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b05      	cmp	r3, #5
 8007624:	d136      	bne.n	8007694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0216 	bic.w	r2, r2, #22
 8007634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d103      	bne.n	8007656 <HAL_DMA_IRQHandler+0x1da>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0208 	bic.w	r2, r2, #8
 8007664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	223f      	movs	r2, #63	; 0x3f
 800766c:	409a      	lsls	r2, r3
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007686:	2b00      	cmp	r3, #0
 8007688:	d07d      	beq.n	8007786 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
        }
        return;
 8007692:	e078      	b.n	8007786 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01c      	beq.n	80076dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d108      	bne.n	80076c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d030      	beq.n	800771a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
 80076c0:	e02b      	b.n	800771a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d027      	beq.n	800771a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	e022      	b.n	800771a <HAL_DMA_IRQHandler+0x29e>
 80076d4:	20000000 	.word	0x20000000
 80076d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10f      	bne.n	800770a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0210 	bic.w	r2, r2, #16
 80076f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771e:	2b00      	cmp	r3, #0
 8007720:	d032      	beq.n	8007788 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d022      	beq.n	8007774 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2205      	movs	r2, #5
 8007732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	3301      	adds	r3, #1
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	429a      	cmp	r2, r3
 8007750:	d307      	bcc.n	8007762 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f2      	bne.n	8007746 <HAL_DMA_IRQHandler+0x2ca>
 8007760:	e000      	b.n	8007764 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007762:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
 8007784:	e000      	b.n	8007788 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007786:	bf00      	nop
    }
  }
}
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop

08007790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d108      	bne.n	80077d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80077ce:	e007      	b.n	80077e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	3b10      	subs	r3, #16
 80077fc:	4a13      	ldr	r2, [pc, #76]	; (800784c <DMA_CalcBaseAndBitshift+0x60>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007806:	4a12      	ldr	r2, [pc, #72]	; (8007850 <DMA_CalcBaseAndBitshift+0x64>)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d908      	bls.n	800782c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <DMA_CalcBaseAndBitshift+0x68>)
 8007822:	4013      	ands	r3, r2
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	659a      	str	r2, [r3, #88]	; 0x58
 800782a:	e006      	b.n	800783a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	4b08      	ldr	r3, [pc, #32]	; (8007854 <DMA_CalcBaseAndBitshift+0x68>)
 8007834:	4013      	ands	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	aaaaaaab 	.word	0xaaaaaaab
 8007850:	08018a88 	.word	0x08018a88
 8007854:	fffffc00 	.word	0xfffffc00

08007858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d11f      	bne.n	80078b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d855      	bhi.n	8007924 <DMA_CheckFifoParam+0xcc>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <DMA_CheckFifoParam+0x28>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	08007891 	.word	0x08007891
 8007884:	080078a3 	.word	0x080078a3
 8007888:	08007891 	.word	0x08007891
 800788c:	08007925 	.word	0x08007925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d045      	beq.n	8007928 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a0:	e042      	b.n	8007928 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078aa:	d13f      	bne.n	800792c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b0:	e03c      	b.n	800792c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ba:	d121      	bne.n	8007900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d836      	bhi.n	8007930 <DMA_CheckFifoParam+0xd8>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <DMA_CheckFifoParam+0x70>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078df 	.word	0x080078df
 80078d0:	080078d9 	.word	0x080078d9
 80078d4:	080078f1 	.word	0x080078f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e02f      	b.n	800793e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d024      	beq.n	8007934 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078ee:	e021      	b.n	8007934 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078f8:	d11e      	bne.n	8007938 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078fe:	e01b      	b.n	8007938 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d902      	bls.n	800790c <DMA_CheckFifoParam+0xb4>
 8007906:	2b03      	cmp	r3, #3
 8007908:	d003      	beq.n	8007912 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800790a:	e018      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
      break;
 8007910:	e015      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
      break;
 8007922:	e00b      	b.n	800793c <DMA_CheckFifoParam+0xe4>
      break;
 8007924:	bf00      	nop
 8007926:	e00a      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;
 8007928:	bf00      	nop
 800792a:	e008      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;
 800792c:	bf00      	nop
 800792e:	e006      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;
 8007930:	bf00      	nop
 8007932:	e004      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;   
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <DMA_CheckFifoParam+0xe6>
      break;
 800793c:	bf00      	nop
    }
  } 
  
  return status; 
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e039      	b.n	80079d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fb f91a 	bl	8002bac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	f023 0107 	bic.w	r1, r3, #7
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b2:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <HAL_DMA2D_Init+0x90>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68d1      	ldr	r1, [r2, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	430b      	orrs	r3, r1
 80079c0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	ffffc000 	.word	0xffffc000

080079e0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_DMA2D_Start+0x1c>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e018      	b.n	8007a2e <HAL_DMA2D_Start+0x4e>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fa98 	bl	8007f4c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d056      	beq.n	8007b00 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8007a52:	f7fe feab 	bl	80067ac <HAL_GetTick>
 8007a56:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a58:	e04b      	b.n	8007af2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d023      	beq.n	8007ab4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	f043 0202 	orr.w	r2, r3, #2
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	f043 0201 	orr.w	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2221      	movs	r2, #33	; 0x21
 8007a9e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e0a5      	b.n	8007c00 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d01a      	beq.n	8007af2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007abc:	f7fe fe76 	bl	80067ac <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d302      	bcc.n	8007ad2 <HAL_DMA2D_PollForTransfer+0x9c>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad6:	f043 0220 	orr.w	r2, r3, #32
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e086      	b.n	8007c00 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0ac      	beq.n	8007a5a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d061      	beq.n	8007be6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b22:	f7fe fe43 	bl	80067ac <HAL_GetTick>
 8007b26:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007b28:	e056      	b.n	8007bd8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d02e      	beq.n	8007b9a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d005      	beq.n	8007b52 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	f043 0204 	orr.w	r2, r3, #4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d005      	beq.n	8007b68 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b60:	f043 0202 	orr.w	r2, r3, #2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	f043 0201 	orr.w	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2229      	movs	r2, #41	; 0x29
 8007b84:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e032      	b.n	8007c00 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d01a      	beq.n	8007bd8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007ba2:	f7fe fe03 	bl	80067ac <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <HAL_DMA2D_PollForTransfer+0x182>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10f      	bne.n	8007bd8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	f043 0220 	orr.w	r2, r3, #32
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e013      	b.n	8007c00 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0a1      	beq.n	8007b2a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2212      	movs	r2, #18
 8007bec:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d026      	beq.n	8007c78 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d021      	beq.n	8007c78 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c42:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c48:	f043 0201 	orr.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2201      	movs	r2, #1
 8007c56:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d026      	beq.n	8007cd0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d021      	beq.n	8007cd0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c9a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca8:	f043 0202 	orr.w	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2204      	movs	r2, #4
 8007cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d026      	beq.n	8007d28 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d021      	beq.n	8007d28 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cf2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	f043 0204 	orr.w	r2, r3, #4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d013      	beq.n	8007d5a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00e      	beq.n	8007d5a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2204      	movs	r2, #4
 8007d52:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f853 	bl	8007e00 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d024      	beq.n	8007dae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01f      	beq.n	8007dae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d7c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2202      	movs	r2, #2
 8007d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01f      	beq.n	8007df8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01a      	beq.n	8007df8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dd0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2210      	movs	r2, #16
 8007dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f80e 	bl	8007e14 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_DMA2D_ConfigLayer+0x20>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e079      	b.n	8007f3c <HAL_DMA2D_ConfigLayer+0x114>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	3318      	adds	r3, #24
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	041b      	lsls	r3, r3, #16
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007e72:	4b35      	ldr	r3, [pc, #212]	; (8007f48 <HAL_DMA2D_ConfigLayer+0x120>)
 8007e74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b0a      	cmp	r3, #10
 8007e7c:	d003      	beq.n	8007e86 <HAL_DMA2D_ConfigLayer+0x5e>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d107      	bne.n	8007e96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e005      	b.n	8007ea2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d120      	bne.n	8007eea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	ea02 0103 	and.w	r1, r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b0a      	cmp	r3, #10
 8007ed0:	d003      	beq.n	8007eda <HAL_DMA2D_ConfigLayer+0xb2>
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d127      	bne.n	8007f2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ee8:	e01f      	b.n	8007f2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	ea02 0103 	and.w	r1, r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b0a      	cmp	r3, #10
 8007f12:	d003      	beq.n	8007f1c <HAL_DMA2D_ConfigLayer+0xf4>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d106      	bne.n	8007f2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007f28:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	ff03000f 	.word	0xff03000f

08007f4c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b08b      	sub	sp, #44	; 0x2c
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	041a      	lsls	r2, r3, #16
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f84:	d174      	bne.n	8008070 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f8c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f94:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f9c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	e053      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d106      	bne.n	8007fd4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd2:	e048      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d111      	bne.n	8008000 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	0cdb      	lsrs	r3, r3, #19
 8007fe0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	0a9b      	lsrs	r3, r3, #10
 8007fe6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	08db      	lsrs	r3, r3, #3
 8007fec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	02db      	lsls	r3, r3, #11
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	e032      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d117      	bne.n	8008038 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	0fdb      	lsrs	r3, r3, #31
 800800c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	0cdb      	lsrs	r3, r3, #19
 8008012:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	0adb      	lsrs	r3, r3, #11
 8008018:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	431a      	orrs	r2, r3
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	03db      	lsls	r3, r3, #15
 800802e:	4313      	orrs	r3, r2
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	e016      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	0b1b      	lsrs	r3, r3, #12
 8008048:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	011a      	lsls	r2, r3, #4
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	431a      	orrs	r2, r3
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	031b      	lsls	r3, r3, #12
 800805e:	4313      	orrs	r3, r2
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800806e:	e003      	b.n	8008078 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	60da      	str	r2, [r3, #12]
}
 8008078:	bf00      	nop
 800807a:	372c      	adds	r7, #44	; 0x2c
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	; 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
 80080a2:	e175      	b.n	8008390 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80080a4:	2201      	movs	r2, #1
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	4013      	ands	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	429a      	cmp	r2, r3
 80080be:	f040 8164 	bne.w	800838a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d00b      	beq.n	80080e2 <HAL_GPIO_Init+0x5e>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d007      	beq.n	80080e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080d6:	2b11      	cmp	r3, #17
 80080d8:	d003      	beq.n	80080e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b12      	cmp	r3, #18
 80080e0:	d130      	bne.n	8008144 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	2203      	movs	r2, #3
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43db      	mvns	r3, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4013      	ands	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	4313      	orrs	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008118:	2201      	movs	r2, #1
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	091b      	lsrs	r3, r3, #4
 800812e:	f003 0201 	and.w	r2, r3, #1
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4313      	orrs	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	2203      	movs	r2, #3
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4313      	orrs	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d003      	beq.n	8008184 <HAL_GPIO_Init+0x100>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b12      	cmp	r3, #18
 8008182:	d123      	bne.n	80081cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	08da      	lsrs	r2, r3, #3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3208      	adds	r2, #8
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	220f      	movs	r2, #15
 800819c:	fa02 f303 	lsl.w	r3, r2, r3
 80081a0:	43db      	mvns	r3, r3
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	4013      	ands	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	08da      	lsrs	r2, r3, #3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3208      	adds	r2, #8
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	2203      	movs	r2, #3
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	43db      	mvns	r3, r3
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	4013      	ands	r3, r2
 80081e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f003 0203 	and.w	r2, r3, #3
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	fa02 f303 	lsl.w	r3, r2, r3
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80be 	beq.w	800838a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800820e:	4b65      	ldr	r3, [pc, #404]	; (80083a4 <HAL_GPIO_Init+0x320>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	4a64      	ldr	r2, [pc, #400]	; (80083a4 <HAL_GPIO_Init+0x320>)
 8008214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008218:	6453      	str	r3, [r2, #68]	; 0x44
 800821a:	4b62      	ldr	r3, [pc, #392]	; (80083a4 <HAL_GPIO_Init+0x320>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008226:	4a60      	ldr	r2, [pc, #384]	; (80083a8 <HAL_GPIO_Init+0x324>)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	089b      	lsrs	r3, r3, #2
 800822c:	3302      	adds	r3, #2
 800822e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008232:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	220f      	movs	r2, #15
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	43db      	mvns	r3, r3
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	4013      	ands	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a57      	ldr	r2, [pc, #348]	; (80083ac <HAL_GPIO_Init+0x328>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d037      	beq.n	80082c2 <HAL_GPIO_Init+0x23e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a56      	ldr	r2, [pc, #344]	; (80083b0 <HAL_GPIO_Init+0x32c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d031      	beq.n	80082be <HAL_GPIO_Init+0x23a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a55      	ldr	r2, [pc, #340]	; (80083b4 <HAL_GPIO_Init+0x330>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d02b      	beq.n	80082ba <HAL_GPIO_Init+0x236>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a54      	ldr	r2, [pc, #336]	; (80083b8 <HAL_GPIO_Init+0x334>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d025      	beq.n	80082b6 <HAL_GPIO_Init+0x232>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a53      	ldr	r2, [pc, #332]	; (80083bc <HAL_GPIO_Init+0x338>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01f      	beq.n	80082b2 <HAL_GPIO_Init+0x22e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a52      	ldr	r2, [pc, #328]	; (80083c0 <HAL_GPIO_Init+0x33c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d019      	beq.n	80082ae <HAL_GPIO_Init+0x22a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a51      	ldr	r2, [pc, #324]	; (80083c4 <HAL_GPIO_Init+0x340>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_GPIO_Init+0x226>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a50      	ldr	r2, [pc, #320]	; (80083c8 <HAL_GPIO_Init+0x344>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00d      	beq.n	80082a6 <HAL_GPIO_Init+0x222>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a4f      	ldr	r2, [pc, #316]	; (80083cc <HAL_GPIO_Init+0x348>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <HAL_GPIO_Init+0x21e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a4e      	ldr	r2, [pc, #312]	; (80083d0 <HAL_GPIO_Init+0x34c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d101      	bne.n	800829e <HAL_GPIO_Init+0x21a>
 800829a:	2309      	movs	r3, #9
 800829c:	e012      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 800829e:	230a      	movs	r3, #10
 80082a0:	e010      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082a2:	2308      	movs	r3, #8
 80082a4:	e00e      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082a6:	2307      	movs	r3, #7
 80082a8:	e00c      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082aa:	2306      	movs	r3, #6
 80082ac:	e00a      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082ae:	2305      	movs	r3, #5
 80082b0:	e008      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082b2:	2304      	movs	r3, #4
 80082b4:	e006      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082b6:	2303      	movs	r3, #3
 80082b8:	e004      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e002      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <HAL_GPIO_Init+0x240>
 80082c2:	2300      	movs	r3, #0
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	f002 0203 	and.w	r2, r2, #3
 80082ca:	0092      	lsls	r2, r2, #2
 80082cc:	4093      	lsls	r3, r2
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80082d4:	4934      	ldr	r1, [pc, #208]	; (80083a8 <HAL_GPIO_Init+0x324>)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	3302      	adds	r3, #2
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082e2:	4b3c      	ldr	r3, [pc, #240]	; (80083d4 <HAL_GPIO_Init+0x350>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	43db      	mvns	r3, r3
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	4013      	ands	r3, r2
 80082f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008306:	4a33      	ldr	r2, [pc, #204]	; (80083d4 <HAL_GPIO_Init+0x350>)
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800830c:	4b31      	ldr	r3, [pc, #196]	; (80083d4 <HAL_GPIO_Init+0x350>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	43db      	mvns	r3, r3
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	4013      	ands	r3, r2
 800831a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008330:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <HAL_GPIO_Init+0x350>)
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008336:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <HAL_GPIO_Init+0x350>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	43db      	mvns	r3, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4013      	ands	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800835a:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <HAL_GPIO_Init+0x350>)
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008360:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <HAL_GPIO_Init+0x350>)
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	43db      	mvns	r3, r3
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	4013      	ands	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008384:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <HAL_GPIO_Init+0x350>)
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3301      	adds	r3, #1
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b0f      	cmp	r3, #15
 8008394:	f67f ae86 	bls.w	80080a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008398:	bf00      	nop
 800839a:	3724      	adds	r7, #36	; 0x24
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40013800 	.word	0x40013800
 80083ac:	40020000 	.word	0x40020000
 80083b0:	40020400 	.word	0x40020400
 80083b4:	40020800 	.word	0x40020800
 80083b8:	40020c00 	.word	0x40020c00
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40021400 	.word	0x40021400
 80083c4:	40021800 	.word	0x40021800
 80083c8:	40021c00 	.word	0x40021c00
 80083cc:	40022000 	.word	0x40022000
 80083d0:	40022400 	.word	0x40022400
 80083d4:	40013c00 	.word	0x40013c00

080083d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80083e2:	2300      	movs	r3, #0
 80083e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	e0d9      	b.n	80085a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80083f4:	2201      	movs	r2, #1
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	4013      	ands	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	429a      	cmp	r2, r3
 800840c:	f040 80c9 	bne.w	80085a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008410:	4a6a      	ldr	r2, [pc, #424]	; (80085bc <HAL_GPIO_DeInit+0x1e4>)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	089b      	lsrs	r3, r3, #2
 8008416:	3302      	adds	r3, #2
 8008418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	220f      	movs	r2, #15
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4013      	ands	r3, r2
 8008430:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a62      	ldr	r2, [pc, #392]	; (80085c0 <HAL_GPIO_DeInit+0x1e8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d037      	beq.n	80084aa <HAL_GPIO_DeInit+0xd2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a61      	ldr	r2, [pc, #388]	; (80085c4 <HAL_GPIO_DeInit+0x1ec>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d031      	beq.n	80084a6 <HAL_GPIO_DeInit+0xce>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a60      	ldr	r2, [pc, #384]	; (80085c8 <HAL_GPIO_DeInit+0x1f0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d02b      	beq.n	80084a2 <HAL_GPIO_DeInit+0xca>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a5f      	ldr	r2, [pc, #380]	; (80085cc <HAL_GPIO_DeInit+0x1f4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d025      	beq.n	800849e <HAL_GPIO_DeInit+0xc6>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a5e      	ldr	r2, [pc, #376]	; (80085d0 <HAL_GPIO_DeInit+0x1f8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01f      	beq.n	800849a <HAL_GPIO_DeInit+0xc2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a5d      	ldr	r2, [pc, #372]	; (80085d4 <HAL_GPIO_DeInit+0x1fc>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d019      	beq.n	8008496 <HAL_GPIO_DeInit+0xbe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a5c      	ldr	r2, [pc, #368]	; (80085d8 <HAL_GPIO_DeInit+0x200>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <HAL_GPIO_DeInit+0xba>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a5b      	ldr	r2, [pc, #364]	; (80085dc <HAL_GPIO_DeInit+0x204>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00d      	beq.n	800848e <HAL_GPIO_DeInit+0xb6>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a5a      	ldr	r2, [pc, #360]	; (80085e0 <HAL_GPIO_DeInit+0x208>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d007      	beq.n	800848a <HAL_GPIO_DeInit+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a59      	ldr	r2, [pc, #356]	; (80085e4 <HAL_GPIO_DeInit+0x20c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d101      	bne.n	8008486 <HAL_GPIO_DeInit+0xae>
 8008482:	2309      	movs	r3, #9
 8008484:	e012      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 8008486:	230a      	movs	r3, #10
 8008488:	e010      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 800848a:	2308      	movs	r3, #8
 800848c:	e00e      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 800848e:	2307      	movs	r3, #7
 8008490:	e00c      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 8008492:	2306      	movs	r3, #6
 8008494:	e00a      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 8008496:	2305      	movs	r3, #5
 8008498:	e008      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 800849a:	2304      	movs	r3, #4
 800849c:	e006      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 800849e:	2303      	movs	r3, #3
 80084a0:	e004      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e002      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <HAL_GPIO_DeInit+0xd4>
 80084aa:	2300      	movs	r3, #0
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	f002 0203 	and.w	r2, r2, #3
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	4093      	lsls	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d132      	bne.n	8008522 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80084bc:	4b4a      	ldr	r3, [pc, #296]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	43db      	mvns	r3, r3
 80084c4:	4948      	ldr	r1, [pc, #288]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80084ca:	4b47      	ldr	r3, [pc, #284]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	43db      	mvns	r3, r3
 80084d2:	4945      	ldr	r1, [pc, #276]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80084d8:	4b43      	ldr	r3, [pc, #268]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	43db      	mvns	r3, r3
 80084e0:	4941      	ldr	r1, [pc, #260]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80084e6:	4b40      	ldr	r3, [pc, #256]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	493e      	ldr	r1, [pc, #248]	; (80085e8 <HAL_GPIO_DeInit+0x210>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	220f      	movs	r2, #15
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008504:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <HAL_GPIO_DeInit+0x1e4>)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	089b      	lsrs	r3, r3, #2
 800850a:	3302      	adds	r3, #2
 800850c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	43da      	mvns	r2, r3
 8008514:	4829      	ldr	r0, [pc, #164]	; (80085bc <HAL_GPIO_DeInit+0x1e4>)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	089b      	lsrs	r3, r3, #2
 800851a:	400a      	ands	r2, r1
 800851c:	3302      	adds	r3, #2
 800851e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	2103      	movs	r1, #3
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	43db      	mvns	r3, r3
 8008532:	401a      	ands	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	08da      	lsrs	r2, r3, #3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3208      	adds	r2, #8
 8008540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	220f      	movs	r2, #15
 800854e:	fa02 f303 	lsl.w	r3, r2, r3
 8008552:	43db      	mvns	r3, r3
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	08d2      	lsrs	r2, r2, #3
 8008558:	4019      	ands	r1, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3208      	adds	r2, #8
 800855e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	2103      	movs	r1, #3
 800856c:	fa01 f303 	lsl.w	r3, r1, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	2101      	movs	r1, #1
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	fa01 f303 	lsl.w	r3, r1, r3
 8008584:	43db      	mvns	r3, r3
 8008586:	401a      	ands	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	2103      	movs	r1, #3
 8008596:	fa01 f303 	lsl.w	r3, r1, r3
 800859a:	43db      	mvns	r3, r3
 800859c:	401a      	ands	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	3301      	adds	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	f67f af22 	bls.w	80083f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40013800 	.word	0x40013800
 80085c0:	40020000 	.word	0x40020000
 80085c4:	40020400 	.word	0x40020400
 80085c8:	40020800 	.word	0x40020800
 80085cc:	40020c00 	.word	0x40020c00
 80085d0:	40021000 	.word	0x40021000
 80085d4:	40021400 	.word	0x40021400
 80085d8:	40021800 	.word	0x40021800
 80085dc:	40021c00 	.word	0x40021c00
 80085e0:	40022000 	.word	0x40022000
 80085e4:	40022400 	.word	0x40022400
 80085e8:	40013c00 	.word	0x40013c00

080085ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	807b      	strh	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085fc:	787b      	ldrb	r3, [r7, #1]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008602:	887a      	ldrh	r2, [r7, #2]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008608:	e003      	b.n	8008612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800860a:	887b      	ldrh	r3, [r7, #2]
 800860c:	041a      	lsls	r2, r3, #16
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	619a      	str	r2, [r3, #24]
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
	...

08008620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d006      	beq.n	8008644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008636:	4a05      	ldr	r2, [pc, #20]	; (800864c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008638:	88fb      	ldrh	r3, [r7, #6]
 800863a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f8 fe90 	bl	8001364 <HAL_GPIO_EXTI_Callback>
  }
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40013c00 	.word	0x40013c00

08008650 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008652:	b08f      	sub	sp, #60	; 0x3c
 8008654:	af0a      	add	r7, sp, #40	; 0x28
 8008656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e054      	b.n	800870c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f00d fab5 	bl	8015bec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2203      	movs	r2, #3
 8008686:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f007 f866 	bl	800f772 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	687e      	ldr	r6, [r7, #4]
 80086ae:	466d      	mov	r5, sp
 80086b0:	f106 0410 	add.w	r4, r6, #16
 80086b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80086c4:	1d33      	adds	r3, r6, #4
 80086c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086c8:	6838      	ldr	r0, [r7, #0]
 80086ca:	f006 ffe9 	bl	800f6a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2101      	movs	r1, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	f007 f85d 	bl	800f794 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	687e      	ldr	r6, [r7, #4]
 80086e2:	466d      	mov	r5, sp
 80086e4:	f106 0410 	add.w	r4, r6, #16
 80086e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80086f8:	1d33      	adds	r3, r6, #4
 80086fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fc:	6838      	ldr	r0, [r7, #0]
 80086fe:	f007 f96f 	bl	800f9e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008714 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8008714:	b590      	push	{r4, r7, lr}
 8008716:	b089      	sub	sp, #36	; 0x24
 8008718:	af04      	add	r7, sp, #16
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	4608      	mov	r0, r1
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4603      	mov	r3, r0
 8008724:	70fb      	strb	r3, [r7, #3]
 8008726:	460b      	mov	r3, r1
 8008728:	70bb      	strb	r3, [r7, #2]
 800872a:	4613      	mov	r3, r2
 800872c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_HCD_HC_Init+0x28>
 8008738:	2302      	movs	r3, #2
 800873a:	e07f      	b.n	800883c <HAL_HCD_HC_Init+0x128>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	440b      	add	r3, r1
 8008752:	333d      	adds	r3, #61	; 0x3d
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	440b      	add	r3, r1
 8008766:	3338      	adds	r3, #56	; 0x38
 8008768:	787a      	ldrb	r2, [r7, #1]
 800876a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	440b      	add	r3, r1
 800877a:	3340      	adds	r3, #64	; 0x40
 800877c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800877e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	440b      	add	r3, r1
 800878e:	3339      	adds	r3, #57	; 0x39
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	440b      	add	r3, r1
 80087a2:	333f      	adds	r3, #63	; 0x3f
 80087a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80087a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	78bb      	ldrb	r3, [r7, #2]
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	b2d8      	uxtb	r0, r3
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	440b      	add	r3, r1
 80087c0:	333a      	adds	r3, #58	; 0x3a
 80087c2:	4602      	mov	r2, r0
 80087c4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80087c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da0a      	bge.n	80087e4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	440b      	add	r3, r1
 80087dc:	333b      	adds	r3, #59	; 0x3b
 80087de:	2201      	movs	r2, #1
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e009      	b.n	80087f8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	440b      	add	r3, r1
 80087f2:	333b      	adds	r3, #59	; 0x3b
 80087f4:	2200      	movs	r2, #0
 80087f6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	440b      	add	r3, r1
 8008806:	333c      	adds	r3, #60	; 0x3c
 8008808:	f897 2020 	ldrb.w	r2, [r7, #32]
 800880c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	787c      	ldrb	r4, [r7, #1]
 8008814:	78ba      	ldrb	r2, [r7, #2]
 8008816:	78f9      	ldrb	r1, [r7, #3]
 8008818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4623      	mov	r3, r4
 800882a:	f007 fa4f 	bl	800fccc <USB_HC_Init>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}

08008844 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_HCD_HC_Halt+0x1e>
 800885e:	2302      	movs	r3, #2
 8008860:	e00f      	b.n	8008882 <HAL_HCD_HC_Halt+0x3e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f007 fc89 	bl	801018a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	4608      	mov	r0, r1
 8008896:	4611      	mov	r1, r2
 8008898:	461a      	mov	r2, r3
 800889a:	4603      	mov	r3, r0
 800889c:	70fb      	strb	r3, [r7, #3]
 800889e:	460b      	mov	r3, r1
 80088a0:	70bb      	strb	r3, [r7, #2]
 80088a2:	4613      	mov	r3, r2
 80088a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	440b      	add	r3, r1
 80088b4:	333b      	adds	r3, #59	; 0x3b
 80088b6:	78ba      	ldrb	r2, [r7, #2]
 80088b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	440b      	add	r3, r1
 80088c8:	333f      	adds	r3, #63	; 0x3f
 80088ca:	787a      	ldrb	r2, [r7, #1]
 80088cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80088ce:	7c3b      	ldrb	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d114      	bne.n	80088fe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	440b      	add	r3, r1
 80088e2:	3342      	adds	r3, #66	; 0x42
 80088e4:	2203      	movs	r2, #3
 80088e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	440b      	add	r3, r1
 80088f6:	333d      	adds	r3, #61	; 0x3d
 80088f8:	7f3a      	ldrb	r2, [r7, #28]
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e009      	b.n	8008912 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	440b      	add	r3, r1
 800890c:	3342      	adds	r3, #66	; 0x42
 800890e:	2202      	movs	r2, #2
 8008910:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008912:	787b      	ldrb	r3, [r7, #1]
 8008914:	2b03      	cmp	r3, #3
 8008916:	f200 80d6 	bhi.w	8008ac6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <HAL_HCD_HC_SubmitRequest+0x94>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008931 	.word	0x08008931
 8008924:	08008ab1 	.word	0x08008ab1
 8008928:	0800899d 	.word	0x0800899d
 800892c:	08008a27 	.word	0x08008a27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008930:	7c3b      	ldrb	r3, [r7, #16]
 8008932:	2b01      	cmp	r3, #1
 8008934:	f040 80c9 	bne.w	8008aca <HAL_HCD_HC_SubmitRequest+0x23e>
 8008938:	78bb      	ldrb	r3, [r7, #2]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f040 80c5 	bne.w	8008aca <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8008940:	8b3b      	ldrh	r3, [r7, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d109      	bne.n	800895a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	440b      	add	r3, r1
 8008954:	3351      	adds	r3, #81	; 0x51
 8008956:	2201      	movs	r2, #1
 8008958:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	3351      	adds	r3, #81	; 0x51
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	440b      	add	r3, r1
 800897e:	3342      	adds	r3, #66	; 0x42
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008984:	e0a1      	b.n	8008aca <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	440b      	add	r3, r1
 8008994:	3342      	adds	r3, #66	; 0x42
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
      break;
 800899a:	e096      	b.n	8008aca <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800899c:	78bb      	ldrb	r3, [r7, #2]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d120      	bne.n	80089e4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	440b      	add	r3, r1
 80089b0:	3351      	adds	r3, #81	; 0x51
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	440b      	add	r3, r1
 80089c6:	3342      	adds	r3, #66	; 0x42
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80089cc:	e07e      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	440b      	add	r3, r1
 80089dc:	3342      	adds	r3, #66	; 0x42
 80089de:	2202      	movs	r2, #2
 80089e0:	701a      	strb	r2, [r3, #0]
      break;
 80089e2:	e073      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	440b      	add	r3, r1
 80089f2:	3350      	adds	r3, #80	; 0x50
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	440b      	add	r3, r1
 8008a08:	3342      	adds	r3, #66	; 0x42
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
      break;
 8008a0e:	e05d      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4613      	mov	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	440b      	add	r3, r1
 8008a1e:	3342      	adds	r3, #66	; 0x42
 8008a20:	2202      	movs	r2, #2
 8008a22:	701a      	strb	r2, [r3, #0]
      break;
 8008a24:	e052      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008a26:	78bb      	ldrb	r3, [r7, #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d120      	bne.n	8008a6e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	440b      	add	r3, r1
 8008a3a:	3351      	adds	r3, #81	; 0x51
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008a42:	78fa      	ldrb	r2, [r7, #3]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	440b      	add	r3, r1
 8008a50:	3342      	adds	r3, #66	; 0x42
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008a56:	e039      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	440b      	add	r3, r1
 8008a66:	3342      	adds	r3, #66	; 0x42
 8008a68:	2202      	movs	r2, #2
 8008a6a:	701a      	strb	r2, [r3, #0]
      break;
 8008a6c:	e02e      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3350      	adds	r3, #80	; 0x50
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	440b      	add	r3, r1
 8008a92:	3342      	adds	r3, #66	; 0x42
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
      break;
 8008a98:	e018      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3342      	adds	r3, #66	; 0x42
 8008aaa:	2202      	movs	r2, #2
 8008aac:	701a      	strb	r2, [r3, #0]
      break;
 8008aae:	e00d      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	440b      	add	r3, r1
 8008abe:	3342      	adds	r3, #66	; 0x42
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
      break;
 8008ac4:	e002      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8008aca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	440b      	add	r3, r1
 8008ada:	3344      	adds	r3, #68	; 0x44
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	8b39      	ldrh	r1, [r7, #24]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4403      	add	r3, r0
 8008af0:	3348      	adds	r3, #72	; 0x48
 8008af2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	440b      	add	r3, r1
 8008b02:	335c      	adds	r3, #92	; 0x5c
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	440b      	add	r3, r1
 8008b16:	334c      	adds	r3, #76	; 0x4c
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	00db      	lsls	r3, r3, #3
 8008b28:	440b      	add	r3, r1
 8008b2a:	3339      	adds	r3, #57	; 0x39
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	440b      	add	r3, r1
 8008b3e:	335d      	adds	r3, #93	; 0x5d
 8008b40:	2200      	movs	r2, #0
 8008b42:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	3338      	adds	r3, #56	; 0x38
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	18d1      	adds	r1, r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f007 f9be 	bl	800fee0 <USB_HC_StartXfer>
 8008b64:	4603      	mov	r3, r0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f006 fee7 	bl	800f95a <USB_GetMode>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	f040 80ef 	bne.w	8008d72 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f006 fecb 	bl	800f934 <USB_ReadInterrupts>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80e5 	beq.w	8008d70 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f006 fec2 	bl	800f934 <USB_ReadInterrupts>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bba:	d104      	bne.n	8008bc6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008bc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f006 feb2 	bl	800f934 <USB_ReadInterrupts>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bda:	d104      	bne.n	8008be6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008be4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f006 fea2 	bl	800f934 <USB_ReadInterrupts>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bfa:	d104      	bne.n	8008c06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f006 fe92 	bl	800f934 <USB_ReadInterrupts>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d103      	bne.n	8008c22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f006 fe84 	bl	800f934 <USB_ReadInterrupts>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c36:	d115      	bne.n	8008c64 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008c40:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d108      	bne.n	8008c64 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f00d f83c 	bl	8015cd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f006 ff6e 	bl	800fb40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f006 fe63 	bl	800f934 <USB_ReadInterrupts>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c78:	d102      	bne.n	8008c80 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f966 	bl	8009f4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f006 fe55 	bl	800f934 <USB_ReadInterrupts>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d106      	bne.n	8008ca2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f00c ffff 	bl	8015c98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2208      	movs	r2, #8
 8008ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f006 fe44 	bl	800f934 <USB_ReadInterrupts>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb6:	d138      	bne.n	8008d2a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f007 fa53 	bl	8010168 <USB_HC_ReadInterrupt>
 8008cc2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e025      	b.n	8008d16 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d018      	beq.n	8008d10 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf4:	d106      	bne.n	8008d04 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8cf 	bl	8008ea0 <HCD_HC_IN_IRQHandler>
 8008d02:	e005      	b.n	8008d10 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fcfd 	bl	800970a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	3301      	adds	r3, #1
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d3d4      	bcc.n	8008cca <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f006 fe00 	bl	800f934 <USB_ReadInterrupts>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b10      	cmp	r3, #16
 8008d3c:	d101      	bne.n	8008d42 <HAL_HCD_IRQHandler+0x1d2>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <HAL_HCD_IRQHandler+0x1d4>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d014      	beq.n	8008d72 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0210 	bic.w	r2, r2, #16
 8008d56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 f84b 	bl	8009df4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0210 	orr.w	r2, r2, #16
 8008d6c:	619a      	str	r2, [r3, #24]
 8008d6e:	e000      	b.n	8008d72 <HAL_HCD_IRQHandler+0x202>
      return;
 8008d70:	bf00      	nop
    }
  }
}
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_HCD_Start+0x16>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e013      	b.n	8008db6 <HAL_HCD_Start+0x3e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f006 fcd8 	bl	800f750 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2101      	movs	r1, #1
 8008da6:	4618      	mov	r0, r3
 8008da8:	f006 ff2e 	bl	800fc08 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_HCD_Stop+0x16>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e00d      	b.n	8008df0 <HAL_HCD_Stop+0x32>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f007 fb0d 	bl	8010400 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f006 fed5 	bl	800fbb4 <USB_ResetPort>
 8008e0a:	4603      	mov	r3, r0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	440b      	add	r3, r1
 8008e2e:	335c      	adds	r3, #92	; 0x5c
 8008e30:	781b      	ldrb	r3, [r3, #0]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	334c      	adds	r3, #76	; 0x4c
 8008e5a:	681b      	ldr	r3, [r3, #0]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f006 ff17 	bl	800fca8 <USB_GetCurrentFrame>
 8008e7a:	4603      	mov	r3, r0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f006 fef2 	bl	800fc7a <USB_GetHostSpeed>
 8008e96:	4603      	mov	r3, r0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d119      	bne.n	8008f04 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008edc:	461a      	mov	r2, r3
 8008ede:	2304      	movs	r3, #4
 8008ee0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	0151      	lsls	r1, r2, #5
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008efc:	f043 0302 	orr.w	r3, r3, #2
 8008f00:	60d3      	str	r3, [r2, #12]
 8008f02:	e0ce      	b.n	80090a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1a:	d12c      	bne.n	8008f76 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	440b      	add	r3, r1
 8008f3e:	335d      	adds	r3, #93	; 0x5d
 8008f40:	2207      	movs	r2, #7
 8008f42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f007 f90b 	bl	801018a <USB_HC_Halt>
 8008f74:	e095      	b.n	80090a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d109      	bne.n	8008fa0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f98:	461a      	mov	r2, r3
 8008f9a:	2320      	movs	r3, #32
 8008f9c:	6093      	str	r3, [r2, #8]
 8008f9e:	e080      	b.n	80090a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 0308 	and.w	r3, r3, #8
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d134      	bne.n	8009020 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fd0:	f043 0302 	orr.w	r3, r3, #2
 8008fd4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	00db      	lsls	r3, r3, #3
 8008fe2:	440b      	add	r3, r1
 8008fe4:	335d      	adds	r3, #93	; 0x5d
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	4413      	add	r3, r2
 8009004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009008:	461a      	mov	r2, r3
 800900a:	2308      	movs	r3, #8
 800900c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f007 f8b6 	bl	801018a <USB_HC_Halt>
 800901e:	e040      	b.n	80090a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009036:	d134      	bne.n	80090a2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009052:	f043 0302 	orr.w	r3, r3, #2
 8009056:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f007 f891 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4413      	add	r3, r2
 8009070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009074:	461a      	mov	r2, r3
 8009076:	2310      	movs	r3, #16
 8009078:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	440b      	add	r3, r1
 8009088:	335d      	adds	r3, #93	; 0x5d
 800908a:	2208      	movs	r2, #8
 800908c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	4413      	add	r3, r2
 8009096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909a:	461a      	mov	r2, r3
 800909c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b8:	d122      	bne.n	8009100 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f007 f850 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f6:	461a      	mov	r2, r3
 80090f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80090fe:	e300      	b.n	8009702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	4413      	add	r3, r2
 8009108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	f040 80fd 	bne.w	8009312 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01b      	beq.n	8009158 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	440b      	add	r3, r1
 800912e:	3348      	adds	r3, #72	; 0x48
 8009130:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	0159      	lsls	r1, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	440b      	add	r3, r1
 800913a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8009144:	1ad1      	subs	r1, r2, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	4403      	add	r3, r0
 8009154:	334c      	adds	r3, #76	; 0x4c
 8009156:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	440b      	add	r3, r1
 8009166:	335d      	adds	r3, #93	; 0x5d
 8009168:	2201      	movs	r2, #1
 800916a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	440b      	add	r3, r1
 800917a:	3358      	adds	r3, #88	; 0x58
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918c:	461a      	mov	r2, r3
 800918e:	2301      	movs	r3, #1
 8009190:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	440b      	add	r3, r1
 80091a0:	333f      	adds	r3, #63	; 0x3f
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	440b      	add	r3, r1
 80091b6:	333f      	adds	r3, #63	; 0x3f
 80091b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d121      	bne.n	8009202 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f006 ffce 	bl	801018a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fa:	461a      	mov	r2, r3
 80091fc:	2310      	movs	r3, #16
 80091fe:	6093      	str	r3, [r2, #8]
 8009200:	e070      	b.n	80092e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	440b      	add	r3, r1
 8009210:	333f      	adds	r3, #63	; 0x3f
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d12a      	bne.n	800926e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	440a      	add	r2, r1
 800922e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009236:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	440b      	add	r3, r1
 8009246:	335c      	adds	r3, #92	; 0x5c
 8009248:	2201      	movs	r2, #1
 800924a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	b2d8      	uxtb	r0, r3
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	440b      	add	r3, r1
 800925e:	335c      	adds	r3, #92	; 0x5c
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	4601      	mov	r1, r0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f00c fd40 	bl	8015cec <HAL_HCD_HC_NotifyURBChange_Callback>
 800926c:	e03a      	b.n	80092e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	440b      	add	r3, r1
 800927c:	333f      	adds	r3, #63	; 0x3f
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d12f      	bne.n	80092e4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	440b      	add	r3, r1
 8009292:	335c      	adds	r3, #92	; 0x5c
 8009294:	2201      	movs	r2, #1
 8009296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	440b      	add	r3, r1
 80092a6:	3350      	adds	r3, #80	; 0x50
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f083 0301 	eor.w	r3, r3, #1
 80092ae:	b2d8      	uxtb	r0, r3
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	440b      	add	r3, r1
 80092be:	3350      	adds	r3, #80	; 0x50
 80092c0:	4602      	mov	r2, r0
 80092c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	b2d8      	uxtb	r0, r3
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	440b      	add	r3, r1
 80092d6:	335c      	adds	r3, #92	; 0x5c
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	4601      	mov	r1, r0
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f00c fd04 	bl	8015cec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	440b      	add	r3, r1
 80092f2:	3350      	adds	r3, #80	; 0x50
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f083 0301 	eor.w	r3, r3, #1
 80092fa:	b2d8      	uxtb	r0, r3
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	440b      	add	r3, r1
 800930a:	3350      	adds	r3, #80	; 0x50
 800930c:	4602      	mov	r2, r0
 800930e:	701a      	strb	r2, [r3, #0]
}
 8009310:	e1f7      	b.n	8009702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b02      	cmp	r3, #2
 8009326:	f040 811a 	bne.w	800955e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	4413      	add	r3, r2
 8009332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	440a      	add	r2, r1
 8009340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009344:	f023 0302 	bic.w	r3, r3, #2
 8009348:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	440b      	add	r3, r1
 8009358:	335d      	adds	r3, #93	; 0x5d
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d10a      	bne.n	8009376 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	440b      	add	r3, r1
 800936e:	335c      	adds	r3, #92	; 0x5c
 8009370:	2201      	movs	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e0d9      	b.n	800952a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	440b      	add	r3, r1
 8009384:	335d      	adds	r3, #93	; 0x5d
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b05      	cmp	r3, #5
 800938a:	d10a      	bne.n	80093a2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	440b      	add	r3, r1
 800939a:	335c      	adds	r3, #92	; 0x5c
 800939c:	2205      	movs	r2, #5
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	e0c3      	b.n	800952a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	440b      	add	r3, r1
 80093b0:	335d      	adds	r3, #93	; 0x5d
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b06      	cmp	r3, #6
 80093b6:	d00a      	beq.n	80093ce <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	440b      	add	r3, r1
 80093c6:	335d      	adds	r3, #93	; 0x5d
 80093c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d156      	bne.n	800947c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	440b      	add	r3, r1
 80093dc:	3358      	adds	r3, #88	; 0x58
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	1c59      	adds	r1, r3, #1
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4403      	add	r3, r0
 80093f0:	3358      	adds	r3, #88	; 0x58
 80093f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	440b      	add	r3, r1
 8009402:	3358      	adds	r3, #88	; 0x58
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b03      	cmp	r3, #3
 8009408:	d914      	bls.n	8009434 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	440b      	add	r3, r1
 8009418:	3358      	adds	r3, #88	; 0x58
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	440b      	add	r3, r1
 800942c:	335c      	adds	r3, #92	; 0x5c
 800942e:	2204      	movs	r2, #4
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	e009      	b.n	8009448 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	440b      	add	r3, r1
 8009442:	335c      	adds	r3, #92	; 0x5c
 8009444:	2202      	movs	r2, #2
 8009446:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800945e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009466:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009474:	461a      	mov	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	e056      	b.n	800952a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	440b      	add	r3, r1
 800948a:	335d      	adds	r3, #93	; 0x5d
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d123      	bne.n	80094da <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	440b      	add	r3, r1
 80094a0:	335c      	adds	r3, #92	; 0x5c
 80094a2:	2202      	movs	r2, #2
 80094a4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d2:	461a      	mov	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	e027      	b.n	800952a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4613      	mov	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	440b      	add	r3, r1
 80094e8:	335d      	adds	r3, #93	; 0x5d
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b07      	cmp	r3, #7
 80094ee:	d11c      	bne.n	800952a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	440b      	add	r3, r1
 80094fe:	3358      	adds	r3, #88	; 0x58
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1c59      	adds	r1, r3, #1
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	4403      	add	r3, r0
 8009512:	3358      	adds	r3, #88	; 0x58
 8009514:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	440b      	add	r3, r1
 8009524:	335c      	adds	r3, #92	; 0x5c
 8009526:	2204      	movs	r2, #4
 8009528:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	4413      	add	r3, r2
 8009532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009536:	461a      	mov	r2, r3
 8009538:	2302      	movs	r3, #2
 800953a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	b2d8      	uxtb	r0, r3
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	440b      	add	r3, r1
 800954e:	335c      	adds	r3, #92	; 0x5c
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	4601      	mov	r1, r0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f00c fbc8 	bl	8015cec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800955c:	e0d1      	b.n	8009702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4413      	add	r3, r2
 8009566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009570:	2b80      	cmp	r3, #128	; 0x80
 8009572:	d13e      	bne.n	80095f2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4413      	add	r3, r2
 800957c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	440a      	add	r2, r1
 800958a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800958e:	f043 0302 	orr.w	r3, r3, #2
 8009592:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	440b      	add	r3, r1
 80095a2:	3358      	adds	r3, #88	; 0x58
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4403      	add	r3, r0
 80095b6:	3358      	adds	r3, #88	; 0x58
 80095b8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	335d      	adds	r3, #93	; 0x5d
 80095ca:	2206      	movs	r2, #6
 80095cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f006 fdd6 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ea:	461a      	mov	r2, r3
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	6093      	str	r3, [r2, #8]
}
 80095f0:	e087      	b.n	8009702 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b10      	cmp	r3, #16
 8009606:	d17c      	bne.n	8009702 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	440b      	add	r3, r1
 8009616:	333f      	adds	r3, #63	; 0x3f
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b03      	cmp	r3, #3
 800961c:	d122      	bne.n	8009664 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	440b      	add	r3, r1
 800962c:	3358      	adds	r3, #88	; 0x58
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	440a      	add	r2, r1
 8009648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f006 fd94 	bl	801018a <USB_HC_Halt>
 8009662:	e045      	b.n	80096f0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	440b      	add	r3, r1
 8009672:	333f      	adds	r3, #63	; 0x3f
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	440b      	add	r3, r1
 8009688:	333f      	adds	r3, #63	; 0x3f
 800968a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800968c:	2b02      	cmp	r3, #2
 800968e:	d12f      	bne.n	80096f0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	440b      	add	r3, r1
 800969e:	3358      	adds	r3, #88	; 0x58
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d121      	bne.n	80096f0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	440b      	add	r3, r1
 80096ba:	335d      	adds	r3, #93	; 0x5d
 80096bc:	2203      	movs	r2, #3
 80096be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096da:	f043 0302 	orr.w	r3, r3, #2
 80096de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f006 fd4d 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fc:	461a      	mov	r2, r3
 80096fe:	2310      	movs	r3, #16
 8009700:	6093      	str	r3, [r2, #8]
}
 8009702:	bf00      	nop
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b086      	sub	sp, #24
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4413      	add	r3, r2
 800972c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b04      	cmp	r3, #4
 8009738:	d119      	bne.n	800976e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	461a      	mov	r2, r3
 8009748:	2304      	movs	r3, #4
 800974a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	440a      	add	r2, r1
 8009762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800976c:	e33e      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	4413      	add	r3, r2
 8009776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b20      	cmp	r3, #32
 8009782:	d141      	bne.n	8009808 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009790:	461a      	mov	r2, r3
 8009792:	2320      	movs	r3, #32
 8009794:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	440b      	add	r3, r1
 80097a4:	333d      	adds	r3, #61	; 0x3d
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	f040 831f 	bne.w	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	440b      	add	r3, r1
 80097bc:	333d      	adds	r3, #61	; 0x3d
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	00db      	lsls	r3, r3, #3
 80097ce:	440b      	add	r3, r1
 80097d0:	335c      	adds	r3, #92	; 0x5c
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f006 fcc2 	bl	801018a <USB_HC_Halt>
}
 8009806:	e2f1      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981a:	2b40      	cmp	r3, #64	; 0x40
 800981c:	d13f      	bne.n	800989e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	440b      	add	r3, r1
 800982c:	335d      	adds	r3, #93	; 0x5d
 800982e:	2204      	movs	r2, #4
 8009830:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	440b      	add	r3, r1
 8009840:	333d      	adds	r3, #61	; 0x3d
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009846:	6879      	ldr	r1, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	440b      	add	r3, r1
 8009854:	3358      	adds	r3, #88	; 0x58
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	4413      	add	r3, r2
 8009862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	0151      	lsls	r1, r2, #5
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	440a      	add	r2, r1
 8009870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009874:	f043 0302 	orr.w	r3, r3, #2
 8009878:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f006 fc80 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	461a      	mov	r2, r3
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	6093      	str	r3, [r2, #8]
}
 800989c:	e2a6      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b4:	d122      	bne.n	80098fc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	0151      	lsls	r1, r2, #5
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	440a      	add	r2, r1
 80098cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d0:	f043 0302 	orr.w	r3, r3, #2
 80098d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f006 fc52 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f2:	461a      	mov	r2, r3
 80098f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f8:	6093      	str	r3, [r2, #8]
}
 80098fa:	e277      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4413      	add	r3, r2
 8009904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b01      	cmp	r3, #1
 8009910:	d135      	bne.n	800997e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	3358      	adds	r3, #88	; 0x58
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	4413      	add	r3, r2
 800992e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	440a      	add	r2, r1
 800993c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009940:	f043 0302 	orr.w	r3, r3, #2
 8009944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	b2d2      	uxtb	r2, r2
 800994e:	4611      	mov	r1, r2
 8009950:	4618      	mov	r0, r3
 8009952:	f006 fc1a 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009962:	461a      	mov	r2, r3
 8009964:	2301      	movs	r3, #1
 8009966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	440b      	add	r3, r1
 8009976:	335d      	adds	r3, #93	; 0x5d
 8009978:	2201      	movs	r2, #1
 800997a:	701a      	strb	r2, [r3, #0]
}
 800997c:	e236      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	4413      	add	r3, r2
 8009986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f003 0308 	and.w	r3, r3, #8
 8009990:	2b08      	cmp	r3, #8
 8009992:	d12b      	bne.n	80099ec <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4413      	add	r3, r2
 800999c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a0:	461a      	mov	r2, r3
 80099a2:	2308      	movs	r3, #8
 80099a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099c0:	f043 0302 	orr.w	r3, r3, #2
 80099c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f006 fbda 	bl	801018a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	440b      	add	r3, r1
 80099e4:	335d      	adds	r3, #93	; 0x5d
 80099e6:	2205      	movs	r2, #5
 80099e8:	701a      	strb	r2, [r3, #0]
}
 80099ea:	e1ff      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0310 	and.w	r3, r3, #16
 80099fe:	2b10      	cmp	r3, #16
 8009a00:	d155      	bne.n	8009aae <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	440b      	add	r3, r1
 8009a10:	3358      	adds	r3, #88	; 0x58
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	440b      	add	r3, r1
 8009a24:	335d      	adds	r3, #93	; 0x5d
 8009a26:	2203      	movs	r2, #3
 8009a28:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	440b      	add	r3, r1
 8009a38:	333d      	adds	r3, #61	; 0x3d
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d114      	bne.n	8009a6a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	440b      	add	r3, r1
 8009a4e:	333c      	adds	r3, #60	; 0x3c
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	440b      	add	r3, r1
 8009a64:	333d      	adds	r3, #61	; 0x3d
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	0151      	lsls	r1, r2, #5
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	440a      	add	r2, r1
 8009a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f006 fb78 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	6093      	str	r3, [r2, #8]
}
 8009aac:	e19e      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac0:	2b80      	cmp	r3, #128	; 0x80
 8009ac2:	d12b      	bne.n	8009b1c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ade:	f043 0302 	orr.w	r3, r3, #2
 8009ae2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f006 fb4b 	bl	801018a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	440b      	add	r3, r1
 8009b02:	335d      	adds	r3, #93	; 0x5d
 8009b04:	2206      	movs	r2, #6
 8009b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b14:	461a      	mov	r2, r3
 8009b16:	2380      	movs	r3, #128	; 0x80
 8009b18:	6093      	str	r3, [r2, #8]
}
 8009b1a:	e167      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b32:	d135      	bne.n	8009ba0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	0151      	lsls	r1, r2, #5
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	440a      	add	r2, r1
 8009b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4e:	f043 0302 	orr.w	r3, r3, #2
 8009b52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f006 fb13 	bl	801018a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b70:	461a      	mov	r2, r3
 8009b72:	2310      	movs	r3, #16
 8009b74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b82:	461a      	mov	r2, r3
 8009b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	440b      	add	r3, r1
 8009b98:	335d      	adds	r3, #93	; 0x5d
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	701a      	strb	r2, [r3, #0]
}
 8009b9e:	e125      	b.n	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	f040 811a 	bne.w	8009dec <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd2:	f023 0302 	bic.w	r3, r3, #2
 8009bd6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	440b      	add	r3, r1
 8009be6:	335d      	adds	r3, #93	; 0x5d
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d137      	bne.n	8009c5e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	440b      	add	r3, r1
 8009bfc:	335c      	adds	r3, #92	; 0x5c
 8009bfe:	2201      	movs	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	440b      	add	r3, r1
 8009c10:	333f      	adds	r3, #63	; 0x3f
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d00b      	beq.n	8009c30 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	440b      	add	r3, r1
 8009c26:	333f      	adds	r3, #63	; 0x3f
 8009c28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	f040 80c5 	bne.w	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3351      	adds	r3, #81	; 0x51
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f083 0301 	eor.w	r3, r3, #1
 8009c46:	b2d8      	uxtb	r0, r3
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	440b      	add	r3, r1
 8009c56:	3351      	adds	r3, #81	; 0x51
 8009c58:	4602      	mov	r2, r0
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e0ad      	b.n	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	440b      	add	r3, r1
 8009c6c:	335d      	adds	r3, #93	; 0x5d
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d10a      	bne.n	8009c8a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	440b      	add	r3, r1
 8009c82:	335c      	adds	r3, #92	; 0x5c
 8009c84:	2202      	movs	r2, #2
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	e097      	b.n	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	440b      	add	r3, r1
 8009c98:	335d      	adds	r3, #93	; 0x5d
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d10a      	bne.n	8009cb6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	440b      	add	r3, r1
 8009cae:	335c      	adds	r3, #92	; 0x5c
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e081      	b.n	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	440b      	add	r3, r1
 8009cc4:	335d      	adds	r3, #93	; 0x5d
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b05      	cmp	r3, #5
 8009cca:	d10a      	bne.n	8009ce2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	335c      	adds	r3, #92	; 0x5c
 8009cdc:	2205      	movs	r2, #5
 8009cde:	701a      	strb	r2, [r3, #0]
 8009ce0:	e06b      	b.n	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	440b      	add	r3, r1
 8009cf0:	335d      	adds	r3, #93	; 0x5d
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b06      	cmp	r3, #6
 8009cf6:	d00a      	beq.n	8009d0e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	440b      	add	r3, r1
 8009d06:	335d      	adds	r3, #93	; 0x5d
 8009d08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d155      	bne.n	8009dba <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	440b      	add	r3, r1
 8009d1c:	3358      	adds	r3, #88	; 0x58
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1c59      	adds	r1, r3, #1
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	4403      	add	r3, r0
 8009d30:	3358      	adds	r3, #88	; 0x58
 8009d32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	440b      	add	r3, r1
 8009d42:	3358      	adds	r3, #88	; 0x58
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d914      	bls.n	8009d74 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	440b      	add	r3, r1
 8009d58:	3358      	adds	r3, #88	; 0x58
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	440b      	add	r3, r1
 8009d6c:	335c      	adds	r3, #92	; 0x5c
 8009d6e:	2204      	movs	r2, #4
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e009      	b.n	8009d88 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	440b      	add	r3, r1
 8009d82:	335c      	adds	r3, #92	; 0x5c
 8009d84:	2202      	movs	r2, #2
 8009d86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009da6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db4:	461a      	mov	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	2302      	movs	r3, #2
 8009dca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	b2d8      	uxtb	r0, r3
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	440b      	add	r3, r1
 8009dde:	335c      	adds	r3, #92	; 0x5c
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	4601      	mov	r1, r0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f00b ff80 	bl	8015cec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	f003 030f 	and.w	r3, r3, #15
 8009e14:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	0c5b      	lsrs	r3, r3, #17
 8009e1a:	f003 030f 	and.w	r3, r3, #15
 8009e1e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	091b      	lsrs	r3, r3, #4
 8009e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d003      	beq.n	8009e38 <HCD_RXQLVL_IRQHandler+0x44>
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	f000 8082 	beq.w	8009f3a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009e36:	e083      	b.n	8009f40 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d07f      	beq.n	8009f3e <HCD_RXQLVL_IRQHandler+0x14a>
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	00db      	lsls	r3, r3, #3
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3344      	adds	r3, #68	; 0x44
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d074      	beq.n	8009f3e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	440b      	add	r3, r1
 8009e66:	3344      	adds	r3, #68	; 0x44
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f005 fd37 	bl	800f8e2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	440b      	add	r3, r1
 8009e82:	3344      	adds	r3, #68	; 0x44
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	18d1      	adds	r1, r2, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	4403      	add	r3, r0
 8009e98:	3344      	adds	r3, #68	; 0x44
 8009e9a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	440b      	add	r3, r1
 8009eaa:	334c      	adds	r3, #76	; 0x4c
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	18d1      	adds	r1, r2, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	4403      	add	r3, r0
 8009ec0:	334c      	adds	r3, #76	; 0x4c
 8009ec2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ed0:	691a      	ldr	r2, [r3, #16]
 8009ed2:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HCD_RXQLVL_IRQHandler+0x154>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d031      	beq.n	8009f3e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ef0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ef8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f06:	461a      	mov	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3350      	adds	r3, #80	; 0x50
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f083 0301 	eor.w	r3, r3, #1
 8009f22:	b2d8      	uxtb	r0, r3
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	440b      	add	r3, r1
 8009f32:	3350      	adds	r3, #80	; 0x50
 8009f34:	4602      	mov	r2, r0
 8009f36:	701a      	strb	r2, [r3, #0]
      break;
 8009f38:	e001      	b.n	8009f3e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8009f3a:	bf00      	nop
 8009f3c:	e000      	b.n	8009f40 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8009f3e:	bf00      	nop
  }
}
 8009f40:	bf00      	nop
 8009f42:	3728      	adds	r7, #40	; 0x28
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	1ff80000 	.word	0x1ff80000

08009f4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d10b      	bne.n	8009f9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d102      	bne.n	8009f94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f00b fe90 	bl	8015cb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f043 0302 	orr.w	r3, r3, #2
 8009f9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d132      	bne.n	800a00c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f043 0308 	orr.w	r3, r3, #8
 8009fac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d126      	bne.n	800a006 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d113      	bne.n	8009fe8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009fc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fca:	d106      	bne.n	8009fda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2102      	movs	r1, #2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f005 fdb4 	bl	800fb40 <USB_InitFSLSPClkSel>
 8009fd8:	e011      	b.n	8009ffe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f005 fdad 	bl	800fb40 <USB_InitFSLSPClkSel>
 8009fe6:	e00a      	b.n	8009ffe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d106      	bne.n	8009ffe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009ffc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f00b fe86 	bl	8015d10 <HAL_HCD_PortEnabled_Callback>
 800a004:	e002      	b.n	800a00c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f00b fe90 	bl	8015d2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b20      	cmp	r3, #32
 800a014:	d103      	bne.n	800a01e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f043 0320 	orr.w	r3, r3, #32
 800a01c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a024:	461a      	mov	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6013      	str	r3, [r2, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e07f      	b.n	800a146 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7f8 fdcc 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2224      	movs	r2, #36	; 0x24
 800a064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a084:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a094:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d107      	bne.n	800a0ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0aa:	609a      	str	r2, [r3, #8]
 800a0ac:	e006      	b.n	800a0bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a0ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d104      	bne.n	800a0ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6859      	ldr	r1, [r3, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <HAL_I2C_Init+0x11c>)
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691a      	ldr	r2, [r3, #16]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	ea42 0103 	orr.w	r1, r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	021a      	lsls	r2, r3, #8
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	69d9      	ldr	r1, [r3, #28]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1a      	ldr	r2, [r3, #32]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f042 0201 	orr.w	r2, r2, #1
 800a126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	02008000 	.word	0x02008000

0800a154 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e021      	b.n	800a1aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2224      	movs	r2, #36	; 0x24
 800a16a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0201 	bic.w	r2, r2, #1
 800a17c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7f8 fdb2 	bl	8002ce8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	817b      	strh	r3, [r7, #10]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	813b      	strh	r3, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	f040 80f9 	bne.w	800a3ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <HAL_I2C_Mem_Write+0x34>
 800a1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e0ed      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <HAL_I2C_Mem_Write+0x4e>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e0e6      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a20a:	f7fc facf 	bl	80067ac <HAL_GetTick>
 800a20e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	2319      	movs	r3, #25
 800a216:	2201      	movs	r2, #1
 800a218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fad1 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e0d1      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2221      	movs	r2, #33	; 0x21
 800a230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2240      	movs	r2, #64	; 0x40
 800a238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a3a      	ldr	r2, [r7, #32]
 800a246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a24c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a254:	88f8      	ldrh	r0, [r7, #6]
 800a256:	893a      	ldrh	r2, [r7, #8]
 800a258:	8979      	ldrh	r1, [r7, #10]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4603      	mov	r3, r0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f9e1 	bl	800a62c <I2C_RequestMemoryWrite>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e0a9      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a280:	b29b      	uxth	r3, r3
 800a282:	2bff      	cmp	r3, #255	; 0xff
 800a284:	d90e      	bls.n	800a2a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	22ff      	movs	r2, #255	; 0xff
 800a28a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a290:	b2da      	uxtb	r2, r3
 800a292:	8979      	ldrh	r1, [r7, #10]
 800a294:	2300      	movs	r3, #0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 fbb3 	bl	800aa08 <I2C_TransferConfig>
 800a2a2:	e00f      	b.n	800a2c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	8979      	ldrh	r1, [r7, #10]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 fba2 	bl	800aa08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fabb 	bl	800a844 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e07b      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a300:	3b01      	subs	r3, #1
 800a302:	b29a      	uxth	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d034      	beq.n	800a37c <HAL_I2C_Mem_Write+0x1c8>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a316:	2b00      	cmp	r3, #0
 800a318:	d130      	bne.n	800a37c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	2200      	movs	r2, #0
 800a322:	2180      	movs	r1, #128	; 0x80
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fa4d 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e04d      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a338:	b29b      	uxth	r3, r3
 800a33a:	2bff      	cmp	r3, #255	; 0xff
 800a33c:	d90e      	bls.n	800a35c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	22ff      	movs	r2, #255	; 0xff
 800a342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	8979      	ldrh	r1, [r7, #10]
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fb57 	bl	800aa08 <I2C_TransferConfig>
 800a35a:	e00f      	b.n	800a37c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	8979      	ldrh	r1, [r7, #10]
 800a36e:	2300      	movs	r3, #0
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 fb46 	bl	800aa08 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d19e      	bne.n	800a2c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 fa9a 	bl	800a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e01a      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6859      	ldr	r1, [r3, #4]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <HAL_I2C_Mem_Write+0x224>)
 800a3ae:	400b      	ands	r3, r1
 800a3b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e000      	b.n	800a3d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a3ce:	2302      	movs	r3, #2
  }
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	fe00e800 	.word	0xfe00e800

0800a3dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af02      	add	r7, sp, #8
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	817b      	strh	r3, [r7, #10]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	813b      	strh	r3, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	f040 80fd 	bne.w	800a5fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <HAL_I2C_Mem_Read+0x34>
 800a40a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a416:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e0f1      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_I2C_Mem_Read+0x4e>
 800a426:	2302      	movs	r3, #2
 800a428:	e0ea      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a432:	f7fc f9bb 	bl	80067ac <HAL_GetTick>
 800a436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2319      	movs	r3, #25
 800a43e:	2201      	movs	r2, #1
 800a440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 f9bd 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e0d5      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2222      	movs	r2, #34	; 0x22
 800a458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2240      	movs	r2, #64	; 0x40
 800a460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a3a      	ldr	r2, [r7, #32]
 800a46e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a47c:	88f8      	ldrh	r0, [r7, #6]
 800a47e:	893a      	ldrh	r2, [r7, #8]
 800a480:	8979      	ldrh	r1, [r7, #10]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	4603      	mov	r3, r0
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f921 	bl	800a6d4 <I2C_RequestMemoryRead>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d005      	beq.n	800a4a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0ad      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2bff      	cmp	r3, #255	; 0xff
 800a4ac:	d90e      	bls.n	800a4cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	22ff      	movs	r2, #255	; 0xff
 800a4b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	8979      	ldrh	r1, [r7, #10]
 800a4bc:	4b52      	ldr	r3, [pc, #328]	; (800a608 <HAL_I2C_Mem_Read+0x22c>)
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 fa9f 	bl	800aa08 <I2C_TransferConfig>
 800a4ca:	e00f      	b.n	800a4ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	8979      	ldrh	r1, [r7, #10]
 800a4de:	4b4a      	ldr	r3, [pc, #296]	; (800a608 <HAL_I2C_Mem_Read+0x22c>)
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fa8e 	bl	800aa08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2104      	movs	r1, #4
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 f964 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e07c      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a522:	3b01      	subs	r3, #1
 800a524:	b29a      	uxth	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d034      	beq.n	800a5ac <HAL_I2C_Mem_Read+0x1d0>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d130      	bne.n	800a5ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2200      	movs	r2, #0
 800a552:	2180      	movs	r1, #128	; 0x80
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f935 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e04d      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2bff      	cmp	r3, #255	; 0xff
 800a56c:	d90e      	bls.n	800a58c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	22ff      	movs	r2, #255	; 0xff
 800a572:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	8979      	ldrh	r1, [r7, #10]
 800a57c:	2300      	movs	r3, #0
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fa3f 	bl	800aa08 <I2C_TransferConfig>
 800a58a:	e00f      	b.n	800a5ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	8979      	ldrh	r1, [r7, #10]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fa2e 	bl	800aa08 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d19a      	bne.n	800a4ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 f982 	bl	800a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e01a      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6859      	ldr	r1, [r3, #4]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <HAL_I2C_Mem_Read+0x230>)
 800a5de:	400b      	ands	r3, r1
 800a5e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e000      	b.n	800a600 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
  }
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	80002400 	.word	0x80002400
 800a60c:	fe00e800 	.word	0xfe00e800

0800a610 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a61e:	b2db      	uxtb	r3, r3
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	817b      	strh	r3, [r7, #10]
 800a63e:	460b      	mov	r3, r1
 800a640:	813b      	strh	r3, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	8979      	ldrh	r1, [r7, #10]
 800a64c:	4b20      	ldr	r3, [pc, #128]	; (800a6d0 <I2C_RequestMemoryWrite+0xa4>)
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f9d7 	bl	800aa08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	69b9      	ldr	r1, [r7, #24]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f000 f8f0 	bl	800a844 <I2C_WaitOnTXISFlagUntilTimeout>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e02c      	b.n	800a6c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d105      	bne.n	800a680 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a674:	893b      	ldrh	r3, [r7, #8]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
 800a67e:	e015      	b.n	800a6ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a680:	893b      	ldrh	r3, [r7, #8]
 800a682:	0a1b      	lsrs	r3, r3, #8
 800a684:	b29b      	uxth	r3, r3
 800a686:	b2da      	uxtb	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	69b9      	ldr	r1, [r7, #24]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 f8d6 	bl	800a844 <I2C_WaitOnTXISFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e012      	b.n	800a6c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a6a2:	893b      	ldrh	r3, [r7, #8]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f884 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	80002000 	.word	0x80002000

0800a6d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	4608      	mov	r0, r1
 800a6de:	4611      	mov	r1, r2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	817b      	strh	r3, [r7, #10]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	813b      	strh	r3, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	8979      	ldrh	r1, [r7, #10]
 800a6f4:	4b20      	ldr	r3, [pc, #128]	; (800a778 <I2C_RequestMemoryRead+0xa4>)
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f984 	bl	800aa08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a700:	69fa      	ldr	r2, [r7, #28]
 800a702:	69b9      	ldr	r1, [r7, #24]
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 f89d 	bl	800a844 <I2C_WaitOnTXISFlagUntilTimeout>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e02c      	b.n	800a76e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d105      	bne.n	800a726 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a71a:	893b      	ldrh	r3, [r7, #8]
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	629a      	str	r2, [r3, #40]	; 0x28
 800a724:	e015      	b.n	800a752 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a726:	893b      	ldrh	r3, [r7, #8]
 800a728:	0a1b      	lsrs	r3, r3, #8
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a734:	69fa      	ldr	r2, [r7, #28]
 800a736:	69b9      	ldr	r1, [r7, #24]
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f883 	bl	800a844 <I2C_WaitOnTXISFlagUntilTimeout>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e012      	b.n	800a76e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a748:	893b      	ldrh	r3, [r7, #8]
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2200      	movs	r2, #0
 800a75a:	2140      	movs	r1, #64	; 0x40
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f831 	bl	800a7c4 <I2C_WaitOnFlagUntilTimeout>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e000      	b.n	800a76e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	80002000 	.word	0x80002000

0800a77c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d103      	bne.n	800a79a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2200      	movs	r2, #0
 800a798:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d007      	beq.n	800a7b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f042 0201 	orr.w	r2, r2, #1
 800a7b6:	619a      	str	r2, [r3, #24]
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7d4:	e022      	b.n	800a81c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7dc:	d01e      	beq.n	800a81c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7de:	f7fb ffe5 	bl	80067ac <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d302      	bcc.n	800a7f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d113      	bne.n	800a81c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f8:	f043 0220 	orr.w	r2, r3, #32
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e00f      	b.n	800a83c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4013      	ands	r3, r2
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	429a      	cmp	r2, r3
 800a82a:	bf0c      	ite	eq
 800a82c:	2301      	moveq	r3, #1
 800a82e:	2300      	movne	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	429a      	cmp	r2, r3
 800a838:	d0cd      	beq.n	800a7d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a850:	e02c      	b.n	800a8ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f870 	bl	800a93c <I2C_IsAcknowledgeFailed>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e02a      	b.n	800a8bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86c:	d01e      	beq.n	800a8ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a86e:	f7fb ff9d 	bl	80067ac <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d302      	bcc.n	800a884 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d113      	bne.n	800a8ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a888:	f043 0220 	orr.w	r2, r3, #32
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2220      	movs	r2, #32
 800a894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e007      	b.n	800a8bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d1cb      	bne.n	800a852 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8d0:	e028      	b.n	800a924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f830 	bl	800a93c <I2C_IsAcknowledgeFailed>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e026      	b.n	800a934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e6:	f7fb ff61 	bl	80067ac <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d302      	bcc.n	800a8fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d113      	bne.n	800a924 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a900:	f043 0220 	orr.w	r2, r3, #32
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e007      	b.n	800a934 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b20      	cmp	r3, #32
 800a930:	d1cf      	bne.n	800a8d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d151      	bne.n	800a9fa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a956:	e022      	b.n	800a99e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d01e      	beq.n	800a99e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a960:	f7fb ff24 	bl	80067ac <HAL_GetTick>
 800a964:	4602      	mov	r2, r0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <I2C_IsAcknowledgeFailed+0x3a>
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d113      	bne.n	800a99e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97a:	f043 0220 	orr.w	r2, r3, #32
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2220      	movs	r2, #32
 800a986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e02e      	b.n	800a9fc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d1d5      	bne.n	800a958 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2210      	movs	r2, #16
 800a9b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7ff fedd 	bl	800a77c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6859      	ldr	r1, [r3, #4]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <I2C_IsAcknowledgeFailed+0xc8>)
 800a9ce:	400b      	ands	r3, r1
 800a9d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d6:	f043 0204 	orr.w	r2, r3, #4
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	fe00e800 	.word	0xfe00e800

0800aa08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	817b      	strh	r3, [r7, #10]
 800aa16:	4613      	mov	r3, r2
 800aa18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	0d5b      	lsrs	r3, r3, #21
 800aa24:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aa28:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <I2C_TransferConfig+0x58>)
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	43db      	mvns	r3, r3
 800aa2e:	ea02 0103 	and.w	r1, r2, r3
 800aa32:	897b      	ldrh	r3, [r7, #10]
 800aa34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa38:	7a7b      	ldrb	r3, [r7, #9]
 800aa3a:	041b      	lsls	r3, r3, #16
 800aa3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa40:	431a      	orrs	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	03ff63ff 	.word	0x03ff63ff

0800aa64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d138      	bne.n	800aaec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e032      	b.n	800aaee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2224      	movs	r2, #36	; 0x24
 800aa94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0201 	bic.w	r2, r2, #1
 800aaa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6819      	ldr	r1, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0201 	orr.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2220      	movs	r2, #32
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e000      	b.n	800aaee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b20      	cmp	r3, #32
 800ab0e:	d139      	bne.n	800ab84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d101      	bne.n	800ab1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	e033      	b.n	800ab86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2224      	movs	r2, #36	; 0x24
 800ab2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 0201 	bic.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	021b      	lsls	r3, r3, #8
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f042 0201 	orr.w	r2, r2, #1
 800ab6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e000      	b.n	800ab86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab84:	2302      	movs	r3, #2
  }
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e0bf      	b.n	800ad26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7f8 f8d0 	bl	8002d60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800abd6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6999      	ldr	r1, [r3, #24]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800abec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6899      	ldr	r1, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b4a      	ldr	r3, [pc, #296]	; (800ad30 <HAL_LTDC_Init+0x19c>)
 800ac08:	400b      	ands	r3, r1
 800ac0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	041b      	lsls	r3, r3, #16
 800ac12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6899      	ldr	r1, [r3, #8]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699a      	ldr	r2, [r3, #24]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	431a      	orrs	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68d9      	ldr	r1, [r3, #12]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	4b3e      	ldr	r3, [pc, #248]	; (800ad30 <HAL_LTDC_Init+0x19c>)
 800ac36:	400b      	ands	r3, r1
 800ac38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68d9      	ldr	r1, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1a      	ldr	r2, [r3, #32]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6919      	ldr	r1, [r3, #16]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b33      	ldr	r3, [pc, #204]	; (800ad30 <HAL_LTDC_Init+0x19c>)
 800ac64:	400b      	ands	r3, r1
 800ac66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6919      	ldr	r1, [r3, #16]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6959      	ldr	r1, [r3, #20]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <HAL_LTDC_Init+0x19c>)
 800ac92:	400b      	ands	r3, r1
 800ac94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9a:	041b      	lsls	r3, r3, #16
 800ac9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6959      	ldr	r1, [r3, #20]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800acc4:	041b      	lsls	r3, r3, #16
 800acc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800acd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0206 	orr.w	r2, r2, #6
 800ad02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	699a      	ldr	r2, [r3, #24]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0201 	orr.w	r2, r2, #1
 800ad12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	f000f800 	.word	0xf000f800

0800ad34 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f003 0304 	and.w	r3, r3, #4
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d023      	beq.n	800ad9e <HAL_LTDC_IRQHandler+0x6a>
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01e      	beq.n	800ad9e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0204 	bic.w	r2, r2, #4
 800ad6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2204      	movs	r2, #4
 800ad76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad7e:	f043 0201 	orr.w	r2, r3, #1
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f86f 	bl	800ae7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f003 0302 	and.w	r3, r3, #2
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d023      	beq.n	800adf0 <HAL_LTDC_IRQHandler+0xbc>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01e      	beq.n	800adf0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0202 	bic.w	r2, r2, #2
 800adc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2202      	movs	r2, #2
 800adc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800add0:	f043 0202 	orr.w	r2, r3, #2
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2204      	movs	r2, #4
 800adde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f846 	bl	800ae7c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01b      	beq.n	800ae32 <HAL_LTDC_IRQHandler+0xfe>
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d016      	beq.n	800ae32 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0201 	bic.w	r2, r2, #1
 800ae12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f82f 	bl	800ae90 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01b      	beq.n	800ae74 <HAL_LTDC_IRQHandler+0x140>
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d016      	beq.n	800ae74 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f022 0208 	bic.w	r2, r2, #8
 800ae54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f818 	bl	800aea4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aeb8:	b5b0      	push	{r4, r5, r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_LTDC_ConfigLayer+0x1a>
 800aece:	2302      	movs	r3, #2
 800aed0:	e02c      	b.n	800af2c <HAL_LTDC_ConfigLayer+0x74>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2202      	movs	r2, #2
 800aede:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2134      	movs	r1, #52	; 0x34
 800aee8:	fb01 f303 	mul.w	r3, r1, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4614      	mov	r4, r2
 800aef6:	461d      	mov	r5, r3
 800aef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aefa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aefc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aefe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	68b9      	ldr	r1, [r7, #8]
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f81f 	bl	800af50 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2201      	movs	r2, #1
 800af18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bdb0      	pop	{r4, r5, r7, pc}

0800af34 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800af42:	b2db      	uxtb	r3, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800af50:	b480      	push	{r7}
 800af52:	b089      	sub	sp, #36	; 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	0c1b      	lsrs	r3, r3, #16
 800af68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af6c:	4413      	add	r3, r2
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	01db      	lsls	r3, r3, #7
 800af7c:	4413      	add	r3, r2
 800af7e:	3384      	adds	r3, #132	; 0x84
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	6812      	ldr	r2, [r2, #0]
 800af86:	4611      	mov	r1, r2
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	01d2      	lsls	r2, r2, #7
 800af8c:	440a      	add	r2, r1
 800af8e:	3284      	adds	r2, #132	; 0x84
 800af90:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800af94:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	0c1b      	lsrs	r3, r3, #16
 800afa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afa6:	4413      	add	r3, r2
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4619      	mov	r1, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	01db      	lsls	r3, r3, #7
 800afb4:	440b      	add	r3, r1
 800afb6:	3384      	adds	r3, #132	; 0x84
 800afb8:	4619      	mov	r1, r3
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afce:	4413      	add	r3, r2
 800afd0:	041b      	lsls	r3, r3, #16
 800afd2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	01db      	lsls	r3, r3, #7
 800afde:	4413      	add	r3, r2
 800afe0:	3384      	adds	r3, #132	; 0x84
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	6812      	ldr	r2, [r2, #0]
 800afe8:	4611      	mov	r1, r2
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	01d2      	lsls	r2, r2, #7
 800afee:	440a      	add	r2, r1
 800aff0:	3284      	adds	r2, #132	; 0x84
 800aff2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800aff6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	689a      	ldr	r2, [r3, #8]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b006:	4413      	add	r3, r2
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4619      	mov	r1, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	01db      	lsls	r3, r3, #7
 800b014:	440b      	add	r3, r1
 800b016:	3384      	adds	r3, #132	; 0x84
 800b018:	4619      	mov	r1, r3
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	01db      	lsls	r3, r3, #7
 800b02a:	4413      	add	r3, r2
 800b02c:	3384      	adds	r3, #132	; 0x84
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	6812      	ldr	r2, [r2, #0]
 800b034:	4611      	mov	r1, r2
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	01d2      	lsls	r2, r2, #7
 800b03a:	440a      	add	r2, r1
 800b03c:	3284      	adds	r2, #132	; 0x84
 800b03e:	f023 0307 	bic.w	r3, r3, #7
 800b042:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	01db      	lsls	r3, r3, #7
 800b04e:	4413      	add	r3, r2
 800b050:	3384      	adds	r3, #132	; 0x84
 800b052:	461a      	mov	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b060:	021b      	lsls	r3, r3, #8
 800b062:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b06a:	041b      	lsls	r3, r3, #16
 800b06c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	061b      	lsls	r3, r3, #24
 800b074:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	01db      	lsls	r3, r3, #7
 800b080:	4413      	add	r3, r2
 800b082:	3384      	adds	r3, #132	; 0x84
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	01db      	lsls	r3, r3, #7
 800b090:	4413      	add	r3, r2
 800b092:	3384      	adds	r3, #132	; 0x84
 800b094:	461a      	mov	r2, r3
 800b096:	2300      	movs	r3, #0
 800b098:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	01db      	lsls	r3, r3, #7
 800b0b4:	440b      	add	r3, r1
 800b0b6:	3384      	adds	r3, #132	; 0x84
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	01db      	lsls	r3, r3, #7
 800b0ca:	4413      	add	r3, r2
 800b0cc:	3384      	adds	r3, #132	; 0x84
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	6812      	ldr	r2, [r2, #0]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	01d2      	lsls	r2, r2, #7
 800b0da:	440a      	add	r2, r1
 800b0dc:	3284      	adds	r2, #132	; 0x84
 800b0de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	01db      	lsls	r3, r3, #7
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3384      	adds	r3, #132	; 0x84
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	01db      	lsls	r3, r3, #7
 800b104:	4413      	add	r3, r2
 800b106:	3384      	adds	r3, #132	; 0x84
 800b108:	69da      	ldr	r2, [r3, #28]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	01db      	lsls	r3, r3, #7
 800b114:	440b      	add	r3, r1
 800b116:	3384      	adds	r3, #132	; 0x84
 800b118:	4619      	mov	r1, r3
 800b11a:	4b58      	ldr	r3, [pc, #352]	; (800b27c <LTDC_SetConfig+0x32c>)
 800b11c:	4013      	ands	r3, r2
 800b11e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	69da      	ldr	r2, [r3, #28]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	68f9      	ldr	r1, [r7, #12]
 800b12a:	6809      	ldr	r1, [r1, #0]
 800b12c:	4608      	mov	r0, r1
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	01c9      	lsls	r1, r1, #7
 800b132:	4401      	add	r1, r0
 800b134:	3184      	adds	r1, #132	; 0x84
 800b136:	4313      	orrs	r3, r2
 800b138:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	01db      	lsls	r3, r3, #7
 800b144:	4413      	add	r3, r2
 800b146:	3384      	adds	r3, #132	; 0x84
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	01db      	lsls	r3, r3, #7
 800b154:	4413      	add	r3, r2
 800b156:	3384      	adds	r3, #132	; 0x84
 800b158:	461a      	mov	r2, r3
 800b15a:	2300      	movs	r3, #0
 800b15c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	01db      	lsls	r3, r3, #7
 800b168:	4413      	add	r3, r2
 800b16a:	3384      	adds	r3, #132	; 0x84
 800b16c:	461a      	mov	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b17c:	2304      	movs	r3, #4
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	e01b      	b.n	800b1ba <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d102      	bne.n	800b190 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b18a:	2303      	movs	r3, #3
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	e014      	b.n	800b1ba <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	2b04      	cmp	r3, #4
 800b196:	d00b      	beq.n	800b1b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d007      	beq.n	800b1b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d003      	beq.n	800b1b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b1ac:	2b07      	cmp	r3, #7
 800b1ae:	d102      	bne.n	800b1b6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	e001      	b.n	800b1ba <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	01db      	lsls	r3, r3, #7
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3384      	adds	r3, #132	; 0x84
 800b1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	01d2      	lsls	r2, r2, #7
 800b1d4:	440a      	add	r2, r1
 800b1d6:	3284      	adds	r2, #132	; 0x84
 800b1d8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	fb02 f303 	mul.w	r3, r2, r3
 800b1e8:	041a      	lsls	r2, r3, #16
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6859      	ldr	r1, [r3, #4]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	1acb      	subs	r3, r1, r3
 800b1f4:	69f9      	ldr	r1, [r7, #28]
 800b1f6:	fb01 f303 	mul.w	r3, r1, r3
 800b1fa:	3303      	adds	r3, #3
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	6809      	ldr	r1, [r1, #0]
 800b200:	4608      	mov	r0, r1
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	01c9      	lsls	r1, r1, #7
 800b206:	4401      	add	r1, r0
 800b208:	3184      	adds	r1, #132	; 0x84
 800b20a:	4313      	orrs	r3, r2
 800b20c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	01db      	lsls	r3, r3, #7
 800b218:	4413      	add	r3, r2
 800b21a:	3384      	adds	r3, #132	; 0x84
 800b21c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	01db      	lsls	r3, r3, #7
 800b228:	440b      	add	r3, r1
 800b22a:	3384      	adds	r3, #132	; 0x84
 800b22c:	4619      	mov	r1, r3
 800b22e:	4b14      	ldr	r3, [pc, #80]	; (800b280 <LTDC_SetConfig+0x330>)
 800b230:	4013      	ands	r3, r2
 800b232:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	01db      	lsls	r3, r3, #7
 800b23e:	4413      	add	r3, r2
 800b240:	3384      	adds	r3, #132	; 0x84
 800b242:	461a      	mov	r2, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	01db      	lsls	r3, r3, #7
 800b254:	4413      	add	r3, r2
 800b256:	3384      	adds	r3, #132	; 0x84
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	4611      	mov	r1, r2
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	01d2      	lsls	r2, r2, #7
 800b264:	440a      	add	r2, r1
 800b266:	3284      	adds	r2, #132	; 0x84
 800b268:	f043 0301 	orr.w	r3, r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
}
 800b26e:	bf00      	nop
 800b270:	3724      	adds	r7, #36	; 0x24
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	fffff8f8 	.word	0xfffff8f8
 800b280:	fffff800 	.word	0xfffff800

0800b284 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a04      	ldr	r2, [pc, #16]	; (800b2a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b292:	6013      	str	r3, [r2, #0]
}
 800b294:	bf00      	nop
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40007000 	.word	0x40007000

0800b2a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b2ae:	4b23      	ldr	r3, [pc, #140]	; (800b33c <HAL_PWREx_EnableOverDrive+0x98>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	4a22      	ldr	r2, [pc, #136]	; (800b33c <HAL_PWREx_EnableOverDrive+0x98>)
 800b2b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2ba:	4b20      	ldr	r3, [pc, #128]	; (800b33c <HAL_PWREx_EnableOverDrive+0x98>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b2c6:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a1d      	ldr	r2, [pc, #116]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2d2:	f7fb fa6b 	bl	80067ac <HAL_GetTick>
 800b2d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2d8:	e009      	b.n	800b2ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2da:	f7fb fa67 	bl	80067ac <HAL_GetTick>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2e8:	d901      	bls.n	800b2ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e022      	b.n	800b334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2ee:	4b14      	ldr	r3, [pc, #80]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2fa:	d1ee      	bne.n	800b2da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0f      	ldr	r2, [pc, #60]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b308:	f7fb fa50 	bl	80067ac <HAL_GetTick>
 800b30c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b30e:	e009      	b.n	800b324 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b310:	f7fb fa4c 	bl	80067ac <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b31e:	d901      	bls.n	800b324 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e007      	b.n	800b334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b324:	4b06      	ldr	r3, [pc, #24]	; (800b340 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b330:	d1ee      	bne.n	800b310 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	40023800 	.word	0x40023800
 800b340:	40007000 	.word	0x40007000

0800b344 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af02      	add	r7, sp, #8
 800b34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b34c:	f7fb fa2e 	bl	80067ac <HAL_GetTick>
 800b350:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e067      	b.n	800b42c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10b      	bne.n	800b380 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7f7 fdbd 	bl	8002ef0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b376:	f241 3188 	movw	r1, #5000	; 0x1388
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f85e 	bl	800b43c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	3b01      	subs	r3, #1
 800b390:	021a      	lsls	r2, r3, #8
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2120      	movs	r1, #32
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f856 	bl	800b458 <QSPI_WaitFlagStateUntilTimeout>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d135      	bne.n	800b422 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	4b1d      	ldr	r3, [pc, #116]	; (800b434 <HAL_QSPI_Init+0xf0>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6852      	ldr	r2, [r2, #4]
 800b3c4:	0611      	lsls	r1, r2, #24
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	68d2      	ldr	r2, [r2, #12]
 800b3ca:	4311      	orrs	r1, r2
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	69d2      	ldr	r2, [r2, #28]
 800b3d0:	4311      	orrs	r1, r2
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6a12      	ldr	r2, [r2, #32]
 800b3d6:	4311      	orrs	r1, r2
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	6812      	ldr	r2, [r2, #0]
 800b3dc:	430b      	orrs	r3, r1
 800b3de:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	4b14      	ldr	r3, [pc, #80]	; (800b438 <HAL_QSPI_Init+0xf4>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6912      	ldr	r2, [r2, #16]
 800b3ee:	0411      	lsls	r1, r2, #16
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6952      	ldr	r2, [r2, #20]
 800b3f4:	4311      	orrs	r1, r2
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6992      	ldr	r2, [r2, #24]
 800b3fa:	4311      	orrs	r1, r2
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	430b      	orrs	r3, r1
 800b402:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b42a:	7afb      	ldrb	r3, [r7, #11]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	00ffff2f 	.word	0x00ffff2f
 800b438:	ffe0f8fe 	.word	0xffe0f8fe

0800b43c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	4613      	mov	r3, r2
 800b466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b468:	e01a      	b.n	800b4a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b470:	d016      	beq.n	800b4a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b472:	f7fb f99b 	bl	80067ac <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d302      	bcc.n	800b488 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10b      	bne.n	800b4a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2204      	movs	r2, #4
 800b48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b494:	f043 0201 	orr.w	r2, r3, #1
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e00e      	b.n	800b4be <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689a      	ldr	r2, [r3, #8]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bf14      	ite	ne
 800b4ae:	2301      	movne	r3, #1
 800b4b0:	2300      	moveq	r3, #0
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d1d6      	bne.n	800b46a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e291      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 8087 	beq.w	800b5fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b4ec:	4b96      	ldr	r3, [pc, #600]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f003 030c 	and.w	r3, r3, #12
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d00c      	beq.n	800b512 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4f8:	4b93      	ldr	r3, [pc, #588]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	f003 030c 	and.w	r3, r3, #12
 800b500:	2b08      	cmp	r3, #8
 800b502:	d112      	bne.n	800b52a <HAL_RCC_OscConfig+0x62>
 800b504:	4b90      	ldr	r3, [pc, #576]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b510:	d10b      	bne.n	800b52a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b512:	4b8d      	ldr	r3, [pc, #564]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d06c      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x130>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d168      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e26b      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b532:	d106      	bne.n	800b542 <HAL_RCC_OscConfig+0x7a>
 800b534:	4b84      	ldr	r3, [pc, #528]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a83      	ldr	r2, [pc, #524]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b53a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	e02e      	b.n	800b5a0 <HAL_RCC_OscConfig+0xd8>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10c      	bne.n	800b564 <HAL_RCC_OscConfig+0x9c>
 800b54a:	4b7f      	ldr	r3, [pc, #508]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a7e      	ldr	r2, [pc, #504]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	4b7c      	ldr	r3, [pc, #496]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a7b      	ldr	r2, [pc, #492]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b55c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	e01d      	b.n	800b5a0 <HAL_RCC_OscConfig+0xd8>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b56c:	d10c      	bne.n	800b588 <HAL_RCC_OscConfig+0xc0>
 800b56e:	4b76      	ldr	r3, [pc, #472]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a75      	ldr	r2, [pc, #468]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	4b73      	ldr	r3, [pc, #460]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a72      	ldr	r2, [pc, #456]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	e00b      	b.n	800b5a0 <HAL_RCC_OscConfig+0xd8>
 800b588:	4b6f      	ldr	r3, [pc, #444]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a6e      	ldr	r2, [pc, #440]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b58e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	4b6c      	ldr	r3, [pc, #432]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a6b      	ldr	r2, [pc, #428]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b59a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b59e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d013      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a8:	f7fb f900 	bl	80067ac <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ae:	e008      	b.n	800b5c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5b0:	f7fb f8fc 	bl	80067ac <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	2b64      	cmp	r3, #100	; 0x64
 800b5bc:	d901      	bls.n	800b5c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e21f      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5c2:	4b61      	ldr	r3, [pc, #388]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0f0      	beq.n	800b5b0 <HAL_RCC_OscConfig+0xe8>
 800b5ce:	e014      	b.n	800b5fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7fb f8ec 	bl	80067ac <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5d6:	e008      	b.n	800b5ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5d8:	f7fb f8e8 	bl	80067ac <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b64      	cmp	r3, #100	; 0x64
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e20b      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5ea:	4b57      	ldr	r3, [pc, #348]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1f0      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x110>
 800b5f6:	e000      	b.n	800b5fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	2b00      	cmp	r3, #0
 800b604:	d069      	beq.n	800b6da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b606:	4b50      	ldr	r3, [pc, #320]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 030c 	and.w	r3, r3, #12
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00b      	beq.n	800b62a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b612:	4b4d      	ldr	r3, [pc, #308]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f003 030c 	and.w	r3, r3, #12
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d11c      	bne.n	800b658 <HAL_RCC_OscConfig+0x190>
 800b61e:	4b4a      	ldr	r3, [pc, #296]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d116      	bne.n	800b658 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b62a:	4b47      	ldr	r3, [pc, #284]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <HAL_RCC_OscConfig+0x17a>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d001      	beq.n	800b642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e1df      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b642:	4b41      	ldr	r3, [pc, #260]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	493d      	ldr	r1, [pc, #244]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b652:	4313      	orrs	r3, r2
 800b654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b656:	e040      	b.n	800b6da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d023      	beq.n	800b6a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b660:	4b39      	ldr	r3, [pc, #228]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a38      	ldr	r2, [pc, #224]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b666:	f043 0301 	orr.w	r3, r3, #1
 800b66a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b66c:	f7fb f89e 	bl	80067ac <HAL_GetTick>
 800b670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b672:	e008      	b.n	800b686 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b674:	f7fb f89a 	bl	80067ac <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d901      	bls.n	800b686 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e1bd      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b686:	4b30      	ldr	r3, [pc, #192]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f0      	beq.n	800b674 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b692:	4b2d      	ldr	r3, [pc, #180]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	4929      	ldr	r1, [pc, #164]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	600b      	str	r3, [r1, #0]
 800b6a6:	e018      	b.n	800b6da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6a8:	4b27      	ldr	r3, [pc, #156]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a26      	ldr	r2, [pc, #152]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6ae:	f023 0301 	bic.w	r3, r3, #1
 800b6b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6b4:	f7fb f87a 	bl	80067ac <HAL_GetTick>
 800b6b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6ba:	e008      	b.n	800b6ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6bc:	f7fb f876 	bl	80067ac <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d901      	bls.n	800b6ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e199      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6ce:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f0      	bne.n	800b6bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0308 	and.w	r3, r3, #8
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d038      	beq.n	800b758 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d019      	beq.n	800b722 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f2:	4a15      	ldr	r2, [pc, #84]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b6f4:	f043 0301 	orr.w	r3, r3, #1
 800b6f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fa:	f7fb f857 	bl	80067ac <HAL_GetTick>
 800b6fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b700:	e008      	b.n	800b714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b702:	f7fb f853 	bl	80067ac <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d901      	bls.n	800b714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e176      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b714:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0f0      	beq.n	800b702 <HAL_RCC_OscConfig+0x23a>
 800b720:	e01a      	b.n	800b758 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b722:	4b09      	ldr	r3, [pc, #36]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b726:	4a08      	ldr	r2, [pc, #32]	; (800b748 <HAL_RCC_OscConfig+0x280>)
 800b728:	f023 0301 	bic.w	r3, r3, #1
 800b72c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b72e:	f7fb f83d 	bl	80067ac <HAL_GetTick>
 800b732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b734:	e00a      	b.n	800b74c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b736:	f7fb f839 	bl	80067ac <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	2b02      	cmp	r3, #2
 800b742:	d903      	bls.n	800b74c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e15c      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
 800b748:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b74c:	4b91      	ldr	r3, [pc, #580]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1ee      	bne.n	800b736 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 80a4 	beq.w	800b8ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b766:	4b8b      	ldr	r3, [pc, #556]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10d      	bne.n	800b78e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b772:	4b88      	ldr	r3, [pc, #544]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b776:	4a87      	ldr	r2, [pc, #540]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b77c:	6413      	str	r3, [r2, #64]	; 0x40
 800b77e:	4b85      	ldr	r3, [pc, #532]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b786:	60bb      	str	r3, [r7, #8]
 800b788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b78a:	2301      	movs	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b78e:	4b82      	ldr	r3, [pc, #520]	; (800b998 <HAL_RCC_OscConfig+0x4d0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b796:	2b00      	cmp	r3, #0
 800b798:	d118      	bne.n	800b7cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b79a:	4b7f      	ldr	r3, [pc, #508]	; (800b998 <HAL_RCC_OscConfig+0x4d0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a7e      	ldr	r2, [pc, #504]	; (800b998 <HAL_RCC_OscConfig+0x4d0>)
 800b7a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7a6:	f7fb f801 	bl	80067ac <HAL_GetTick>
 800b7aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7ac:	e008      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7ae:	f7fa fffd 	bl	80067ac <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	2b64      	cmp	r3, #100	; 0x64
 800b7ba:	d901      	bls.n	800b7c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e120      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7c0:	4b75      	ldr	r3, [pc, #468]	; (800b998 <HAL_RCC_OscConfig+0x4d0>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0f0      	beq.n	800b7ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d106      	bne.n	800b7e2 <HAL_RCC_OscConfig+0x31a>
 800b7d4:	4b6f      	ldr	r3, [pc, #444]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d8:	4a6e      	ldr	r2, [pc, #440]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	6713      	str	r3, [r2, #112]	; 0x70
 800b7e0:	e02d      	b.n	800b83e <HAL_RCC_OscConfig+0x376>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10c      	bne.n	800b804 <HAL_RCC_OscConfig+0x33c>
 800b7ea:	4b6a      	ldr	r3, [pc, #424]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	4a69      	ldr	r2, [pc, #420]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7f0:	f023 0301 	bic.w	r3, r3, #1
 800b7f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f6:	4b67      	ldr	r3, [pc, #412]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	4a66      	ldr	r2, [pc, #408]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b7fc:	f023 0304 	bic.w	r3, r3, #4
 800b800:	6713      	str	r3, [r2, #112]	; 0x70
 800b802:	e01c      	b.n	800b83e <HAL_RCC_OscConfig+0x376>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	2b05      	cmp	r3, #5
 800b80a:	d10c      	bne.n	800b826 <HAL_RCC_OscConfig+0x35e>
 800b80c:	4b61      	ldr	r3, [pc, #388]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b810:	4a60      	ldr	r2, [pc, #384]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b812:	f043 0304 	orr.w	r3, r3, #4
 800b816:	6713      	str	r3, [r2, #112]	; 0x70
 800b818:	4b5e      	ldr	r3, [pc, #376]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81c:	4a5d      	ldr	r2, [pc, #372]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	6713      	str	r3, [r2, #112]	; 0x70
 800b824:	e00b      	b.n	800b83e <HAL_RCC_OscConfig+0x376>
 800b826:	4b5b      	ldr	r3, [pc, #364]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82a:	4a5a      	ldr	r2, [pc, #360]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b82c:	f023 0301 	bic.w	r3, r3, #1
 800b830:	6713      	str	r3, [r2, #112]	; 0x70
 800b832:	4b58      	ldr	r3, [pc, #352]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b836:	4a57      	ldr	r2, [pc, #348]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b838:	f023 0304 	bic.w	r3, r3, #4
 800b83c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d015      	beq.n	800b872 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b846:	f7fa ffb1 	bl	80067ac <HAL_GetTick>
 800b84a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b84c:	e00a      	b.n	800b864 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b84e:	f7fa ffad 	bl	80067ac <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e0ce      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b864:	4b4b      	ldr	r3, [pc, #300]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0ee      	beq.n	800b84e <HAL_RCC_OscConfig+0x386>
 800b870:	e014      	b.n	800b89c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b872:	f7fa ff9b 	bl	80067ac <HAL_GetTick>
 800b876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b878:	e00a      	b.n	800b890 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b87a:	f7fa ff97 	bl	80067ac <HAL_GetTick>
 800b87e:	4602      	mov	r2, r0
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	f241 3288 	movw	r2, #5000	; 0x1388
 800b888:	4293      	cmp	r3, r2
 800b88a:	d901      	bls.n	800b890 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e0b8      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b890:	4b40      	ldr	r3, [pc, #256]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1ee      	bne.n	800b87a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d105      	bne.n	800b8ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8a2:	4b3c      	ldr	r3, [pc, #240]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	4a3b      	ldr	r2, [pc, #236]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 80a4 	beq.w	800ba00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8b8:	4b36      	ldr	r3, [pc, #216]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f003 030c 	and.w	r3, r3, #12
 800b8c0:	2b08      	cmp	r3, #8
 800b8c2:	d06b      	beq.n	800b99c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d149      	bne.n	800b960 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8cc:	4b31      	ldr	r3, [pc, #196]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a30      	ldr	r2, [pc, #192]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d8:	f7fa ff68 	bl	80067ac <HAL_GetTick>
 800b8dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8de:	e008      	b.n	800b8f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e0:	f7fa ff64 	bl	80067ac <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e087      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8f2:	4b28      	ldr	r3, [pc, #160]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1f0      	bne.n	800b8e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69da      	ldr	r2, [r3, #28]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	431a      	orrs	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	019b      	lsls	r3, r3, #6
 800b90e:	431a      	orrs	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b914:	085b      	lsrs	r3, r3, #1
 800b916:	3b01      	subs	r3, #1
 800b918:	041b      	lsls	r3, r3, #16
 800b91a:	431a      	orrs	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	061b      	lsls	r3, r3, #24
 800b922:	4313      	orrs	r3, r2
 800b924:	4a1b      	ldr	r2, [pc, #108]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b92a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b92c:	4b19      	ldr	r3, [pc, #100]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a18      	ldr	r2, [pc, #96]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b938:	f7fa ff38 	bl	80067ac <HAL_GetTick>
 800b93c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b93e:	e008      	b.n	800b952 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b940:	f7fa ff34 	bl	80067ac <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e057      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b952:	4b10      	ldr	r3, [pc, #64]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0f0      	beq.n	800b940 <HAL_RCC_OscConfig+0x478>
 800b95e:	e04f      	b.n	800ba00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b960:	4b0c      	ldr	r3, [pc, #48]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a0b      	ldr	r2, [pc, #44]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b96a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b96c:	f7fa ff1e 	bl	80067ac <HAL_GetTick>
 800b970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b972:	e008      	b.n	800b986 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b974:	f7fa ff1a 	bl	80067ac <HAL_GetTick>
 800b978:	4602      	mov	r2, r0
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d901      	bls.n	800b986 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e03d      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b986:	4b03      	ldr	r3, [pc, #12]	; (800b994 <HAL_RCC_OscConfig+0x4cc>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f0      	bne.n	800b974 <HAL_RCC_OscConfig+0x4ac>
 800b992:	e035      	b.n	800ba00 <HAL_RCC_OscConfig+0x538>
 800b994:	40023800 	.word	0x40023800
 800b998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b99c:	4b1b      	ldr	r3, [pc, #108]	; (800ba0c <HAL_RCC_OscConfig+0x544>)
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d028      	beq.n	800b9fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d121      	bne.n	800b9fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d11a      	bne.n	800b9fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b9d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d111      	bne.n	800b9fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d107      	bne.n	800b9fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d001      	beq.n	800ba00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	40023800 	.word	0x40023800

0800ba10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0d0      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba28:	4b6a      	ldr	r3, [pc, #424]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 030f 	and.w	r3, r3, #15
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d910      	bls.n	800ba58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba36:	4b67      	ldr	r3, [pc, #412]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f023 020f 	bic.w	r2, r3, #15
 800ba3e:	4965      	ldr	r1, [pc, #404]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba46:	4b63      	ldr	r3, [pc, #396]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 030f 	and.w	r3, r3, #15
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d001      	beq.n	800ba58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e0b8      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0302 	and.w	r3, r3, #2
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d020      	beq.n	800baa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba70:	4b59      	ldr	r3, [pc, #356]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	4a58      	ldr	r2, [pc, #352]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ba7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba88:	4b53      	ldr	r3, [pc, #332]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	4a52      	ldr	r2, [pc, #328]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ba92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba94:	4b50      	ldr	r3, [pc, #320]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	494d      	ldr	r1, [pc, #308]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d040      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d107      	bne.n	800baca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800baba:	4b47      	ldr	r3, [pc, #284]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d115      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e07f      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d107      	bne.n	800bae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bad2:	4b41      	ldr	r3, [pc, #260]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d109      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e073      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bae2:	4b3d      	ldr	r3, [pc, #244]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e06b      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800baf2:	4b39      	ldr	r3, [pc, #228]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f023 0203 	bic.w	r2, r3, #3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4936      	ldr	r1, [pc, #216]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb04:	f7fa fe52 	bl	80067ac <HAL_GetTick>
 800bb08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb0a:	e00a      	b.n	800bb22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb0c:	f7fa fe4e 	bl	80067ac <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d901      	bls.n	800bb22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e053      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb22:	4b2d      	ldr	r3, [pc, #180]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 020c 	and.w	r2, r3, #12
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d1eb      	bne.n	800bb0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb34:	4b27      	ldr	r3, [pc, #156]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 030f 	and.w	r3, r3, #15
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d210      	bcs.n	800bb64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb42:	4b24      	ldr	r3, [pc, #144]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f023 020f 	bic.w	r2, r3, #15
 800bb4a:	4922      	ldr	r1, [pc, #136]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb52:	4b20      	ldr	r3, [pc, #128]	; (800bbd4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d001      	beq.n	800bb64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e032      	b.n	800bbca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d008      	beq.n	800bb82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb70:	4b19      	ldr	r3, [pc, #100]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	4916      	ldr	r1, [pc, #88]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d009      	beq.n	800bba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb8e:	4b12      	ldr	r3, [pc, #72]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	490e      	ldr	r1, [pc, #56]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bba2:	f000 f821 	bl	800bbe8 <HAL_RCC_GetSysClockFreq>
 800bba6:	4601      	mov	r1, r0
 800bba8:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <HAL_RCC_ClockConfig+0x1c8>)
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	091b      	lsrs	r3, r3, #4
 800bbae:	f003 030f 	and.w	r3, r3, #15
 800bbb2:	4a0a      	ldr	r2, [pc, #40]	; (800bbdc <HAL_RCC_ClockConfig+0x1cc>)
 800bbb4:	5cd3      	ldrb	r3, [r2, r3]
 800bbb6:	fa21 f303 	lsr.w	r3, r1, r3
 800bbba:	4a09      	ldr	r2, [pc, #36]	; (800bbe0 <HAL_RCC_ClockConfig+0x1d0>)
 800bbbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bbbe:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <HAL_RCC_ClockConfig+0x1d4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f7 fdba 	bl	800373c <HAL_InitTick>

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	40023c00 	.word	0x40023c00
 800bbd8:	40023800 	.word	0x40023800
 800bbdc:	08016fb8 	.word	0x08016fb8
 800bbe0:	20000000 	.word	0x20000000
 800bbe4:	20000044 	.word	0x20000044

0800bbe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbfe:	4b50      	ldr	r3, [pc, #320]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 030c 	and.w	r3, r3, #12
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d007      	beq.n	800bc1a <HAL_RCC_GetSysClockFreq+0x32>
 800bc0a:	2b08      	cmp	r3, #8
 800bc0c:	d008      	beq.n	800bc20 <HAL_RCC_GetSysClockFreq+0x38>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f040 808d 	bne.w	800bd2e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc14:	4b4b      	ldr	r3, [pc, #300]	; (800bd44 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bc16:	60bb      	str	r3, [r7, #8]
      break;
 800bc18:	e08c      	b.n	800bd34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc1a:	4b4b      	ldr	r3, [pc, #300]	; (800bd48 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc1c:	60bb      	str	r3, [r7, #8]
      break;
 800bc1e:	e089      	b.n	800bd34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc20:	4b47      	ldr	r3, [pc, #284]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc28:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bc2a:	4b45      	ldr	r3, [pc, #276]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d023      	beq.n	800bc7e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc36:	4b42      	ldr	r3, [pc, #264]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	099b      	lsrs	r3, r3, #6
 800bc3c:	f04f 0400 	mov.w	r4, #0
 800bc40:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc44:	f04f 0200 	mov.w	r2, #0
 800bc48:	ea03 0501 	and.w	r5, r3, r1
 800bc4c:	ea04 0602 	and.w	r6, r4, r2
 800bc50:	4a3d      	ldr	r2, [pc, #244]	; (800bd48 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc52:	fb02 f106 	mul.w	r1, r2, r6
 800bc56:	2200      	movs	r2, #0
 800bc58:	fb02 f205 	mul.w	r2, r2, r5
 800bc5c:	440a      	add	r2, r1
 800bc5e:	493a      	ldr	r1, [pc, #232]	; (800bd48 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc60:	fba5 0101 	umull	r0, r1, r5, r1
 800bc64:	1853      	adds	r3, r2, r1
 800bc66:	4619      	mov	r1, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f04f 0400 	mov.w	r4, #0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	4623      	mov	r3, r4
 800bc72:	f7f4 fd29 	bl	80006c8 <__aeabi_uldivmod>
 800bc76:	4603      	mov	r3, r0
 800bc78:	460c      	mov	r4, r1
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e049      	b.n	800bd12 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc7e:	4b30      	ldr	r3, [pc, #192]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	099b      	lsrs	r3, r3, #6
 800bc84:	f04f 0400 	mov.w	r4, #0
 800bc88:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	ea03 0501 	and.w	r5, r3, r1
 800bc94:	ea04 0602 	and.w	r6, r4, r2
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	f04f 0300 	mov.w	r3, #0
 800bca0:	f04f 0400 	mov.w	r4, #0
 800bca4:	0154      	lsls	r4, r2, #5
 800bca6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bcaa:	014b      	lsls	r3, r1, #5
 800bcac:	4619      	mov	r1, r3
 800bcae:	4622      	mov	r2, r4
 800bcb0:	1b49      	subs	r1, r1, r5
 800bcb2:	eb62 0206 	sbc.w	r2, r2, r6
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	f04f 0400 	mov.w	r4, #0
 800bcbe:	0194      	lsls	r4, r2, #6
 800bcc0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bcc4:	018b      	lsls	r3, r1, #6
 800bcc6:	1a5b      	subs	r3, r3, r1
 800bcc8:	eb64 0402 	sbc.w	r4, r4, r2
 800bccc:	f04f 0100 	mov.w	r1, #0
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	00e2      	lsls	r2, r4, #3
 800bcd6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bcda:	00d9      	lsls	r1, r3, #3
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4614      	mov	r4, r2
 800bce0:	195b      	adds	r3, r3, r5
 800bce2:	eb44 0406 	adc.w	r4, r4, r6
 800bce6:	f04f 0100 	mov.w	r1, #0
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	02a2      	lsls	r2, r4, #10
 800bcf0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bcf4:	0299      	lsls	r1, r3, #10
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4614      	mov	r4, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f04f 0400 	mov.w	r4, #0
 800bd04:	461a      	mov	r2, r3
 800bd06:	4623      	mov	r3, r4
 800bd08:	f7f4 fcde 	bl	80006c8 <__aeabi_uldivmod>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <HAL_RCC_GetSysClockFreq+0x158>)
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	0c1b      	lsrs	r3, r3, #16
 800bd18:	f003 0303 	and.w	r3, r3, #3
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2a:	60bb      	str	r3, [r7, #8]
      break;
 800bd2c:	e002      	b.n	800bd34 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bd2e:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bd30:	60bb      	str	r3, [r7, #8]
      break;
 800bd32:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bd34:	68bb      	ldr	r3, [r7, #8]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	40023800 	.word	0x40023800
 800bd44:	00f42400 	.word	0x00f42400
 800bd48:	017d7840 	.word	0x017d7840

0800bd4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd50:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <HAL_RCC_GetHCLKFreq+0x14>)
 800bd52:	681b      	ldr	r3, [r3, #0]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	20000000 	.word	0x20000000

0800bd64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bd68:	f7ff fff0 	bl	800bd4c <HAL_RCC_GetHCLKFreq>
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	0a9b      	lsrs	r3, r3, #10
 800bd74:	f003 0307 	and.w	r3, r3, #7
 800bd78:	4a03      	ldr	r2, [pc, #12]	; (800bd88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd7a:	5cd3      	ldrb	r3, [r2, r3]
 800bd7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40023800 	.word	0x40023800
 800bd88:	08016fc8 	.word	0x08016fc8

0800bd8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bd90:	f7ff ffdc 	bl	800bd4c <HAL_RCC_GetHCLKFreq>
 800bd94:	4601      	mov	r1, r0
 800bd96:	4b05      	ldr	r3, [pc, #20]	; (800bdac <HAL_RCC_GetPCLK2Freq+0x20>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	0b5b      	lsrs	r3, r3, #13
 800bd9c:	f003 0307 	and.w	r3, r3, #7
 800bda0:	4a03      	ldr	r2, [pc, #12]	; (800bdb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bda2:	5cd3      	ldrb	r3, [r2, r3]
 800bda4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	40023800 	.word	0x40023800
 800bdb0:	08016fc8 	.word	0x08016fc8

0800bdb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	220f      	movs	r2, #15
 800bdc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bdc4:	4b12      	ldr	r3, [pc, #72]	; (800be10 <HAL_RCC_GetClockConfig+0x5c>)
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f003 0203 	and.w	r2, r3, #3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bdd0:	4b0f      	ldr	r3, [pc, #60]	; (800be10 <HAL_RCC_GetClockConfig+0x5c>)
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bddc:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <HAL_RCC_GetClockConfig+0x5c>)
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bde8:	4b09      	ldr	r3, [pc, #36]	; (800be10 <HAL_RCC_GetClockConfig+0x5c>)
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	08db      	lsrs	r3, r3, #3
 800bdee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bdf6:	4b07      	ldr	r3, [pc, #28]	; (800be14 <HAL_RCC_GetClockConfig+0x60>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f003 020f 	and.w	r2, r3, #15
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	601a      	str	r2, [r3, #0]
}
 800be02:	bf00      	nop
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	40023800 	.word	0x40023800
 800be14:	40023c00 	.word	0x40023c00

0800be18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d012      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be40:	4b69      	ldr	r3, [pc, #420]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	4a68      	ldr	r2, [pc, #416]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be4a:	6093      	str	r3, [r2, #8]
 800be4c:	4b66      	ldr	r3, [pc, #408]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be4e:	689a      	ldr	r2, [r3, #8]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be54:	4964      	ldr	r1, [pc, #400]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be56:	4313      	orrs	r3, r2
 800be58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800be62:	2301      	movs	r3, #1
 800be64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d017      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be72:	4b5d      	ldr	r3, [pc, #372]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be80:	4959      	ldr	r1, [pc, #356]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be82:	4313      	orrs	r3, r2
 800be84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be90:	d101      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800be92:	2301      	movs	r3, #1
 800be94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800be9e:	2301      	movs	r3, #1
 800bea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d017      	beq.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800beae:	4b4e      	ldr	r3, [pc, #312]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800beb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	494a      	ldr	r1, [pc, #296]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800becc:	d101      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bece:	2301      	movs	r3, #1
 800bed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800beda:	2301      	movs	r3, #1
 800bedc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800beea:	2301      	movs	r3, #1
 800beec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 808b 	beq.w	800c012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800befc:	4b3a      	ldr	r3, [pc, #232]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800befe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf00:	4a39      	ldr	r2, [pc, #228]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf06:	6413      	str	r3, [r2, #64]	; 0x40
 800bf08:	4b37      	ldr	r3, [pc, #220]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf10:	60bb      	str	r3, [r7, #8]
 800bf12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bf14:	4b35      	ldr	r3, [pc, #212]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a34      	ldr	r2, [pc, #208]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf20:	f7fa fc44 	bl	80067ac <HAL_GetTick>
 800bf24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bf26:	e008      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf28:	f7fa fc40 	bl	80067ac <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	2b64      	cmp	r3, #100	; 0x64
 800bf34:	d901      	bls.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bf36:	2303      	movs	r3, #3
 800bf38:	e355      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bf3a:	4b2c      	ldr	r3, [pc, #176]	; (800bfec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0f0      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bf46:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d035      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d02e      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf64:	4b20      	ldr	r3, [pc, #128]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bf6e:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf72:	4a1d      	ldr	r2, [pc, #116]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bf7a:	4b1b      	ldr	r3, [pc, #108]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7e:	4a1a      	ldr	r2, [pc, #104]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bf86:	4a18      	ldr	r2, [pc, #96]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bf8c:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf90:	f003 0301 	and.w	r3, r3, #1
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d114      	bne.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf98:	f7fa fc08 	bl	80067ac <HAL_GetTick>
 800bf9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf9e:	e00a      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bfa0:	f7fa fc04 	bl	80067ac <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e317      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ee      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfce:	d111      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bfd0:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bfdc:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bfde:	400b      	ands	r3, r1
 800bfe0:	4901      	ldr	r1, [pc, #4]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	608b      	str	r3, [r1, #8]
 800bfe6:	e00b      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bfe8:	40023800 	.word	0x40023800
 800bfec:	40007000 	.word	0x40007000
 800bff0:	0ffffcff 	.word	0x0ffffcff
 800bff4:	4bb0      	ldr	r3, [pc, #704]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	4aaf      	ldr	r2, [pc, #700]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bffe:	6093      	str	r3, [r2, #8]
 800c000:	4bad      	ldr	r3, [pc, #692]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c00c:	49aa      	ldr	r1, [pc, #680]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0310 	and.w	r3, r3, #16
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d010      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c01e:	4ba6      	ldr	r3, [pc, #664]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c024:	4aa4      	ldr	r2, [pc, #656]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c02a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c02e:	4ba2      	ldr	r3, [pc, #648]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	499f      	ldr	r1, [pc, #636]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c04c:	4b9a      	ldr	r3, [pc, #616]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c05a:	4997      	ldr	r1, [pc, #604]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c06e:	4b92      	ldr	r3, [pc, #584]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c07c:	498e      	ldr	r1, [pc, #568]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00a      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c090:	4b89      	ldr	r3, [pc, #548]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c09e:	4986      	ldr	r1, [pc, #536]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00a      	beq.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0b2:	4b81      	ldr	r3, [pc, #516]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c0:	497d      	ldr	r1, [pc, #500]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00a      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c0d4:	4b78      	ldr	r3, [pc, #480]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0da:	f023 0203 	bic.w	r2, r3, #3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e2:	4975      	ldr	r1, [pc, #468]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c0f6:	4b70      	ldr	r3, [pc, #448]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0fc:	f023 020c 	bic.w	r2, r3, #12
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c104:	496c      	ldr	r1, [pc, #432]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c106:	4313      	orrs	r3, r2
 800c108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00a      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c118:	4b67      	ldr	r3, [pc, #412]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c11e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c126:	4964      	ldr	r1, [pc, #400]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00a      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c13a:	4b5f      	ldr	r3, [pc, #380]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c148:	495b      	ldr	r1, [pc, #364]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00a      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c15c:	4b56      	ldr	r3, [pc, #344]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16a:	4953      	ldr	r1, [pc, #332]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c16c:	4313      	orrs	r3, r2
 800c16e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c17e:	4b4e      	ldr	r3, [pc, #312]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c18c:	494a      	ldr	r1, [pc, #296]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c18e:	4313      	orrs	r3, r2
 800c190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00a      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c1a0:	4b45      	ldr	r3, [pc, #276]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ae:	4942      	ldr	r1, [pc, #264]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c1c2:	4b3d      	ldr	r3, [pc, #244]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1d0:	4939      	ldr	r1, [pc, #228]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1e4:	4b34      	ldr	r3, [pc, #208]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1f2:	4931      	ldr	r1, [pc, #196]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d011      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c206:	4b2c      	ldr	r3, [pc, #176]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c214:	4928      	ldr	r1, [pc, #160]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c216:	4313      	orrs	r3, r2
 800c218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c224:	d101      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c226:	2301      	movs	r3, #1
 800c228:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 0308 	and.w	r3, r3, #8
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c236:	2301      	movs	r3, #1
 800c238:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00a      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c246:	4b1c      	ldr	r3, [pc, #112]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c24c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c254:	4918      	ldr	r1, [pc, #96]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c256:	4313      	orrs	r3, r2
 800c258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c268:	4b13      	ldr	r3, [pc, #76]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c278:	490f      	ldr	r1, [pc, #60]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c27a:	4313      	orrs	r3, r2
 800c27c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d005      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c28e:	f040 80d8 	bne.w	800c442 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c29c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c29e:	f7fa fa85 	bl	80067ac <HAL_GetTick>
 800c2a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2a4:	e00a      	b.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2a6:	f7fa fa81 	bl	80067ac <HAL_GetTick>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	2b64      	cmp	r3, #100	; 0x64
 800c2b2:	d903      	bls.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e196      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800c2b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2bc:	4b6c      	ldr	r3, [pc, #432]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1ee      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d021      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d11d      	bne.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c2dc:	4b64      	ldr	r3, [pc, #400]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2e2:	0c1b      	lsrs	r3, r3, #16
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c2ea:	4b61      	ldr	r3, [pc, #388]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2f0:	0e1b      	lsrs	r3, r3, #24
 800c2f2:	f003 030f 	and.w	r3, r3, #15
 800c2f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	019a      	lsls	r2, r3, #6
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	041b      	lsls	r3, r3, #16
 800c302:	431a      	orrs	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	061b      	lsls	r3, r3, #24
 800c308:	431a      	orrs	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	071b      	lsls	r3, r3, #28
 800c310:	4957      	ldr	r1, [pc, #348]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c312:	4313      	orrs	r3, r2
 800c314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d004      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c32c:	d00a      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c336:	2b00      	cmp	r3, #0
 800c338:	d02e      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c342:	d129      	bne.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c344:	4b4a      	ldr	r3, [pc, #296]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c34a:	0c1b      	lsrs	r3, r3, #16
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c352:	4b47      	ldr	r3, [pc, #284]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c358:	0f1b      	lsrs	r3, r3, #28
 800c35a:	f003 0307 	and.w	r3, r3, #7
 800c35e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	019a      	lsls	r2, r3, #6
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	041b      	lsls	r3, r3, #16
 800c36a:	431a      	orrs	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	061b      	lsls	r3, r3, #24
 800c372:	431a      	orrs	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	071b      	lsls	r3, r3, #28
 800c378:	493d      	ldr	r1, [pc, #244]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c37a:	4313      	orrs	r3, r2
 800c37c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c380:	4b3b      	ldr	r3, [pc, #236]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c386:	f023 021f 	bic.w	r2, r3, #31
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38e:	3b01      	subs	r3, #1
 800c390:	4937      	ldr	r1, [pc, #220]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c392:	4313      	orrs	r3, r2
 800c394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01d      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c3a4:	4b32      	ldr	r3, [pc, #200]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3aa:	0e1b      	lsrs	r3, r3, #24
 800c3ac:	f003 030f 	and.w	r3, r3, #15
 800c3b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c3b2:	4b2f      	ldr	r3, [pc, #188]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b8:	0f1b      	lsrs	r3, r3, #28
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	019a      	lsls	r2, r3, #6
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	041b      	lsls	r3, r3, #16
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	061b      	lsls	r3, r3, #24
 800c3d2:	431a      	orrs	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	071b      	lsls	r3, r3, #28
 800c3d8:	4925      	ldr	r1, [pc, #148]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d011      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	019a      	lsls	r2, r3, #6
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	041b      	lsls	r3, r3, #16
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	061b      	lsls	r3, r3, #24
 800c400:	431a      	orrs	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	071b      	lsls	r3, r3, #28
 800c408:	4919      	ldr	r1, [pc, #100]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c410:	4b17      	ldr	r3, [pc, #92]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a16      	ldr	r2, [pc, #88]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c41a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c41c:	f7fa f9c6 	bl	80067ac <HAL_GetTick>
 800c420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c422:	e008      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c424:	f7fa f9c2 	bl	80067ac <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	2b64      	cmp	r3, #100	; 0x64
 800c430:	d901      	bls.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e0d7      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c436:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0f0      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b01      	cmp	r3, #1
 800c446:	f040 80cd 	bne.w	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a08      	ldr	r2, [pc, #32]	; (800c470 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c456:	f7fa f9a9 	bl	80067ac <HAL_GetTick>
 800c45a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c45c:	e00a      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c45e:	f7fa f9a5 	bl	80067ac <HAL_GetTick>
 800c462:	4602      	mov	r2, r0
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	2b64      	cmp	r3, #100	; 0x64
 800c46a:	d903      	bls.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e0ba      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800c470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c474:	4b5e      	ldr	r3, [pc, #376]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c47c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c480:	d0ed      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d009      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d02e      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d12a      	bne.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c4aa:	4b51      	ldr	r3, [pc, #324]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b0:	0c1b      	lsrs	r3, r3, #16
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c4b8:	4b4d      	ldr	r3, [pc, #308]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4be:	0f1b      	lsrs	r3, r3, #28
 800c4c0:	f003 0307 	and.w	r3, r3, #7
 800c4c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	019a      	lsls	r2, r3, #6
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	041b      	lsls	r3, r3, #16
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	061b      	lsls	r3, r3, #24
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	071b      	lsls	r3, r3, #28
 800c4de:	4944      	ldr	r1, [pc, #272]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c4e6:	4b42      	ldr	r3, [pc, #264]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	021b      	lsls	r3, r3, #8
 800c4f8:	493d      	ldr	r1, [pc, #244]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d022      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c514:	d11d      	bne.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c516:	4b36      	ldr	r3, [pc, #216]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c51c:	0e1b      	lsrs	r3, r3, #24
 800c51e:	f003 030f 	and.w	r3, r3, #15
 800c522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c524:	4b32      	ldr	r3, [pc, #200]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c52a:	0f1b      	lsrs	r3, r3, #28
 800c52c:	f003 0307 	and.w	r3, r3, #7
 800c530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	019a      	lsls	r2, r3, #6
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	431a      	orrs	r2, r3
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	061b      	lsls	r3, r3, #24
 800c544:	431a      	orrs	r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	071b      	lsls	r3, r3, #28
 800c54a:	4929      	ldr	r1, [pc, #164]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c54c:	4313      	orrs	r3, r2
 800c54e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d028      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c55e:	4b24      	ldr	r3, [pc, #144]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c564:	0e1b      	lsrs	r3, r3, #24
 800c566:	f003 030f 	and.w	r3, r3, #15
 800c56a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c56c:	4b20      	ldr	r3, [pc, #128]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c572:	0c1b      	lsrs	r3, r3, #16
 800c574:	f003 0303 	and.w	r3, r3, #3
 800c578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	019a      	lsls	r2, r3, #6
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	041b      	lsls	r3, r3, #16
 800c584:	431a      	orrs	r2, r3
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	061b      	lsls	r3, r3, #24
 800c58a:	431a      	orrs	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	071b      	lsls	r3, r3, #28
 800c592:	4917      	ldr	r1, [pc, #92]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c594:	4313      	orrs	r3, r2
 800c596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c59a:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	4911      	ldr	r1, [pc, #68]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c5b0:	4b0f      	ldr	r3, [pc, #60]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a0e      	ldr	r2, [pc, #56]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5bc:	f7fa f8f6 	bl	80067ac <HAL_GetTick>
 800c5c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5c2:	e008      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c5c4:	f7fa f8f2 	bl	80067ac <HAL_GetTick>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	2b64      	cmp	r3, #100	; 0x64
 800c5d0:	d901      	bls.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e007      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e2:	d1ef      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3720      	adds	r7, #32
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40023800 	.word	0x40023800

0800c5f4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a80      	ldr	r2, [pc, #512]	; (800c804 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800c604:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800c606:	4b80      	ldr	r3, [pc, #512]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c60c:	099b      	lsrs	r3, r3, #6
 800c60e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c616:	4b7c      	ldr	r3, [pc, #496]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c61c:	0c1b      	lsrs	r3, r3, #16
 800c61e:	f003 0203 	and.w	r2, r3, #3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c626:	4b78      	ldr	r3, [pc, #480]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c62c:	0e1b      	lsrs	r3, r3, #24
 800c62e:	f003 020f 	and.w	r2, r3, #15
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c636:	4b74      	ldr	r3, [pc, #464]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c63c:	0f1b      	lsrs	r3, r3, #28
 800c63e:	f003 0207 	and.w	r2, r3, #7
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800c646:	4b70      	ldr	r3, [pc, #448]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c64c:	099b      	lsrs	r3, r3, #6
 800c64e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c656:	4b6c      	ldr	r3, [pc, #432]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65c:	0c1b      	lsrs	r3, r3, #16
 800c65e:	f003 0203 	and.w	r2, r3, #3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c666:	4b68      	ldr	r3, [pc, #416]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66c:	0e1b      	lsrs	r3, r3, #24
 800c66e:	f003 020f 	and.w	r2, r3, #15
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c676:	4b64      	ldr	r3, [pc, #400]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c67c:	0f1b      	lsrs	r3, r3, #28
 800c67e:	f003 0207 	and.w	r2, r3, #7
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800c686:	4b60      	ldr	r3, [pc, #384]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c68c:	f003 021f 	and.w	r2, r3, #31
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800c694:	4b5c      	ldr	r3, [pc, #368]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69a:	0a1b      	lsrs	r3, r3, #8
 800c69c:	f003 021f 	and.w	r2, r3, #31
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800c6a4:	4b58      	ldr	r3, [pc, #352]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6aa:	0c1b      	lsrs	r3, r3, #16
 800c6ac:	f003 0203 	and.w	r2, r3, #3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800c6b4:	4b54      	ldr	r3, [pc, #336]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ba:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800c6c2:	4b51      	ldr	r3, [pc, #324]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6c8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800c6d0:	4b4d      	ldr	r3, [pc, #308]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800c6dc:	4b4a      	ldr	r3, [pc, #296]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800c6ea:	4b47      	ldr	r3, [pc, #284]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f0:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800c6f8:	4b43      	ldr	r3, [pc, #268]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6fe:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800c706:	4b40      	ldr	r3, [pc, #256]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c70c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800c714:	4b3c      	ldr	r3, [pc, #240]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c71a:	f003 0203 	and.w	r2, r3, #3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800c722:	4b39      	ldr	r3, [pc, #228]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c728:	f003 020c 	and.w	r2, r3, #12
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c730:	4b35      	ldr	r3, [pc, #212]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c736:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c73e:	4b32      	ldr	r3, [pc, #200]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c744:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c74c:	4b2e      	ldr	r3, [pc, #184]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c752:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c75a:	4b2b      	ldr	r3, [pc, #172]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c760:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c768:	4b27      	ldr	r3, [pc, #156]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c76e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c776:	4b24      	ldr	r3, [pc, #144]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c77c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c784:	4b20      	ldr	r3, [pc, #128]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c78a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c792:	4b1d      	ldr	r3, [pc, #116]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c798:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c7a0:	4b19      	ldr	r3, [pc, #100]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7a6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c7ae:	4b16      	ldr	r3, [pc, #88]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c7be:	4b12      	ldr	r3, [pc, #72]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c7c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c7c8:	4b0f      	ldr	r3, [pc, #60]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c7d8:	4b0b      	ldr	r3, [pc, #44]	; (800c808 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c7da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d103      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c7ec:	e003      	b.n	800c7f6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	00fffff1 	.word	0x00fffff1
 800c808:	40023800 	.word	0x40023800

0800c80c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b087      	sub	sp, #28
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c818:	2300      	movs	r3, #0
 800c81a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c82a:	f040 8086 	bne.w	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c82e:	4b8d      	ldr	r3, [pc, #564]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c834:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c83c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c844:	d03e      	beq.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800c846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c84a:	d073      	beq.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d000      	beq.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c850:	e074      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c852:	4b84      	ldr	r3, [pc, #528]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d108      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c85e:	4b81      	ldr	r3, [pc, #516]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c866:	4a80      	ldr	r2, [pc, #512]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c868:	fbb2 f3f3 	udiv	r3, r2, r3
 800c86c:	613b      	str	r3, [r7, #16]
 800c86e:	e007      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c870:	4b7c      	ldr	r3, [pc, #496]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c878:	4a7c      	ldr	r2, [pc, #496]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c880:	4b78      	ldr	r3, [pc, #480]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c886:	0e1b      	lsrs	r3, r3, #24
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c88e:	4b75      	ldr	r3, [pc, #468]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c894:	099b      	lsrs	r3, r3, #6
 800c896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	fb02 f203 	mul.w	r2, r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c8a8:	4b6e      	ldr	r3, [pc, #440]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ae:	0a1b      	lsrs	r3, r3, #8
 800c8b0:	f003 031f 	and.w	r3, r3, #31
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8c0:	617b      	str	r3, [r7, #20]
        break;
 800c8c2:	e03b      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c8c4:	4b67      	ldr	r3, [pc, #412]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d108      	bne.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c8d0:	4b64      	ldr	r3, [pc, #400]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d8:	4a63      	ldr	r2, [pc, #396]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8de:	613b      	str	r3, [r7, #16]
 800c8e0:	e007      	b.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c8e2:	4b60      	ldr	r3, [pc, #384]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8ea:	4a60      	ldr	r2, [pc, #384]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c8f2:	4b5c      	ldr	r3, [pc, #368]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f8:	0e1b      	lsrs	r3, r3, #24
 800c8fa:	f003 030f 	and.w	r3, r3, #15
 800c8fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c900:	4b58      	ldr	r3, [pc, #352]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c906:	099b      	lsrs	r3, r3, #6
 800c908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	fb02 f203 	mul.w	r2, r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	fbb2 f3f3 	udiv	r3, r2, r3
 800c918:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c91a:	4b52      	ldr	r3, [pc, #328]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c91c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c920:	f003 031f 	and.w	r3, r3, #31
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c930:	617b      	str	r3, [r7, #20]
        break;
 800c932:	e003      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c934:	4b4e      	ldr	r3, [pc, #312]	; (800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c936:	617b      	str	r3, [r7, #20]
        break;
 800c938:	e000      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800c93a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c942:	f040 8086 	bne.w	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c946:	4b47      	ldr	r3, [pc, #284]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c94c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c954:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c95c:	d03e      	beq.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c95e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c962:	d073      	beq.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c964:	2b00      	cmp	r3, #0
 800c966:	d000      	beq.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c968:	e074      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c96a:	4b3e      	ldr	r3, [pc, #248]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d108      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c976:	4b3b      	ldr	r3, [pc, #236]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c97e:	4a3a      	ldr	r2, [pc, #232]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c980:	fbb2 f3f3 	udiv	r3, r2, r3
 800c984:	613b      	str	r3, [r7, #16]
 800c986:	e007      	b.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c988:	4b36      	ldr	r3, [pc, #216]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c990:	4a36      	ldr	r2, [pc, #216]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800c992:	fbb2 f3f3 	udiv	r3, r2, r3
 800c996:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c998:	4b32      	ldr	r3, [pc, #200]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c99e:	0e1b      	lsrs	r3, r3, #24
 800c9a0:	f003 030f 	and.w	r3, r3, #15
 800c9a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ac:	099b      	lsrs	r3, r3, #6
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	fb02 f203 	mul.w	r2, r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c9c0:	4b28      	ldr	r3, [pc, #160]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9c6:	0a1b      	lsrs	r3, r3, #8
 800c9c8:	f003 031f 	and.w	r3, r3, #31
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9d8:	617b      	str	r3, [r7, #20]
        break;
 800c9da:	e03b      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c9dc:	4b21      	ldr	r3, [pc, #132]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d108      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9f0:	4a1d      	ldr	r2, [pc, #116]	; (800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800c9f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f6:	613b      	str	r3, [r7, #16]
 800c9f8:	e007      	b.n	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca02:	4a1a      	ldr	r2, [pc, #104]	; (800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800ca04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ca0a:	4b16      	ldr	r3, [pc, #88]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca10:	0e1b      	lsrs	r3, r3, #24
 800ca12:	f003 030f 	and.w	r3, r3, #15
 800ca16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ca18:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca1e:	099b      	lsrs	r3, r3, #6
 800ca20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	fb02 f203 	mul.w	r2, r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800ca34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca38:	f003 031f 	and.w	r3, r3, #31
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	617b      	str	r3, [r7, #20]
        break;
 800ca4a:	e003      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca4c:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800ca4e:	617b      	str	r3, [r7, #20]
        break;
 800ca50:	e000      	b.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800ca52:	bf00      	nop

  return frequency;
 800ca54:	697b      	ldr	r3, [r7, #20]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	40023800 	.word	0x40023800
 800ca68:	00f42400 	.word	0x00f42400
 800ca6c:	017d7840 	.word	0x017d7840
 800ca70:	00bb8000 	.word	0x00bb8000

0800ca74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e06b      	b.n	800cb5e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7f5b      	ldrb	r3, [r3, #29]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d105      	bne.n	800ca9c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7f6 faba 	bl	8003010 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2202      	movs	r2, #2
 800caa0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	22ca      	movs	r2, #202	; 0xca
 800caa8:	625a      	str	r2, [r3, #36]	; 0x24
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2253      	movs	r2, #83	; 0x53
 800cab0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fb00 	bl	800d0b8 <RTC_EnterInitMode>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d008      	beq.n	800cad0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	22ff      	movs	r2, #255	; 0xff
 800cac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2204      	movs	r2, #4
 800caca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e046      	b.n	800cb5e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6899      	ldr	r1, [r3, #8]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <HAL_RTC_Init+0xf4>)
 800cadc:	400b      	ands	r3, r1
 800cade:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6899      	ldr	r1, [r3, #8]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	431a      	orrs	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	431a      	orrs	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	430a      	orrs	r2, r1
 800cafc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	68d2      	ldr	r2, [r2, #12]
 800cb06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6919      	ldr	r1, [r3, #16]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	041a      	lsls	r2, r3, #16
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb2a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f022 0208 	bic.w	r2, r2, #8
 800cb3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	699a      	ldr	r2, [r3, #24]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	22ff      	movs	r2, #255	; 0xff
 800cb54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
  }
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	ff8fffbf 	.word	0xff8fffbf

0800cb6c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cb6c:	b590      	push	{r4, r7, lr}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7f1b      	ldrb	r3, [r3, #28]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d101      	bne.n	800cb88 <HAL_RTC_SetTime+0x1c>
 800cb84:	2302      	movs	r3, #2
 800cb86:	e0a8      	b.n	800ccda <HAL_RTC_SetTime+0x16e>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2202      	movs	r2, #2
 800cb92:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d126      	bne.n	800cbe8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d102      	bne.n	800cbae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 faac 	bl	800d110 <RTC_ByteToBcd2>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	785b      	ldrb	r3, [r3, #1]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 faa5 	bl	800d110 <RTC_ByteToBcd2>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cbca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fa9d 	bl	800d110 <RTC_ByteToBcd2>
 800cbd6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800cbd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	7b1b      	ldrb	r3, [r3, #12]
 800cbe0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e018      	b.n	800cc1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cc08:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800cc0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	7b1b      	ldrb	r3, [r3, #12]
 800cc14:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800cc16:	4313      	orrs	r3, r2
 800cc18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	22ca      	movs	r2, #202	; 0xca
 800cc20:	625a      	str	r2, [r3, #36]	; 0x24
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2253      	movs	r2, #83	; 0x53
 800cc28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 fa44 	bl	800d0b8 <RTC_EnterInitMode>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00b      	beq.n	800cc4e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	22ff      	movs	r2, #255	; 0xff
 800cc3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2204      	movs	r2, #4
 800cc42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e045      	b.n	800ccda <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	6979      	ldr	r1, [r7, #20]
 800cc54:	4b23      	ldr	r3, [pc, #140]	; (800cce4 <HAL_RTC_SetTime+0x178>)
 800cc56:	400b      	ands	r3, r1
 800cc58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	689a      	ldr	r2, [r3, #8]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cc68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6899      	ldr	r1, [r3, #8]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	691a      	ldr	r2, [r3, #16]
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68da      	ldr	r2, [r3, #12]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d111      	bne.n	800ccc4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f000 f9e1 	bl	800d068 <HAL_RTC_WaitForSynchro>
 800cca6:	4603      	mov	r3, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00b      	beq.n	800ccc4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	22ff      	movs	r2, #255	; 0xff
 800ccb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2204      	movs	r2, #4
 800ccb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e00a      	b.n	800ccda <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	22ff      	movs	r2, #255	; 0xff
 800ccca:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
  }
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	371c      	adds	r7, #28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd90      	pop	{r4, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	007f7f7f 	.word	0x007f7f7f

0800cce8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cce8:	b590      	push	{r4, r7, lr}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	7f1b      	ldrb	r3, [r3, #28]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d101      	bne.n	800cd04 <HAL_RTC_SetDate+0x1c>
 800cd00:	2302      	movs	r3, #2
 800cd02:	e092      	b.n	800ce2a <HAL_RTC_SetDate+0x142>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10e      	bne.n	800cd34 <HAL_RTC_SetDate+0x4c>
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	785b      	ldrb	r3, [r3, #1]
 800cd1a:	f003 0310 	and.w	r3, r3, #16
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	785b      	ldrb	r3, [r3, #1]
 800cd26:	f023 0310 	bic.w	r3, r3, #16
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	330a      	adds	r3, #10
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d11c      	bne.n	800cd74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	78db      	ldrb	r3, [r3, #3]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f9e6 	bl	800d110 <RTC_ByteToBcd2>
 800cd44:	4603      	mov	r3, r0
 800cd46:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	785b      	ldrb	r3, [r3, #1]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f9df 	bl	800d110 <RTC_ByteToBcd2>
 800cd52:	4603      	mov	r3, r0
 800cd54:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cd56:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	789b      	ldrb	r3, [r3, #2]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f9d7 	bl	800d110 <RTC_ByteToBcd2>
 800cd62:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cd64:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	e00e      	b.n	800cd92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	78db      	ldrb	r3, [r3, #3]
 800cd78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800cd86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	22ca      	movs	r2, #202	; 0xca
 800cd98:	625a      	str	r2, [r3, #36]	; 0x24
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2253      	movs	r2, #83	; 0x53
 800cda0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 f988 	bl	800d0b8 <RTC_EnterInitMode>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00b      	beq.n	800cdc6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	22ff      	movs	r2, #255	; 0xff
 800cdb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2204      	movs	r2, #4
 800cdba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e031      	b.n	800ce2a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	6979      	ldr	r1, [r7, #20]
 800cdcc:	4b19      	ldr	r3, [pc, #100]	; (800ce34 <HAL_RTC_SetDate+0x14c>)
 800cdce:	400b      	ands	r3, r1
 800cdd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68da      	ldr	r2, [r3, #12]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cde0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d111      	bne.n	800ce14 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 f939 	bl	800d068 <HAL_RTC_WaitForSynchro>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	22ff      	movs	r2, #255	; 0xff
 800ce02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2204      	movs	r2, #4
 800ce08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e00a      	b.n	800ce2a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	22ff      	movs	r2, #255	; 0xff
 800ce1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ce28:	2300      	movs	r3, #0
  }
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd90      	pop	{r4, r7, pc}
 800ce32:	bf00      	nop
 800ce34:	00ffff3f 	.word	0x00ffff3f

0800ce38 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b089      	sub	sp, #36	; 0x24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	7f1b      	ldrb	r3, [r3, #28]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d101      	bne.n	800ce5c <HAL_RTC_SetAlarm+0x24>
 800ce58:	2302      	movs	r3, #2
 800ce5a:	e101      	b.n	800d060 <HAL_RTC_SetAlarm+0x228>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2202      	movs	r2, #2
 800ce66:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d137      	bne.n	800cede <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f942 	bl	800d110 <RTC_ByteToBcd2>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 f93b 	bl	800d110 <RTC_ByteToBcd2>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ce9e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	789b      	ldrb	r3, [r3, #2]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f000 f933 	bl	800d110 <RTC_ByteToBcd2>
 800ceaa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ceac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	7b1b      	ldrb	r3, [r3, #12]
 800ceb4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ceb6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 f925 	bl	800d110 <RTC_ByteToBcd2>
 800cec6:	4603      	mov	r3, r0
 800cec8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ceca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800ced2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ced8:	4313      	orrs	r3, r2
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	e023      	b.n	800cf26 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	785b      	ldrb	r3, [r3, #1]
 800cefc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cefe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cf04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	7b1b      	ldrb	r3, [r3, #12]
 800cf0a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cf0c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cf16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cf1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cf22:	4313      	orrs	r3, r2
 800cf24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	22ca      	movs	r2, #202	; 0xca
 800cf38:	625a      	str	r2, [r3, #36]	; 0x24
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2253      	movs	r2, #83	; 0x53
 800cf40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf4a:	d13f      	bne.n	800cfcc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf5a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf6a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf6c:	f7f9 fc1e 	bl	80067ac <HAL_GetTick>
 800cf70:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cf72:	e013      	b.n	800cf9c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf74:	f7f9 fc1a 	bl	80067ac <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf82:	d90b      	bls.n	800cf9c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	22ff      	movs	r2, #255	; 0xff
 800cf8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e061      	b.n	800d060 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0e4      	beq.n	800cf74 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	69fa      	ldr	r2, [r7, #28]
 800cfb0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	689a      	ldr	r2, [r3, #8]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfc8:	609a      	str	r2, [r3, #8]
 800cfca:	e03e      	b.n	800d04a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	689a      	ldr	r2, [r3, #8]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cfda:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfea:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cfec:	f7f9 fbde 	bl	80067ac <HAL_GetTick>
 800cff0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800cff2:	e013      	b.n	800d01c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cff4:	f7f9 fbda 	bl	80067ac <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d002:	d90b      	bls.n	800d01c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	22ff      	movs	r2, #255	; 0xff
 800d00a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2203      	movs	r2, #3
 800d010:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d018:	2303      	movs	r3, #3
 800d01a:	e021      	b.n	800d060 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	f003 0302 	and.w	r3, r3, #2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0e4      	beq.n	800cff4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	69fa      	ldr	r2, [r7, #28]
 800d030:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	689a      	ldr	r2, [r3, #8]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d048:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	22ff      	movs	r2, #255	; 0xff
 800d050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2201      	movs	r2, #1
 800d056:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2200      	movs	r2, #0
 800d05c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3724      	adds	r7, #36	; 0x24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd90      	pop	{r4, r7, pc}

0800d068 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d082:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d084:	f7f9 fb92 	bl	80067ac <HAL_GetTick>
 800d088:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d08a:	e009      	b.n	800d0a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d08c:	f7f9 fb8e 	bl	80067ac <HAL_GetTick>
 800d090:	4602      	mov	r2, r0
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d09a:	d901      	bls.n	800d0a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e007      	b.n	800d0b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0ee      	beq.n	800d08c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d119      	bne.n	800d106 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d0dc:	f7f9 fb66 	bl	80067ac <HAL_GetTick>
 800d0e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0e2:	e009      	b.n	800d0f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d0e4:	f7f9 fb62 	bl	80067ac <HAL_GetTick>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0f2:	d901      	bls.n	800d0f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e007      	b.n	800d108 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0ee      	beq.n	800d0e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d11e:	e005      	b.n	800d12c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3301      	adds	r3, #1
 800d124:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	3b0a      	subs	r3, #10
 800d12a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b09      	cmp	r3, #9
 800d130:	d8f6      	bhi.n	800d120 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	b2db      	uxtb	r3, r3
 800d136:	011b      	lsls	r3, r3, #4
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	b2db      	uxtb	r3, r3
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d158:	2300      	movs	r3, #0
 800d15a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	7f1b      	ldrb	r3, [r3, #28]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d101      	bne.n	800d168 <HAL_RTCEx_SetTimeStamp+0x1c>
 800d164:	2302      	movs	r3, #2
 800d166:	e03e      	b.n	800d1e6 <HAL_RTCEx_SetTimeStamp+0x9a>
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2201      	movs	r2, #1
 800d16c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2202      	movs	r2, #2
 800d172:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689a      	ldr	r2, [r3, #8]
 800d17a:	4b1e      	ldr	r3, [pc, #120]	; (800d1f4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d17c:	4013      	ands	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	4313      	orrs	r3, r2
 800d186:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	22ca      	movs	r2, #202	; 0xca
 800d18e:	625a      	str	r2, [r3, #36]	; 0x24
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2253      	movs	r2, #83	; 0x53
 800d196:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0206 	bic.w	r2, r2, #6
 800d1a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	697a      	ldr	r2, [r7, #20]
 800d1be:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	689a      	ldr	r2, [r3, #8]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	22ff      	movs	r2, #255	; 0xff
 800d1d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	fffff7f7 	.word	0xfffff7f7

0800d1f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b088      	sub	sp, #32
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e149      	b.n	800d4aa <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d106      	bne.n	800d230 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7f6 f9d6 	bl	80035dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2202      	movs	r2, #2
 800d234:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa57 	bl	800d6ec <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d007      	beq.n	800d256 <HAL_SAI_Init+0x5e>
 800d246:	2b01      	cmp	r3, #1
 800d248:	d302      	bcc.n	800d250 <HAL_SAI_Init+0x58>
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	d006      	beq.n	800d25c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800d24e:	e008      	b.n	800d262 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	61fb      	str	r3, [r7, #28]
      break;
 800d254:	e005      	b.n	800d262 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d256:	2310      	movs	r3, #16
 800d258:	61fb      	str	r3, [r7, #28]
      break;
 800d25a:	e002      	b.n	800d262 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d25c:	2320      	movs	r3, #32
 800d25e:	61fb      	str	r3, [r7, #28]
      break;
 800d260:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d81d      	bhi.n	800d2a6 <HAL_SAI_Init+0xae>
 800d26a:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <HAL_SAI_Init+0x78>)
 800d26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d287 	.word	0x0800d287
 800d278:	0800d28f 	.word	0x0800d28f
 800d27c:	0800d297 	.word	0x0800d297
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	617b      	str	r3, [r7, #20]
      }
      break;
 800d284:	e010      	b.n	800d2a8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800d286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d28a:	617b      	str	r3, [r7, #20]
      }
      break;
 800d28c:	e00c      	b.n	800d2a8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d28e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d292:	617b      	str	r3, [r7, #20]
      }
      break;
 800d294:	e008      	b.n	800d2a8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800d296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d29a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	f043 0301 	orr.w	r3, r3, #1
 800d2a2:	61fb      	str	r3, [r7, #28]
      }
      break;
 800d2a4:	e000      	b.n	800d2a8 <HAL_SAI_Init+0xb0>
  default:
    break;
 800d2a6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a81      	ldr	r2, [pc, #516]	; (800d4b4 <HAL_SAI_Init+0x2bc>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d004      	beq.n	800d2bc <HAL_SAI_Init+0xc4>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a80      	ldr	r2, [pc, #512]	; (800d4b8 <HAL_SAI_Init+0x2c0>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d103      	bne.n	800d2c4 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800d2bc:	4a7f      	ldr	r2, [pc, #508]	; (800d4bc <HAL_SAI_Init+0x2c4>)
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	e002      	b.n	800d2ca <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d2c4:	4a7e      	ldr	r2, [pc, #504]	; (800d4c0 <HAL_SAI_Init+0x2c8>)
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d043      	beq.n	800d35a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a76      	ldr	r2, [pc, #472]	; (800d4b4 <HAL_SAI_Init+0x2bc>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d004      	beq.n	800d2ea <HAL_SAI_Init+0xf2>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a74      	ldr	r2, [pc, #464]	; (800d4b8 <HAL_SAI_Init+0x2c0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d104      	bne.n	800d2f4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d2ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d2ee:	f7ff fa8d 	bl	800c80c <HAL_RCCEx_GetPeriphCLKFreq>
 800d2f2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a72      	ldr	r2, [pc, #456]	; (800d4c4 <HAL_SAI_Init+0x2cc>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d004      	beq.n	800d308 <HAL_SAI_Init+0x110>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a71      	ldr	r2, [pc, #452]	; (800d4c8 <HAL_SAI_Init+0x2d0>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d104      	bne.n	800d312 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d308:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d30c:	f7ff fa7e 	bl	800c80c <HAL_RCCEx_GetPeriphCLKFreq>
 800d310:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	4613      	mov	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	461a      	mov	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	69db      	ldr	r3, [r3, #28]
 800d322:	025b      	lsls	r3, r3, #9
 800d324:	fbb2 f3f3 	udiv	r3, r2, r3
 800d328:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4a67      	ldr	r2, [pc, #412]	; (800d4cc <HAL_SAI_Init+0x2d4>)
 800d32e:	fba2 2303 	umull	r2, r3, r2, r3
 800d332:	08da      	lsrs	r2, r3, #3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800d338:	68f9      	ldr	r1, [r7, #12]
 800d33a:	4b64      	ldr	r3, [pc, #400]	; (800d4cc <HAL_SAI_Init+0x2d4>)
 800d33c:	fba3 2301 	umull	r2, r3, r3, r1
 800d340:	08da      	lsrs	r2, r3, #3
 800d342:	4613      	mov	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	1aca      	subs	r2, r1, r3
 800d34c:	2a08      	cmp	r2, #8
 800d34e:	d904      	bls.n	800d35a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d003      	beq.n	800d36a <HAL_SAI_Init+0x172>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	2b02      	cmp	r3, #2
 800d368:	d109      	bne.n	800d37e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d101      	bne.n	800d376 <HAL_SAI_Init+0x17e>
 800d372:	2300      	movs	r3, #0
 800d374:	e001      	b.n	800d37a <HAL_SAI_Init+0x182>
 800d376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d37a:	61bb      	str	r3, [r7, #24]
 800d37c:	e008      	b.n	800d390 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d102      	bne.n	800d38c <HAL_SAI_Init+0x194>
 800d386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d38a:	e000      	b.n	800d38e <HAL_SAI_Init+0x196>
 800d38c:	2300      	movs	r3, #0
 800d38e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	4b4d      	ldr	r3, [pc, #308]	; (800d4d0 <HAL_SAI_Init+0x2d8>)
 800d39c:	400b      	ands	r3, r1
 800d39e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6819      	ldr	r1, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ae:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d3b4:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ba:	431a      	orrs	r2, r3
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800d3c8:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d3d4:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a1b      	ldr	r3, [r3, #32]
 800d3da:	051b      	lsls	r3, r3, #20
 800d3dc:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6859      	ldr	r1, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	4b38      	ldr	r3, [pc, #224]	; (800d4d4 <HAL_SAI_Init+0x2dc>)
 800d3f2:	400b      	ands	r3, r1
 800d3f4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6859      	ldr	r1, [r3, #4]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	699a      	ldr	r2, [r3, #24]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d404:	431a      	orrs	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40a:	431a      	orrs	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	430a      	orrs	r2, r1
 800d412:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6899      	ldr	r1, [r3, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	4b2e      	ldr	r3, [pc, #184]	; (800d4d8 <HAL_SAI_Init+0x2e0>)
 800d420:	400b      	ands	r3, r1
 800d422:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6899      	ldr	r1, [r3, #8]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d434:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800d43a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800d440:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d446:	3b01      	subs	r3, #1
 800d448:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800d44a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	430a      	orrs	r2, r1
 800d452:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68d9      	ldr	r1, [r3, #12]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d462:	400b      	ands	r3, r1
 800d464:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68d9      	ldr	r1, [r3, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d474:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d47a:	041b      	lsls	r3, r3, #16
 800d47c:	431a      	orrs	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d482:	3b01      	subs	r3, #1
 800d484:	021b      	lsls	r3, r3, #8
 800d486:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	430a      	orrs	r2, r1
 800d48e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3720      	adds	r7, #32
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	40015804 	.word	0x40015804
 800d4b8:	40015824 	.word	0x40015824
 800d4bc:	40015800 	.word	0x40015800
 800d4c0:	40015c00 	.word	0x40015c00
 800d4c4:	40015c04 	.word	0x40015c04
 800d4c8:	40015c24 	.word	0x40015c24
 800d4cc:	cccccccd 	.word	0xcccccccd
 800d4d0:	ff05c010 	.word	0xff05c010
 800d4d4:	ffff1ff0 	.word	0xffff1ff0
 800d4d8:	fff88000 	.word	0xfff88000

0800d4dc <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e027      	b.n	800d53e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f04f 32ff 	mov.w	r2, #4294967295
 800d506:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f8ef 	bl	800d6ec <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f042 0208 	orr.w	r2, r2, #8
 800d51c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7f6 f8c6 	bl	80036b0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	4613      	mov	r3, r2
 800d554:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <HAL_SAI_Receive_DMA+0x1a>
 800d55c:	88fb      	ldrh	r3, [r7, #6]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d101      	bne.n	800d566 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e074      	b.n	800d650 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d16d      	bne.n	800d64e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d101      	bne.n	800d580 <HAL_SAI_Receive_DMA+0x38>
 800d57c:	2302      	movs	r3, #2
 800d57e:	e067      	b.n	800d650 <HAL_SAI_Receive_DMA+0x108>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	88fa      	ldrh	r2, [r7, #6]
 800d592:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	88fa      	ldrh	r2, [r7, #6]
 800d59a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2222      	movs	r2, #34	; 0x22
 800d5aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b2:	4a29      	ldr	r2, [pc, #164]	; (800d658 <HAL_SAI_Receive_DMA+0x110>)
 800d5b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ba:	4a28      	ldr	r2, [pc, #160]	; (800d65c <HAL_SAI_Receive_DMA+0x114>)
 800d5bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5c2:	4a27      	ldr	r2, [pc, #156]	; (800d660 <HAL_SAI_Receive_DMA+0x118>)
 800d5c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	331c      	adds	r3, #28
 800d5d8:	4619      	mov	r1, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5de:	461a      	mov	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5e6:	f7f9 fee9 	bl	80073bc <HAL_DMA_Start_IT>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e029      	b.n	800d650 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d107      	bne.n	800d61a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d618:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d61a:	2100      	movs	r1, #0
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f000 f82f 	bl	800d680 <SAI_InterruptFlag>
 800d622:	4601      	mov	r1, r0
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	430a      	orrs	r2, r1
 800d630:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d640:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	e000      	b.n	800d650 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800d64e:	2302      	movs	r3, #2
  }
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	0800d7b9 	.word	0x0800d7b9
 800d65c:	0800d759 	.word	0x0800d759
 800d660:	0800d7d5 	.word	0x0800d7d5

0800d664 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d672:	b2db      	uxtb	r3, r3
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d103      	bne.n	800d69c <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f043 0308 	orr.w	r3, r3, #8
 800d69a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d10b      	bne.n	800d6bc <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d6a8:	2b03      	cmp	r3, #3
 800d6aa:	d003      	beq.n	800d6b4 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d103      	bne.n	800d6bc <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f043 0310 	orr.w	r3, r3, #16
 800d6ba:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d003      	beq.n	800d6cc <SAI_InterruptFlag+0x4c>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d104      	bne.n	800d6d6 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	e003      	b.n	800d6de <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f043 0304 	orr.w	r3, r3, #4
 800d6dc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800d6de:	68fb      	ldr	r3, [r7, #12]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d6ec:	b490      	push	{r4, r7}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800d6f4:	4b16      	ldr	r3, [pc, #88]	; (800d750 <SAI_Disable+0x64>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a16      	ldr	r2, [pc, #88]	; (800d754 <SAI_Disable+0x68>)
 800d6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fe:	0b1b      	lsrs	r3, r3, #12
 800d700:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d714:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d716:	4623      	mov	r3, r4
 800d718:	1e5c      	subs	r4, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d72e:	2303      	movs	r3, #3
 800d730:	73fb      	strb	r3, [r7, #15]
      break;
 800d732:	e006      	b.n	800d742 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e9      	bne.n	800d716 <SAI_Disable+0x2a>

  return status;
 800d742:	7bfb      	ldrb	r3, [r7, #15]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bc90      	pop	{r4, r7}
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	20000000 	.word	0x20000000
 800d754:	95cbec1b 	.word	0x95cbec1b

0800d758 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d76e:	d01c      	beq.n	800d7aa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d77e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d788:	2100      	movs	r1, #0
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f7ff ff78 	bl	800d680 <SAI_InterruptFlag>
 800d790:	4603      	mov	r3, r0
 800d792:	43d9      	mvns	r1, r3
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	691a      	ldr	r2, [r3, #16]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	400a      	ands	r2, r1
 800d7a0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7f7 ff7c 	bl	80056a8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f7f7 ff78 	bl	80056bc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d7cc:	bf00      	nop
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d004      	beq.n	800d806 <SAI_DMAError+0x32>
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d802:	2b01      	cmp	r3, #1
 800d804:	d112      	bne.n	800d82c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d814:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7ff ff68 	bl	800d6ec <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7f7 fd5d 	bl	80052ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800d832:	bf00      	nop
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e025      	b.n	800d89a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7f5 feb0 	bl	80035c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	3304      	adds	r3, #4
 800d878:	4619      	mov	r1, r3
 800d87a:	4610      	mov	r0, r2
 800d87c:	f001 fdea 	bl	800f454 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6818      	ldr	r0, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	461a      	mov	r2, r3
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	f001 fe54 	bl	800f538 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	60f8      	str	r0, [r7, #12]
 800d8aa:	60b9      	str	r1, [r7, #8]
 800d8ac:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d101      	bne.n	800d8be <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	e018      	b.n	800d8f0 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 feb2 	bl	800f638 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d104      	bne.n	800d8e6 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2205      	movs	r2, #5
 800d8e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800d8e4:	e003      	b.n	800d8ee <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d101      	bne.n	800d912 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d90e:	2302      	movs	r3, #2
 800d910:	e00e      	b.n	800d930 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2202      	movs	r2, #2
 800d916:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	4618      	mov	r0, r3
 800d922:	f001 feaa 	bl	800f67a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d101      	bne.n	800d94a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e04c      	b.n	800d9e4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d106      	bne.n	800d964 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7f5 fb70 	bl	8003044 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f022 0203 	bic.w	r2, r2, #3
 800d97a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4b19      	ldr	r3, [pc, #100]	; (800d9ec <HAL_SPDIFRX_Init+0xb4>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d994:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d99a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d9a0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d9a6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d9ac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d9b2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d9b8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800d9be:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800d9c4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	fff88407 	.word	0xfff88407

0800d9f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e01d      	b.n	800da3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7f5 fb56 	bl	80030c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2202      	movs	r2, #2
 800da20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f000 fb78 	bl	800e124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68da      	ldr	r2, [r3, #12]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f042 0201 	orr.w	r2, r2, #1
 800da5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <HAL_TIM_Base_Start_IT+0x50>)
 800da68:	4013      	ands	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b06      	cmp	r3, #6
 800da70:	d00b      	beq.n	800da8a <HAL_TIM_Base_Start_IT+0x42>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da78:	d007      	beq.n	800da8a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f042 0201 	orr.w	r2, r2, #1
 800da88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	00010007 	.word	0x00010007

0800da9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e01d      	b.n	800daea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7f5 fb6e 	bl	80031a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3304      	adds	r3, #4
 800dad8:	4619      	mov	r1, r3
 800dada:	4610      	mov	r0, r2
 800dadc:	f000 fb22 	bl	800e124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	f003 0302 	and.w	r3, r3, #2
 800db04:	2b02      	cmp	r3, #2
 800db06:	d122      	bne.n	800db4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b02      	cmp	r3, #2
 800db14:	d11b      	bne.n	800db4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f06f 0202 	mvn.w	r2, #2
 800db1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	f003 0303 	and.w	r3, r3, #3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fad7 	bl	800e0e8 <HAL_TIM_IC_CaptureCallback>
 800db3a:	e005      	b.n	800db48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fac9 	bl	800e0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fada 	bl	800e0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	f003 0304 	and.w	r3, r3, #4
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d122      	bne.n	800dba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b04      	cmp	r3, #4
 800db68:	d11b      	bne.n	800dba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f06f 0204 	mvn.w	r2, #4
 800db72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2202      	movs	r2, #2
 800db78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	699b      	ldr	r3, [r3, #24]
 800db80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 faad 	bl	800e0e8 <HAL_TIM_IC_CaptureCallback>
 800db8e:	e005      	b.n	800db9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fa9f 	bl	800e0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fab0 	bl	800e0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	f003 0308 	and.w	r3, r3, #8
 800dbac:	2b08      	cmp	r3, #8
 800dbae:	d122      	bne.n	800dbf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	2b08      	cmp	r3, #8
 800dbbc:	d11b      	bne.n	800dbf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f06f 0208 	mvn.w	r2, #8
 800dbc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2204      	movs	r2, #4
 800dbcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	f003 0303 	and.w	r3, r3, #3
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d003      	beq.n	800dbe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fa83 	bl	800e0e8 <HAL_TIM_IC_CaptureCallback>
 800dbe2:	e005      	b.n	800dbf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fa75 	bl	800e0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 fa86 	bl	800e0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	f003 0310 	and.w	r3, r3, #16
 800dc00:	2b10      	cmp	r3, #16
 800dc02:	d122      	bne.n	800dc4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	f003 0310 	and.w	r3, r3, #16
 800dc0e:	2b10      	cmp	r3, #16
 800dc10:	d11b      	bne.n	800dc4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f06f 0210 	mvn.w	r2, #16
 800dc1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2208      	movs	r2, #8
 800dc20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fa59 	bl	800e0e8 <HAL_TIM_IC_CaptureCallback>
 800dc36:	e005      	b.n	800dc44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fa4b 	bl	800e0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fa5c 	bl	800e0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d10e      	bne.n	800dc76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d107      	bne.n	800dc76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f06f 0201 	mvn.w	r2, #1
 800dc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7f4 fe25 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc80:	2b80      	cmp	r3, #128	; 0x80
 800dc82:	d10e      	bne.n	800dca2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc8e:	2b80      	cmp	r3, #128	; 0x80
 800dc90:	d107      	bne.n	800dca2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 feef 	bl	800ea80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcb0:	d10e      	bne.n	800dcd0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcbc:	2b80      	cmp	r3, #128	; 0x80
 800dcbe:	d107      	bne.n	800dcd0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dcc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fee2 	bl	800ea94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcda:	2b40      	cmp	r3, #64	; 0x40
 800dcdc:	d10e      	bne.n	800dcfc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce8:	2b40      	cmp	r3, #64	; 0x40
 800dcea:	d107      	bne.n	800dcfc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dcf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa0a 	bl	800e110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	f003 0320 	and.w	r3, r3, #32
 800dd06:	2b20      	cmp	r3, #32
 800dd08:	d10e      	bne.n	800dd28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	f003 0320 	and.w	r3, r3, #32
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d107      	bne.n	800dd28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f06f 0220 	mvn.w	r2, #32
 800dd20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fea2 	bl	800ea6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd28:	bf00      	nop
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d101      	bne.n	800dd4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dd46:	2302      	movs	r3, #2
 800dd48:	e105      	b.n	800df56 <HAL_TIM_PWM_ConfigChannel+0x226>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2202      	movs	r2, #2
 800dd56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b14      	cmp	r3, #20
 800dd5e:	f200 80f0 	bhi.w	800df42 <HAL_TIM_PWM_ConfigChannel+0x212>
 800dd62:	a201      	add	r2, pc, #4	; (adr r2, 800dd68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800dd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd68:	0800ddbd 	.word	0x0800ddbd
 800dd6c:	0800df43 	.word	0x0800df43
 800dd70:	0800df43 	.word	0x0800df43
 800dd74:	0800df43 	.word	0x0800df43
 800dd78:	0800ddfd 	.word	0x0800ddfd
 800dd7c:	0800df43 	.word	0x0800df43
 800dd80:	0800df43 	.word	0x0800df43
 800dd84:	0800df43 	.word	0x0800df43
 800dd88:	0800de3f 	.word	0x0800de3f
 800dd8c:	0800df43 	.word	0x0800df43
 800dd90:	0800df43 	.word	0x0800df43
 800dd94:	0800df43 	.word	0x0800df43
 800dd98:	0800de7f 	.word	0x0800de7f
 800dd9c:	0800df43 	.word	0x0800df43
 800dda0:	0800df43 	.word	0x0800df43
 800dda4:	0800df43 	.word	0x0800df43
 800dda8:	0800dec1 	.word	0x0800dec1
 800ddac:	0800df43 	.word	0x0800df43
 800ddb0:	0800df43 	.word	0x0800df43
 800ddb4:	0800df43 	.word	0x0800df43
 800ddb8:	0800df01 	.word	0x0800df01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68b9      	ldr	r1, [r7, #8]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fa4e 	bl	800e264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	699a      	ldr	r2, [r3, #24]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f042 0208 	orr.w	r2, r2, #8
 800ddd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	699a      	ldr	r2, [r3, #24]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f022 0204 	bic.w	r2, r2, #4
 800dde6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6999      	ldr	r1, [r3, #24]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	691a      	ldr	r2, [r3, #16]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	619a      	str	r2, [r3, #24]
      break;
 800ddfa:	e0a3      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68b9      	ldr	r1, [r7, #8]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 faa0 	bl	800e348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	699a      	ldr	r2, [r3, #24]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	699a      	ldr	r2, [r3, #24]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6999      	ldr	r1, [r3, #24]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	021a      	lsls	r2, r3, #8
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	430a      	orrs	r2, r1
 800de3a:	619a      	str	r2, [r3, #24]
      break;
 800de3c:	e082      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68b9      	ldr	r1, [r7, #8]
 800de44:	4618      	mov	r0, r3
 800de46:	f000 faf7 	bl	800e438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69da      	ldr	r2, [r3, #28]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f042 0208 	orr.w	r2, r2, #8
 800de58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f022 0204 	bic.w	r2, r2, #4
 800de68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69d9      	ldr	r1, [r3, #28]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	691a      	ldr	r2, [r3, #16]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	430a      	orrs	r2, r1
 800de7a:	61da      	str	r2, [r3, #28]
      break;
 800de7c:	e062      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fb4d 	bl	800e524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	69da      	ldr	r2, [r3, #28]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	69da      	ldr	r2, [r3, #28]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69d9      	ldr	r1, [r3, #28]
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	021a      	lsls	r2, r3, #8
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	61da      	str	r2, [r3, #28]
      break;
 800debe:	e041      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 fb84 	bl	800e5d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f042 0208 	orr.w	r2, r2, #8
 800deda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f022 0204 	bic.w	r2, r2, #4
 800deea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	691a      	ldr	r2, [r3, #16]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	430a      	orrs	r2, r1
 800defc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800defe:	e021      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68b9      	ldr	r1, [r7, #8]
 800df06:	4618      	mov	r0, r3
 800df08:	f000 fbb6 	bl	800e678 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	021a      	lsls	r2, r3, #8
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	430a      	orrs	r2, r1
 800df3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800df40:	e000      	b.n	800df44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800df42:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop

0800df60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df70:	2b01      	cmp	r3, #1
 800df72:	d101      	bne.n	800df78 <HAL_TIM_ConfigClockSource+0x18>
 800df74:	2302      	movs	r3, #2
 800df76:	e0a6      	b.n	800e0c6 <HAL_TIM_ConfigClockSource+0x166>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2202      	movs	r2, #2
 800df84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	4b4f      	ldr	r3, [pc, #316]	; (800e0d0 <HAL_TIM_ConfigClockSource+0x170>)
 800df94:	4013      	ands	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b40      	cmp	r3, #64	; 0x40
 800dfae:	d067      	beq.n	800e080 <HAL_TIM_ConfigClockSource+0x120>
 800dfb0:	2b40      	cmp	r3, #64	; 0x40
 800dfb2:	d80b      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0x6c>
 800dfb4:	2b10      	cmp	r3, #16
 800dfb6:	d073      	beq.n	800e0a0 <HAL_TIM_ConfigClockSource+0x140>
 800dfb8:	2b10      	cmp	r3, #16
 800dfba:	d802      	bhi.n	800dfc2 <HAL_TIM_ConfigClockSource+0x62>
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d06f      	beq.n	800e0a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800dfc0:	e078      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d06c      	beq.n	800e0a0 <HAL_TIM_ConfigClockSource+0x140>
 800dfc6:	2b30      	cmp	r3, #48	; 0x30
 800dfc8:	d06a      	beq.n	800e0a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800dfca:	e073      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dfcc:	2b70      	cmp	r3, #112	; 0x70
 800dfce:	d00d      	beq.n	800dfec <HAL_TIM_ConfigClockSource+0x8c>
 800dfd0:	2b70      	cmp	r3, #112	; 0x70
 800dfd2:	d804      	bhi.n	800dfde <HAL_TIM_ConfigClockSource+0x7e>
 800dfd4:	2b50      	cmp	r3, #80	; 0x50
 800dfd6:	d033      	beq.n	800e040 <HAL_TIM_ConfigClockSource+0xe0>
 800dfd8:	2b60      	cmp	r3, #96	; 0x60
 800dfda:	d041      	beq.n	800e060 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800dfdc:	e06a      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800dfde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfe2:	d066      	beq.n	800e0b2 <HAL_TIM_ConfigClockSource+0x152>
 800dfe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfe8:	d017      	beq.n	800e01a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800dfea:	e063      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	6899      	ldr	r1, [r3, #8]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	f000 fc0a 	bl	800e814 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e00e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	609a      	str	r2, [r3, #8]
      break;
 800e018:	e04c      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6818      	ldr	r0, [r3, #0]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6899      	ldr	r1, [r3, #8]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	f000 fbf3 	bl	800e814 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e03c:	609a      	str	r2, [r3, #8]
      break;
 800e03e:	e039      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	6859      	ldr	r1, [r3, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	461a      	mov	r2, r3
 800e04e:	f000 fb67 	bl	800e720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2150      	movs	r1, #80	; 0x50
 800e058:	4618      	mov	r0, r3
 800e05a:	f000 fbc0 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e05e:	e029      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	6859      	ldr	r1, [r3, #4]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	461a      	mov	r2, r3
 800e06e:	f000 fb86 	bl	800e77e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2160      	movs	r1, #96	; 0x60
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 fbb0 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e07e:	e019      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	6859      	ldr	r1, [r3, #4]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	461a      	mov	r2, r3
 800e08e:	f000 fb47 	bl	800e720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2140      	movs	r1, #64	; 0x40
 800e098:	4618      	mov	r0, r3
 800e09a:	f000 fba0 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e09e:	e009      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f000 fb97 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e0b0:	e000      	b.n	800e0b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e0b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	fffeff88 	.word	0xfffeff88

0800e0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a40      	ldr	r2, [pc, #256]	; (800e238 <TIM_Base_SetConfig+0x114>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d013      	beq.n	800e164 <TIM_Base_SetConfig+0x40>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e142:	d00f      	beq.n	800e164 <TIM_Base_SetConfig+0x40>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a3d      	ldr	r2, [pc, #244]	; (800e23c <TIM_Base_SetConfig+0x118>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d00b      	beq.n	800e164 <TIM_Base_SetConfig+0x40>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a3c      	ldr	r2, [pc, #240]	; (800e240 <TIM_Base_SetConfig+0x11c>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d007      	beq.n	800e164 <TIM_Base_SetConfig+0x40>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a3b      	ldr	r2, [pc, #236]	; (800e244 <TIM_Base_SetConfig+0x120>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d003      	beq.n	800e164 <TIM_Base_SetConfig+0x40>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a3a      	ldr	r2, [pc, #232]	; (800e248 <TIM_Base_SetConfig+0x124>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d108      	bne.n	800e176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	4313      	orrs	r3, r2
 800e174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a2f      	ldr	r2, [pc, #188]	; (800e238 <TIM_Base_SetConfig+0x114>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d02b      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e184:	d027      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a2c      	ldr	r2, [pc, #176]	; (800e23c <TIM_Base_SetConfig+0x118>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d023      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4a2b      	ldr	r2, [pc, #172]	; (800e240 <TIM_Base_SetConfig+0x11c>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d01f      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a2a      	ldr	r2, [pc, #168]	; (800e244 <TIM_Base_SetConfig+0x120>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d01b      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a29      	ldr	r2, [pc, #164]	; (800e248 <TIM_Base_SetConfig+0x124>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d017      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a28      	ldr	r2, [pc, #160]	; (800e24c <TIM_Base_SetConfig+0x128>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d013      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a27      	ldr	r2, [pc, #156]	; (800e250 <TIM_Base_SetConfig+0x12c>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d00f      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a26      	ldr	r2, [pc, #152]	; (800e254 <TIM_Base_SetConfig+0x130>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00b      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a25      	ldr	r2, [pc, #148]	; (800e258 <TIM_Base_SetConfig+0x134>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d007      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a24      	ldr	r2, [pc, #144]	; (800e25c <TIM_Base_SetConfig+0x138>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d003      	beq.n	800e1d6 <TIM_Base_SetConfig+0xb2>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a23      	ldr	r2, [pc, #140]	; (800e260 <TIM_Base_SetConfig+0x13c>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d108      	bne.n	800e1e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a0a      	ldr	r2, [pc, #40]	; (800e238 <TIM_Base_SetConfig+0x114>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d003      	beq.n	800e21c <TIM_Base_SetConfig+0xf8>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4a0c      	ldr	r2, [pc, #48]	; (800e248 <TIM_Base_SetConfig+0x124>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d103      	bne.n	800e224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	691a      	ldr	r2, [r3, #16]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	615a      	str	r2, [r3, #20]
}
 800e22a:	bf00      	nop
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	40010000 	.word	0x40010000
 800e23c:	40000400 	.word	0x40000400
 800e240:	40000800 	.word	0x40000800
 800e244:	40000c00 	.word	0x40000c00
 800e248:	40010400 	.word	0x40010400
 800e24c:	40014000 	.word	0x40014000
 800e250:	40014400 	.word	0x40014400
 800e254:	40014800 	.word	0x40014800
 800e258:	40001800 	.word	0x40001800
 800e25c:	40001c00 	.word	0x40001c00
 800e260:	40002000 	.word	0x40002000

0800e264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e264:	b480      	push	{r7}
 800e266:	b087      	sub	sp, #28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	f023 0201 	bic.w	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4b2b      	ldr	r3, [pc, #172]	; (800e33c <TIM_OC1_SetConfig+0xd8>)
 800e290:	4013      	ands	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f023 0303 	bic.w	r3, r3, #3
 800e29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f023 0302 	bic.w	r3, r3, #2
 800e2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a21      	ldr	r2, [pc, #132]	; (800e340 <TIM_OC1_SetConfig+0xdc>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d003      	beq.n	800e2c8 <TIM_OC1_SetConfig+0x64>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a20      	ldr	r2, [pc, #128]	; (800e344 <TIM_OC1_SetConfig+0xe0>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d10c      	bne.n	800e2e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	f023 0308 	bic.w	r3, r3, #8
 800e2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f023 0304 	bic.w	r3, r3, #4
 800e2e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a16      	ldr	r2, [pc, #88]	; (800e340 <TIM_OC1_SetConfig+0xdc>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d003      	beq.n	800e2f2 <TIM_OC1_SetConfig+0x8e>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a15      	ldr	r2, [pc, #84]	; (800e344 <TIM_OC1_SetConfig+0xe0>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d111      	bne.n	800e316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	4313      	orrs	r3, r2
 800e30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	693a      	ldr	r2, [r7, #16]
 800e312:	4313      	orrs	r3, r2
 800e314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	693a      	ldr	r2, [r7, #16]
 800e31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	621a      	str	r2, [r3, #32]
}
 800e330:	bf00      	nop
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	fffeff8f 	.word	0xfffeff8f
 800e340:	40010000 	.word	0x40010000
 800e344:	40010400 	.word	0x40010400

0800e348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e348:	b480      	push	{r7}
 800e34a:	b087      	sub	sp, #28
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	f023 0210 	bic.w	r2, r3, #16
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4b2e      	ldr	r3, [pc, #184]	; (800e42c <TIM_OC2_SetConfig+0xe4>)
 800e374:	4013      	ands	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	021b      	lsls	r3, r3, #8
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	4313      	orrs	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f023 0320 	bic.w	r3, r3, #32
 800e392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	011b      	lsls	r3, r3, #4
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a23      	ldr	r2, [pc, #140]	; (800e430 <TIM_OC2_SetConfig+0xe8>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d003      	beq.n	800e3b0 <TIM_OC2_SetConfig+0x68>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4a22      	ldr	r2, [pc, #136]	; (800e434 <TIM_OC2_SetConfig+0xec>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d10d      	bne.n	800e3cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	011b      	lsls	r3, r3, #4
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a18      	ldr	r2, [pc, #96]	; (800e430 <TIM_OC2_SetConfig+0xe8>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d003      	beq.n	800e3dc <TIM_OC2_SetConfig+0x94>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a17      	ldr	r2, [pc, #92]	; (800e434 <TIM_OC2_SetConfig+0xec>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d113      	bne.n	800e404 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e3e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	4313      	orrs	r3, r2
 800e402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	685a      	ldr	r2, [r3, #4]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	621a      	str	r2, [r3, #32]
}
 800e41e:	bf00      	nop
 800e420:	371c      	adds	r7, #28
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	feff8fff 	.word	0xfeff8fff
 800e430:	40010000 	.word	0x40010000
 800e434:	40010400 	.word	0x40010400

0800e438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e438:	b480      	push	{r7}
 800e43a:	b087      	sub	sp, #28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	69db      	ldr	r3, [r3, #28]
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	4b2d      	ldr	r3, [pc, #180]	; (800e518 <TIM_OC3_SetConfig+0xe0>)
 800e464:	4013      	ands	r3, r2
 800e466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f023 0303 	bic.w	r3, r3, #3
 800e46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	4313      	orrs	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	021b      	lsls	r3, r3, #8
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	4313      	orrs	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4a22      	ldr	r2, [pc, #136]	; (800e51c <TIM_OC3_SetConfig+0xe4>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d003      	beq.n	800e49e <TIM_OC3_SetConfig+0x66>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4a21      	ldr	r2, [pc, #132]	; (800e520 <TIM_OC3_SetConfig+0xe8>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d10d      	bne.n	800e4ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	021b      	lsls	r3, r3, #8
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a17      	ldr	r2, [pc, #92]	; (800e51c <TIM_OC3_SetConfig+0xe4>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d003      	beq.n	800e4ca <TIM_OC3_SetConfig+0x92>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a16      	ldr	r2, [pc, #88]	; (800e520 <TIM_OC3_SetConfig+0xe8>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d113      	bne.n	800e4f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	695b      	ldr	r3, [r3, #20]
 800e4de:	011b      	lsls	r3, r3, #4
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	011b      	lsls	r3, r3, #4
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	685a      	ldr	r2, [r3, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	621a      	str	r2, [r3, #32]
}
 800e50c:	bf00      	nop
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	fffeff8f 	.word	0xfffeff8f
 800e51c:	40010000 	.word	0x40010000
 800e520:	40010400 	.word	0x40010400

0800e524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e524:	b480      	push	{r7}
 800e526:	b087      	sub	sp, #28
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a1b      	ldr	r3, [r3, #32]
 800e53e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	4b1e      	ldr	r3, [pc, #120]	; (800e5c8 <TIM_OC4_SetConfig+0xa4>)
 800e550:	4013      	ands	r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	021b      	lsls	r3, r3, #8
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	4313      	orrs	r3, r2
 800e566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e56e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	031b      	lsls	r3, r3, #12
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	4313      	orrs	r3, r2
 800e57a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4a13      	ldr	r2, [pc, #76]	; (800e5cc <TIM_OC4_SetConfig+0xa8>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d003      	beq.n	800e58c <TIM_OC4_SetConfig+0x68>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a12      	ldr	r2, [pc, #72]	; (800e5d0 <TIM_OC4_SetConfig+0xac>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d109      	bne.n	800e5a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	695b      	ldr	r3, [r3, #20]
 800e598:	019b      	lsls	r3, r3, #6
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	697a      	ldr	r2, [r7, #20]
 800e5a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	621a      	str	r2, [r3, #32]
}
 800e5ba:	bf00      	nop
 800e5bc:	371c      	adds	r7, #28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop
 800e5c8:	feff8fff 	.word	0xfeff8fff
 800e5cc:	40010000 	.word	0x40010000
 800e5d0:	40010400 	.word	0x40010400

0800e5d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a1b      	ldr	r3, [r3, #32]
 800e5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	4b1b      	ldr	r3, [pc, #108]	; (800e66c <TIM_OC5_SetConfig+0x98>)
 800e600:	4013      	ands	r3, r2
 800e602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e614:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	041b      	lsls	r3, r3, #16
 800e61c:	693a      	ldr	r2, [r7, #16]
 800e61e:	4313      	orrs	r3, r2
 800e620:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a12      	ldr	r2, [pc, #72]	; (800e670 <TIM_OC5_SetConfig+0x9c>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d003      	beq.n	800e632 <TIM_OC5_SetConfig+0x5e>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a11      	ldr	r2, [pc, #68]	; (800e674 <TIM_OC5_SetConfig+0xa0>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d109      	bne.n	800e646 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e638:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	695b      	ldr	r3, [r3, #20]
 800e63e:	021b      	lsls	r3, r3, #8
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	4313      	orrs	r3, r2
 800e644:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	693a      	ldr	r2, [r7, #16]
 800e65e:	621a      	str	r2, [r3, #32]
}
 800e660:	bf00      	nop
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	fffeff8f 	.word	0xfffeff8f
 800e670:	40010000 	.word	0x40010000
 800e674:	40010400 	.word	0x40010400

0800e678 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e678:	b480      	push	{r7}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a1b      	ldr	r3, [r3, #32]
 800e686:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a1b      	ldr	r3, [r3, #32]
 800e692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <TIM_OC6_SetConfig+0x9c>)
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	021b      	lsls	r3, r3, #8
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	051b      	lsls	r3, r3, #20
 800e6c2:	693a      	ldr	r2, [r7, #16]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a13      	ldr	r2, [pc, #76]	; (800e718 <TIM_OC6_SetConfig+0xa0>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d003      	beq.n	800e6d8 <TIM_OC6_SetConfig+0x60>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a12      	ldr	r2, [pc, #72]	; (800e71c <TIM_OC6_SetConfig+0xa4>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d109      	bne.n	800e6ec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	029b      	lsls	r3, r3, #10
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	621a      	str	r2, [r3, #32]
}
 800e706:	bf00      	nop
 800e708:	371c      	adds	r7, #28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	feff8fff 	.word	0xfeff8fff
 800e718:	40010000 	.word	0x40010000
 800e71c:	40010400 	.word	0x40010400

0800e720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	f023 0201 	bic.w	r2, r3, #1
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e74a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	4313      	orrs	r3, r2
 800e754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f023 030a 	bic.w	r3, r3, #10
 800e75c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4313      	orrs	r3, r2
 800e764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	621a      	str	r2, [r3, #32]
}
 800e772:	bf00      	nop
 800e774:	371c      	adds	r7, #28
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e77e:	b480      	push	{r7}
 800e780:	b087      	sub	sp, #28
 800e782:	af00      	add	r7, sp, #0
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	f023 0210 	bic.w	r2, r3, #16
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6a1b      	ldr	r3, [r3, #32]
 800e7a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	031b      	lsls	r3, r3, #12
 800e7ae:	697a      	ldr	r2, [r7, #20]
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	621a      	str	r2, [r3, #32]
}
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	f043 0307 	orr.w	r3, r3, #7
 800e800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	609a      	str	r2, [r3, #8]
}
 800e808:	bf00      	nop
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e814:	b480      	push	{r7}
 800e816:	b087      	sub	sp, #28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e82e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	021a      	lsls	r2, r3, #8
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	431a      	orrs	r2, r3
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	4313      	orrs	r3, r2
 800e840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	609a      	str	r2, [r3, #8]
}
 800e848:	bf00      	nop
 800e84a:	371c      	adds	r7, #28
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e864:	2b01      	cmp	r3, #1
 800e866:	d101      	bne.n	800e86c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e868:	2302      	movs	r3, #2
 800e86a:	e06d      	b.n	800e948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4a30      	ldr	r2, [pc, #192]	; (800e954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d004      	beq.n	800e8a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a2f      	ldr	r2, [pc, #188]	; (800e958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d108      	bne.n	800e8b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e8a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a20      	ldr	r2, [pc, #128]	; (800e954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d022      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8de:	d01d      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a1d      	ldr	r2, [pc, #116]	; (800e95c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d018      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a1c      	ldr	r2, [pc, #112]	; (800e960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d013      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a1a      	ldr	r2, [pc, #104]	; (800e964 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00e      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a15      	ldr	r2, [pc, #84]	; (800e958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d009      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a16      	ldr	r2, [pc, #88]	; (800e968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d004      	beq.n	800e91c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a15      	ldr	r2, [pc, #84]	; (800e96c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d10c      	bne.n	800e936 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68ba      	ldr	r2, [r7, #8]
 800e934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	40010000 	.word	0x40010000
 800e958:	40010400 	.word	0x40010400
 800e95c:	40000400 	.word	0x40000400
 800e960:	40000800 	.word	0x40000800
 800e964:	40000c00 	.word	0x40000c00
 800e968:	40014000 	.word	0x40014000
 800e96c:	40001800 	.word	0x40001800

0800e970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e97a:	2300      	movs	r3, #0
 800e97c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e984:	2b01      	cmp	r3, #1
 800e986:	d101      	bne.n	800e98c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e988:	2302      	movs	r3, #2
 800e98a:	e065      	b.n	800ea58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	695b      	ldr	r3, [r3, #20]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	041b      	lsls	r3, r3, #16
 800ea02:	4313      	orrs	r3, r2
 800ea04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a16      	ldr	r2, [pc, #88]	; (800ea64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d004      	beq.n	800ea1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a14      	ldr	r2, [pc, #80]	; (800ea68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d115      	bne.n	800ea46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea24:	051b      	lsls	r3, r3, #20
 800ea26:	4313      	orrs	r3, r2
 800ea28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	69db      	ldr	r3, [r3, #28]
 800ea34:	4313      	orrs	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	6a1b      	ldr	r3, [r3, #32]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	40010000 	.word	0x40010000
 800ea68:	40010400 	.word	0x40010400

0800ea6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	e040      	b.n	800eb3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f4 fc58 	bl	8003380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2224      	movs	r2, #36	; 0x24
 800ead4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f022 0201 	bic.w	r2, r2, #1
 800eae4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f8be 	bl	800ec68 <UART_SetConfig>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d101      	bne.n	800eaf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e022      	b.n	800eb3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 fb5c 	bl	800f1bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	689a      	ldr	r2, [r3, #8]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f042 0201 	orr.w	r2, r2, #1
 800eb32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fbe3 	bl	800f300 <UART_CheckIdleState>
 800eb3a:	4603      	mov	r3, r0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08a      	sub	sp, #40	; 0x28
 800eb48:	af02      	add	r7, sp, #8
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	603b      	str	r3, [r7, #0]
 800eb50:	4613      	mov	r3, r2
 800eb52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb58:	2b20      	cmp	r3, #32
 800eb5a:	d17f      	bne.n	800ec5c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d002      	beq.n	800eb68 <HAL_UART_Transmit+0x24>
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e078      	b.n	800ec5e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d101      	bne.n	800eb7a <HAL_UART_Transmit+0x36>
 800eb76:	2302      	movs	r3, #2
 800eb78:	e071      	b.n	800ec5e <HAL_UART_Transmit+0x11a>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2200      	movs	r2, #0
 800eb86:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2221      	movs	r2, #33	; 0x21
 800eb8c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800eb8e:	f7f7 fe0d 	bl	80067ac <HAL_GetTick>
 800eb92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	88fa      	ldrh	r2, [r7, #6]
 800eb98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	88fa      	ldrh	r2, [r7, #6]
 800eba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebac:	d108      	bne.n	800ebc0 <HAL_UART_Transmit+0x7c>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d104      	bne.n	800ebc0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	61bb      	str	r3, [r7, #24]
 800ebbe:	e003      	b.n	800ebc8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800ebd0:	e02c      	b.n	800ec2c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	2180      	movs	r1, #128	; 0x80
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f000 fbbe 	bl	800f35e <UART_WaitOnFlagUntilTimeout>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e038      	b.n	800ec5e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10b      	bne.n	800ec0a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	3302      	adds	r3, #2
 800ec06:	61bb      	str	r3, [r7, #24]
 800ec08:	e007      	b.n	800ec1a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	781a      	ldrb	r2, [r3, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	3301      	adds	r3, #1
 800ec18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	3b01      	subs	r3, #1
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1cc      	bne.n	800ebd2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	9300      	str	r3, [sp, #0]
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	2140      	movs	r1, #64	; 0x40
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f000 fb8b 	bl	800f35e <UART_WaitOnFlagUntilTimeout>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	e005      	b.n	800ec5e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2220      	movs	r2, #32
 800ec56:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e000      	b.n	800ec5e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ec5c:	2302      	movs	r3, #2
  }
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3720      	adds	r7, #32
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
	...

0800ec68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ec70:	2300      	movs	r3, #0
 800ec72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	431a      	orrs	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	69db      	ldr	r3, [r3, #28]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	4bb1      	ldr	r3, [pc, #708]	; (800ef5c <UART_SetConfig+0x2f4>)
 800ec98:	4013      	ands	r3, r2
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	6812      	ldr	r2, [r2, #0]
 800ec9e:	6939      	ldr	r1, [r7, #16]
 800eca0:	430b      	orrs	r3, r1
 800eca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	68da      	ldr	r2, [r3, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a9f      	ldr	r2, [pc, #636]	; (800ef60 <UART_SetConfig+0x2f8>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d121      	bne.n	800ed2c <UART_SetConfig+0xc4>
 800ece8:	4b9e      	ldr	r3, [pc, #632]	; (800ef64 <UART_SetConfig+0x2fc>)
 800ecea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecee:	f003 0303 	and.w	r3, r3, #3
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d816      	bhi.n	800ed24 <UART_SetConfig+0xbc>
 800ecf6:	a201      	add	r2, pc, #4	; (adr r2, 800ecfc <UART_SetConfig+0x94>)
 800ecf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfc:	0800ed0d 	.word	0x0800ed0d
 800ed00:	0800ed19 	.word	0x0800ed19
 800ed04:	0800ed13 	.word	0x0800ed13
 800ed08:	0800ed1f 	.word	0x0800ed1f
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	77fb      	strb	r3, [r7, #31]
 800ed10:	e151      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed12:	2302      	movs	r3, #2
 800ed14:	77fb      	strb	r3, [r7, #31]
 800ed16:	e14e      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	77fb      	strb	r3, [r7, #31]
 800ed1c:	e14b      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed1e:	2308      	movs	r3, #8
 800ed20:	77fb      	strb	r3, [r7, #31]
 800ed22:	e148      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed24:	2310      	movs	r3, #16
 800ed26:	77fb      	strb	r3, [r7, #31]
 800ed28:	bf00      	nop
 800ed2a:	e144      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a8d      	ldr	r2, [pc, #564]	; (800ef68 <UART_SetConfig+0x300>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d134      	bne.n	800eda0 <UART_SetConfig+0x138>
 800ed36:	4b8b      	ldr	r3, [pc, #556]	; (800ef64 <UART_SetConfig+0x2fc>)
 800ed38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed3c:	f003 030c 	and.w	r3, r3, #12
 800ed40:	2b0c      	cmp	r3, #12
 800ed42:	d829      	bhi.n	800ed98 <UART_SetConfig+0x130>
 800ed44:	a201      	add	r2, pc, #4	; (adr r2, 800ed4c <UART_SetConfig+0xe4>)
 800ed46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4a:	bf00      	nop
 800ed4c:	0800ed81 	.word	0x0800ed81
 800ed50:	0800ed99 	.word	0x0800ed99
 800ed54:	0800ed99 	.word	0x0800ed99
 800ed58:	0800ed99 	.word	0x0800ed99
 800ed5c:	0800ed8d 	.word	0x0800ed8d
 800ed60:	0800ed99 	.word	0x0800ed99
 800ed64:	0800ed99 	.word	0x0800ed99
 800ed68:	0800ed99 	.word	0x0800ed99
 800ed6c:	0800ed87 	.word	0x0800ed87
 800ed70:	0800ed99 	.word	0x0800ed99
 800ed74:	0800ed99 	.word	0x0800ed99
 800ed78:	0800ed99 	.word	0x0800ed99
 800ed7c:	0800ed93 	.word	0x0800ed93
 800ed80:	2300      	movs	r3, #0
 800ed82:	77fb      	strb	r3, [r7, #31]
 800ed84:	e117      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed86:	2302      	movs	r3, #2
 800ed88:	77fb      	strb	r3, [r7, #31]
 800ed8a:	e114      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed8c:	2304      	movs	r3, #4
 800ed8e:	77fb      	strb	r3, [r7, #31]
 800ed90:	e111      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed92:	2308      	movs	r3, #8
 800ed94:	77fb      	strb	r3, [r7, #31]
 800ed96:	e10e      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ed98:	2310      	movs	r3, #16
 800ed9a:	77fb      	strb	r3, [r7, #31]
 800ed9c:	bf00      	nop
 800ed9e:	e10a      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a71      	ldr	r2, [pc, #452]	; (800ef6c <UART_SetConfig+0x304>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d120      	bne.n	800edec <UART_SetConfig+0x184>
 800edaa:	4b6e      	ldr	r3, [pc, #440]	; (800ef64 <UART_SetConfig+0x2fc>)
 800edac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800edb4:	2b10      	cmp	r3, #16
 800edb6:	d00f      	beq.n	800edd8 <UART_SetConfig+0x170>
 800edb8:	2b10      	cmp	r3, #16
 800edba:	d802      	bhi.n	800edc2 <UART_SetConfig+0x15a>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <UART_SetConfig+0x164>
 800edc0:	e010      	b.n	800ede4 <UART_SetConfig+0x17c>
 800edc2:	2b20      	cmp	r3, #32
 800edc4:	d005      	beq.n	800edd2 <UART_SetConfig+0x16a>
 800edc6:	2b30      	cmp	r3, #48	; 0x30
 800edc8:	d009      	beq.n	800edde <UART_SetConfig+0x176>
 800edca:	e00b      	b.n	800ede4 <UART_SetConfig+0x17c>
 800edcc:	2300      	movs	r3, #0
 800edce:	77fb      	strb	r3, [r7, #31]
 800edd0:	e0f1      	b.n	800efb6 <UART_SetConfig+0x34e>
 800edd2:	2302      	movs	r3, #2
 800edd4:	77fb      	strb	r3, [r7, #31]
 800edd6:	e0ee      	b.n	800efb6 <UART_SetConfig+0x34e>
 800edd8:	2304      	movs	r3, #4
 800edda:	77fb      	strb	r3, [r7, #31]
 800eddc:	e0eb      	b.n	800efb6 <UART_SetConfig+0x34e>
 800edde:	2308      	movs	r3, #8
 800ede0:	77fb      	strb	r3, [r7, #31]
 800ede2:	e0e8      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ede4:	2310      	movs	r3, #16
 800ede6:	77fb      	strb	r3, [r7, #31]
 800ede8:	bf00      	nop
 800edea:	e0e4      	b.n	800efb6 <UART_SetConfig+0x34e>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a5f      	ldr	r2, [pc, #380]	; (800ef70 <UART_SetConfig+0x308>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d120      	bne.n	800ee38 <UART_SetConfig+0x1d0>
 800edf6:	4b5b      	ldr	r3, [pc, #364]	; (800ef64 <UART_SetConfig+0x2fc>)
 800edf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee00:	2b40      	cmp	r3, #64	; 0x40
 800ee02:	d00f      	beq.n	800ee24 <UART_SetConfig+0x1bc>
 800ee04:	2b40      	cmp	r3, #64	; 0x40
 800ee06:	d802      	bhi.n	800ee0e <UART_SetConfig+0x1a6>
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <UART_SetConfig+0x1b0>
 800ee0c:	e010      	b.n	800ee30 <UART_SetConfig+0x1c8>
 800ee0e:	2b80      	cmp	r3, #128	; 0x80
 800ee10:	d005      	beq.n	800ee1e <UART_SetConfig+0x1b6>
 800ee12:	2bc0      	cmp	r3, #192	; 0xc0
 800ee14:	d009      	beq.n	800ee2a <UART_SetConfig+0x1c2>
 800ee16:	e00b      	b.n	800ee30 <UART_SetConfig+0x1c8>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	77fb      	strb	r3, [r7, #31]
 800ee1c:	e0cb      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	77fb      	strb	r3, [r7, #31]
 800ee22:	e0c8      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee24:	2304      	movs	r3, #4
 800ee26:	77fb      	strb	r3, [r7, #31]
 800ee28:	e0c5      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee2a:	2308      	movs	r3, #8
 800ee2c:	77fb      	strb	r3, [r7, #31]
 800ee2e:	e0c2      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee30:	2310      	movs	r3, #16
 800ee32:	77fb      	strb	r3, [r7, #31]
 800ee34:	bf00      	nop
 800ee36:	e0be      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a4d      	ldr	r2, [pc, #308]	; (800ef74 <UART_SetConfig+0x30c>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d124      	bne.n	800ee8c <UART_SetConfig+0x224>
 800ee42:	4b48      	ldr	r3, [pc, #288]	; (800ef64 <UART_SetConfig+0x2fc>)
 800ee44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee50:	d012      	beq.n	800ee78 <UART_SetConfig+0x210>
 800ee52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee56:	d802      	bhi.n	800ee5e <UART_SetConfig+0x1f6>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d007      	beq.n	800ee6c <UART_SetConfig+0x204>
 800ee5c:	e012      	b.n	800ee84 <UART_SetConfig+0x21c>
 800ee5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee62:	d006      	beq.n	800ee72 <UART_SetConfig+0x20a>
 800ee64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee68:	d009      	beq.n	800ee7e <UART_SetConfig+0x216>
 800ee6a:	e00b      	b.n	800ee84 <UART_SetConfig+0x21c>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	77fb      	strb	r3, [r7, #31]
 800ee70:	e0a1      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee72:	2302      	movs	r3, #2
 800ee74:	77fb      	strb	r3, [r7, #31]
 800ee76:	e09e      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee78:	2304      	movs	r3, #4
 800ee7a:	77fb      	strb	r3, [r7, #31]
 800ee7c:	e09b      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee7e:	2308      	movs	r3, #8
 800ee80:	77fb      	strb	r3, [r7, #31]
 800ee82:	e098      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee84:	2310      	movs	r3, #16
 800ee86:	77fb      	strb	r3, [r7, #31]
 800ee88:	bf00      	nop
 800ee8a:	e094      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a39      	ldr	r2, [pc, #228]	; (800ef78 <UART_SetConfig+0x310>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d124      	bne.n	800eee0 <UART_SetConfig+0x278>
 800ee96:	4b33      	ldr	r3, [pc, #204]	; (800ef64 <UART_SetConfig+0x2fc>)
 800ee98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eea4:	d012      	beq.n	800eecc <UART_SetConfig+0x264>
 800eea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeaa:	d802      	bhi.n	800eeb2 <UART_SetConfig+0x24a>
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d007      	beq.n	800eec0 <UART_SetConfig+0x258>
 800eeb0:	e012      	b.n	800eed8 <UART_SetConfig+0x270>
 800eeb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eeb6:	d006      	beq.n	800eec6 <UART_SetConfig+0x25e>
 800eeb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eebc:	d009      	beq.n	800eed2 <UART_SetConfig+0x26a>
 800eebe:	e00b      	b.n	800eed8 <UART_SetConfig+0x270>
 800eec0:	2301      	movs	r3, #1
 800eec2:	77fb      	strb	r3, [r7, #31]
 800eec4:	e077      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eec6:	2302      	movs	r3, #2
 800eec8:	77fb      	strb	r3, [r7, #31]
 800eeca:	e074      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eecc:	2304      	movs	r3, #4
 800eece:	77fb      	strb	r3, [r7, #31]
 800eed0:	e071      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eed2:	2308      	movs	r3, #8
 800eed4:	77fb      	strb	r3, [r7, #31]
 800eed6:	e06e      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eed8:	2310      	movs	r3, #16
 800eeda:	77fb      	strb	r3, [r7, #31]
 800eedc:	bf00      	nop
 800eede:	e06a      	b.n	800efb6 <UART_SetConfig+0x34e>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a25      	ldr	r2, [pc, #148]	; (800ef7c <UART_SetConfig+0x314>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d124      	bne.n	800ef34 <UART_SetConfig+0x2cc>
 800eeea:	4b1e      	ldr	r3, [pc, #120]	; (800ef64 <UART_SetConfig+0x2fc>)
 800eeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eef0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eef8:	d012      	beq.n	800ef20 <UART_SetConfig+0x2b8>
 800eefa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eefe:	d802      	bhi.n	800ef06 <UART_SetConfig+0x29e>
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d007      	beq.n	800ef14 <UART_SetConfig+0x2ac>
 800ef04:	e012      	b.n	800ef2c <UART_SetConfig+0x2c4>
 800ef06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef0a:	d006      	beq.n	800ef1a <UART_SetConfig+0x2b2>
 800ef0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef10:	d009      	beq.n	800ef26 <UART_SetConfig+0x2be>
 800ef12:	e00b      	b.n	800ef2c <UART_SetConfig+0x2c4>
 800ef14:	2300      	movs	r3, #0
 800ef16:	77fb      	strb	r3, [r7, #31]
 800ef18:	e04d      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	77fb      	strb	r3, [r7, #31]
 800ef1e:	e04a      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef20:	2304      	movs	r3, #4
 800ef22:	77fb      	strb	r3, [r7, #31]
 800ef24:	e047      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef26:	2308      	movs	r3, #8
 800ef28:	77fb      	strb	r3, [r7, #31]
 800ef2a:	e044      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef2c:	2310      	movs	r3, #16
 800ef2e:	77fb      	strb	r3, [r7, #31]
 800ef30:	bf00      	nop
 800ef32:	e040      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4a11      	ldr	r2, [pc, #68]	; (800ef80 <UART_SetConfig+0x318>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d139      	bne.n	800efb2 <UART_SetConfig+0x34a>
 800ef3e:	4b09      	ldr	r3, [pc, #36]	; (800ef64 <UART_SetConfig+0x2fc>)
 800ef40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ef48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef4c:	d027      	beq.n	800ef9e <UART_SetConfig+0x336>
 800ef4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef52:	d817      	bhi.n	800ef84 <UART_SetConfig+0x31c>
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d01c      	beq.n	800ef92 <UART_SetConfig+0x32a>
 800ef58:	e027      	b.n	800efaa <UART_SetConfig+0x342>
 800ef5a:	bf00      	nop
 800ef5c:	efff69f3 	.word	0xefff69f3
 800ef60:	40011000 	.word	0x40011000
 800ef64:	40023800 	.word	0x40023800
 800ef68:	40004400 	.word	0x40004400
 800ef6c:	40004800 	.word	0x40004800
 800ef70:	40004c00 	.word	0x40004c00
 800ef74:	40005000 	.word	0x40005000
 800ef78:	40011400 	.word	0x40011400
 800ef7c:	40007800 	.word	0x40007800
 800ef80:	40007c00 	.word	0x40007c00
 800ef84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef88:	d006      	beq.n	800ef98 <UART_SetConfig+0x330>
 800ef8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ef8e:	d009      	beq.n	800efa4 <UART_SetConfig+0x33c>
 800ef90:	e00b      	b.n	800efaa <UART_SetConfig+0x342>
 800ef92:	2300      	movs	r3, #0
 800ef94:	77fb      	strb	r3, [r7, #31]
 800ef96:	e00e      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef98:	2302      	movs	r3, #2
 800ef9a:	77fb      	strb	r3, [r7, #31]
 800ef9c:	e00b      	b.n	800efb6 <UART_SetConfig+0x34e>
 800ef9e:	2304      	movs	r3, #4
 800efa0:	77fb      	strb	r3, [r7, #31]
 800efa2:	e008      	b.n	800efb6 <UART_SetConfig+0x34e>
 800efa4:	2308      	movs	r3, #8
 800efa6:	77fb      	strb	r3, [r7, #31]
 800efa8:	e005      	b.n	800efb6 <UART_SetConfig+0x34e>
 800efaa:	2310      	movs	r3, #16
 800efac:	77fb      	strb	r3, [r7, #31]
 800efae:	bf00      	nop
 800efb0:	e001      	b.n	800efb6 <UART_SetConfig+0x34e>
 800efb2:	2310      	movs	r3, #16
 800efb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	69db      	ldr	r3, [r3, #28]
 800efba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efbe:	d17f      	bne.n	800f0c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800efc0:	7ffb      	ldrb	r3, [r7, #31]
 800efc2:	2b08      	cmp	r3, #8
 800efc4:	d85c      	bhi.n	800f080 <UART_SetConfig+0x418>
 800efc6:	a201      	add	r2, pc, #4	; (adr r2, 800efcc <UART_SetConfig+0x364>)
 800efc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efcc:	0800eff1 	.word	0x0800eff1
 800efd0:	0800f011 	.word	0x0800f011
 800efd4:	0800f031 	.word	0x0800f031
 800efd8:	0800f081 	.word	0x0800f081
 800efdc:	0800f049 	.word	0x0800f049
 800efe0:	0800f081 	.word	0x0800f081
 800efe4:	0800f081 	.word	0x0800f081
 800efe8:	0800f081 	.word	0x0800f081
 800efec:	0800f069 	.word	0x0800f069
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eff0:	f7fc feb8 	bl	800bd64 <HAL_RCC_GetPCLK1Freq>
 800eff4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	005a      	lsls	r2, r3, #1
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	085b      	lsrs	r3, r3, #1
 800f000:	441a      	add	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	fbb2 f3f3 	udiv	r3, r2, r3
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	61bb      	str	r3, [r7, #24]
        break;
 800f00e:	e03a      	b.n	800f086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f010:	f7fc febc 	bl	800bd8c <HAL_RCC_GetPCLK2Freq>
 800f014:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	005a      	lsls	r2, r3, #1
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	441a      	add	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	61bb      	str	r3, [r7, #24]
        break;
 800f02e:	e02a      	b.n	800f086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	085a      	lsrs	r2, r3, #1
 800f036:	4b5f      	ldr	r3, [pc, #380]	; (800f1b4 <UART_SetConfig+0x54c>)
 800f038:	4413      	add	r3, r2
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	6852      	ldr	r2, [r2, #4]
 800f03e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f042:	b29b      	uxth	r3, r3
 800f044:	61bb      	str	r3, [r7, #24]
        break;
 800f046:	e01e      	b.n	800f086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f048:	f7fc fdce 	bl	800bbe8 <HAL_RCC_GetSysClockFreq>
 800f04c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	005a      	lsls	r2, r3, #1
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	085b      	lsrs	r3, r3, #1
 800f058:	441a      	add	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f062:	b29b      	uxth	r3, r3
 800f064:	61bb      	str	r3, [r7, #24]
        break;
 800f066:	e00e      	b.n	800f086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	085b      	lsrs	r3, r3, #1
 800f06e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	fbb2 f3f3 	udiv	r3, r2, r3
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	61bb      	str	r3, [r7, #24]
        break;
 800f07e:	e002      	b.n	800f086 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	75fb      	strb	r3, [r7, #23]
        break;
 800f084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	2b0f      	cmp	r3, #15
 800f08a:	d916      	bls.n	800f0ba <UART_SetConfig+0x452>
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f092:	d212      	bcs.n	800f0ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	b29b      	uxth	r3, r3
 800f098:	f023 030f 	bic.w	r3, r3, #15
 800f09c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	085b      	lsrs	r3, r3, #1
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	897b      	ldrh	r3, [r7, #10]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	897a      	ldrh	r2, [r7, #10]
 800f0b6:	60da      	str	r2, [r3, #12]
 800f0b8:	e070      	b.n	800f19c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
 800f0be:	e06d      	b.n	800f19c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800f0c0:	7ffb      	ldrb	r3, [r7, #31]
 800f0c2:	2b08      	cmp	r3, #8
 800f0c4:	d859      	bhi.n	800f17a <UART_SetConfig+0x512>
 800f0c6:	a201      	add	r2, pc, #4	; (adr r2, 800f0cc <UART_SetConfig+0x464>)
 800f0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0cc:	0800f0f1 	.word	0x0800f0f1
 800f0d0:	0800f10f 	.word	0x0800f10f
 800f0d4:	0800f12d 	.word	0x0800f12d
 800f0d8:	0800f17b 	.word	0x0800f17b
 800f0dc:	0800f145 	.word	0x0800f145
 800f0e0:	0800f17b 	.word	0x0800f17b
 800f0e4:	0800f17b 	.word	0x0800f17b
 800f0e8:	0800f17b 	.word	0x0800f17b
 800f0ec:	0800f163 	.word	0x0800f163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0f0:	f7fc fe38 	bl	800bd64 <HAL_RCC_GetPCLK1Freq>
 800f0f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	085a      	lsrs	r2, r3, #1
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	441a      	add	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	fbb2 f3f3 	udiv	r3, r2, r3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	61bb      	str	r3, [r7, #24]
        break;
 800f10c:	e038      	b.n	800f180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f10e:	f7fc fe3d 	bl	800bd8c <HAL_RCC_GetPCLK2Freq>
 800f112:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	085a      	lsrs	r2, r3, #1
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	441a      	add	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	fbb2 f3f3 	udiv	r3, r2, r3
 800f126:	b29b      	uxth	r3, r3
 800f128:	61bb      	str	r3, [r7, #24]
        break;
 800f12a:	e029      	b.n	800f180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	085a      	lsrs	r2, r3, #1
 800f132:	4b21      	ldr	r3, [pc, #132]	; (800f1b8 <UART_SetConfig+0x550>)
 800f134:	4413      	add	r3, r2
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	6852      	ldr	r2, [r2, #4]
 800f13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f13e:	b29b      	uxth	r3, r3
 800f140:	61bb      	str	r3, [r7, #24]
        break;
 800f142:	e01d      	b.n	800f180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f144:	f7fc fd50 	bl	800bbe8 <HAL_RCC_GetSysClockFreq>
 800f148:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	085a      	lsrs	r2, r3, #1
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	441a      	add	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	fbb2 f3f3 	udiv	r3, r2, r3
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	61bb      	str	r3, [r7, #24]
        break;
 800f160:	e00e      	b.n	800f180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	085b      	lsrs	r3, r3, #1
 800f168:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	fbb2 f3f3 	udiv	r3, r2, r3
 800f174:	b29b      	uxth	r3, r3
 800f176:	61bb      	str	r3, [r7, #24]
        break;
 800f178:	e002      	b.n	800f180 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	75fb      	strb	r3, [r7, #23]
        break;
 800f17e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	2b0f      	cmp	r3, #15
 800f184:	d908      	bls.n	800f198 <UART_SetConfig+0x530>
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f18c:	d204      	bcs.n	800f198 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	60da      	str	r2, [r3, #12]
 800f196:	e001      	b.n	800f19c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3720      	adds	r7, #32
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	01e84800 	.word	0x01e84800
 800f1b8:	00f42400 	.word	0x00f42400

0800f1bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00a      	beq.n	800f1e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	430a      	orrs	r2, r1
 800f1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ea:	f003 0302 	and.w	r3, r3, #2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00a      	beq.n	800f208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	430a      	orrs	r2, r1
 800f206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d00a      	beq.n	800f22a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	430a      	orrs	r2, r1
 800f228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22e:	f003 0308 	and.w	r3, r3, #8
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00a      	beq.n	800f24c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	f003 0310 	and.w	r3, r3, #16
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00a      	beq.n	800f26e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	f003 0320 	and.w	r3, r3, #32
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00a      	beq.n	800f290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	430a      	orrs	r2, r1
 800f28e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d01a      	beq.n	800f2d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2ba:	d10a      	bne.n	800f2d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	430a      	orrs	r2, r1
 800f2d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00a      	beq.n	800f2f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	430a      	orrs	r2, r1
 800f2f2:	605a      	str	r2, [r3, #4]
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af02      	add	r7, sp, #8
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f30e:	f7f7 fa4d 	bl	80067ac <HAL_GetTick>
 800f312:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f003 0308 	and.w	r3, r3, #8
 800f31e:	2b08      	cmp	r3, #8
 800f320:	d10e      	bne.n	800f340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f814 	bl	800f35e <UART_WaitOnFlagUntilTimeout>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f33c:	2303      	movs	r3, #3
 800f33e:	e00a      	b.n	800f356 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2220      	movs	r2, #32
 800f344:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2220      	movs	r2, #32
 800f34a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b084      	sub	sp, #16
 800f362:	af00      	add	r7, sp, #0
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	4613      	mov	r3, r2
 800f36c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f36e:	e05d      	b.n	800f42c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f376:	d059      	beq.n	800f42c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f378:	f7f7 fa18 	bl	80067ac <HAL_GetTick>
 800f37c:	4602      	mov	r2, r0
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	69ba      	ldr	r2, [r7, #24]
 800f384:	429a      	cmp	r2, r3
 800f386:	d302      	bcc.n	800f38e <UART_WaitOnFlagUntilTimeout+0x30>
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d11b      	bne.n	800f3c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f39c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	689a      	ldr	r2, [r3, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f022 0201 	bic.w	r2, r2, #1
 800f3ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2220      	movs	r2, #32
 800f3b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	e042      	b.n	800f44c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d02b      	beq.n	800f42c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	69db      	ldr	r3, [r3, #28]
 800f3da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3e2:	d123      	bne.n	800f42c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f3ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f3fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689a      	ldr	r2, [r3, #8]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f022 0201 	bic.w	r2, r2, #1
 800f40c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2220      	movs	r2, #32
 800f412:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2220      	movs	r2, #32
 800f418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2220      	movs	r2, #32
 800f41e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800f428:	2303      	movs	r3, #3
 800f42a:	e00f      	b.n	800f44c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	69da      	ldr	r2, [r3, #28]
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	4013      	ands	r3, r2
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	429a      	cmp	r2, r3
 800f43a:	bf0c      	ite	eq
 800f43c:	2301      	moveq	r3, #1
 800f43e:	2300      	movne	r3, #0
 800f440:	b2db      	uxtb	r3, r3
 800f442:	461a      	mov	r2, r3
 800f444:	79fb      	ldrb	r3, [r7, #7]
 800f446:	429a      	cmp	r2, r3
 800f448:	d092      	beq.n	800f370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800f462:	2300      	movs	r3, #0
 800f464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d027      	beq.n	800f4be <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	4b2f      	ldr	r3, [pc, #188]	; (800f534 <FMC_SDRAM_Init+0xe0>)
 800f478:	4013      	ands	r3, r2
 800f47a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f484:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800f48a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800f490:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800f496:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800f49c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800f4a2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800f4a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f4ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	e032      	b.n	800f524 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f4ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f4d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800f4da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800f4dc:	68fa      	ldr	r2, [r7, #12]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4b12      	ldr	r3, [pc, #72]	; (800f534 <FMC_SDRAM_Init+0xe0>)
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f4f8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800f4fe:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800f504:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800f50a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800f510:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	4313      	orrs	r3, r2
 800f516:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	ffff8000 	.word	0xffff8000

0800f538 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d02e      	beq.n	800f5b0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f55e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f56e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	3b01      	subs	r3, #1
 800f576:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800f578:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	3b01      	subs	r3, #1
 800f580:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800f582:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	3b01      	subs	r3, #1
 800f58a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800f58c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	3b01      	subs	r3, #1
 800f594:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800f596:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	3b01      	subs	r3, #1
 800f59e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	609a      	str	r2, [r3, #8]
 800f5ae:	e039      	b.n	800f624 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	4b1e      	ldr	r3, [pc, #120]	; (800f634 <FMC_SDRAM_Timing_Init+0xfc>)
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f5e2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f5f2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800f5fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	3b01      	subs	r3, #1
 800f604:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800f606:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	699b      	ldr	r3, [r3, #24]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800f610:	4313      	orrs	r3, r2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	693a      	ldr	r2, [r7, #16]
 800f622:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	371c      	adds	r7, #28
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	ff0f0fff 	.word	0xff0f0fff

0800f638 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800f644:	2300      	movs	r3, #0
 800f646:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f650:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	3b01      	subs	r3, #1
 800f658:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800f65a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800f662:	4313      	orrs	r3, r2
 800f664:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	371c      	adds	r7, #28
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f67a:	b480      	push	{r7}
 800f67c:	b083      	sub	sp, #12
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
 800f682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	695a      	ldr	r2, [r3, #20]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	005b      	lsls	r3, r3, #1
 800f68c:	431a      	orrs	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6a0:	b084      	sub	sp, #16
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	f107 001c 	add.w	r0, r7, #28
 800f6ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d120      	bne.n	800f6fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	68da      	ldr	r2, [r3, #12]
 800f6c8:	4b20      	ldr	r3, [pc, #128]	; (800f74c <USB_CoreInit+0xac>)
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d105      	bne.n	800f6ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f942 	bl	800f978 <USB_CoreReset>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]
 800f6f8:	e010      	b.n	800f71c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 f936 	bl	800f978 <USB_CoreReset>
 800f70c:	4603      	mov	r3, r0
 800f70e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d10b      	bne.n	800f73a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	f043 0206 	orr.w	r2, r3, #6
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	f043 0220 	orr.w	r2, r3, #32
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f746:	b004      	add	sp, #16
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	ffbdffbf 	.word	0xffbdffbf

0800f750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	f043 0201 	orr.w	r2, r3, #1
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f772:	b480      	push	{r7}
 800f774:	b083      	sub	sp, #12
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	f023 0201 	bic.w	r2, r3, #1
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f786:	2300      	movs	r3, #0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7ac:	78fb      	ldrb	r3, [r7, #3]
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d106      	bne.n	800f7c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	60da      	str	r2, [r3, #12]
 800f7be:	e00b      	b.n	800f7d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f7c0:	78fb      	ldrb	r3, [r7, #3]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d106      	bne.n	800f7d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	60da      	str	r2, [r3, #12]
 800f7d2:	e001      	b.n	800f7d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e003      	b.n	800f7e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f7d8:	2032      	movs	r0, #50	; 0x32
 800f7da:	f7f6 fff3 	bl	80067c4 <HAL_Delay>

  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	019b      	lsls	r3, r3, #6
 800f7fa:	f043 0220 	orr.w	r2, r3, #32
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3301      	adds	r3, #1
 800f806:	60fb      	str	r3, [r7, #12]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4a09      	ldr	r2, [pc, #36]	; (800f830 <USB_FlushTxFifo+0x48>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d901      	bls.n	800f814 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f810:	2303      	movs	r3, #3
 800f812:	e006      	b.n	800f822 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	f003 0320 	and.w	r3, r3, #32
 800f81c:	2b20      	cmp	r3, #32
 800f81e:	d0f0      	beq.n	800f802 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f820:	2300      	movs	r3, #0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3714      	adds	r7, #20
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	00030d40 	.word	0x00030d40

0800f834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f83c:	2300      	movs	r3, #0
 800f83e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2210      	movs	r2, #16
 800f844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3301      	adds	r3, #1
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4a09      	ldr	r2, [pc, #36]	; (800f874 <USB_FlushRxFifo+0x40>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d901      	bls.n	800f858 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f854:	2303      	movs	r3, #3
 800f856:	e006      	b.n	800f866 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	f003 0310 	and.w	r3, r3, #16
 800f860:	2b10      	cmp	r3, #16
 800f862:	d0f0      	beq.n	800f846 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	00030d40 	.word	0x00030d40

0800f878 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f878:	b480      	push	{r7}
 800f87a:	b089      	sub	sp, #36	; 0x24
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	4611      	mov	r1, r2
 800f884:	461a      	mov	r2, r3
 800f886:	460b      	mov	r3, r1
 800f888:	71fb      	strb	r3, [r7, #7]
 800f88a:	4613      	mov	r3, r2
 800f88c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d11a      	bne.n	800f8d4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f89e:	88bb      	ldrh	r3, [r7, #4]
 800f8a0:	3303      	adds	r3, #3
 800f8a2:	089b      	lsrs	r3, r3, #2
 800f8a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	61bb      	str	r3, [r7, #24]
 800f8aa:	e00f      	b.n	800f8cc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f8ac:	79fb      	ldrb	r3, [r7, #7]
 800f8ae:	031a      	lsls	r2, r3, #12
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	61bb      	str	r3, [r7, #24]
 800f8cc:	69ba      	ldr	r2, [r7, #24]
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d3eb      	bcc.n	800f8ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f8d4:	2300      	movs	r3, #0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3724      	adds	r7, #36	; 0x24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f8e2:	b480      	push	{r7}
 800f8e4:	b089      	sub	sp, #36	; 0x24
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	60f8      	str	r0, [r7, #12]
 800f8ea:	60b9      	str	r1, [r7, #8]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
 800f8fa:	3303      	adds	r3, #3
 800f8fc:	089b      	lsrs	r3, r3, #2
 800f8fe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f900:	2300      	movs	r3, #0
 800f902:	61bb      	str	r3, [r7, #24]
 800f904:	e00b      	b.n	800f91e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	601a      	str	r2, [r3, #0]
    pDest++;
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	3304      	adds	r3, #4
 800f916:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	3301      	adds	r3, #1
 800f91c:	61bb      	str	r3, [r7, #24]
 800f91e:	69ba      	ldr	r2, [r7, #24]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	429a      	cmp	r2, r3
 800f924:	d3ef      	bcc.n	800f906 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f926:	69fb      	ldr	r3, [r7, #28]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3724      	adds	r7, #36	; 0x24
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	699b      	ldr	r3, [r3, #24]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	4013      	ands	r3, r2
 800f94a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f94c:	68fb      	ldr	r3, [r7, #12]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	695b      	ldr	r3, [r3, #20]
 800f966:	f003 0301 	and.w	r3, r3, #1
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	370c      	adds	r7, #12
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr
	...

0800f978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f980:	2300      	movs	r3, #0
 800f982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3301      	adds	r3, #1
 800f988:	60fb      	str	r3, [r7, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	4a13      	ldr	r2, [pc, #76]	; (800f9dc <USB_CoreReset+0x64>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d901      	bls.n	800f996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f992:	2303      	movs	r3, #3
 800f994:	e01b      	b.n	800f9ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	daf2      	bge.n	800f984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	f043 0201 	orr.w	r2, r3, #1
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	4a09      	ldr	r2, [pc, #36]	; (800f9dc <USB_CoreReset+0x64>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d901      	bls.n	800f9c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e006      	b.n	800f9ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	691b      	ldr	r3, [r3, #16]
 800f9c4:	f003 0301 	and.w	r3, r3, #1
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d0f0      	beq.n	800f9ae <USB_CoreReset+0x36>

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	00030d40 	.word	0x00030d40

0800f9e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	f107 001c 	add.w	r0, r7, #28
 800f9ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	2300      	movs	r3, #0
 800fa00:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d018      	beq.n	800fa4c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d10a      	bne.n	800fa36 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa2e:	f043 0304 	orr.w	r3, r3, #4
 800fa32:	6013      	str	r3, [r2, #0]
 800fa34:	e014      	b.n	800fa60 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa44:	f023 0304 	bic.w	r3, r3, #4
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	e009      	b.n	800fa60 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fa5a:	f023 0304 	bic.w	r3, r3, #4
 800fa5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800fa60:	2110      	movs	r1, #16
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff fec0 	bl	800f7e8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff fee3 	bl	800f834 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60fb      	str	r3, [r7, #12]
 800fa72:	e015      	b.n	800faa0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	015a      	lsls	r2, r3, #5
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa80:	461a      	mov	r2, r3
 800fa82:	f04f 33ff 	mov.w	r3, #4294967295
 800fa86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	015a      	lsls	r2, r3, #5
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa94:	461a      	mov	r2, r3
 800fa96:	2300      	movs	r3, #0
 800fa98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	6a3b      	ldr	r3, [r7, #32]
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d3e5      	bcc.n	800fa74 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800faa8:	2101      	movs	r1, #1
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 f8ac 	bl	800fc08 <USB_DriveVbus>

  HAL_Delay(200U);
 800fab0:	20c8      	movs	r0, #200	; 0xc8
 800fab2:	f7f6 fe87 	bl	80067c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f04f 32ff 	mov.w	r2, #4294967295
 800fac2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800facc:	2b00      	cmp	r3, #0
 800face:	d00b      	beq.n	800fae8 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fad6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a14      	ldr	r2, [pc, #80]	; (800fb2c <USB_HostInit+0x14c>)
 800fadc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a13      	ldr	r2, [pc, #76]	; (800fb30 <USB_HostInit+0x150>)
 800fae2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800fae6:	e009      	b.n	800fafc <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2280      	movs	r2, #128	; 0x80
 800faec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a10      	ldr	r2, [pc, #64]	; (800fb34 <USB_HostInit+0x154>)
 800faf2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a10      	ldr	r2, [pc, #64]	; (800fb38 <USB_HostInit+0x158>)
 800faf8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d105      	bne.n	800fb0e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	f043 0210 	orr.w	r2, r3, #16
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	699a      	ldr	r2, [r3, #24]
 800fb12:	4b0a      	ldr	r3, [pc, #40]	; (800fb3c <USB_HostInit+0x15c>)
 800fb14:	4313      	orrs	r3, r2
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb26:	b004      	add	sp, #16
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	01000200 	.word	0x01000200
 800fb30:	00e00300 	.word	0x00e00300
 800fb34:	00600080 	.word	0x00600080
 800fb38:	004000e0 	.word	0x004000e0
 800fb3c:	a3200008 	.word	0xa3200008

0800fb40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b085      	sub	sp, #20
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb5e:	f023 0303 	bic.w	r3, r3, #3
 800fb62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	f003 0303 	and.w	r3, r3, #3
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d107      	bne.n	800fb92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb88:	461a      	mov	r2, r3
 800fb8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fb8e:	6053      	str	r3, [r2, #4]
 800fb90:	e009      	b.n	800fba6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d106      	bne.n	800fba6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb9e:	461a      	mov	r2, r3
 800fba0:	f241 7370 	movw	r3, #6000	; 0x1770
 800fba4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3714      	adds	r7, #20
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fbd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fbde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbe2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800fbe4:	2064      	movs	r0, #100	; 0x64
 800fbe6:	f7f6 fded 	bl	80067c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fbf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbf6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800fbf8:	200a      	movs	r0, #10
 800fbfa:	f7f6 fde3 	bl	80067c4 <HAL_Delay>

  return HAL_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	460b      	mov	r3, r1
 800fc12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fc2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d109      	bne.n	800fc4c <USB_DriveVbus+0x44>
 800fc38:	78fb      	ldrb	r3, [r7, #3]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d106      	bne.n	800fc4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fc46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fc4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc56:	d109      	bne.n	800fc6c <USB_DriveVbus+0x64>
 800fc58:	78fb      	ldrb	r3, [r7, #3]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d106      	bne.n	800fc6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3714      	adds	r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800fc86:	2300      	movs	r3, #0
 800fc88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	0c5b      	lsrs	r3, r3, #17
 800fc98:	f003 0303 	and.w	r3, r3, #3
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3714      	adds	r7, #20
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	b29b      	uxth	r3, r3
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3714      	adds	r7, #20
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
	...

0800fccc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b087      	sub	sp, #28
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4603      	mov	r3, r0
 800fcdc:	70fb      	strb	r3, [r7, #3]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70bb      	strb	r3, [r7, #2]
 800fce2:	4613      	mov	r3, r2
 800fce4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800fce6:	2300      	movs	r3, #0
 800fce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800fcee:	78fb      	ldrb	r3, [r7, #3]
 800fcf0:	015a      	lsls	r2, r3, #5
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f04f 33ff 	mov.w	r3, #4294967295
 800fd00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800fd02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd06:	2b03      	cmp	r3, #3
 800fd08:	d87e      	bhi.n	800fe08 <USB_HC_Init+0x13c>
 800fd0a:	a201      	add	r2, pc, #4	; (adr r2, 800fd10 <USB_HC_Init+0x44>)
 800fd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd10:	0800fd21 	.word	0x0800fd21
 800fd14:	0800fdcb 	.word	0x0800fdcb
 800fd18:	0800fd21 	.word	0x0800fd21
 800fd1c:	0800fd8d 	.word	0x0800fd8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	015a      	lsls	r2, r3, #5
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	4413      	add	r3, r2
 800fd28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	f240 439d 	movw	r3, #1181	; 0x49d
 800fd32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800fd34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	da10      	bge.n	800fd5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	015a      	lsls	r2, r3, #5
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	4413      	add	r3, r2
 800fd44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	78fa      	ldrb	r2, [r7, #3]
 800fd4c:	0151      	lsls	r1, r2, #5
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	440a      	add	r2, r1
 800fd52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd5a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800fd5c:	e057      	b.n	800fe0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d051      	beq.n	800fe0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800fd6a:	78fb      	ldrb	r3, [r7, #3]
 800fd6c:	015a      	lsls	r2, r3, #5
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	4413      	add	r3, r2
 800fd72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	78fa      	ldrb	r2, [r7, #3]
 800fd7a:	0151      	lsls	r1, r2, #5
 800fd7c:	68ba      	ldr	r2, [r7, #8]
 800fd7e:	440a      	add	r2, r1
 800fd80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fd88:	60d3      	str	r3, [r2, #12]
      break;
 800fd8a:	e040      	b.n	800fe0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fd8c:	78fb      	ldrb	r3, [r7, #3]
 800fd8e:	015a      	lsls	r2, r3, #5
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	4413      	add	r3, r2
 800fd94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd98:	461a      	mov	r2, r3
 800fd9a:	f240 639d 	movw	r3, #1693	; 0x69d
 800fd9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fda0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	da34      	bge.n	800fe12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800fda8:	78fb      	ldrb	r3, [r7, #3]
 800fdaa:	015a      	lsls	r2, r3, #5
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4413      	add	r3, r2
 800fdb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	78fa      	ldrb	r2, [r7, #3]
 800fdb8:	0151      	lsls	r1, r2, #5
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	440a      	add	r2, r1
 800fdbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fdc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800fdc8:	e023      	b.n	800fe12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800fdca:	78fb      	ldrb	r3, [r7, #3]
 800fdcc:	015a      	lsls	r2, r3, #5
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	f240 2325 	movw	r3, #549	; 0x225
 800fddc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800fdde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	da17      	bge.n	800fe16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800fde6:	78fb      	ldrb	r3, [r7, #3]
 800fde8:	015a      	lsls	r2, r3, #5
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	78fa      	ldrb	r2, [r7, #3]
 800fdf6:	0151      	lsls	r1, r2, #5
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fe00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800fe04:	60d3      	str	r3, [r2, #12]
      }
      break;
 800fe06:	e006      	b.n	800fe16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe0c:	e004      	b.n	800fe18 <USB_HC_Init+0x14c>
      break;
 800fe0e:	bf00      	nop
 800fe10:	e002      	b.n	800fe18 <USB_HC_Init+0x14c>
      break;
 800fe12:	bf00      	nop
 800fe14:	e000      	b.n	800fe18 <USB_HC_Init+0x14c>
      break;
 800fe16:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fe1e:	699a      	ldr	r2, [r3, #24]
 800fe20:	78fb      	ldrb	r3, [r7, #3]
 800fe22:	f003 030f 	and.w	r3, r3, #15
 800fe26:	2101      	movs	r1, #1
 800fe28:	fa01 f303 	lsl.w	r3, r1, r3
 800fe2c:	68b9      	ldr	r1, [r7, #8]
 800fe2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fe32:	4313      	orrs	r3, r2
 800fe34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800fe42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	da03      	bge.n	800fe52 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800fe4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe4e:	613b      	str	r3, [r7, #16]
 800fe50:	e001      	b.n	800fe56 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800fe56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d103      	bne.n	800fe66 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800fe5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	e001      	b.n	800fe6a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800fe66:	2300      	movs	r3, #0
 800fe68:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fe6a:	787b      	ldrb	r3, [r7, #1]
 800fe6c:	059b      	lsls	r3, r3, #22
 800fe6e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fe72:	78bb      	ldrb	r3, [r7, #2]
 800fe74:	02db      	lsls	r3, r3, #11
 800fe76:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fe7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fe7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe80:	049b      	lsls	r3, r3, #18
 800fe82:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800fe86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fe88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800fe8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fe94:	78fb      	ldrb	r3, [r7, #3]
 800fe96:	0159      	lsls	r1, r3, #5
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	440b      	add	r3, r1
 800fe9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fea0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800fea6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800fea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800feac:	2b03      	cmp	r3, #3
 800feae:	d10f      	bne.n	800fed0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	015a      	lsls	r2, r3, #5
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	4413      	add	r3, r2
 800feb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	78fa      	ldrb	r2, [r7, #3]
 800fec0:	0151      	lsls	r1, r2, #5
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	440a      	add	r2, r1
 800fec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800feca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fece:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	371c      	adds	r7, #28
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop

0800fee0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08c      	sub	sp, #48	; 0x30
 800fee4:	af02      	add	r7, sp, #8
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	4613      	mov	r3, r2
 800feec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	785b      	ldrb	r3, [r3, #1]
 800fef6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800fef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fefc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d028      	beq.n	800ff5c <USB_HC_StartXfer+0x7c>
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	791b      	ldrb	r3, [r3, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d124      	bne.n	800ff5c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ff12:	79fb      	ldrb	r3, [r7, #7]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10b      	bne.n	800ff30 <USB_HC_StartXfer+0x50>
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	795b      	ldrb	r3, [r3, #5]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d107      	bne.n	800ff30 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	785b      	ldrb	r3, [r3, #1]
 800ff24:	4619      	mov	r1, r3
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f000 fa2e 	bl	8010388 <USB_DoPing>
      return HAL_OK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	e112      	b.n	8010156 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d112      	bne.n	800ff5c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	015a      	lsls	r2, r3, #5
 800ff3a:	6a3b      	ldr	r3, [r7, #32]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	0151      	lsls	r1, r2, #5
 800ff48:	6a3a      	ldr	r2, [r7, #32]
 800ff4a:	440a      	add	r2, r1
 800ff4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ff54:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d018      	beq.n	800ff96 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	691b      	ldr	r3, [r3, #16]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	8912      	ldrh	r2, [r2, #8]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	68ba      	ldr	r2, [r7, #8]
 800ff72:	8912      	ldrh	r2, [r2, #8]
 800ff74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff78:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ff7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ff7c:	8b7b      	ldrh	r3, [r7, #26]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d90b      	bls.n	800ff9a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800ff82:	8b7b      	ldrh	r3, [r7, #26]
 800ff84:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ff86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	8912      	ldrh	r2, [r2, #8]
 800ff8c:	fb02 f203 	mul.w	r2, r2, r3
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	611a      	str	r2, [r3, #16]
 800ff94:	e001      	b.n	800ff9a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800ff96:	2301      	movs	r3, #1
 800ff98:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	78db      	ldrb	r3, [r3, #3]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d006      	beq.n	800ffb0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ffa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	8912      	ldrh	r2, [r2, #8]
 800ffa8:	fb02 f203 	mul.w	r2, r2, r3
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ffb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffba:	04d9      	lsls	r1, r3, #19
 800ffbc:	4b68      	ldr	r3, [pc, #416]	; (8010160 <USB_HC_StartXfer+0x280>)
 800ffbe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ffc0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	7a9b      	ldrb	r3, [r3, #10]
 800ffc6:	075b      	lsls	r3, r3, #29
 800ffc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ffcc:	69f9      	ldr	r1, [r7, #28]
 800ffce:	0148      	lsls	r0, r1, #5
 800ffd0:	6a39      	ldr	r1, [r7, #32]
 800ffd2:	4401      	add	r1, r0
 800ffd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ffd8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ffda:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ffdc:	79fb      	ldrb	r3, [r7, #7]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d009      	beq.n	800fff6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	68d9      	ldr	r1, [r3, #12]
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	015a      	lsls	r2, r3, #5
 800ffea:	6a3b      	ldr	r3, [r7, #32]
 800ffec:	4413      	add	r3, r2
 800ffee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fff2:	460a      	mov	r2, r1
 800fff4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fff6:	6a3b      	ldr	r3, [r7, #32]
 800fff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	bf0c      	ite	eq
 8010006:	2301      	moveq	r3, #1
 8010008:	2300      	movne	r3, #0
 801000a:	b2db      	uxtb	r3, r3
 801000c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	4413      	add	r3, r2
 8010016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	69fa      	ldr	r2, [r7, #28]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	6a3a      	ldr	r2, [r7, #32]
 8010022:	440a      	add	r2, r1
 8010024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801002c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	015a      	lsls	r2, r3, #5
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	4413      	add	r3, r2
 8010036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	7e7b      	ldrb	r3, [r7, #25]
 801003e:	075b      	lsls	r3, r3, #29
 8010040:	69f9      	ldr	r1, [r7, #28]
 8010042:	0148      	lsls	r0, r1, #5
 8010044:	6a39      	ldr	r1, [r7, #32]
 8010046:	4401      	add	r1, r0
 8010048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801004c:	4313      	orrs	r3, r2
 801004e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	015a      	lsls	r2, r3, #5
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	4413      	add	r3, r2
 8010058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4a41      	ldr	r2, [pc, #260]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010060:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010062:	4b40      	ldr	r3, [pc, #256]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801006a:	4a3e      	ldr	r2, [pc, #248]	; (8010164 <USB_HC_StartXfer+0x284>)
 801006c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	78db      	ldrb	r3, [r3, #3]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d006      	beq.n	8010084 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8010076:	4b3b      	ldr	r3, [pc, #236]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801007e:	4a39      	ldr	r2, [pc, #228]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	e005      	b.n	8010090 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8010084:	4b37      	ldr	r3, [pc, #220]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801008c:	4a35      	ldr	r2, [pc, #212]	; (8010164 <USB_HC_StartXfer+0x284>)
 801008e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010090:	4b34      	ldr	r3, [pc, #208]	; (8010164 <USB_HC_StartXfer+0x284>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010098:	4a32      	ldr	r2, [pc, #200]	; (8010164 <USB_HC_StartXfer+0x284>)
 801009a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100a8:	461a      	mov	r2, r3
 80100aa:	4b2e      	ldr	r3, [pc, #184]	; (8010164 <USB_HC_StartXfer+0x284>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80100b0:	79fb      	ldrb	r3, [r7, #7]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d14e      	bne.n	8010154 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	78db      	ldrb	r3, [r3, #3]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d14a      	bne.n	8010154 <USB_HC_StartXfer+0x274>
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d046      	beq.n	8010154 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	79db      	ldrb	r3, [r3, #7]
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	d830      	bhi.n	8010130 <USB_HC_StartXfer+0x250>
 80100ce:	a201      	add	r2, pc, #4	; (adr r2, 80100d4 <USB_HC_StartXfer+0x1f4>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	080100e5 	.word	0x080100e5
 80100d8:	08010109 	.word	0x08010109
 80100dc:	080100e5 	.word	0x080100e5
 80100e0:	08010109 	.word	0x08010109
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	691b      	ldr	r3, [r3, #16]
 80100e8:	3303      	adds	r3, #3
 80100ea:	089b      	lsrs	r3, r3, #2
 80100ec:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80100ee:	8afa      	ldrh	r2, [r7, #22]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d91c      	bls.n	8010134 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	699b      	ldr	r3, [r3, #24]
 80100fe:	f043 0220 	orr.w	r2, r3, #32
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	619a      	str	r2, [r3, #24]
          }
          break;
 8010106:	e015      	b.n	8010134 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	3303      	adds	r3, #3
 801010e:	089b      	lsrs	r3, r3, #2
 8010110:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8010112:	8afa      	ldrh	r2, [r7, #22]
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	b29b      	uxth	r3, r3
 801011e:	429a      	cmp	r2, r3
 8010120:	d90a      	bls.n	8010138 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	699b      	ldr	r3, [r3, #24]
 8010126:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	619a      	str	r2, [r3, #24]
          }
          break;
 801012e:	e003      	b.n	8010138 <USB_HC_StartXfer+0x258>

        default:
          break;
 8010130:	bf00      	nop
 8010132:	e002      	b.n	801013a <USB_HC_StartXfer+0x25a>
          break;
 8010134:	bf00      	nop
 8010136:	e000      	b.n	801013a <USB_HC_StartXfer+0x25a>
          break;
 8010138:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	68d9      	ldr	r1, [r3, #12]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	785a      	ldrb	r2, [r3, #1]
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	b298      	uxth	r0, r3
 8010148:	2300      	movs	r3, #0
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	4603      	mov	r3, r0
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f7ff fb92 	bl	800f878 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3728      	adds	r7, #40	; 0x28
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	1ff80000 	.word	0x1ff80000
 8010164:	2000110c 	.word	0x2000110c

08010168 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	b29b      	uxth	r3, r3
}
 801017e:	4618      	mov	r0, r3
 8010180:	3714      	adds	r7, #20
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801018a:	b480      	push	{r7}
 801018c:	b087      	sub	sp, #28
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	460b      	mov	r3, r1
 8010194:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 801019a:	78fb      	ldrb	r3, [r7, #3]
 801019c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	015a      	lsls	r2, r3, #5
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	4413      	add	r3, r2
 80101aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	0c9b      	lsrs	r3, r3, #18
 80101b2:	f003 0303 	and.w	r3, r3, #3
 80101b6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d002      	beq.n	80101c4 <USB_HC_Halt+0x3a>
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d16c      	bne.n	801029e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	015a      	lsls	r2, r3, #5
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	4413      	add	r3, r2
 80101cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	0151      	lsls	r1, r2, #5
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	440a      	add	r2, r1
 80101da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80101de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80101e2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d143      	bne.n	8010278 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	015a      	lsls	r2, r3, #5
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	0151      	lsls	r1, r2, #5
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	440a      	add	r2, r1
 8010206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801020a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801020e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	4413      	add	r3, r2
 8010218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	0151      	lsls	r1, r2, #5
 8010222:	693a      	ldr	r2, [r7, #16]
 8010224:	440a      	add	r2, r1
 8010226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801022a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801022e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	4413      	add	r3, r2
 8010238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	0151      	lsls	r1, r2, #5
 8010242:	693a      	ldr	r2, [r7, #16]
 8010244:	440a      	add	r2, r1
 8010246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801024a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801024e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	3301      	adds	r3, #1
 8010254:	617b      	str	r3, [r7, #20]
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801025c:	d81d      	bhi.n	801029a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	015a      	lsls	r2, r3, #5
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	4413      	add	r3, r2
 8010266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010274:	d0ec      	beq.n	8010250 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010276:	e080      	b.n	801037a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	015a      	lsls	r2, r3, #5
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	4413      	add	r3, r2
 8010280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	0151      	lsls	r1, r2, #5
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	440a      	add	r2, r1
 801028e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010296:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010298:	e06f      	b.n	801037a <USB_HC_Halt+0x1f0>
          break;
 801029a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801029c:	e06d      	b.n	801037a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	0151      	lsls	r1, r2, #5
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	440a      	add	r2, r1
 80102b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102bc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d143      	bne.n	8010356 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	015a      	lsls	r2, r3, #5
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	4413      	add	r3, r2
 80102d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	0151      	lsls	r1, r2, #5
 80102e0:	693a      	ldr	r2, [r7, #16]
 80102e2:	440a      	add	r2, r1
 80102e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80102e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	015a      	lsls	r2, r3, #5
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	4413      	add	r3, r2
 80102f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	0151      	lsls	r1, r2, #5
 8010300:	693a      	ldr	r2, [r7, #16]
 8010302:	440a      	add	r2, r1
 8010304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801030c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	015a      	lsls	r2, r3, #5
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	4413      	add	r3, r2
 8010316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	0151      	lsls	r1, r2, #5
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	440a      	add	r2, r1
 8010324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801032c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	3301      	adds	r3, #1
 8010332:	617b      	str	r3, [r7, #20]
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801033a:	d81d      	bhi.n	8010378 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	015a      	lsls	r2, r3, #5
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	4413      	add	r3, r2
 8010344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801034e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010352:	d0ec      	beq.n	801032e <USB_HC_Halt+0x1a4>
 8010354:	e011      	b.n	801037a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	015a      	lsls	r2, r3, #5
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	4413      	add	r3, r2
 801035e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	0151      	lsls	r1, r2, #5
 8010368:	693a      	ldr	r2, [r7, #16]
 801036a:	440a      	add	r2, r1
 801036c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010374:	6013      	str	r3, [r2, #0]
 8010376:	e000      	b.n	801037a <USB_HC_Halt+0x1f0>
          break;
 8010378:	bf00      	nop
    }
  }

  return HAL_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	371c      	adds	r7, #28
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8010388:	b480      	push	{r7}
 801038a:	b087      	sub	sp, #28
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8010398:	78fb      	ldrb	r3, [r7, #3]
 801039a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 801039c:	2301      	movs	r3, #1
 801039e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	04da      	lsls	r2, r3, #19
 80103a4:	4b15      	ldr	r3, [pc, #84]	; (80103fc <USB_DoPing+0x74>)
 80103a6:	4013      	ands	r3, r2
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	0151      	lsls	r1, r2, #5
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	440a      	add	r2, r1
 80103b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80103b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	015a      	lsls	r2, r3, #5
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	4413      	add	r3, r2
 80103c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80103d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	015a      	lsls	r2, r3, #5
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	4413      	add	r3, r2
 80103e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103e6:	461a      	mov	r2, r3
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	371c      	adds	r7, #28
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	1ff80000 	.word	0x1ff80000

08010400 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b086      	sub	sp, #24
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801040c:	2300      	movs	r3, #0
 801040e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff f9ae 	bl	800f772 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8010416:	2110      	movs	r1, #16
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7ff f9e5 	bl	800f7e8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff fa08 	bl	800f834 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8010424:	2300      	movs	r3, #0
 8010426:	613b      	str	r3, [r7, #16]
 8010428:	e01f      	b.n	801046a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	015a      	lsls	r2, r3, #5
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	4413      	add	r3, r2
 8010432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010440:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010448:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010450:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	015a      	lsls	r2, r3, #5
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4413      	add	r3, r2
 801045a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801045e:	461a      	mov	r2, r3
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	3301      	adds	r3, #1
 8010468:	613b      	str	r3, [r7, #16]
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	2b0f      	cmp	r3, #15
 801046e:	d9dc      	bls.n	801042a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010470:	2300      	movs	r3, #0
 8010472:	613b      	str	r3, [r7, #16]
 8010474:	e034      	b.n	80104e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	015a      	lsls	r2, r3, #5
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	4413      	add	r3, r2
 801047e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801048c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010494:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801049c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104aa:	461a      	mov	r2, r3
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	3301      	adds	r3, #1
 80104b4:	617b      	str	r3, [r7, #20]
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80104bc:	d80c      	bhi.n	80104d8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104d4:	d0ec      	beq.n	80104b0 <USB_StopHost+0xb0>
 80104d6:	e000      	b.n	80104da <USB_StopHost+0xda>
        break;
 80104d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	3301      	adds	r3, #1
 80104de:	613b      	str	r3, [r7, #16]
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	2b0f      	cmp	r3, #15
 80104e4:	d9c7      	bls.n	8010476 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104ec:	461a      	mov	r2, r3
 80104ee:	f04f 33ff 	mov.w	r3, #4294967295
 80104f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f04f 32ff 	mov.w	r2, #4294967295
 80104fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff f927 	bl	800f750 <USB_EnableGlobalInt>

  return HAL_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801050c:	b590      	push	{r4, r7, lr}
 801050e:	b089      	sub	sp, #36	; 0x24
 8010510:	af04      	add	r7, sp, #16
 8010512:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8010514:	2301      	movs	r3, #1
 8010516:	2202      	movs	r2, #2
 8010518:	2102      	movs	r1, #2
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 fcb4 	bl	8010e88 <USBH_FindInterface>
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	2bff      	cmp	r3, #255	; 0xff
 8010528:	d002      	beq.n	8010530 <USBH_CDC_InterfaceInit+0x24>
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d901      	bls.n	8010534 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010530:	2302      	movs	r3, #2
 8010532:	e13d      	b.n	80107b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8010534:	7bfb      	ldrb	r3, [r7, #15]
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fc89 	bl	8010e50 <USBH_SelectInterface>
 801053e:	4603      	mov	r3, r0
 8010540:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010542:	7bbb      	ldrb	r3, [r7, #14]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d001      	beq.n	801054c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8010548:	2302      	movs	r3, #2
 801054a:	e131      	b.n	80107b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8010552:	2050      	movs	r0, #80	; 0x50
 8010554:	f005 fe16 	bl	8016184 <malloc>
 8010558:	4603      	mov	r3, r0
 801055a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010562:	69db      	ldr	r3, [r3, #28]
 8010564:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d101      	bne.n	8010570 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 801056c:	2302      	movs	r3, #2
 801056e:	e11f      	b.n	80107b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010570:	2250      	movs	r2, #80	; 0x50
 8010572:	2100      	movs	r1, #0
 8010574:	68b8      	ldr	r0, [r7, #8]
 8010576:	f005 fe20 	bl	80161ba <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	211a      	movs	r1, #26
 8010580:	fb01 f303 	mul.w	r3, r1, r3
 8010584:	4413      	add	r3, r2
 8010586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	b25b      	sxtb	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	da15      	bge.n	80105be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010592:	7bfb      	ldrb	r3, [r7, #15]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	211a      	movs	r1, #26
 8010598:	fb01 f303 	mul.w	r3, r1, r3
 801059c:	4413      	add	r3, r2
 801059e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80105a2:	781a      	ldrb	r2, [r3, #0]
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	211a      	movs	r1, #26
 80105ae:	fb01 f303 	mul.w	r3, r1, r3
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80105b8:	881a      	ldrh	r2, [r3, #0]
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	785b      	ldrb	r3, [r3, #1]
 80105c2:	4619      	mov	r1, r3
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f002 f890 	bl	80126ea <USBH_AllocPipe>
 80105ca:	4603      	mov	r3, r0
 80105cc:	461a      	mov	r2, r3
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	7819      	ldrb	r1, [r3, #0]
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	7858      	ldrb	r0, [r3, #1]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80105e6:	68ba      	ldr	r2, [r7, #8]
 80105e8:	8952      	ldrh	r2, [r2, #10]
 80105ea:	9202      	str	r2, [sp, #8]
 80105ec:	2203      	movs	r2, #3
 80105ee:	9201      	str	r2, [sp, #4]
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	4623      	mov	r3, r4
 80105f4:	4602      	mov	r2, r0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f002 f848 	bl	801268c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	2200      	movs	r2, #0
 8010602:	4619      	mov	r1, r3
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f005 fd0d 	bl	8016024 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801060a:	2300      	movs	r3, #0
 801060c:	2200      	movs	r2, #0
 801060e:	210a      	movs	r1, #10
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fc39 	bl	8010e88 <USBH_FindInterface>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801061a:	7bfb      	ldrb	r3, [r7, #15]
 801061c:	2bff      	cmp	r3, #255	; 0xff
 801061e:	d002      	beq.n	8010626 <USBH_CDC_InterfaceInit+0x11a>
 8010620:	7bfb      	ldrb	r3, [r7, #15]
 8010622:	2b01      	cmp	r3, #1
 8010624:	d901      	bls.n	801062a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010626:	2302      	movs	r3, #2
 8010628:	e0c2      	b.n	80107b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801062a:	7bfb      	ldrb	r3, [r7, #15]
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	211a      	movs	r1, #26
 8010630:	fb01 f303 	mul.w	r3, r1, r3
 8010634:	4413      	add	r3, r2
 8010636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	b25b      	sxtb	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	da16      	bge.n	8010670 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010642:	7bfb      	ldrb	r3, [r7, #15]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	211a      	movs	r1, #26
 8010648:	fb01 f303 	mul.w	r3, r1, r3
 801064c:	4413      	add	r3, r2
 801064e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010652:	781a      	ldrb	r2, [r3, #0]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	211a      	movs	r1, #26
 801065e:	fb01 f303 	mul.w	r3, r1, r3
 8010662:	4413      	add	r3, r2
 8010664:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010668:	881a      	ldrh	r2, [r3, #0]
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	835a      	strh	r2, [r3, #26]
 801066e:	e015      	b.n	801069c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010670:	7bfb      	ldrb	r3, [r7, #15]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	211a      	movs	r1, #26
 8010676:	fb01 f303 	mul.w	r3, r1, r3
 801067a:	4413      	add	r3, r2
 801067c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010680:	781a      	ldrb	r2, [r3, #0]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010686:	7bfb      	ldrb	r3, [r7, #15]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	211a      	movs	r1, #26
 801068c:	fb01 f303 	mul.w	r3, r1, r3
 8010690:	4413      	add	r3, r2
 8010692:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010696:	881a      	ldrh	r2, [r3, #0]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	211a      	movs	r1, #26
 80106a2:	fb01 f303 	mul.w	r3, r1, r3
 80106a6:	4413      	add	r3, r2
 80106a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	da16      	bge.n	80106e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	211a      	movs	r1, #26
 80106ba:	fb01 f303 	mul.w	r3, r1, r3
 80106be:	4413      	add	r3, r2
 80106c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80106c4:	781a      	ldrb	r2, [r3, #0]
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	211a      	movs	r1, #26
 80106d0:	fb01 f303 	mul.w	r3, r1, r3
 80106d4:	4413      	add	r3, r2
 80106d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80106da:	881a      	ldrh	r2, [r3, #0]
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	835a      	strh	r2, [r3, #26]
 80106e0:	e015      	b.n	801070e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80106e2:	7bfb      	ldrb	r3, [r7, #15]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	211a      	movs	r1, #26
 80106e8:	fb01 f303 	mul.w	r3, r1, r3
 80106ec:	4413      	add	r3, r2
 80106ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80106f2:	781a      	ldrb	r2, [r3, #0]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80106f8:	7bfb      	ldrb	r3, [r7, #15]
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	211a      	movs	r1, #26
 80106fe:	fb01 f303 	mul.w	r3, r1, r3
 8010702:	4413      	add	r3, r2
 8010704:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010708:	881a      	ldrh	r2, [r3, #0]
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	7b9b      	ldrb	r3, [r3, #14]
 8010712:	4619      	mov	r1, r3
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f001 ffe8 	bl	80126ea <USBH_AllocPipe>
 801071a:	4603      	mov	r3, r0
 801071c:	461a      	mov	r2, r3
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	7bdb      	ldrb	r3, [r3, #15]
 8010726:	4619      	mov	r1, r3
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f001 ffde 	bl	80126ea <USBH_AllocPipe>
 801072e:	4603      	mov	r3, r0
 8010730:	461a      	mov	r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	7b59      	ldrb	r1, [r3, #13]
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	7b98      	ldrb	r0, [r3, #14]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801074a:	68ba      	ldr	r2, [r7, #8]
 801074c:	8b12      	ldrh	r2, [r2, #24]
 801074e:	9202      	str	r2, [sp, #8]
 8010750:	2202      	movs	r2, #2
 8010752:	9201      	str	r2, [sp, #4]
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	4623      	mov	r3, r4
 8010758:	4602      	mov	r2, r0
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f001 ff96 	bl	801268c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	7b19      	ldrb	r1, [r3, #12]
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	7bd8      	ldrb	r0, [r3, #15]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	8b52      	ldrh	r2, [r2, #26]
 8010778:	9202      	str	r2, [sp, #8]
 801077a:	2202      	movs	r2, #2
 801077c:	9201      	str	r2, [sp, #4]
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	4623      	mov	r3, r4
 8010782:	4602      	mov	r2, r0
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f001 ff81 	bl	801268c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	2200      	movs	r2, #0
 801078e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	7b5b      	ldrb	r3, [r3, #13]
 8010796:	2200      	movs	r2, #0
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f005 fc42 	bl	8016024 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	7b1b      	ldrb	r3, [r3, #12]
 80107a4:	2200      	movs	r2, #0
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f005 fc3b 	bl	8016024 <USBH_LL_SetToggle>

  return USBH_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd90      	pop	{r4, r7, pc}

080107b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00e      	beq.n	80107f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	4619      	mov	r1, r3
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f001 ff76 	bl	80126ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	4619      	mov	r1, r3
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f001 ffa1 	bl	801272c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7b1b      	ldrb	r3, [r3, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00e      	beq.n	8010816 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	7b1b      	ldrb	r3, [r3, #12]
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f001 ff63 	bl	80126ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	7b1b      	ldrb	r3, [r3, #12]
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f001 ff8e 	bl	801272c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2200      	movs	r2, #0
 8010814:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	7b5b      	ldrb	r3, [r3, #13]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00e      	beq.n	801083c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	7b5b      	ldrb	r3, [r3, #13]
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f001 ff50 	bl	80126ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	7b5b      	ldrb	r3, [r3, #13]
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f001 ff7b 	bl	801272c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2200      	movs	r2, #0
 801083a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010842:	69db      	ldr	r3, [r3, #28]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00b      	beq.n	8010860 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	4618      	mov	r0, r3
 8010852:	f005 fc9f 	bl	8016194 <free>
    phost->pActiveClass->pData = 0U;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801085c:	2200      	movs	r2, #0
 801085e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3340      	adds	r3, #64	; 0x40
 8010880:	4619      	mov	r1, r3
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 f8b1 	bl	80109ea <GetLineCoding>
 8010888:	4603      	mov	r3, r0
 801088a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 801088c:	7afb      	ldrb	r3, [r7, #11]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d105      	bne.n	801089e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010898:	2102      	movs	r1, #2
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801089e:	7afb      	ldrb	r3, [r7, #11]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3710      	adds	r7, #16
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80108b4:	2300      	movs	r3, #0
 80108b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80108c8:	2b04      	cmp	r3, #4
 80108ca:	d877      	bhi.n	80109bc <USBH_CDC_Process+0x114>
 80108cc:	a201      	add	r2, pc, #4	; (adr r2, 80108d4 <USBH_CDC_Process+0x2c>)
 80108ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d2:	bf00      	nop
 80108d4:	080108e9 	.word	0x080108e9
 80108d8:	080108ef 	.word	0x080108ef
 80108dc:	0801091f 	.word	0x0801091f
 80108e0:	08010993 	.word	0x08010993
 80108e4:	080109a1 	.word	0x080109a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80108e8:	2300      	movs	r3, #0
 80108ea:	73fb      	strb	r3, [r7, #15]
      break;
 80108ec:	e06d      	b.n	80109ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 f897 	bl	8010a28 <SetLineCoding>
 80108fa:	4603      	mov	r3, r0
 80108fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80108fe:	7bbb      	ldrb	r3, [r7, #14]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d104      	bne.n	801090e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	2202      	movs	r2, #2
 8010908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801090c:	e058      	b.n	80109c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801090e:	7bbb      	ldrb	r3, [r7, #14]
 8010910:	2b01      	cmp	r3, #1
 8010912:	d055      	beq.n	80109c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2204      	movs	r2, #4
 8010918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801091c:	e050      	b.n	80109c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	3340      	adds	r3, #64	; 0x40
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 f860 	bl	80109ea <GetLineCoding>
 801092a:	4603      	mov	r3, r0
 801092c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801092e:	7bbb      	ldrb	r3, [r7, #14]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d126      	bne.n	8010982 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010946:	791b      	ldrb	r3, [r3, #4]
 8010948:	429a      	cmp	r2, r3
 801094a:	d13b      	bne.n	80109c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010956:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010958:	429a      	cmp	r2, r3
 801095a:	d133      	bne.n	80109c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010966:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010968:	429a      	cmp	r2, r3
 801096a:	d12b      	bne.n	80109c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010974:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010976:	429a      	cmp	r2, r3
 8010978:	d124      	bne.n	80109c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 f984 	bl	8010c88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010980:	e020      	b.n	80109c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010982:	7bbb      	ldrb	r3, [r7, #14]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d01d      	beq.n	80109c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	2204      	movs	r2, #4
 801098c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010990:	e018      	b.n	80109c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f867 	bl	8010a66 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8f8 	bl	8010b8e <CDC_ProcessReception>
      break;
 801099e:	e014      	b.n	80109ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80109a0:	2100      	movs	r1, #0
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f001 f94f 	bl	8011c46 <USBH_ClrFeature>
 80109a8:	4603      	mov	r3, r0
 80109aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80109ac:	7bbb      	ldrb	r3, [r7, #14]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10a      	bne.n	80109c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80109ba:	e005      	b.n	80109c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80109bc:	bf00      	nop
 80109be:	e004      	b.n	80109ca <USBH_CDC_Process+0x122>
      break;
 80109c0:	bf00      	nop
 80109c2:	e002      	b.n	80109ca <USBH_CDC_Process+0x122>
      break;
 80109c4:	bf00      	nop
 80109c6:	e000      	b.n	80109ca <USBH_CDC_Process+0x122>
      break;
 80109c8:	bf00      	nop

  }

  return status;
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr

080109ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b082      	sub	sp, #8
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	22a1      	movs	r2, #161	; 0xa1
 80109f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2221      	movs	r2, #33	; 0x21
 80109fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2200      	movs	r2, #0
 8010a04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2207      	movs	r2, #7
 8010a10:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2207      	movs	r2, #7
 8010a16:	4619      	mov	r1, r3
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f001 faf4 	bl	8012006 <USBH_CtlReq>
 8010a1e:	4603      	mov	r3, r0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2221      	movs	r2, #33	; 0x21
 8010a36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2200      	movs	r2, #0
 8010a48:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2207      	movs	r2, #7
 8010a4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2207      	movs	r2, #7
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f001 fad5 	bl	8012006 <USBH_CtlReq>
 8010a5c:	4603      	mov	r3, r0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b086      	sub	sp, #24
 8010a6a:	af02      	add	r7, sp, #8
 8010a6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d002      	beq.n	8010a8c <CDC_ProcessTransmission+0x26>
 8010a86:	2b02      	cmp	r3, #2
 8010a88:	d025      	beq.n	8010ad6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8010a8a:	e07c      	b.n	8010b86 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	8b12      	ldrh	r2, [r2, #24]
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d90c      	bls.n	8010ab2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	69d9      	ldr	r1, [r3, #28]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	8b1a      	ldrh	r2, [r3, #24]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	7b58      	ldrb	r0, [r3, #13]
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f001 fdab 	bl	8012606 <USBH_BulkSendData>
 8010ab0:	e00c      	b.n	8010acc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	7b58      	ldrb	r0, [r3, #13]
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f001 fd9d 	bl	8012606 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2202      	movs	r2, #2
 8010ad0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010ad4:	e057      	b.n	8010b86 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	7b5b      	ldrb	r3, [r3, #13]
 8010ada:	4619      	mov	r1, r3
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f005 fa77 	bl	8015fd0 <USBH_LL_GetURBState>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010ae6:	7afb      	ldrb	r3, [r7, #11]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d136      	bne.n	8010b5a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	8b12      	ldrh	r2, [r2, #24]
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d90e      	bls.n	8010b16 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	8b12      	ldrh	r2, [r2, #24]
 8010b00:	1a9a      	subs	r2, r3, r2
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	69db      	ldr	r3, [r3, #28]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	8b12      	ldrh	r2, [r2, #24]
 8010b0e:	441a      	add	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	61da      	str	r2, [r3, #28]
 8010b14:	e002      	b.n	8010b1c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010b2c:	e006      	b.n	8010b3c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f892 	bl	8010c60 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2204      	movs	r2, #4
 8010b40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010b50:	2300      	movs	r3, #0
 8010b52:	2200      	movs	r2, #0
 8010b54:	f002 f8c6 	bl	8012ce4 <osMessageQueuePut>
      break;
 8010b58:	e014      	b.n	8010b84 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8010b5a:	7afb      	ldrb	r3, [r7, #11]
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d111      	bne.n	8010b84 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2201      	movs	r2, #1
 8010b64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2204      	movs	r2, #4
 8010b6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f002 f8b0 	bl	8012ce4 <osMessageQueuePut>
      break;
 8010b84:	bf00      	nop
  }
}
 8010b86:	bf00      	nop
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b086      	sub	sp, #24
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010b9c:	69db      	ldr	r3, [r3, #28]
 8010b9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010baa:	2b03      	cmp	r3, #3
 8010bac:	d002      	beq.n	8010bb4 <CDC_ProcessReception+0x26>
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d00e      	beq.n	8010bd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010bb2:	e051      	b.n	8010c58 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	6a19      	ldr	r1, [r3, #32]
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	8b5a      	ldrh	r2, [r3, #26]
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	7b1b      	ldrb	r3, [r3, #12]
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f001 fd45 	bl	8012650 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2204      	movs	r2, #4
 8010bca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010bce:	e043      	b.n	8010c58 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	7b1b      	ldrb	r3, [r3, #12]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f005 f9fa 	bl	8015fd0 <USBH_LL_GetURBState>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010be0:	7cfb      	ldrb	r3, [r7, #19]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d137      	bne.n	8010c56 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	7b1b      	ldrb	r3, [r3, #12]
 8010bea:	4619      	mov	r1, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f005 f95d 	bl	8015eac <USBH_LL_GetLastXferSize>
 8010bf2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d016      	beq.n	8010c2c <CDC_ProcessReception+0x9e>
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	8b5b      	ldrh	r3, [r3, #26]
 8010c02:	461a      	mov	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d910      	bls.n	8010c2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	1ad2      	subs	r2, r2, r3
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	6a1a      	ldr	r2, [r3, #32]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	441a      	add	r2, r3
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	2203      	movs	r2, #3
 8010c26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8010c2a:	e006      	b.n	8010c3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 f81d 	bl	8010c74 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2204      	movs	r2, #4
 8010c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010c4e:	2300      	movs	r3, #0
 8010c50:	2200      	movs	r2, #0
 8010c52:	f002 f847 	bl	8012ce4 <osMessageQueuePut>
      break;
 8010c56:	bf00      	nop
  }
}
 8010c58:	bf00      	nop
 8010c5a:	3718      	adds	r7, #24
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c68:	bf00      	nop
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c90:	bf00      	nop
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr

08010c9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010cb0:	2302      	movs	r3, #2
 8010cb2:	e044      	b.n	8010d3e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	79fa      	ldrb	r2, [r7, #7]
 8010cb8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f000 f841 	bl	8010d54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2200      	movs	r2, #0
 8010cee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d003      	beq.n	8010d00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8010d00:	2200      	movs	r2, #0
 8010d02:	2104      	movs	r1, #4
 8010d04:	2010      	movs	r0, #16
 8010d06:	f001 ff67 	bl	8012bd8 <osMessageQueueNew>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8010d12:	4b0d      	ldr	r3, [pc, #52]	; (8010d48 <USBH_Init+0xac>)
 8010d14:	4a0d      	ldr	r2, [pc, #52]	; (8010d4c <USBH_Init+0xb0>)
 8010d16:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8010d18:	4b0b      	ldr	r3, [pc, #44]	; (8010d48 <USBH_Init+0xac>)
 8010d1a:	2280      	movs	r2, #128	; 0x80
 8010d1c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8010d1e:	4b0a      	ldr	r3, [pc, #40]	; (8010d48 <USBH_Init+0xac>)
 8010d20:	2218      	movs	r2, #24
 8010d22:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8010d24:	4a08      	ldr	r2, [pc, #32]	; (8010d48 <USBH_Init+0xac>)
 8010d26:	68f9      	ldr	r1, [r7, #12]
 8010d28:	4809      	ldr	r0, [pc, #36]	; (8010d50 <USBH_Init+0xb4>)
 8010d2a:	f001 fdb3 	bl	8012894 <osThreadNew>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f005 f806 	bl	8015d48 <USBH_LL_Init>

  return USBH_OK;
 8010d3c:	2300      	movs	r3, #0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	2001b9a4 	.word	0x2001b9a4
 8010d4c:	08016f00 	.word	0x08016f00
 8010d50:	080119bd 	.word	0x080119bd

08010d54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010d60:	2300      	movs	r3, #0
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	e009      	b.n	8010d7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	33e0      	adds	r3, #224	; 0xe0
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	4413      	add	r3, r2
 8010d70:	2200      	movs	r2, #0
 8010d72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	3301      	adds	r3, #1
 8010d78:	60fb      	str	r3, [r7, #12]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2b0e      	cmp	r3, #14
 8010d7e:	d9f2      	bls.n	8010d66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d80:	2300      	movs	r3, #0
 8010d82:	60fb      	str	r3, [r7, #12]
 8010d84:	e009      	b.n	8010d9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010d90:	2200      	movs	r2, #0
 8010d92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	3301      	adds	r3, #1
 8010d98:	60fb      	str	r3, [r7, #12]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010da0:	d3f1      	bcc.n	8010d86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2201      	movs	r2, #1
 8010db2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2240      	movs	r2, #64	; 0x40
 8010dc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr

08010dfc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d016      	beq.n	8010e3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10e      	bne.n	8010e38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010e20:	1c59      	adds	r1, r3, #1
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	33de      	adds	r3, #222	; 0xde
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]
 8010e36:	e004      	b.n	8010e42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010e38:	2302      	movs	r3, #2
 8010e3a:	73fb      	strb	r3, [r7, #15]
 8010e3c:	e001      	b.n	8010e42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010e3e:	2302      	movs	r3, #2
 8010e40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3714      	adds	r7, #20
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010e66:	78fa      	ldrb	r2, [r7, #3]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d204      	bcs.n	8010e76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	78fa      	ldrb	r2, [r7, #3]
 8010e70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010e74:	e001      	b.n	8010e7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010e76:	2302      	movs	r3, #2
 8010e78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b087      	sub	sp, #28
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	4608      	mov	r0, r1
 8010e92:	4611      	mov	r1, r2
 8010e94:	461a      	mov	r2, r3
 8010e96:	4603      	mov	r3, r0
 8010e98:	70fb      	strb	r3, [r7, #3]
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	70bb      	strb	r3, [r7, #2]
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010eb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010eb2:	e025      	b.n	8010f00 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010eb4:	7dfb      	ldrb	r3, [r7, #23]
 8010eb6:	221a      	movs	r2, #26
 8010eb8:	fb02 f303 	mul.w	r3, r2, r3
 8010ebc:	3308      	adds	r3, #8
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	3302      	adds	r3, #2
 8010ec4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	795b      	ldrb	r3, [r3, #5]
 8010eca:	78fa      	ldrb	r2, [r7, #3]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d002      	beq.n	8010ed6 <USBH_FindInterface+0x4e>
 8010ed0:	78fb      	ldrb	r3, [r7, #3]
 8010ed2:	2bff      	cmp	r3, #255	; 0xff
 8010ed4:	d111      	bne.n	8010efa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010eda:	78ba      	ldrb	r2, [r7, #2]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d002      	beq.n	8010ee6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010ee0:	78bb      	ldrb	r3, [r7, #2]
 8010ee2:	2bff      	cmp	r3, #255	; 0xff
 8010ee4:	d109      	bne.n	8010efa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010eea:	787a      	ldrb	r2, [r7, #1]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d002      	beq.n	8010ef6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010ef0:	787b      	ldrb	r3, [r7, #1]
 8010ef2:	2bff      	cmp	r3, #255	; 0xff
 8010ef4:	d101      	bne.n	8010efa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	e006      	b.n	8010f08 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010efa:	7dfb      	ldrb	r3, [r7, #23]
 8010efc:	3301      	adds	r3, #1
 8010efe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010f00:	7dfb      	ldrb	r3, [r7, #23]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d9d6      	bls.n	8010eb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010f06:	23ff      	movs	r3, #255	; 0xff
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	371c      	adds	r7, #28
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f004 ff4f 	bl	8015dc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8010f22:	2101      	movs	r1, #1
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f005 f866 	bl	8015ff6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af04      	add	r7, sp, #16
 8010f3a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d102      	bne.n	8010f56 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2203      	movs	r2, #3
 8010f54:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	2b0b      	cmp	r3, #11
 8010f5e:	f200 823c 	bhi.w	80113da <USBH_Process+0x4a6>
 8010f62:	a201      	add	r2, pc, #4	; (adr r2, 8010f68 <USBH_Process+0x34>)
 8010f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f68:	08010f99 	.word	0x08010f99
 8010f6c:	08010fe7 	.word	0x08010fe7
 8010f70:	0801106b 	.word	0x0801106b
 8010f74:	08011359 	.word	0x08011359
 8010f78:	080113db 	.word	0x080113db
 8010f7c:	0801112b 	.word	0x0801112b
 8010f80:	080112e3 	.word	0x080112e3
 8010f84:	0801117d 	.word	0x0801117d
 8010f88:	080111b9 	.word	0x080111b9
 8010f8c:	080111f3 	.word	0x080111f3
 8010f90:	0801123b 	.word	0x0801123b
 8010f94:	08011341 	.word	0x08011341
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 821c 	beq.w	80113de <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2201      	movs	r2, #1
 8010faa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010fac:	20c8      	movs	r0, #200	; 0xc8
 8010fae:	f005 f86c 	bl	801608a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f004 ff5f 	bl	8015e76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010fdc:	2300      	movs	r3, #0
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f001 fe80 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8010fe4:	e1fb      	b.n	80113de <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d107      	bne.n	8011000 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2202      	movs	r2, #2
 8010ffc:	701a      	strb	r2, [r3, #0]
 8010ffe:	e025      	b.n	801104c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801100a:	d914      	bls.n	8011036 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011012:	3301      	adds	r3, #1
 8011014:	b2da      	uxtb	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011022:	2b03      	cmp	r3, #3
 8011024:	d903      	bls.n	801102e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	220d      	movs	r2, #13
 801102a:	701a      	strb	r2, [r3, #0]
 801102c:	e00e      	b.n	801104c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	e00a      	b.n	801104c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801103c:	f103 020a 	add.w	r2, r3, #10
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8011046:	200a      	movs	r0, #10
 8011048:	f005 f81f 	bl	801608a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011060:	2300      	movs	r3, #0
 8011062:	2200      	movs	r2, #0
 8011064:	f001 fe3e 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 8011068:	e1c0      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011070:	2b00      	cmp	r3, #0
 8011072:	d005      	beq.n	8011080 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801107a:	2104      	movs	r1, #4
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011080:	2064      	movs	r0, #100	; 0x64
 8011082:	f005 f802 	bl	801608a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f004 fed0 	bl	8015e2c <USBH_LL_GetSpeed>
 801108c:	4603      	mov	r3, r0
 801108e:	461a      	mov	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2205      	movs	r2, #5
 801109a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801109c:	2100      	movs	r1, #0
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f001 fb23 	bl	80126ea <USBH_AllocPipe>
 80110a4:	4603      	mov	r3, r0
 80110a6:	461a      	mov	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80110ac:	2180      	movs	r1, #128	; 0x80
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f001 fb1b 	bl	80126ea <USBH_AllocPipe>
 80110b4:	4603      	mov	r3, r0
 80110b6:	461a      	mov	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	7919      	ldrb	r1, [r3, #4]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80110d0:	b292      	uxth	r2, r2
 80110d2:	9202      	str	r2, [sp, #8]
 80110d4:	2200      	movs	r2, #0
 80110d6:	9201      	str	r2, [sp, #4]
 80110d8:	9300      	str	r3, [sp, #0]
 80110da:	4603      	mov	r3, r0
 80110dc:	2280      	movs	r2, #128	; 0x80
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f001 fad4 	bl	801268c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	7959      	ldrb	r1, [r3, #5]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110f8:	b292      	uxth	r2, r2
 80110fa:	9202      	str	r2, [sp, #8]
 80110fc:	2200      	movs	r2, #0
 80110fe:	9201      	str	r2, [sp, #4]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	4603      	mov	r3, r0
 8011104:	2200      	movs	r2, #0
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f001 fac0 	bl	801268c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011120:	2300      	movs	r3, #0
 8011122:	2200      	movs	r2, #0
 8011124:	f001 fdde 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 8011128:	e160      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f964 	bl	80113f8 <USBH_HandleEnum>
 8011130:	4603      	mov	r3, r0
 8011132:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011134:	7bbb      	ldrb	r3, [r7, #14]
 8011136:	b2db      	uxtb	r3, r3
 8011138:	2b00      	cmp	r3, #0
 801113a:	f040 8152 	bne.w	80113e2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801114c:	2b01      	cmp	r3, #1
 801114e:	d103      	bne.n	8011158 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2208      	movs	r2, #8
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	e002      	b.n	801115e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2207      	movs	r2, #7
 801115c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2205      	movs	r2, #5
 8011162:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011172:	2300      	movs	r3, #0
 8011174:	2200      	movs	r2, #0
 8011176:	f001 fdb5 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 801117a:	e132      	b.n	80113e2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011182:	2b00      	cmp	r3, #0
 8011184:	f000 812f 	beq.w	80113e6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801118e:	2101      	movs	r1, #1
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2208      	movs	r2, #8
 8011198:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2205      	movs	r2, #5
 801119e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80111ae:	2300      	movs	r3, #0
 80111b0:	2200      	movs	r2, #0
 80111b2:	f001 fd97 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80111b6:	e116      	b.n	80113e6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80111be:	b29b      	uxth	r3, r3
 80111c0:	4619      	mov	r1, r3
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fcf8 	bl	8011bb8 <USBH_SetCfg>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d102      	bne.n	80111d4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2209      	movs	r2, #9
 80111d2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80111e8:	2300      	movs	r3, #0
 80111ea:	2200      	movs	r2, #0
 80111ec:	f001 fd7a 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 80111f0:	e0fc      	b.n	80113ec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80111f8:	f003 0320 	and.w	r3, r3, #32
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00a      	beq.n	8011216 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8011200:	2101      	movs	r1, #1
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 fcfb 	bl	8011bfe <USBH_SetFeature>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d106      	bne.n	801121c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	220a      	movs	r2, #10
 8011212:	701a      	strb	r2, [r3, #0]
 8011214:	e002      	b.n	801121c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	220a      	movs	r2, #10
 801121a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2201      	movs	r2, #1
 8011220:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011230:	2300      	movs	r3, #0
 8011232:	2200      	movs	r2, #0
 8011234:	f001 fd56 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 8011238:	e0d8      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011240:	2b00      	cmp	r3, #0
 8011242:	d03f      	beq.n	80112c4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801124c:	2300      	movs	r3, #0
 801124e:	73fb      	strb	r3, [r7, #15]
 8011250:	e016      	b.n	8011280 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8011252:	7bfa      	ldrb	r2, [r7, #15]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	32de      	adds	r2, #222	; 0xde
 8011258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801125c:	791a      	ldrb	r2, [r3, #4]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8011264:	429a      	cmp	r2, r3
 8011266:	d108      	bne.n	801127a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8011268:	7bfa      	ldrb	r2, [r7, #15]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	32de      	adds	r2, #222	; 0xde
 801126e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8011278:	e005      	b.n	8011286 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801127a:	7bfb      	ldrb	r3, [r7, #15]
 801127c:	3301      	adds	r3, #1
 801127e:	73fb      	strb	r3, [r7, #15]
 8011280:	7bfb      	ldrb	r3, [r7, #15]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0e5      	beq.n	8011252 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d016      	beq.n	80112be <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011296:	689b      	ldr	r3, [r3, #8]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	4798      	blx	r3
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d109      	bne.n	80112b6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2206      	movs	r2, #6
 80112a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80112ae:	2103      	movs	r1, #3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	4798      	blx	r3
 80112b4:	e006      	b.n	80112c4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	220d      	movs	r2, #13
 80112ba:	701a      	strb	r2, [r3, #0]
 80112bc:	e002      	b.n	80112c4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	220d      	movs	r2, #13
 80112c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2205      	movs	r2, #5
 80112c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80112d8:	2300      	movs	r3, #0
 80112da:	2200      	movs	r2, #0
 80112dc:	f001 fd02 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 80112e0:	e084      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d017      	beq.n	801131c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80112f2:	691b      	ldr	r3, [r3, #16]
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	4798      	blx	r3
 80112f8:	4603      	mov	r3, r0
 80112fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80112fc:	7bbb      	ldrb	r3, [r7, #14]
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	220b      	movs	r2, #11
 8011308:	701a      	strb	r2, [r3, #0]
 801130a:	e00a      	b.n	8011322 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 801130c:	7bbb      	ldrb	r3, [r7, #14]
 801130e:	b2db      	uxtb	r3, r3
 8011310:	2b02      	cmp	r3, #2
 8011312:	d106      	bne.n	8011322 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	220d      	movs	r2, #13
 8011318:	701a      	strb	r2, [r3, #0]
 801131a:	e002      	b.n	8011322 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	220d      	movs	r2, #13
 8011320:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2205      	movs	r2, #5
 8011326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011336:	2300      	movs	r3, #0
 8011338:	2200      	movs	r2, #0
 801133a:	f001 fcd3 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 801133e:	e055      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011346:	2b00      	cmp	r3, #0
 8011348:	d04f      	beq.n	80113ea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	4798      	blx	r3
      }
      break;
 8011356:	e048      	b.n	80113ea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7ff fcf7 	bl	8010d54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d009      	beq.n	8011384 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011394:	2105      	movs	r1, #5
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d107      	bne.n	80113b6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7ff fdb0 	bl	8010f14 <USBH_Start>
 80113b4:	e002      	b.n	80113bc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f004 fd02 	bl	8015dc0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2201      	movs	r2, #1
 80113c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80113d0:	2300      	movs	r3, #0
 80113d2:	2200      	movs	r2, #0
 80113d4:	f001 fc86 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      break;
 80113d8:	e008      	b.n	80113ec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80113da:	bf00      	nop
 80113dc:	e006      	b.n	80113ec <USBH_Process+0x4b8>
      break;
 80113de:	bf00      	nop
 80113e0:	e004      	b.n	80113ec <USBH_Process+0x4b8>
      break;
 80113e2:	bf00      	nop
 80113e4:	e002      	b.n	80113ec <USBH_Process+0x4b8>
    break;
 80113e6:	bf00      	nop
 80113e8:	e000      	b.n	80113ec <USBH_Process+0x4b8>
      break;
 80113ea:	bf00      	nop
  }
  return USBH_OK;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop

080113f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b088      	sub	sp, #32
 80113fc:	af04      	add	r7, sp, #16
 80113fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011400:	2301      	movs	r3, #1
 8011402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011404:	2301      	movs	r3, #1
 8011406:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	785b      	ldrb	r3, [r3, #1]
 801140c:	2b07      	cmp	r3, #7
 801140e:	f200 8208 	bhi.w	8011822 <USBH_HandleEnum+0x42a>
 8011412:	a201      	add	r2, pc, #4	; (adr r2, 8011418 <USBH_HandleEnum+0x20>)
 8011414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011418:	08011439 	.word	0x08011439
 801141c:	080114f7 	.word	0x080114f7
 8011420:	08011561 	.word	0x08011561
 8011424:	080115ef 	.word	0x080115ef
 8011428:	08011659 	.word	0x08011659
 801142c:	080116c9 	.word	0x080116c9
 8011430:	08011765 	.word	0x08011765
 8011434:	080117e3 	.word	0x080117e3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011438:	2108      	movs	r1, #8
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 faec 	bl	8011a18 <USBH_Get_DevDesc>
 8011440:	4603      	mov	r3, r0
 8011442:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011444:	7bbb      	ldrb	r3, [r7, #14]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d130      	bne.n	80114ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7919      	ldrb	r1, [r3, #4]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801146e:	b292      	uxth	r2, r2
 8011470:	9202      	str	r2, [sp, #8]
 8011472:	2200      	movs	r2, #0
 8011474:	9201      	str	r2, [sp, #4]
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	4603      	mov	r3, r0
 801147a:	2280      	movs	r2, #128	; 0x80
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f001 f905 	bl	801268c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7959      	ldrb	r1, [r3, #5]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011496:	b292      	uxth	r2, r2
 8011498:	9202      	str	r2, [sp, #8]
 801149a:	2200      	movs	r2, #0
 801149c:	9201      	str	r2, [sp, #4]
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	4603      	mov	r3, r0
 80114a2:	2200      	movs	r2, #0
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f001 f8f1 	bl	801268c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80114aa:	e1bc      	b.n	8011826 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80114ac:	7bbb      	ldrb	r3, [r7, #14]
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	f040 81b9 	bne.w	8011826 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80114ba:	3301      	adds	r3, #1
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d903      	bls.n	80114d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	220d      	movs	r2, #13
 80114d2:	701a      	strb	r2, [r3, #0]
      break;
 80114d4:	e1a7      	b.n	8011826 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	795b      	ldrb	r3, [r3, #5]
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f001 f925 	bl	801272c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	791b      	ldrb	r3, [r3, #4]
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f001 f91f 	bl	801272c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2200      	movs	r2, #0
 80114f2:	701a      	strb	r2, [r3, #0]
      break;
 80114f4:	e197      	b.n	8011826 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80114f6:	2112      	movs	r1, #18
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fa8d 	bl	8011a18 <USBH_Get_DevDesc>
 80114fe:	4603      	mov	r3, r0
 8011500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011502:	7bbb      	ldrb	r3, [r7, #14]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d103      	bne.n	8011510 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2202      	movs	r2, #2
 801150c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801150e:	e18c      	b.n	801182a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011510:	7bbb      	ldrb	r3, [r7, #14]
 8011512:	2b03      	cmp	r3, #3
 8011514:	f040 8189 	bne.w	801182a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801151e:	3301      	adds	r3, #1
 8011520:	b2da      	uxtb	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801152e:	2b03      	cmp	r3, #3
 8011530:	d903      	bls.n	801153a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	220d      	movs	r2, #13
 8011536:	701a      	strb	r2, [r3, #0]
      break;
 8011538:	e177      	b.n	801182a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	795b      	ldrb	r3, [r3, #5]
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f001 f8f3 	bl	801272c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	791b      	ldrb	r3, [r3, #4]
 801154a:	4619      	mov	r1, r3
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f001 f8ed 	bl	801272c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	701a      	strb	r2, [r3, #0]
      break;
 801155e:	e164      	b.n	801182a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8011560:	2101      	movs	r1, #1
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 fb04 	bl	8011b70 <USBH_SetAddress>
 8011568:	4603      	mov	r3, r0
 801156a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801156c:	7bbb      	ldrb	r3, [r7, #14]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d132      	bne.n	80115d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8011572:	2002      	movs	r0, #2
 8011574:	f004 fd89 	bl	801608a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2201      	movs	r2, #1
 801157c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2203      	movs	r2, #3
 8011584:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	7919      	ldrb	r1, [r3, #4]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801159a:	b292      	uxth	r2, r2
 801159c:	9202      	str	r2, [sp, #8]
 801159e:	2200      	movs	r2, #0
 80115a0:	9201      	str	r2, [sp, #4]
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	4603      	mov	r3, r0
 80115a6:	2280      	movs	r2, #128	; 0x80
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f001 f86f 	bl	801268c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	7959      	ldrb	r1, [r3, #5]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115c2:	b292      	uxth	r2, r2
 80115c4:	9202      	str	r2, [sp, #8]
 80115c6:	2200      	movs	r2, #0
 80115c8:	9201      	str	r2, [sp, #4]
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	4603      	mov	r3, r0
 80115ce:	2200      	movs	r2, #0
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f001 f85b 	bl	801268c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80115d6:	e12a      	b.n	801182e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115d8:	7bbb      	ldrb	r3, [r7, #14]
 80115da:	2b03      	cmp	r3, #3
 80115dc:	f040 8127 	bne.w	801182e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	220d      	movs	r2, #13
 80115e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	705a      	strb	r2, [r3, #1]
      break;
 80115ec:	e11f      	b.n	801182e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80115ee:	2109      	movs	r1, #9
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fa39 	bl	8011a68 <USBH_Get_CfgDesc>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80115fa:	7bbb      	ldrb	r3, [r7, #14]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d103      	bne.n	8011608 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2204      	movs	r2, #4
 8011604:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011606:	e114      	b.n	8011832 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011608:	7bbb      	ldrb	r3, [r7, #14]
 801160a:	2b03      	cmp	r3, #3
 801160c:	f040 8111 	bne.w	8011832 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011616:	3301      	adds	r3, #1
 8011618:	b2da      	uxtb	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011626:	2b03      	cmp	r3, #3
 8011628:	d903      	bls.n	8011632 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	220d      	movs	r2, #13
 801162e:	701a      	strb	r2, [r3, #0]
      break;
 8011630:	e0ff      	b.n	8011832 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	795b      	ldrb	r3, [r3, #5]
 8011636:	4619      	mov	r1, r3
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f001 f877 	bl	801272c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	791b      	ldrb	r3, [r3, #4]
 8011642:	4619      	mov	r1, r3
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f001 f871 	bl	801272c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
      break;
 8011656:	e0ec      	b.n	8011832 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801165e:	4619      	mov	r1, r3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 fa01 	bl	8011a68 <USBH_Get_CfgDesc>
 8011666:	4603      	mov	r3, r0
 8011668:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801166a:	7bbb      	ldrb	r3, [r7, #14]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d103      	bne.n	8011678 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2205      	movs	r2, #5
 8011674:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011676:	e0de      	b.n	8011836 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011678:	7bbb      	ldrb	r3, [r7, #14]
 801167a:	2b03      	cmp	r3, #3
 801167c:	f040 80db 	bne.w	8011836 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011686:	3301      	adds	r3, #1
 8011688:	b2da      	uxtb	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011696:	2b03      	cmp	r3, #3
 8011698:	d903      	bls.n	80116a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	220d      	movs	r2, #13
 801169e:	701a      	strb	r2, [r3, #0]
      break;
 80116a0:	e0c9      	b.n	8011836 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	795b      	ldrb	r3, [r3, #5]
 80116a6:	4619      	mov	r1, r3
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f001 f83f 	bl	801272c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	791b      	ldrb	r3, [r3, #4]
 80116b2:	4619      	mov	r1, r3
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f001 f839 	bl	801272c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	701a      	strb	r2, [r3, #0]
      break;
 80116c6:	e0b6      	b.n	8011836 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d036      	beq.n	8011740 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80116de:	23ff      	movs	r3, #255	; 0xff
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f000 f9e5 	bl	8011ab0 <USBH_Get_StringDesc>
 80116e6:	4603      	mov	r3, r0
 80116e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80116ea:	7bbb      	ldrb	r3, [r7, #14]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d111      	bne.n	8011714 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2206      	movs	r2, #6
 80116f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2205      	movs	r2, #5
 80116fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801170a:	2300      	movs	r3, #0
 801170c:	2200      	movs	r2, #0
 801170e:	f001 fae9 	bl	8012ce4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8011712:	e092      	b.n	801183a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011714:	7bbb      	ldrb	r3, [r7, #14]
 8011716:	2b03      	cmp	r3, #3
 8011718:	f040 808f 	bne.w	801183a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2206      	movs	r2, #6
 8011720:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2205      	movs	r2, #5
 8011726:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011736:	2300      	movs	r3, #0
 8011738:	2200      	movs	r2, #0
 801173a:	f001 fad3 	bl	8012ce4 <osMessageQueuePut>
      break;
 801173e:	e07c      	b.n	801183a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2206      	movs	r2, #6
 8011744:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2205      	movs	r2, #5
 801174a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801175a:	2300      	movs	r3, #0
 801175c:	2200      	movs	r2, #0
 801175e:	f001 fac1 	bl	8012ce4 <osMessageQueuePut>
      break;
 8011762:	e06a      	b.n	801183a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801176a:	2b00      	cmp	r3, #0
 801176c:	d027      	beq.n	80117be <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801177a:	23ff      	movs	r3, #255	; 0xff
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f997 	bl	8011ab0 <USBH_Get_StringDesc>
 8011782:	4603      	mov	r3, r0
 8011784:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011786:	7bbb      	ldrb	r3, [r7, #14]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d103      	bne.n	8011794 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2207      	movs	r2, #7
 8011790:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8011792:	e054      	b.n	801183e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011794:	7bbb      	ldrb	r3, [r7, #14]
 8011796:	2b03      	cmp	r3, #3
 8011798:	d151      	bne.n	801183e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2207      	movs	r2, #7
 801179e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2205      	movs	r2, #5
 80117a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80117b4:	2300      	movs	r3, #0
 80117b6:	2200      	movs	r2, #0
 80117b8:	f001 fa94 	bl	8012ce4 <osMessageQueuePut>
      break;
 80117bc:	e03f      	b.n	801183e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2207      	movs	r2, #7
 80117c2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2205      	movs	r2, #5
 80117c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80117d8:	2300      	movs	r3, #0
 80117da:	2200      	movs	r2, #0
 80117dc:	f001 fa82 	bl	8012ce4 <osMessageQueuePut>
      break;
 80117e0:	e02d      	b.n	801183e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d017      	beq.n	801181c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117f8:	23ff      	movs	r3, #255	; 0xff
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f000 f958 	bl	8011ab0 <USBH_Get_StringDesc>
 8011800:	4603      	mov	r3, r0
 8011802:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011804:	7bbb      	ldrb	r3, [r7, #14]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d102      	bne.n	8011810 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801180a:	2300      	movs	r3, #0
 801180c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801180e:	e018      	b.n	8011842 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011810:	7bbb      	ldrb	r3, [r7, #14]
 8011812:	2b03      	cmp	r3, #3
 8011814:	d115      	bne.n	8011842 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8011816:	2300      	movs	r3, #0
 8011818:	73fb      	strb	r3, [r7, #15]
      break;
 801181a:	e012      	b.n	8011842 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 801181c:	2300      	movs	r3, #0
 801181e:	73fb      	strb	r3, [r7, #15]
      break;
 8011820:	e00f      	b.n	8011842 <USBH_HandleEnum+0x44a>

    default:
      break;
 8011822:	bf00      	nop
 8011824:	e00e      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 8011826:	bf00      	nop
 8011828:	e00c      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 801182a:	bf00      	nop
 801182c:	e00a      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 801182e:	bf00      	nop
 8011830:	e008      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 8011832:	bf00      	nop
 8011834:	e006      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 8011836:	bf00      	nop
 8011838:	e004      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 801183a:	bf00      	nop
 801183c:	e002      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 801183e:	bf00      	nop
 8011840:	e000      	b.n	8011844 <USBH_HandleEnum+0x44c>
      break;
 8011842:	bf00      	nop
  }
  return Status;
 8011844:	7bfb      	ldrb	r3, [r7, #15]
}
 8011846:	4618      	mov	r0, r3
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop

08011850 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8011862:	bf00      	nop
 8011864:	370c      	adds	r7, #12
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr

0801186e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b082      	sub	sp, #8
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801187c:	1c5a      	adds	r2, r3, #1
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f000 f804 	bl	8011892 <USBH_HandleSof>
}
 801188a:	bf00      	nop
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b082      	sub	sp, #8
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b0b      	cmp	r3, #11
 80118a2:	d10a      	bne.n	80118ba <USBH_HandleSof+0x28>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d005      	beq.n	80118ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80118b4:	699b      	ldr	r3, [r3, #24]
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	4798      	blx	r3
  }
}
 80118ba:	bf00      	nop
 80118bc:	3708      	adds	r7, #8
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b082      	sub	sp, #8
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2201      	movs	r2, #1
 80118ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2201      	movs	r2, #1
 80118d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80118e6:	2300      	movs	r3, #0
 80118e8:	2200      	movs	r2, #0
 80118ea:	f001 f9fb 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif

  return;
 80118ee:	bf00      	nop
}
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80118f6:	b480      	push	{r7}
 80118f8:	b083      	sub	sp, #12
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8011906:	bf00      	nop
}
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b082      	sub	sp, #8
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2201      	movs	r2, #1
 801191e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2201      	movs	r2, #1
 8011936:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011946:	2300      	movs	r3, #0
 8011948:	2200      	movs	r2, #0
 801194a:	f001 f9cb 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 801194e:	2300      	movs	r3, #0
}
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2201      	movs	r2, #1
 8011964:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2200      	movs	r2, #0
 8011974:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f004 fa3c 	bl	8015df6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	791b      	ldrb	r3, [r3, #4]
 8011982:	4619      	mov	r1, r3
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 fed1 	bl	801272c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	795b      	ldrb	r3, [r3, #5]
 801198e:	4619      	mov	r1, r3
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 fecb 	bl	801272c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2201      	movs	r2, #1
 801199a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80119aa:	2300      	movs	r3, #0
 80119ac:	2200      	movs	r2, #0
 80119ae:	f001 f999 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80119b2:	2300      	movs	r3, #0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80119d0:	f04f 33ff 	mov.w	r3, #4294967295
 80119d4:	2200      	movs	r2, #0
 80119d6:	f001 f9f9 	bl	8012dcc <osMessageQueueGet>
 80119da:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d1f0      	bne.n	80119c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff faa6 	bl	8010f34 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80119e8:	e7ec      	b.n	80119c4 <USBH_Process_OS+0x8>

080119ea <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b082      	sub	sp, #8
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011a06:	2300      	movs	r3, #0
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f001 f96b 	bl	8012ce4 <osMessageQueuePut>
#endif

  return USBH_OK;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af02      	add	r7, sp, #8
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8011a2a:	78fb      	ldrb	r3, [r7, #3]
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	4613      	mov	r3, r2
 8011a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a36:	2100      	movs	r1, #0
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f864 	bl	8011b06 <USBH_GetDescriptor>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	73fb      	strb	r3, [r7, #15]
 8011a42:	7bfb      	ldrb	r3, [r7, #15]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10a      	bne.n	8011a5e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011a54:	78fa      	ldrb	r2, [r7, #3]
 8011a56:	b292      	uxth	r2, r2
 8011a58:	4619      	mov	r1, r3
 8011a5a:	f000 f918 	bl	8011c8e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3710      	adds	r7, #16
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b086      	sub	sp, #24
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	460b      	mov	r3, r1
 8011a72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	331c      	adds	r3, #28
 8011a78:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011a7a:	887b      	ldrh	r3, [r7, #2]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a84:	2100      	movs	r1, #0
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 f83d 	bl	8011b06 <USBH_GetDescriptor>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	72fb      	strb	r3, [r7, #11]
 8011a90:	7afb      	ldrb	r3, [r7, #11]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d107      	bne.n	8011aa6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011a9c:	887a      	ldrh	r2, [r7, #2]
 8011a9e:	68f9      	ldr	r1, [r7, #12]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f000 f964 	bl	8011d6e <USBH_ParseCfgDesc>
  }

  return status;
 8011aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b088      	sub	sp, #32
 8011ab4:	af02      	add	r7, sp, #8
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	607a      	str	r2, [r7, #4]
 8011aba:	461a      	mov	r2, r3
 8011abc:	460b      	mov	r3, r1
 8011abe:	72fb      	strb	r3, [r7, #11]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8011ac4:	7afb      	ldrb	r3, [r7, #11]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011acc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8011ad4:	893b      	ldrh	r3, [r7, #8]
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	2100      	movs	r1, #0
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f000 f812 	bl	8011b06 <USBH_GetDescriptor>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	75fb      	strb	r3, [r7, #23]
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d107      	bne.n	8011afc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011af2:	893a      	ldrh	r2, [r7, #8]
 8011af4:	6879      	ldr	r1, [r7, #4]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 fa37 	bl	8011f6a <USBH_ParseStringDesc>
  }

  return status;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	60f8      	str	r0, [r7, #12]
 8011b0e:	607b      	str	r3, [r7, #4]
 8011b10:	460b      	mov	r3, r1
 8011b12:	72fb      	strb	r3, [r7, #11]
 8011b14:	4613      	mov	r3, r2
 8011b16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	789b      	ldrb	r3, [r3, #2]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d11c      	bne.n	8011b5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011b20:	7afb      	ldrb	r3, [r7, #11]
 8011b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b26:	b2da      	uxtb	r2, r3
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2206      	movs	r2, #6
 8011b30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	893a      	ldrh	r2, [r7, #8]
 8011b36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011b38:	893b      	ldrh	r3, [r7, #8]
 8011b3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b42:	d104      	bne.n	8011b4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f240 4209 	movw	r2, #1033	; 0x409
 8011b4a:	829a      	strh	r2, [r3, #20]
 8011b4c:	e002      	b.n	8011b54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2200      	movs	r2, #0
 8011b52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	8b3a      	ldrh	r2, [r7, #24]
 8011b58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011b5a:	8b3b      	ldrh	r3, [r7, #24]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	6879      	ldr	r1, [r7, #4]
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 fa50 	bl	8012006 <USBH_CtlReq>
 8011b66:	4603      	mov	r3, r0
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	789b      	ldrb	r3, [r3, #2]
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d10f      	bne.n	8011ba4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2205      	movs	r2, #5
 8011b8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011b90:	78fb      	ldrb	r3, [r7, #3]
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 fa2c 	bl	8012006 <USBH_CtlReq>
 8011bae:	4603      	mov	r3, r0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	789b      	ldrb	r3, [r3, #2]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d10e      	bne.n	8011bea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2209      	movs	r2, #9
 8011bd6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	887a      	ldrh	r2, [r7, #2]
 8011bdc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011bea:	2200      	movs	r2, #0
 8011bec:	2100      	movs	r1, #0
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 fa09 	bl	8012006 <USBH_CtlReq>
 8011bf4:	4603      	mov	r3, r0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3708      	adds	r7, #8
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	460b      	mov	r3, r1
 8011c08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	789b      	ldrb	r3, [r3, #2]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d10f      	bne.n	8011c32 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2203      	movs	r2, #3
 8011c1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011c1e:	78fb      	ldrb	r3, [r7, #3]
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8011c32:	2200      	movs	r2, #0
 8011c34:	2100      	movs	r1, #0
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f9e5 	bl	8012006 <USBH_CtlReq>
 8011c3c:	4603      	mov	r3, r0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3708      	adds	r7, #8
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b082      	sub	sp, #8
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
 8011c4e:	460b      	mov	r3, r1
 8011c50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	789b      	ldrb	r3, [r3, #2]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d10f      	bne.n	8011c7a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2202      	movs	r2, #2
 8011c5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2201      	movs	r2, #1
 8011c64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011c6c:	78fb      	ldrb	r3, [r7, #3]
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f000 f9c1 	bl	8012006 <USBH_CtlReq>
 8011c84:	4603      	mov	r3, r0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3708      	adds	r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8011c8e:	b480      	push	{r7}
 8011c90:	b085      	sub	sp, #20
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	60f8      	str	r0, [r7, #12]
 8011c96:	60b9      	str	r1, [r7, #8]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	781a      	ldrb	r2, [r3, #0]
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	785a      	ldrb	r2, [r3, #1]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	3302      	adds	r3, #2
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	3303      	adds	r3, #3
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	021b      	lsls	r3, r3, #8
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	4313      	orrs	r3, r2
 8011cc2:	b29a      	uxth	r2, r3
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	791a      	ldrb	r2, [r3, #4]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	795a      	ldrb	r2, [r3, #5]
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	799a      	ldrb	r2, [r3, #6]
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	79da      	ldrb	r2, [r3, #7]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8011ce8:	88fb      	ldrh	r3, [r7, #6]
 8011cea:	2b08      	cmp	r3, #8
 8011cec:	d939      	bls.n	8011d62 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	3309      	adds	r3, #9
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	021b      	lsls	r3, r3, #8
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	4313      	orrs	r3, r2
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	330a      	adds	r3, #10
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	330b      	adds	r3, #11
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	021b      	lsls	r3, r3, #8
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	b29a      	uxth	r2, r3
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	330c      	adds	r3, #12
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	330d      	adds	r3, #13
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	021b      	lsls	r3, r3, #8
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	7b9a      	ldrb	r2, [r3, #14]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	7bda      	ldrb	r2, [r3, #15]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	7c1a      	ldrb	r2, [r3, #16]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	7c5a      	ldrb	r2, [r3, #17]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	745a      	strb	r2, [r3, #17]
  }
}
 8011d62:	bf00      	nop
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr

08011d6e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b08a      	sub	sp, #40	; 0x28
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	60f8      	str	r0, [r7, #12]
 8011d76:	60b9      	str	r1, [r7, #8]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011d80:	2300      	movs	r3, #0
 8011d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8011d86:	2300      	movs	r3, #0
 8011d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	781a      	ldrb	r2, [r3, #0]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	785a      	ldrb	r2, [r3, #1]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	3302      	adds	r3, #2
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	3303      	adds	r3, #3
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	021b      	lsls	r3, r3, #8
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	4313      	orrs	r3, r2
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	791a      	ldrb	r2, [r3, #4]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	795a      	ldrb	r2, [r3, #5]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	799a      	ldrb	r2, [r3, #6]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	79da      	ldrb	r2, [r3, #7]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	7a1a      	ldrb	r2, [r3, #8]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011de4:	88fb      	ldrh	r3, [r7, #6]
 8011de6:	2b09      	cmp	r3, #9
 8011de8:	d95f      	bls.n	8011eaa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8011dea:	2309      	movs	r3, #9
 8011dec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011df2:	e051      	b.n	8011e98 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011df4:	f107 0316 	add.w	r3, r7, #22
 8011df8:	4619      	mov	r1, r3
 8011dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dfc:	f000 f8e8 	bl	8011fd0 <USBH_GetNextDesc>
 8011e00:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	785b      	ldrb	r3, [r3, #1]
 8011e06:	2b04      	cmp	r3, #4
 8011e08:	d146      	bne.n	8011e98 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8011e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e0e:	221a      	movs	r2, #26
 8011e10:	fb02 f303 	mul.w	r3, r2, r3
 8011e14:	3308      	adds	r3, #8
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	4413      	add	r3, r2
 8011e1a:	3302      	adds	r3, #2
 8011e1c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e20:	69f8      	ldr	r0, [r7, #28]
 8011e22:	f000 f846 	bl	8011eb2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011e26:	2300      	movs	r3, #0
 8011e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011e30:	e022      	b.n	8011e78 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011e32:	f107 0316 	add.w	r3, r7, #22
 8011e36:	4619      	mov	r1, r3
 8011e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e3a:	f000 f8c9 	bl	8011fd0 <USBH_GetNextDesc>
 8011e3e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8011e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e42:	785b      	ldrb	r3, [r3, #1]
 8011e44:	2b05      	cmp	r3, #5
 8011e46:	d117      	bne.n	8011e78 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011e50:	3201      	adds	r2, #1
 8011e52:	00d2      	lsls	r2, r2, #3
 8011e54:	211a      	movs	r1, #26
 8011e56:	fb01 f303 	mul.w	r3, r1, r3
 8011e5a:	4413      	add	r3, r2
 8011e5c:	3308      	adds	r3, #8
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	4413      	add	r3, r2
 8011e62:	3304      	adds	r3, #4
 8011e64:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8011e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e68:	69b8      	ldr	r0, [r7, #24]
 8011e6a:	f000 f851 	bl	8011f10 <USBH_ParseEPDesc>
            ep_ix++;
 8011e6e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e72:	3301      	adds	r3, #1
 8011e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	791b      	ldrb	r3, [r3, #4]
 8011e7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d204      	bcs.n	8011e8e <USBH_ParseCfgDesc+0x120>
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	885a      	ldrh	r2, [r3, #2]
 8011e88:	8afb      	ldrh	r3, [r7, #22]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d8d1      	bhi.n	8011e32 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8011e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e92:	3301      	adds	r3, #1
 8011e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d804      	bhi.n	8011eaa <USBH_ParseCfgDesc+0x13c>
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	885a      	ldrh	r2, [r3, #2]
 8011ea4:	8afb      	ldrh	r3, [r7, #22]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d8a4      	bhi.n	8011df4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8011eaa:	bf00      	nop
 8011eac:	3728      	adds	r7, #40	; 0x28
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}

08011eb2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b083      	sub	sp, #12
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
 8011eba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	785a      	ldrb	r2, [r3, #1]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	789a      	ldrb	r2, [r3, #2]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	78da      	ldrb	r2, [r3, #3]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	791a      	ldrb	r2, [r3, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	795a      	ldrb	r2, [r3, #5]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	799a      	ldrb	r2, [r3, #6]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	79da      	ldrb	r2, [r3, #7]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	7a1a      	ldrb	r2, [r3, #8]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	721a      	strb	r2, [r3, #8]
}
 8011f04:	bf00      	nop
 8011f06:	370c      	adds	r7, #12
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	781a      	ldrb	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	785a      	ldrb	r2, [r3, #1]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	789a      	ldrb	r2, [r3, #2]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	78da      	ldrb	r2, [r3, #3]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	b29a      	uxth	r2, r3
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	3305      	adds	r3, #5
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	021b      	lsls	r3, r3, #8
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	b29a      	uxth	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	799a      	ldrb	r2, [r3, #6]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	719a      	strb	r2, [r3, #6]
}
 8011f5e:	bf00      	nop
 8011f60:	370c      	adds	r7, #12
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr

08011f6a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b087      	sub	sp, #28
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	60f8      	str	r0, [r7, #12]
 8011f72:	60b9      	str	r1, [r7, #8]
 8011f74:	4613      	mov	r3, r2
 8011f76:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	2b03      	cmp	r3, #3
 8011f80:	d120      	bne.n	8011fc4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	1e9a      	subs	r2, r3, #2
 8011f88:	88fb      	ldrh	r3, [r7, #6]
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	bf28      	it	cs
 8011f8e:	4613      	movcs	r3, r2
 8011f90:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	3302      	adds	r3, #2
 8011f96:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011f98:	2300      	movs	r3, #0
 8011f9a:	82fb      	strh	r3, [r7, #22]
 8011f9c:	e00b      	b.n	8011fb6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011f9e:	8afb      	ldrh	r3, [r7, #22]
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	781a      	ldrb	r2, [r3, #0]
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	3301      	adds	r3, #1
 8011fae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011fb0:	8afb      	ldrh	r3, [r7, #22]
 8011fb2:	3302      	adds	r3, #2
 8011fb4:	82fb      	strh	r3, [r7, #22]
 8011fb6:	8afa      	ldrh	r2, [r7, #22]
 8011fb8:	8abb      	ldrh	r3, [r7, #20]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d3ef      	bcc.n	8011f9e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	701a      	strb	r2, [r3, #0]
  }
}
 8011fc4:	bf00      	nop
 8011fc6:	371c      	adds	r7, #28
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	881a      	ldrh	r2, [r3, #0]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	4413      	add	r3, r2
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011ff8:	68fb      	ldr	r3, [r7, #12]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3714      	adds	r7, #20
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr

08012006 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b086      	sub	sp, #24
 801200a:	af00      	add	r7, sp, #0
 801200c:	60f8      	str	r0, [r7, #12]
 801200e:	60b9      	str	r1, [r7, #8]
 8012010:	4613      	mov	r3, r2
 8012012:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8012014:	2301      	movs	r3, #1
 8012016:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	789b      	ldrb	r3, [r3, #2]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d002      	beq.n	8012026 <USBH_CtlReq+0x20>
 8012020:	2b02      	cmp	r3, #2
 8012022:	d01d      	beq.n	8012060 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8012024:	e043      	b.n	80120ae <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	68ba      	ldr	r2, [r7, #8]
 801202a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	88fa      	ldrh	r2, [r7, #6]
 8012030:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2201      	movs	r2, #1
 8012036:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2202      	movs	r2, #2
 801203c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801203e:	2301      	movs	r3, #1
 8012040:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2203      	movs	r2, #3
 8012046:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012056:	2300      	movs	r3, #0
 8012058:	2200      	movs	r2, #0
 801205a:	f000 fe43 	bl	8012ce4 <osMessageQueuePut>
      break;
 801205e:	e026      	b.n	80120ae <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 f829 	bl	80120b8 <USBH_HandleControl>
 8012066:	4603      	mov	r3, r0
 8012068:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d002      	beq.n	8012076 <USBH_CtlReq+0x70>
 8012070:	7dfb      	ldrb	r3, [r7, #23]
 8012072:	2b03      	cmp	r3, #3
 8012074:	d106      	bne.n	8012084 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2201      	movs	r2, #1
 801207a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2200      	movs	r2, #0
 8012080:	761a      	strb	r2, [r3, #24]
 8012082:	e005      	b.n	8012090 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	2b02      	cmp	r3, #2
 8012088:	d102      	bne.n	8012090 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2201      	movs	r2, #1
 801208e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2203      	movs	r2, #3
 8012094:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80120a4:	2300      	movs	r3, #0
 80120a6:	2200      	movs	r2, #0
 80120a8:	f000 fe1c 	bl	8012ce4 <osMessageQueuePut>
      break;
 80120ac:	bf00      	nop
  }
  return status;
 80120ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3718      	adds	r7, #24
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af02      	add	r7, sp, #8
 80120be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80120c0:	2301      	movs	r3, #1
 80120c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80120c4:	2300      	movs	r3, #0
 80120c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	7e1b      	ldrb	r3, [r3, #24]
 80120cc:	3b01      	subs	r3, #1
 80120ce:	2b0a      	cmp	r3, #10
 80120d0:	f200 822b 	bhi.w	801252a <USBH_HandleControl+0x472>
 80120d4:	a201      	add	r2, pc, #4	; (adr r2, 80120dc <USBH_HandleControl+0x24>)
 80120d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120da:	bf00      	nop
 80120dc:	08012109 	.word	0x08012109
 80120e0:	08012123 	.word	0x08012123
 80120e4:	080121c5 	.word	0x080121c5
 80120e8:	080121eb 	.word	0x080121eb
 80120ec:	08012277 	.word	0x08012277
 80120f0:	080122a3 	.word	0x080122a3
 80120f4:	08012365 	.word	0x08012365
 80120f8:	08012387 	.word	0x08012387
 80120fc:	08012419 	.word	0x08012419
 8012100:	08012441 	.word	0x08012441
 8012104:	080124d3 	.word	0x080124d3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f103 0110 	add.w	r1, r3, #16
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	795b      	ldrb	r3, [r3, #5]
 8012112:	461a      	mov	r2, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 fa19 	bl	801254c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2202      	movs	r2, #2
 801211e:	761a      	strb	r2, [r3, #24]
      break;
 8012120:	e20e      	b.n	8012540 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	795b      	ldrb	r3, [r3, #5]
 8012126:	4619      	mov	r1, r3
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f003 ff51 	bl	8015fd0 <USBH_LL_GetURBState>
 801212e:	4603      	mov	r3, r0
 8012130:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8012132:	7bbb      	ldrb	r3, [r7, #14]
 8012134:	2b01      	cmp	r3, #1
 8012136:	d12c      	bne.n	8012192 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	7c1b      	ldrb	r3, [r3, #16]
 801213c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012140:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	8adb      	ldrh	r3, [r3, #22]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00a      	beq.n	8012160 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801214a:	7b7b      	ldrb	r3, [r7, #13]
 801214c:	2b80      	cmp	r3, #128	; 0x80
 801214e:	d103      	bne.n	8012158 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2203      	movs	r2, #3
 8012154:	761a      	strb	r2, [r3, #24]
 8012156:	e00d      	b.n	8012174 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2205      	movs	r2, #5
 801215c:	761a      	strb	r2, [r3, #24]
 801215e:	e009      	b.n	8012174 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8012160:	7b7b      	ldrb	r3, [r7, #13]
 8012162:	2b80      	cmp	r3, #128	; 0x80
 8012164:	d103      	bne.n	801216e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2209      	movs	r2, #9
 801216a:	761a      	strb	r2, [r3, #24]
 801216c:	e002      	b.n	8012174 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2207      	movs	r2, #7
 8012172:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2203      	movs	r2, #3
 8012178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012188:	2300      	movs	r3, #0
 801218a:	2200      	movs	r2, #0
 801218c:	f000 fdaa 	bl	8012ce4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8012190:	e1cd      	b.n	801252e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012192:	7bbb      	ldrb	r3, [r7, #14]
 8012194:	2b04      	cmp	r3, #4
 8012196:	d003      	beq.n	80121a0 <USBH_HandleControl+0xe8>
 8012198:	7bbb      	ldrb	r3, [r7, #14]
 801219a:	2b02      	cmp	r3, #2
 801219c:	f040 81c7 	bne.w	801252e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	220b      	movs	r2, #11
 80121a4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2203      	movs	r2, #3
 80121aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80121ba:	2300      	movs	r3, #0
 80121bc:	2200      	movs	r2, #0
 80121be:	f000 fd91 	bl	8012ce4 <osMessageQueuePut>
      break;
 80121c2:	e1b4      	b.n	801252e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6899      	ldr	r1, [r3, #8]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	899a      	ldrh	r2, [r3, #12]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	791b      	ldrb	r3, [r3, #4]
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 f9f4 	bl	80125ca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2204      	movs	r2, #4
 80121e6:	761a      	strb	r2, [r3, #24]
      break;
 80121e8:	e1aa      	b.n	8012540 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	791b      	ldrb	r3, [r3, #4]
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f003 feed 	bl	8015fd0 <USBH_LL_GetURBState>
 80121f6:	4603      	mov	r3, r0
 80121f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80121fa:	7bbb      	ldrb	r3, [r7, #14]
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d110      	bne.n	8012222 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2209      	movs	r2, #9
 8012204:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2203      	movs	r2, #3
 801220a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801221a:	2300      	movs	r3, #0
 801221c:	2200      	movs	r2, #0
 801221e:	f000 fd61 	bl	8012ce4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8012222:	7bbb      	ldrb	r3, [r7, #14]
 8012224:	2b05      	cmp	r3, #5
 8012226:	d110      	bne.n	801224a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8012228:	2303      	movs	r3, #3
 801222a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2203      	movs	r2, #3
 8012230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012240:	2300      	movs	r3, #0
 8012242:	2200      	movs	r2, #0
 8012244:	f000 fd4e 	bl	8012ce4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8012248:	e173      	b.n	8012532 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801224a:	7bbb      	ldrb	r3, [r7, #14]
 801224c:	2b04      	cmp	r3, #4
 801224e:	f040 8170 	bne.w	8012532 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	220b      	movs	r2, #11
 8012256:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2203      	movs	r2, #3
 801225c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801226c:	2300      	movs	r3, #0
 801226e:	2200      	movs	r2, #0
 8012270:	f000 fd38 	bl	8012ce4 <osMessageQueuePut>
      break;
 8012274:	e15d      	b.n	8012532 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6899      	ldr	r1, [r3, #8]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	899a      	ldrh	r2, [r3, #12]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	7958      	ldrb	r0, [r3, #5]
 8012282:	2301      	movs	r3, #1
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	4603      	mov	r3, r0
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f979 	bl	8012580 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012294:	b29a      	uxth	r2, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2206      	movs	r2, #6
 801229e:	761a      	strb	r2, [r3, #24]
      break;
 80122a0:	e14e      	b.n	8012540 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	795b      	ldrb	r3, [r3, #5]
 80122a6:	4619      	mov	r1, r3
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f003 fe91 	bl	8015fd0 <USBH_LL_GetURBState>
 80122ae:	4603      	mov	r3, r0
 80122b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80122b2:	7bbb      	ldrb	r3, [r7, #14]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d111      	bne.n	80122dc <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2207      	movs	r2, #7
 80122bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2203      	movs	r2, #3
 80122c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80122d2:	2300      	movs	r3, #0
 80122d4:	2200      	movs	r2, #0
 80122d6:	f000 fd05 	bl	8012ce4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80122da:	e12c      	b.n	8012536 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	2b05      	cmp	r3, #5
 80122e0:	d113      	bne.n	801230a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	220c      	movs	r2, #12
 80122e6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80122e8:	2303      	movs	r3, #3
 80122ea:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2203      	movs	r2, #3
 80122f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012300:	2300      	movs	r3, #0
 8012302:	2200      	movs	r2, #0
 8012304:	f000 fcee 	bl	8012ce4 <osMessageQueuePut>
      break;
 8012308:	e115      	b.n	8012536 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 801230a:	7bbb      	ldrb	r3, [r7, #14]
 801230c:	2b02      	cmp	r3, #2
 801230e:	d111      	bne.n	8012334 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2205      	movs	r2, #5
 8012314:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2203      	movs	r2, #3
 801231a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801232a:	2300      	movs	r3, #0
 801232c:	2200      	movs	r2, #0
 801232e:	f000 fcd9 	bl	8012ce4 <osMessageQueuePut>
      break;
 8012332:	e100      	b.n	8012536 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8012334:	7bbb      	ldrb	r3, [r7, #14]
 8012336:	2b04      	cmp	r3, #4
 8012338:	f040 80fd 	bne.w	8012536 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	220b      	movs	r2, #11
 8012340:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8012342:	2302      	movs	r3, #2
 8012344:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2203      	movs	r2, #3
 801234a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801235a:	2300      	movs	r3, #0
 801235c:	2200      	movs	r2, #0
 801235e:	f000 fcc1 	bl	8012ce4 <osMessageQueuePut>
      break;
 8012362:	e0e8      	b.n	8012536 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	791b      	ldrb	r3, [r3, #4]
 8012368:	2200      	movs	r2, #0
 801236a:	2100      	movs	r1, #0
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f92c 	bl	80125ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012378:	b29a      	uxth	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2208      	movs	r2, #8
 8012382:	761a      	strb	r2, [r3, #24]

      break;
 8012384:	e0dc      	b.n	8012540 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	791b      	ldrb	r3, [r3, #4]
 801238a:	4619      	mov	r1, r3
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f003 fe1f 	bl	8015fd0 <USBH_LL_GetURBState>
 8012392:	4603      	mov	r3, r0
 8012394:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012396:	7bbb      	ldrb	r3, [r7, #14]
 8012398:	2b01      	cmp	r3, #1
 801239a:	d113      	bne.n	80123c4 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	220d      	movs	r2, #13
 80123a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80123a2:	2300      	movs	r3, #0
 80123a4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2203      	movs	r2, #3
 80123aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80123ba:	2300      	movs	r3, #0
 80123bc:	2200      	movs	r2, #0
 80123be:	f000 fc91 	bl	8012ce4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80123c2:	e0ba      	b.n	801253a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 80123c4:	7bbb      	ldrb	r3, [r7, #14]
 80123c6:	2b04      	cmp	r3, #4
 80123c8:	d111      	bne.n	80123ee <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	220b      	movs	r2, #11
 80123ce:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2203      	movs	r2, #3
 80123d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80123e4:	2300      	movs	r3, #0
 80123e6:	2200      	movs	r2, #0
 80123e8:	f000 fc7c 	bl	8012ce4 <osMessageQueuePut>
      break;
 80123ec:	e0a5      	b.n	801253a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 80123ee:	7bbb      	ldrb	r3, [r7, #14]
 80123f0:	2b05      	cmp	r3, #5
 80123f2:	f040 80a2 	bne.w	801253a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 80123f6:	2303      	movs	r3, #3
 80123f8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2203      	movs	r2, #3
 80123fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801240e:	2300      	movs	r3, #0
 8012410:	2200      	movs	r2, #0
 8012412:	f000 fc67 	bl	8012ce4 <osMessageQueuePut>
      break;
 8012416:	e090      	b.n	801253a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	795a      	ldrb	r2, [r3, #5]
 801241c:	2301      	movs	r3, #1
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	4613      	mov	r3, r2
 8012422:	2200      	movs	r2, #0
 8012424:	2100      	movs	r1, #0
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 f8aa 	bl	8012580 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012432:	b29a      	uxth	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	220a      	movs	r2, #10
 801243c:	761a      	strb	r2, [r3, #24]
      break;
 801243e:	e07f      	b.n	8012540 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	795b      	ldrb	r3, [r3, #5]
 8012444:	4619      	mov	r1, r3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f003 fdc2 	bl	8015fd0 <USBH_LL_GetURBState>
 801244c:	4603      	mov	r3, r0
 801244e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8012450:	7bbb      	ldrb	r3, [r7, #14]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d113      	bne.n	801247e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	220d      	movs	r2, #13
 801245e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2203      	movs	r2, #3
 8012464:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012474:	2300      	movs	r3, #0
 8012476:	2200      	movs	r2, #0
 8012478:	f000 fc34 	bl	8012ce4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801247c:	e05f      	b.n	801253e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 801247e:	7bbb      	ldrb	r3, [r7, #14]
 8012480:	2b02      	cmp	r3, #2
 8012482:	d111      	bne.n	80124a8 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2209      	movs	r2, #9
 8012488:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2203      	movs	r2, #3
 801248e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801249e:	2300      	movs	r3, #0
 80124a0:	2200      	movs	r2, #0
 80124a2:	f000 fc1f 	bl	8012ce4 <osMessageQueuePut>
      break;
 80124a6:	e04a      	b.n	801253e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80124a8:	7bbb      	ldrb	r3, [r7, #14]
 80124aa:	2b04      	cmp	r3, #4
 80124ac:	d147      	bne.n	801253e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	220b      	movs	r2, #11
 80124b2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2203      	movs	r2, #3
 80124b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80124c8:	2300      	movs	r3, #0
 80124ca:	2200      	movs	r2, #0
 80124cc:	f000 fc0a 	bl	8012ce4 <osMessageQueuePut>
      break;
 80124d0:	e035      	b.n	801253e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	7e5b      	ldrb	r3, [r3, #25]
 80124d6:	3301      	adds	r3, #1
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	765a      	strb	r2, [r3, #25]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	7e5b      	ldrb	r3, [r3, #25]
 80124e2:	2b02      	cmp	r3, #2
 80124e4:	d806      	bhi.n	80124f4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2201      	movs	r2, #1
 80124ea:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2201      	movs	r2, #1
 80124f0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80124f2:	e025      	b.n	8012540 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80124fa:	2106      	movs	r1, #6
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	795b      	ldrb	r3, [r3, #5]
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f000 f90d 	bl	801272c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	791b      	ldrb	r3, [r3, #4]
 8012516:	4619      	mov	r1, r3
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f907 	bl	801272c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8012524:	2302      	movs	r3, #2
 8012526:	73fb      	strb	r3, [r7, #15]
      break;
 8012528:	e00a      	b.n	8012540 <USBH_HandleControl+0x488>

    default:
      break;
 801252a:	bf00      	nop
 801252c:	e008      	b.n	8012540 <USBH_HandleControl+0x488>
      break;
 801252e:	bf00      	nop
 8012530:	e006      	b.n	8012540 <USBH_HandleControl+0x488>
      break;
 8012532:	bf00      	nop
 8012534:	e004      	b.n	8012540 <USBH_HandleControl+0x488>
      break;
 8012536:	bf00      	nop
 8012538:	e002      	b.n	8012540 <USBH_HandleControl+0x488>
      break;
 801253a:	bf00      	nop
 801253c:	e000      	b.n	8012540 <USBH_HandleControl+0x488>
      break;
 801253e:	bf00      	nop
  }

  return status;
 8012540:	7bfb      	ldrb	r3, [r7, #15]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3710      	adds	r7, #16
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop

0801254c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b088      	sub	sp, #32
 8012550:	af04      	add	r7, sp, #16
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	4613      	mov	r3, r2
 8012558:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801255a:	79f9      	ldrb	r1, [r7, #7]
 801255c:	2300      	movs	r3, #0
 801255e:	9303      	str	r3, [sp, #12]
 8012560:	2308      	movs	r3, #8
 8012562:	9302      	str	r3, [sp, #8]
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	9301      	str	r3, [sp, #4]
 8012568:	2300      	movs	r3, #0
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	2300      	movs	r3, #0
 801256e:	2200      	movs	r2, #0
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f003 fcfc 	bl	8015f6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3710      	adds	r7, #16
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b088      	sub	sp, #32
 8012584:	af04      	add	r7, sp, #16
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	4611      	mov	r1, r2
 801258c:	461a      	mov	r2, r3
 801258e:	460b      	mov	r3, r1
 8012590:	80fb      	strh	r3, [r7, #6]
 8012592:	4613      	mov	r3, r2
 8012594:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801259c:	2b00      	cmp	r3, #0
 801259e:	d001      	beq.n	80125a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80125a0:	2300      	movs	r3, #0
 80125a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80125a4:	7979      	ldrb	r1, [r7, #5]
 80125a6:	7e3b      	ldrb	r3, [r7, #24]
 80125a8:	9303      	str	r3, [sp, #12]
 80125aa:	88fb      	ldrh	r3, [r7, #6]
 80125ac:	9302      	str	r3, [sp, #8]
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	9301      	str	r3, [sp, #4]
 80125b2:	2301      	movs	r3, #1
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	2300      	movs	r3, #0
 80125b8:	2200      	movs	r2, #0
 80125ba:	68f8      	ldr	r0, [r7, #12]
 80125bc:	f003 fcd7 	bl	8015f6e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80125c0:	2300      	movs	r3, #0
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}

080125ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80125ca:	b580      	push	{r7, lr}
 80125cc:	b088      	sub	sp, #32
 80125ce:	af04      	add	r7, sp, #16
 80125d0:	60f8      	str	r0, [r7, #12]
 80125d2:	60b9      	str	r1, [r7, #8]
 80125d4:	4611      	mov	r1, r2
 80125d6:	461a      	mov	r2, r3
 80125d8:	460b      	mov	r3, r1
 80125da:	80fb      	strh	r3, [r7, #6]
 80125dc:	4613      	mov	r3, r2
 80125de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80125e0:	7979      	ldrb	r1, [r7, #5]
 80125e2:	2300      	movs	r3, #0
 80125e4:	9303      	str	r3, [sp, #12]
 80125e6:	88fb      	ldrh	r3, [r7, #6]
 80125e8:	9302      	str	r3, [sp, #8]
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	9301      	str	r3, [sp, #4]
 80125ee:	2301      	movs	r3, #1
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	2300      	movs	r3, #0
 80125f4:	2201      	movs	r2, #1
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	f003 fcb9 	bl	8015f6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80125fc:	2300      	movs	r3, #0

}
 80125fe:	4618      	mov	r0, r3
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b088      	sub	sp, #32
 801260a:	af04      	add	r7, sp, #16
 801260c:	60f8      	str	r0, [r7, #12]
 801260e:	60b9      	str	r1, [r7, #8]
 8012610:	4611      	mov	r1, r2
 8012612:	461a      	mov	r2, r3
 8012614:	460b      	mov	r3, r1
 8012616:	80fb      	strh	r3, [r7, #6]
 8012618:	4613      	mov	r3, r2
 801261a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8012626:	2300      	movs	r3, #0
 8012628:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801262a:	7979      	ldrb	r1, [r7, #5]
 801262c:	7e3b      	ldrb	r3, [r7, #24]
 801262e:	9303      	str	r3, [sp, #12]
 8012630:	88fb      	ldrh	r3, [r7, #6]
 8012632:	9302      	str	r3, [sp, #8]
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	9301      	str	r3, [sp, #4]
 8012638:	2301      	movs	r3, #1
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	2302      	movs	r3, #2
 801263e:	2200      	movs	r2, #0
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f003 fc94 	bl	8015f6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b088      	sub	sp, #32
 8012654:	af04      	add	r7, sp, #16
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	4611      	mov	r1, r2
 801265c:	461a      	mov	r2, r3
 801265e:	460b      	mov	r3, r1
 8012660:	80fb      	strh	r3, [r7, #6]
 8012662:	4613      	mov	r3, r2
 8012664:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8012666:	7979      	ldrb	r1, [r7, #5]
 8012668:	2300      	movs	r3, #0
 801266a:	9303      	str	r3, [sp, #12]
 801266c:	88fb      	ldrh	r3, [r7, #6]
 801266e:	9302      	str	r3, [sp, #8]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	2301      	movs	r3, #1
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	2302      	movs	r3, #2
 801267a:	2201      	movs	r2, #1
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f003 fc76 	bl	8015f6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3710      	adds	r7, #16
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b086      	sub	sp, #24
 8012690:	af04      	add	r7, sp, #16
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	4608      	mov	r0, r1
 8012696:	4611      	mov	r1, r2
 8012698:	461a      	mov	r2, r3
 801269a:	4603      	mov	r3, r0
 801269c:	70fb      	strb	r3, [r7, #3]
 801269e:	460b      	mov	r3, r1
 80126a0:	70bb      	strb	r3, [r7, #2]
 80126a2:	4613      	mov	r3, r2
 80126a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80126a6:	7878      	ldrb	r0, [r7, #1]
 80126a8:	78ba      	ldrb	r2, [r7, #2]
 80126aa:	78f9      	ldrb	r1, [r7, #3]
 80126ac:	8b3b      	ldrh	r3, [r7, #24]
 80126ae:	9302      	str	r3, [sp, #8]
 80126b0:	7d3b      	ldrb	r3, [r7, #20]
 80126b2:	9301      	str	r3, [sp, #4]
 80126b4:	7c3b      	ldrb	r3, [r7, #16]
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	4603      	mov	r3, r0
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f003 fc09 	bl	8015ed2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80126c0:	2300      	movs	r3, #0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3708      	adds	r7, #8
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b082      	sub	sp, #8
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80126d6:	78fb      	ldrb	r3, [r7, #3]
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f003 fc28 	bl	8015f30 <USBH_LL_ClosePipe>

  return USBH_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	460b      	mov	r3, r1
 80126f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 f836 	bl	8012768 <USBH_GetFreePipe>
 80126fc:	4603      	mov	r3, r0
 80126fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8012700:	89fb      	ldrh	r3, [r7, #14]
 8012702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012706:	4293      	cmp	r3, r2
 8012708:	d00a      	beq.n	8012720 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801270a:	78fa      	ldrb	r2, [r7, #3]
 801270c:	89fb      	ldrh	r3, [r7, #14]
 801270e:	f003 030f 	and.w	r3, r3, #15
 8012712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012716:	6879      	ldr	r1, [r7, #4]
 8012718:	33e0      	adds	r3, #224	; 0xe0
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	440b      	add	r3, r1
 801271e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8012720:	89fb      	ldrh	r3, [r7, #14]
 8012722:	b2db      	uxtb	r3, r3
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	460b      	mov	r3, r1
 8012736:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8012738:	78fb      	ldrb	r3, [r7, #3]
 801273a:	2b0a      	cmp	r3, #10
 801273c:	d80d      	bhi.n	801275a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801273e:	78fb      	ldrb	r3, [r7, #3]
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	33e0      	adds	r3, #224	; 0xe0
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	4413      	add	r3, r2
 8012748:	685a      	ldr	r2, [r3, #4]
 801274a:	78fb      	ldrb	r3, [r7, #3]
 801274c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012750:	6879      	ldr	r1, [r7, #4]
 8012752:	33e0      	adds	r3, #224	; 0xe0
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	440b      	add	r3, r1
 8012758:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	370c      	adds	r7, #12
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012768:	b480      	push	{r7}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012770:	2300      	movs	r3, #0
 8012772:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8012774:	2300      	movs	r3, #0
 8012776:	73fb      	strb	r3, [r7, #15]
 8012778:	e00f      	b.n	801279a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	33e0      	adds	r3, #224	; 0xe0
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	4413      	add	r3, r2
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801278a:	2b00      	cmp	r3, #0
 801278c:	d102      	bne.n	8012794 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801278e:	7bfb      	ldrb	r3, [r7, #15]
 8012790:	b29b      	uxth	r3, r3
 8012792:	e007      	b.n	80127a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8012794:	7bfb      	ldrb	r3, [r7, #15]
 8012796:	3301      	adds	r3, #1
 8012798:	73fb      	strb	r3, [r7, #15]
 801279a:	7bfb      	ldrb	r3, [r7, #15]
 801279c:	2b0a      	cmp	r3, #10
 801279e:	d9ec      	bls.n	801277a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80127a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80127b0:	b480      	push	{r7}
 80127b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80127b4:	bf00      	nop
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
	...

080127c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127c6:	f3ef 8305 	mrs	r3, IPSR
 80127ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80127cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d10f      	bne.n	80127f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127d2:	f3ef 8310 	mrs	r3, PRIMASK
 80127d6:	607b      	str	r3, [r7, #4]
  return(result);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d105      	bne.n	80127ea <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80127de:	f3ef 8311 	mrs	r3, BASEPRI
 80127e2:	603b      	str	r3, [r7, #0]
  return(result);
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d007      	beq.n	80127fa <osKernelInitialize+0x3a>
 80127ea:	4b0e      	ldr	r3, [pc, #56]	; (8012824 <osKernelInitialize+0x64>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2b02      	cmp	r3, #2
 80127f0:	d103      	bne.n	80127fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80127f2:	f06f 0305 	mvn.w	r3, #5
 80127f6:	60fb      	str	r3, [r7, #12]
 80127f8:	e00c      	b.n	8012814 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80127fa:	4b0a      	ldr	r3, [pc, #40]	; (8012824 <osKernelInitialize+0x64>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d105      	bne.n	801280e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012802:	4b08      	ldr	r3, [pc, #32]	; (8012824 <osKernelInitialize+0x64>)
 8012804:	2201      	movs	r2, #1
 8012806:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012808:	2300      	movs	r3, #0
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	e002      	b.n	8012814 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801280e:	f04f 33ff 	mov.w	r3, #4294967295
 8012812:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012814:	68fb      	ldr	r3, [r7, #12]
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20001110 	.word	0x20001110

08012828 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801282e:	f3ef 8305 	mrs	r3, IPSR
 8012832:	60bb      	str	r3, [r7, #8]
  return(result);
 8012834:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10f      	bne.n	801285a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801283a:	f3ef 8310 	mrs	r3, PRIMASK
 801283e:	607b      	str	r3, [r7, #4]
  return(result);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d105      	bne.n	8012852 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012846:	f3ef 8311 	mrs	r3, BASEPRI
 801284a:	603b      	str	r3, [r7, #0]
  return(result);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d007      	beq.n	8012862 <osKernelStart+0x3a>
 8012852:	4b0f      	ldr	r3, [pc, #60]	; (8012890 <osKernelStart+0x68>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b02      	cmp	r3, #2
 8012858:	d103      	bne.n	8012862 <osKernelStart+0x3a>
    stat = osErrorISR;
 801285a:	f06f 0305 	mvn.w	r3, #5
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	e010      	b.n	8012884 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012862:	4b0b      	ldr	r3, [pc, #44]	; (8012890 <osKernelStart+0x68>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d109      	bne.n	801287e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801286a:	f7ff ffa1 	bl	80127b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801286e:	4b08      	ldr	r3, [pc, #32]	; (8012890 <osKernelStart+0x68>)
 8012870:	2202      	movs	r2, #2
 8012872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012874:	f001 fc98 	bl	80141a8 <vTaskStartScheduler>
      stat = osOK;
 8012878:	2300      	movs	r3, #0
 801287a:	60fb      	str	r3, [r7, #12]
 801287c:	e002      	b.n	8012884 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801287e:	f04f 33ff 	mov.w	r3, #4294967295
 8012882:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012884:	68fb      	ldr	r3, [r7, #12]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	20001110 	.word	0x20001110

08012894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012894:	b580      	push	{r7, lr}
 8012896:	b090      	sub	sp, #64	; 0x40
 8012898:	af04      	add	r7, sp, #16
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80128a0:	2300      	movs	r3, #0
 80128a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128a4:	f3ef 8305 	mrs	r3, IPSR
 80128a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80128aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f040 808f 	bne.w	80129d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128b2:	f3ef 8310 	mrs	r3, PRIMASK
 80128b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d105      	bne.n	80128ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128be:	f3ef 8311 	mrs	r3, BASEPRI
 80128c2:	617b      	str	r3, [r7, #20]
  return(result);
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d003      	beq.n	80128d2 <osThreadNew+0x3e>
 80128ca:	4b44      	ldr	r3, [pc, #272]	; (80129dc <osThreadNew+0x148>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	d07e      	beq.n	80129d0 <osThreadNew+0x13c>
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d07b      	beq.n	80129d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80128d8:	2380      	movs	r3, #128	; 0x80
 80128da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80128dc:	2318      	movs	r3, #24
 80128de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80128e0:	2300      	movs	r3, #0
 80128e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295
 80128e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d045      	beq.n	801297c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d002      	beq.n	80128fe <osThreadNew+0x6a>
        name = attr->name;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	699b      	ldr	r3, [r3, #24]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d002      	beq.n	801290c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290e:	2b00      	cmp	r3, #0
 8012910:	d008      	beq.n	8012924 <osThreadNew+0x90>
 8012912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012914:	2b38      	cmp	r3, #56	; 0x38
 8012916:	d805      	bhi.n	8012924 <osThreadNew+0x90>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	f003 0301 	and.w	r3, r3, #1
 8012920:	2b00      	cmp	r3, #0
 8012922:	d001      	beq.n	8012928 <osThreadNew+0x94>
        return (NULL);
 8012924:	2300      	movs	r3, #0
 8012926:	e054      	b.n	80129d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	695b      	ldr	r3, [r3, #20]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d003      	beq.n	8012938 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	695b      	ldr	r3, [r3, #20]
 8012934:	089b      	lsrs	r3, r3, #2
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d00e      	beq.n	801295e <osThreadNew+0xca>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	2b5f      	cmp	r3, #95	; 0x5f
 8012946:	d90a      	bls.n	801295e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801294c:	2b00      	cmp	r3, #0
 801294e:	d006      	beq.n	801295e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	695b      	ldr	r3, [r3, #20]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <osThreadNew+0xca>
        mem = 1;
 8012958:	2301      	movs	r3, #1
 801295a:	623b      	str	r3, [r7, #32]
 801295c:	e010      	b.n	8012980 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d10c      	bne.n	8012980 <osThreadNew+0xec>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d108      	bne.n	8012980 <osThreadNew+0xec>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	691b      	ldr	r3, [r3, #16]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d104      	bne.n	8012980 <osThreadNew+0xec>
          mem = 0;
 8012976:	2300      	movs	r3, #0
 8012978:	623b      	str	r3, [r7, #32]
 801297a:	e001      	b.n	8012980 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801297c:	2300      	movs	r3, #0
 801297e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d110      	bne.n	80129a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801298e:	9202      	str	r2, [sp, #8]
 8012990:	9301      	str	r3, [sp, #4]
 8012992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801299a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f001 f9a1 	bl	8013ce4 <xTaskCreateStatic>
 80129a2:	4603      	mov	r3, r0
 80129a4:	613b      	str	r3, [r7, #16]
 80129a6:	e013      	b.n	80129d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80129a8:	6a3b      	ldr	r3, [r7, #32]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d110      	bne.n	80129d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80129ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	f107 0310 	add.w	r3, r7, #16
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	9300      	str	r3, [sp, #0]
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	f001 f9ef 	bl	8013da4 <xTaskCreate>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d001      	beq.n	80129d0 <osThreadNew+0x13c>
          hTask = NULL;
 80129cc:	2300      	movs	r3, #0
 80129ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80129d0:	693b      	ldr	r3, [r7, #16]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3730      	adds	r7, #48	; 0x30
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	bf00      	nop
 80129dc:	20001110 	.word	0x20001110

080129e0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b088      	sub	sp, #32
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129ec:	f3ef 8305 	mrs	r3, IPSR
 80129f0:	617b      	str	r3, [r7, #20]
  return(result);
 80129f2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10f      	bne.n	8012a18 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129f8:	f3ef 8310 	mrs	r3, PRIMASK
 80129fc:	613b      	str	r3, [r7, #16]
  return(result);
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d105      	bne.n	8012a10 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a04:	f3ef 8311 	mrs	r3, BASEPRI
 8012a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d007      	beq.n	8012a20 <osThreadSuspend+0x40>
 8012a10:	4b0c      	ldr	r3, [pc, #48]	; (8012a44 <osThreadSuspend+0x64>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d103      	bne.n	8012a20 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8012a18:	f06f 0305 	mvn.w	r3, #5
 8012a1c:	61fb      	str	r3, [r7, #28]
 8012a1e:	e00b      	b.n	8012a38 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d103      	bne.n	8012a2e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8012a26:	f06f 0303 	mvn.w	r3, #3
 8012a2a:	61fb      	str	r3, [r7, #28]
 8012a2c:	e004      	b.n	8012a38 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8012a32:	69b8      	ldr	r0, [r7, #24]
 8012a34:	f001 fb3c 	bl	80140b0 <vTaskSuspend>
  }

  return (stat);
 8012a38:	69fb      	ldr	r3, [r7, #28]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3720      	adds	r7, #32
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	20001110 	.word	0x20001110

08012a48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a50:	f3ef 8305 	mrs	r3, IPSR
 8012a54:	613b      	str	r3, [r7, #16]
  return(result);
 8012a56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10f      	bne.n	8012a7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8012a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d105      	bne.n	8012a74 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a68:	f3ef 8311 	mrs	r3, BASEPRI
 8012a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d007      	beq.n	8012a84 <osDelay+0x3c>
 8012a74:	4b0a      	ldr	r3, [pc, #40]	; (8012aa0 <osDelay+0x58>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d103      	bne.n	8012a84 <osDelay+0x3c>
    stat = osErrorISR;
 8012a7c:	f06f 0305 	mvn.w	r3, #5
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	e007      	b.n	8012a94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d002      	beq.n	8012a94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f001 fad8 	bl	8014044 <vTaskDelay>
    }
  }

  return (stat);
 8012a94:	697b      	ldr	r3, [r7, #20]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20001110 	.word	0x20001110

08012aa4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b08a      	sub	sp, #40	; 0x28
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012aac:	2300      	movs	r3, #0
 8012aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ab0:	f3ef 8305 	mrs	r3, IPSR
 8012ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8012ab6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f040 8085 	bne.w	8012bc8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012abe:	f3ef 8310 	mrs	r3, PRIMASK
 8012ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012aca:	f3ef 8311 	mrs	r3, BASEPRI
 8012ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d003      	beq.n	8012ade <osMutexNew+0x3a>
 8012ad6:	4b3f      	ldr	r3, [pc, #252]	; (8012bd4 <osMutexNew+0x130>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b02      	cmp	r3, #2
 8012adc:	d074      	beq.n	8012bc8 <osMutexNew+0x124>
    if (attr != NULL) {
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <osMutexNew+0x48>
      type = attr->attr_bits;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	623b      	str	r3, [r7, #32]
 8012aea:	e001      	b.n	8012af0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012aec:	2300      	movs	r3, #0
 8012aee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012af0:	6a3b      	ldr	r3, [r7, #32]
 8012af2:	f003 0301 	and.w	r3, r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d002      	beq.n	8012b00 <osMutexNew+0x5c>
      rmtx = 1U;
 8012afa:	2301      	movs	r3, #1
 8012afc:	61fb      	str	r3, [r7, #28]
 8012afe:	e001      	b.n	8012b04 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012b00:	2300      	movs	r3, #0
 8012b02:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012b04:	6a3b      	ldr	r3, [r7, #32]
 8012b06:	f003 0308 	and.w	r3, r3, #8
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d15c      	bne.n	8012bc8 <osMutexNew+0x124>
      mem = -1;
 8012b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b12:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d015      	beq.n	8012b46 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d006      	beq.n	8012b30 <osMutexNew+0x8c>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	2b4f      	cmp	r3, #79	; 0x4f
 8012b28:	d902      	bls.n	8012b30 <osMutexNew+0x8c>
          mem = 1;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	61bb      	str	r3, [r7, #24]
 8012b2e:	e00c      	b.n	8012b4a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	689b      	ldr	r3, [r3, #8]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d108      	bne.n	8012b4a <osMutexNew+0xa6>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d104      	bne.n	8012b4a <osMutexNew+0xa6>
            mem = 0;
 8012b40:	2300      	movs	r3, #0
 8012b42:	61bb      	str	r3, [r7, #24]
 8012b44:	e001      	b.n	8012b4a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d112      	bne.n	8012b76 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d007      	beq.n	8012b66 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	689b      	ldr	r3, [r3, #8]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	2004      	movs	r0, #4
 8012b5e:	f000 fc11 	bl	8013384 <xQueueCreateMutexStatic>
 8012b62:	6278      	str	r0, [r7, #36]	; 0x24
 8012b64:	e016      	b.n	8012b94 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	689b      	ldr	r3, [r3, #8]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	2001      	movs	r0, #1
 8012b6e:	f000 fc09 	bl	8013384 <xQueueCreateMutexStatic>
 8012b72:	6278      	str	r0, [r7, #36]	; 0x24
 8012b74:	e00e      	b.n	8012b94 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d10b      	bne.n	8012b94 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d004      	beq.n	8012b8c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8012b82:	2004      	movs	r0, #4
 8012b84:	f000 fbe6 	bl	8013354 <xQueueCreateMutex>
 8012b88:	6278      	str	r0, [r7, #36]	; 0x24
 8012b8a:	e003      	b.n	8012b94 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012b8c:	2001      	movs	r0, #1
 8012b8e:	f000 fbe1 	bl	8013354 <xQueueCreateMutex>
 8012b92:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d00c      	beq.n	8012bb4 <osMutexNew+0x110>
        if (attr != NULL) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d003      	beq.n	8012ba8 <osMutexNew+0x104>
          name = attr->name;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	617b      	str	r3, [r7, #20]
 8012ba6:	e001      	b.n	8012bac <osMutexNew+0x108>
        } else {
          name = NULL;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012bac:	6979      	ldr	r1, [r7, #20]
 8012bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bb0:	f001 f838 	bl	8013c24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d006      	beq.n	8012bc8 <osMutexNew+0x124>
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d003      	beq.n	8012bc8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	f043 0301 	orr.w	r3, r3, #1
 8012bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3728      	adds	r7, #40	; 0x28
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20001110 	.word	0x20001110

08012bd8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b08c      	sub	sp, #48	; 0x30
 8012bdc:	af02      	add	r7, sp, #8
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012be4:	2300      	movs	r3, #0
 8012be6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012be8:	f3ef 8305 	mrs	r3, IPSR
 8012bec:	61bb      	str	r3, [r7, #24]
  return(result);
 8012bee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d170      	bne.n	8012cd6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8012bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d105      	bne.n	8012c0c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c00:	f3ef 8311 	mrs	r3, BASEPRI
 8012c04:	613b      	str	r3, [r7, #16]
  return(result);
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d003      	beq.n	8012c14 <osMessageQueueNew+0x3c>
 8012c0c:	4b34      	ldr	r3, [pc, #208]	; (8012ce0 <osMessageQueueNew+0x108>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d060      	beq.n	8012cd6 <osMessageQueueNew+0xfe>
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d05d      	beq.n	8012cd6 <osMessageQueueNew+0xfe>
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d05a      	beq.n	8012cd6 <osMessageQueueNew+0xfe>
    mem = -1;
 8012c20:	f04f 33ff 	mov.w	r3, #4294967295
 8012c24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d029      	beq.n	8012c80 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d012      	beq.n	8012c5a <osMessageQueueNew+0x82>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	2b4f      	cmp	r3, #79	; 0x4f
 8012c3a:	d90e      	bls.n	8012c5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00a      	beq.n	8012c5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	695a      	ldr	r2, [r3, #20]
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	68b9      	ldr	r1, [r7, #8]
 8012c4c:	fb01 f303 	mul.w	r3, r1, r3
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d302      	bcc.n	8012c5a <osMessageQueueNew+0x82>
        mem = 1;
 8012c54:	2301      	movs	r3, #1
 8012c56:	623b      	str	r3, [r7, #32]
 8012c58:	e014      	b.n	8012c84 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	689b      	ldr	r3, [r3, #8]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d110      	bne.n	8012c84 <osMessageQueueNew+0xac>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10c      	bne.n	8012c84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d108      	bne.n	8012c84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d104      	bne.n	8012c84 <osMessageQueueNew+0xac>
          mem = 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	623b      	str	r3, [r7, #32]
 8012c7e:	e001      	b.n	8012c84 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d10c      	bne.n	8012ca4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	691a      	ldr	r2, [r3, #16]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6899      	ldr	r1, [r3, #8]
 8012c92:	2300      	movs	r3, #0
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	460b      	mov	r3, r1
 8012c98:	68b9      	ldr	r1, [r7, #8]
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f000 fa5a 	bl	8013154 <xQueueGenericCreateStatic>
 8012ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8012ca2:	e008      	b.n	8012cb6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012ca4:	6a3b      	ldr	r3, [r7, #32]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d105      	bne.n	8012cb6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012caa:	2200      	movs	r2, #0
 8012cac:	68b9      	ldr	r1, [r7, #8]
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f000 facd 	bl	801324e <xQueueGenericCreate>
 8012cb4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00c      	beq.n	8012cd6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d003      	beq.n	8012cca <osMessageQueueNew+0xf2>
        name = attr->name;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	61fb      	str	r3, [r7, #28]
 8012cc8:	e001      	b.n	8012cce <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012cce:	69f9      	ldr	r1, [r7, #28]
 8012cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cd2:	f000 ffa7 	bl	8013c24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3728      	adds	r7, #40	; 0x28
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	20001110 	.word	0x20001110

08012ce4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b08a      	sub	sp, #40	; 0x28
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	603b      	str	r3, [r7, #0]
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cfc:	f3ef 8305 	mrs	r3, IPSR
 8012d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8012d02:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10f      	bne.n	8012d28 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d08:	f3ef 8310 	mrs	r3, PRIMASK
 8012d0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d105      	bne.n	8012d20 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d14:	f3ef 8311 	mrs	r3, BASEPRI
 8012d18:	617b      	str	r3, [r7, #20]
  return(result);
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d02c      	beq.n	8012d7a <osMessageQueuePut+0x96>
 8012d20:	4b28      	ldr	r3, [pc, #160]	; (8012dc4 <osMessageQueuePut+0xe0>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	d128      	bne.n	8012d7a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d005      	beq.n	8012d3a <osMessageQueuePut+0x56>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <osMessageQueuePut+0x56>
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d003      	beq.n	8012d42 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012d3a:	f06f 0303 	mvn.w	r3, #3
 8012d3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d40:	e039      	b.n	8012db6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012d42:	2300      	movs	r3, #0
 8012d44:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d46:	f107 0210 	add.w	r2, r7, #16
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	68b9      	ldr	r1, [r7, #8]
 8012d4e:	6a38      	ldr	r0, [r7, #32]
 8012d50:	f000 fc3e 	bl	80135d0 <xQueueGenericSendFromISR>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d003      	beq.n	8012d62 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012d5a:	f06f 0302 	mvn.w	r3, #2
 8012d5e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d60:	e029      	b.n	8012db6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d026      	beq.n	8012db6 <osMessageQueuePut+0xd2>
 8012d68:	4b17      	ldr	r3, [pc, #92]	; (8012dc8 <osMessageQueuePut+0xe4>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d78:	e01d      	b.n	8012db6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d7a:	6a3b      	ldr	r3, [r7, #32]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <osMessageQueuePut+0xa2>
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d103      	bne.n	8012d8e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012d86:	f06f 0303 	mvn.w	r3, #3
 8012d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8012d8c:	e014      	b.n	8012db8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d8e:	2300      	movs	r3, #0
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	68b9      	ldr	r1, [r7, #8]
 8012d94:	6a38      	ldr	r0, [r7, #32]
 8012d96:	f000 fb11 	bl	80133bc <xQueueGenericSend>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d00b      	beq.n	8012db8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d003      	beq.n	8012dae <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012da6:	f06f 0301 	mvn.w	r3, #1
 8012daa:	627b      	str	r3, [r7, #36]	; 0x24
 8012dac:	e004      	b.n	8012db8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012dae:	f06f 0302 	mvn.w	r3, #2
 8012db2:	627b      	str	r3, [r7, #36]	; 0x24
 8012db4:	e000      	b.n	8012db8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012db6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3728      	adds	r7, #40	; 0x28
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	20001110 	.word	0x20001110
 8012dc8:	e000ed04 	.word	0xe000ed04

08012dcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08a      	sub	sp, #40	; 0x28
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
 8012dd8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dde:	2300      	movs	r3, #0
 8012de0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012de2:	f3ef 8305 	mrs	r3, IPSR
 8012de6:	61fb      	str	r3, [r7, #28]
  return(result);
 8012de8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d10f      	bne.n	8012e0e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dee:	f3ef 8310 	mrs	r3, PRIMASK
 8012df2:	61bb      	str	r3, [r7, #24]
  return(result);
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d105      	bne.n	8012e06 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8012dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d02c      	beq.n	8012e60 <osMessageQueueGet+0x94>
 8012e06:	4b28      	ldr	r3, [pc, #160]	; (8012ea8 <osMessageQueueGet+0xdc>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d128      	bne.n	8012e60 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e0e:	6a3b      	ldr	r3, [r7, #32]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d005      	beq.n	8012e20 <osMessageQueueGet+0x54>
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <osMessageQueueGet+0x54>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d003      	beq.n	8012e28 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012e20:	f06f 0303 	mvn.w	r3, #3
 8012e24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e26:	e038      	b.n	8012e9a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012e2c:	f107 0310 	add.w	r3, r7, #16
 8012e30:	461a      	mov	r2, r3
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	6a38      	ldr	r0, [r7, #32]
 8012e36:	f000 fd59 	bl	80138ec <xQueueReceiveFromISR>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d003      	beq.n	8012e48 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012e40:	f06f 0302 	mvn.w	r3, #2
 8012e44:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e46:	e028      	b.n	8012e9a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d025      	beq.n	8012e9a <osMessageQueueGet+0xce>
 8012e4e:	4b17      	ldr	r3, [pc, #92]	; (8012eac <osMessageQueueGet+0xe0>)
 8012e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e5e:	e01c      	b.n	8012e9a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e60:	6a3b      	ldr	r3, [r7, #32]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <osMessageQueueGet+0xa0>
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d103      	bne.n	8012e74 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012e6c:	f06f 0303 	mvn.w	r3, #3
 8012e70:	627b      	str	r3, [r7, #36]	; 0x24
 8012e72:	e013      	b.n	8012e9c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e74:	683a      	ldr	r2, [r7, #0]
 8012e76:	68b9      	ldr	r1, [r7, #8]
 8012e78:	6a38      	ldr	r0, [r7, #32]
 8012e7a:	f000 fc4d 	bl	8013718 <xQueueReceive>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d00b      	beq.n	8012e9c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d003      	beq.n	8012e92 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012e8a:	f06f 0301 	mvn.w	r3, #1
 8012e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8012e90:	e004      	b.n	8012e9c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012e92:	f06f 0302 	mvn.w	r3, #2
 8012e96:	627b      	str	r3, [r7, #36]	; 0x24
 8012e98:	e000      	b.n	8012e9c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e9a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3728      	adds	r7, #40	; 0x28
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20001110 	.word	0x20001110
 8012eac:	e000ed04 	.word	0xe000ed04

08012eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	4a07      	ldr	r2, [pc, #28]	; (8012edc <vApplicationGetIdleTaskMemory+0x2c>)
 8012ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	4a06      	ldr	r2, [pc, #24]	; (8012ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8012ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2280      	movs	r2, #128	; 0x80
 8012ecc:	601a      	str	r2, [r3, #0]
}
 8012ece:	bf00      	nop
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	20001114 	.word	0x20001114
 8012ee0:	20001174 	.word	0x20001174

08012ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012ee4:	b480      	push	{r7}
 8012ee6:	b085      	sub	sp, #20
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	4a07      	ldr	r2, [pc, #28]	; (8012f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8012ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	4a06      	ldr	r2, [pc, #24]	; (8012f14 <vApplicationGetTimerTaskMemory+0x30>)
 8012efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012f02:	601a      	str	r2, [r3, #0]
}
 8012f04:	bf00      	nop
 8012f06:	3714      	adds	r7, #20
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr
 8012f10:	20001374 	.word	0x20001374
 8012f14:	200013d4 	.word	0x200013d4

08012f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f103 0208 	add.w	r2, r3, #8
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f103 0208 	add.w	r2, r3, #8
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f103 0208 	add.w	r2, r3, #8
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f4c:	bf00      	nop
 8012f4e:	370c      	adds	r7, #12
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f66:	bf00      	nop
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	68fa      	ldr	r2, [r7, #12]
 8012f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	689a      	ldr	r2, [r3, #8]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
}
 8012fae:	bf00      	nop
 8012fb0:	3714      	adds	r7, #20
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd0:	d103      	bne.n	8012fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	60fb      	str	r3, [r7, #12]
 8012fd8:	e00c      	b.n	8012ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	3308      	adds	r3, #8
 8012fde:	60fb      	str	r3, [r7, #12]
 8012fe0:	e002      	b.n	8012fe8 <vListInsert+0x2e>
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	60fb      	str	r3, [r7, #12]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d2f6      	bcs.n	8012fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	685a      	ldr	r2, [r3, #4]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	68fa      	ldr	r2, [r7, #12]
 8013008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	601a      	str	r2, [r3, #0]
}
 8013020:	bf00      	nop
 8013022:	3714      	adds	r7, #20
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr

0801302c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	6892      	ldr	r2, [r2, #8]
 8013042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	6852      	ldr	r2, [r2, #4]
 801304c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	429a      	cmp	r2, r3
 8013056:	d103      	bne.n	8013060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	689a      	ldr	r2, [r3, #8]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2200      	movs	r2, #0
 8013064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	1e5a      	subs	r2, r3, #1
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
}
 8013074:	4618      	mov	r0, r3
 8013076:	3714      	adds	r7, #20
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d10b      	bne.n	80130ac <xQueueGenericReset+0x2c>
	__asm volatile
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	b672      	cpsid	i
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	b662      	cpsie	i
 80130a8:	60bb      	str	r3, [r7, #8]
 80130aa:	e7fe      	b.n	80130aa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80130ac:	f002 fa44 	bl	8015538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b8:	68f9      	ldr	r1, [r7, #12]
 80130ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130bc:	fb01 f303 	mul.w	r3, r1, r3
 80130c0:	441a      	add	r2, r3
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130dc:	3b01      	subs	r3, #1
 80130de:	68f9      	ldr	r1, [r7, #12]
 80130e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130e2:	fb01 f303 	mul.w	r3, r1, r3
 80130e6:	441a      	add	r2, r3
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	22ff      	movs	r2, #255	; 0xff
 80130f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	22ff      	movs	r2, #255	; 0xff
 80130f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d114      	bne.n	801312c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d01a      	beq.n	8013140 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	3310      	adds	r3, #16
 801310e:	4618      	mov	r0, r3
 8013110:	f001 fb12 	bl	8014738 <xTaskRemoveFromEventList>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d012      	beq.n	8013140 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801311a:	4b0d      	ldr	r3, [pc, #52]	; (8013150 <xQueueGenericReset+0xd0>)
 801311c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	e009      	b.n	8013140 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	3310      	adds	r3, #16
 8013130:	4618      	mov	r0, r3
 8013132:	f7ff fef1 	bl	8012f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	3324      	adds	r3, #36	; 0x24
 801313a:	4618      	mov	r0, r3
 801313c:	f7ff feec 	bl	8012f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013140:	f002 fa2c 	bl	801559c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013144:	2301      	movs	r3, #1
}
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
 801314e:	bf00      	nop
 8013150:	e000ed04 	.word	0xe000ed04

08013154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013154:	b580      	push	{r7, lr}
 8013156:	b08e      	sub	sp, #56	; 0x38
 8013158:	af02      	add	r7, sp, #8
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10b      	bne.n	8013180 <xQueueGenericCreateStatic+0x2c>
 8013168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801316c:	b672      	cpsid	i
 801316e:	f383 8811 	msr	BASEPRI, r3
 8013172:	f3bf 8f6f 	isb	sy
 8013176:	f3bf 8f4f 	dsb	sy
 801317a:	b662      	cpsie	i
 801317c:	62bb      	str	r3, [r7, #40]	; 0x28
 801317e:	e7fe      	b.n	801317e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d10b      	bne.n	801319e <xQueueGenericCreateStatic+0x4a>
 8013186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801318a:	b672      	cpsid	i
 801318c:	f383 8811 	msr	BASEPRI, r3
 8013190:	f3bf 8f6f 	isb	sy
 8013194:	f3bf 8f4f 	dsb	sy
 8013198:	b662      	cpsie	i
 801319a:	627b      	str	r3, [r7, #36]	; 0x24
 801319c:	e7fe      	b.n	801319c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d002      	beq.n	80131aa <xQueueGenericCreateStatic+0x56>
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d001      	beq.n	80131ae <xQueueGenericCreateStatic+0x5a>
 80131aa:	2301      	movs	r3, #1
 80131ac:	e000      	b.n	80131b0 <xQueueGenericCreateStatic+0x5c>
 80131ae:	2300      	movs	r3, #0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d10b      	bne.n	80131cc <xQueueGenericCreateStatic+0x78>
 80131b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b8:	b672      	cpsid	i
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	b662      	cpsie	i
 80131c8:	623b      	str	r3, [r7, #32]
 80131ca:	e7fe      	b.n	80131ca <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d102      	bne.n	80131d8 <xQueueGenericCreateStatic+0x84>
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d101      	bne.n	80131dc <xQueueGenericCreateStatic+0x88>
 80131d8:	2301      	movs	r3, #1
 80131da:	e000      	b.n	80131de <xQueueGenericCreateStatic+0x8a>
 80131dc:	2300      	movs	r3, #0
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d10b      	bne.n	80131fa <xQueueGenericCreateStatic+0xa6>
 80131e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e6:	b672      	cpsid	i
 80131e8:	f383 8811 	msr	BASEPRI, r3
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	b662      	cpsie	i
 80131f6:	61fb      	str	r3, [r7, #28]
 80131f8:	e7fe      	b.n	80131f8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80131fa:	2350      	movs	r3, #80	; 0x50
 80131fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	2b50      	cmp	r3, #80	; 0x50
 8013202:	d00b      	beq.n	801321c <xQueueGenericCreateStatic+0xc8>
 8013204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013208:	b672      	cpsid	i
 801320a:	f383 8811 	msr	BASEPRI, r3
 801320e:	f3bf 8f6f 	isb	sy
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	b662      	cpsie	i
 8013218:	61bb      	str	r3, [r7, #24]
 801321a:	e7fe      	b.n	801321a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801321c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00d      	beq.n	8013244 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322a:	2201      	movs	r2, #1
 801322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013230:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	4613      	mov	r3, r2
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	68b9      	ldr	r1, [r7, #8]
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f000 f846 	bl	80132d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013246:	4618      	mov	r0, r3
 8013248:	3730      	adds	r7, #48	; 0x30
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}

0801324e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801324e:	b580      	push	{r7, lr}
 8013250:	b08a      	sub	sp, #40	; 0x28
 8013252:	af02      	add	r7, sp, #8
 8013254:	60f8      	str	r0, [r7, #12]
 8013256:	60b9      	str	r1, [r7, #8]
 8013258:	4613      	mov	r3, r2
 801325a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d10b      	bne.n	801327a <xQueueGenericCreate+0x2c>
 8013262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013266:	b672      	cpsid	i
 8013268:	f383 8811 	msr	BASEPRI, r3
 801326c:	f3bf 8f6f 	isb	sy
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	b662      	cpsie	i
 8013276:	613b      	str	r3, [r7, #16]
 8013278:	e7fe      	b.n	8013278 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d102      	bne.n	8013286 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013280:	2300      	movs	r3, #0
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	e004      	b.n	8013290 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	68ba      	ldr	r2, [r7, #8]
 801328a:	fb02 f303 	mul.w	r3, r2, r3
 801328e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	3350      	adds	r3, #80	; 0x50
 8013294:	4618      	mov	r0, r3
 8013296:	f002 fa71 	bl	801577c <pvPortMalloc>
 801329a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d011      	beq.n	80132c6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	3350      	adds	r3, #80	; 0x50
 80132aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80132ac:	69bb      	ldr	r3, [r7, #24]
 80132ae:	2200      	movs	r2, #0
 80132b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132b4:	79fa      	ldrb	r2, [r7, #7]
 80132b6:	69bb      	ldr	r3, [r7, #24]
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	4613      	mov	r3, r2
 80132bc:	697a      	ldr	r2, [r7, #20]
 80132be:	68b9      	ldr	r1, [r7, #8]
 80132c0:	68f8      	ldr	r0, [r7, #12]
 80132c2:	f000 f805 	bl	80132d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132c6:	69bb      	ldr	r3, [r7, #24]
	}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3720      	adds	r7, #32
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
 80132dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d103      	bne.n	80132ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	69ba      	ldr	r2, [r7, #24]
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	e002      	b.n	80132f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	68fa      	ldr	r2, [r7, #12]
 80132f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132fe:	2101      	movs	r1, #1
 8013300:	69b8      	ldr	r0, [r7, #24]
 8013302:	f7ff febd 	bl	8013080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	78fa      	ldrb	r2, [r7, #3]
 801330a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	3348      	adds	r3, #72	; 0x48
 8013312:	4618      	mov	r0, r3
 8013314:	f7ed fd1c 	bl	8000d50 <TimeDoctor_QUEUE_CREATE>
}
 8013318:	bf00      	nop
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00e      	beq.n	801334c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2200      	movs	r2, #0
 801333e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013340:	2300      	movs	r3, #0
 8013342:	2200      	movs	r2, #0
 8013344:	2100      	movs	r1, #0
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f000 f838 	bl	80133bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801334c:	bf00      	nop
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	4603      	mov	r3, r0
 801335c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801335e:	2301      	movs	r3, #1
 8013360:	617b      	str	r3, [r7, #20]
 8013362:	2300      	movs	r3, #0
 8013364:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013366:	79fb      	ldrb	r3, [r7, #7]
 8013368:	461a      	mov	r2, r3
 801336a:	6939      	ldr	r1, [r7, #16]
 801336c:	6978      	ldr	r0, [r7, #20]
 801336e:	f7ff ff6e 	bl	801324e <xQueueGenericCreate>
 8013372:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f7ff ffd3 	bl	8013320 <prvInitialiseMutex>

		return xNewQueue;
 801337a:	68fb      	ldr	r3, [r7, #12]
	}
 801337c:	4618      	mov	r0, r3
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013384:	b580      	push	{r7, lr}
 8013386:	b088      	sub	sp, #32
 8013388:	af02      	add	r7, sp, #8
 801338a:	4603      	mov	r3, r0
 801338c:	6039      	str	r1, [r7, #0]
 801338e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013390:	2301      	movs	r3, #1
 8013392:	617b      	str	r3, [r7, #20]
 8013394:	2300      	movs	r3, #0
 8013396:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013398:	79fb      	ldrb	r3, [r7, #7]
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	2200      	movs	r2, #0
 80133a0:	6939      	ldr	r1, [r7, #16]
 80133a2:	6978      	ldr	r0, [r7, #20]
 80133a4:	f7ff fed6 	bl	8013154 <xQueueGenericCreateStatic>
 80133a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f7ff ffb8 	bl	8013320 <prvInitialiseMutex>

		return xNewQueue;
 80133b0:	68fb      	ldr	r3, [r7, #12]
	}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
	...

080133bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b08e      	sub	sp, #56	; 0x38
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
 80133c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80133ca:	2300      	movs	r3, #0
 80133cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10b      	bne.n	80133f0 <xQueueGenericSend+0x34>
 80133d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133dc:	b672      	cpsid	i
 80133de:	f383 8811 	msr	BASEPRI, r3
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	b662      	cpsie	i
 80133ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80133ee:	e7fe      	b.n	80133ee <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d103      	bne.n	80133fe <xQueueGenericSend+0x42>
 80133f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <xQueueGenericSend+0x46>
 80133fe:	2301      	movs	r3, #1
 8013400:	e000      	b.n	8013404 <xQueueGenericSend+0x48>
 8013402:	2300      	movs	r3, #0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10b      	bne.n	8013420 <xQueueGenericSend+0x64>
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	b672      	cpsid	i
 801340e:	f383 8811 	msr	BASEPRI, r3
 8013412:	f3bf 8f6f 	isb	sy
 8013416:	f3bf 8f4f 	dsb	sy
 801341a:	b662      	cpsie	i
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
 801341e:	e7fe      	b.n	801341e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	2b02      	cmp	r3, #2
 8013424:	d103      	bne.n	801342e <xQueueGenericSend+0x72>
 8013426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801342a:	2b01      	cmp	r3, #1
 801342c:	d101      	bne.n	8013432 <xQueueGenericSend+0x76>
 801342e:	2301      	movs	r3, #1
 8013430:	e000      	b.n	8013434 <xQueueGenericSend+0x78>
 8013432:	2300      	movs	r3, #0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d10b      	bne.n	8013450 <xQueueGenericSend+0x94>
 8013438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343c:	b672      	cpsid	i
 801343e:	f383 8811 	msr	BASEPRI, r3
 8013442:	f3bf 8f6f 	isb	sy
 8013446:	f3bf 8f4f 	dsb	sy
 801344a:	b662      	cpsie	i
 801344c:	623b      	str	r3, [r7, #32]
 801344e:	e7fe      	b.n	801344e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013450:	f001 fb32 	bl	8014ab8 <xTaskGetSchedulerState>
 8013454:	4603      	mov	r3, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <xQueueGenericSend+0xa4>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <xQueueGenericSend+0xa8>
 8013460:	2301      	movs	r3, #1
 8013462:	e000      	b.n	8013466 <xQueueGenericSend+0xaa>
 8013464:	2300      	movs	r3, #0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d10b      	bne.n	8013482 <xQueueGenericSend+0xc6>
 801346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346e:	b672      	cpsid	i
 8013470:	f383 8811 	msr	BASEPRI, r3
 8013474:	f3bf 8f6f 	isb	sy
 8013478:	f3bf 8f4f 	dsb	sy
 801347c:	b662      	cpsie	i
 801347e:	61fb      	str	r3, [r7, #28]
 8013480:	e7fe      	b.n	8013480 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013482:	f002 f859 	bl	8015538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801348e:	429a      	cmp	r2, r3
 8013490:	d302      	bcc.n	8013498 <xQueueGenericSend+0xdc>
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	2b02      	cmp	r3, #2
 8013496:	d131      	bne.n	80134fc <xQueueGenericSend+0x140>
			{
				traceQUEUE_SEND( pxQueue );
 8013498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a0:	4619      	mov	r1, r3
 80134a2:	4610      	mov	r0, r2
 80134a4:	f7ed fcbc 	bl	8000e20 <TimeDoctor_QUEUE_SEND>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	68b9      	ldr	r1, [r7, #8]
 80134ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134ae:	f000 faa8 	bl	8013a02 <prvCopyDataToQueue>
 80134b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80134b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d010      	beq.n	80134de <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80134bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134be:	3324      	adds	r3, #36	; 0x24
 80134c0:	4618      	mov	r0, r3
 80134c2:	f001 f939 	bl	8014738 <xTaskRemoveFromEventList>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d013      	beq.n	80134f4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80134cc:	4b3f      	ldr	r3, [pc, #252]	; (80135cc <xQueueGenericSend+0x210>)
 80134ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134d2:	601a      	str	r2, [r3, #0]
 80134d4:	f3bf 8f4f 	dsb	sy
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	e00a      	b.n	80134f4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80134de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d007      	beq.n	80134f4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80134e4:	4b39      	ldr	r3, [pc, #228]	; (80135cc <xQueueGenericSend+0x210>)
 80134e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134ea:	601a      	str	r2, [r3, #0]
 80134ec:	f3bf 8f4f 	dsb	sy
 80134f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80134f4:	f002 f852 	bl	801559c <vPortExitCritical>
				return pdPASS;
 80134f8:	2301      	movs	r3, #1
 80134fa:	e063      	b.n	80135c4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d103      	bne.n	801350a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013502:	f002 f84b 	bl	801559c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013506:	2300      	movs	r3, #0
 8013508:	e05c      	b.n	80135c4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350c:	2b00      	cmp	r3, #0
 801350e:	d106      	bne.n	801351e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013510:	f107 0314 	add.w	r3, r7, #20
 8013514:	4618      	mov	r0, r3
 8013516:	f001 f973 	bl	8014800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801351a:	2301      	movs	r3, #1
 801351c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801351e:	f002 f83d 	bl	801559c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013522:	f000 feb1 	bl	8014288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013526:	f002 f807 	bl	8015538 <vPortEnterCritical>
 801352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013530:	b25b      	sxtb	r3, r3
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013536:	d103      	bne.n	8013540 <xQueueGenericSend+0x184>
 8013538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353a:	2200      	movs	r2, #0
 801353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013546:	b25b      	sxtb	r3, r3
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354c:	d103      	bne.n	8013556 <xQueueGenericSend+0x19a>
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013556:	f002 f821 	bl	801559c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801355a:	1d3a      	adds	r2, r7, #4
 801355c:	f107 0314 	add.w	r3, r7, #20
 8013560:	4611      	mov	r1, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f001 f962 	bl	801482c <xTaskCheckForTimeOut>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d124      	bne.n	80135b8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801356e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013570:	f000 fb3f 	bl	8013bf2 <prvIsQueueFull>
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	d018      	beq.n	80135ac <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357c:	3310      	adds	r3, #16
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f001 f886 	bl	8014694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801358a:	f000 faca 	bl	8013b22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801358e:	f000 fe89 	bl	80142a4 <xTaskResumeAll>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	f47f af74 	bne.w	8013482 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801359a:	4b0c      	ldr	r3, [pc, #48]	; (80135cc <xQueueGenericSend+0x210>)
 801359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	f3bf 8f4f 	dsb	sy
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	e76a      	b.n	8013482 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80135ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135ae:	f000 fab8 	bl	8013b22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135b2:	f000 fe77 	bl	80142a4 <xTaskResumeAll>
 80135b6:	e764      	b.n	8013482 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80135b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135ba:	f000 fab2 	bl	8013b22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135be:	f000 fe71 	bl	80142a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80135c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3738      	adds	r7, #56	; 0x38
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	e000ed04 	.word	0xe000ed04

080135d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08e      	sub	sp, #56	; 0x38
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80135e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10b      	bne.n	8013600 <xQueueGenericSendFromISR+0x30>
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	b672      	cpsid	i
 80135ee:	f383 8811 	msr	BASEPRI, r3
 80135f2:	f3bf 8f6f 	isb	sy
 80135f6:	f3bf 8f4f 	dsb	sy
 80135fa:	b662      	cpsie	i
 80135fc:	627b      	str	r3, [r7, #36]	; 0x24
 80135fe:	e7fe      	b.n	80135fe <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d103      	bne.n	801360e <xQueueGenericSendFromISR+0x3e>
 8013606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <xQueueGenericSendFromISR+0x42>
 801360e:	2301      	movs	r3, #1
 8013610:	e000      	b.n	8013614 <xQueueGenericSendFromISR+0x44>
 8013612:	2300      	movs	r3, #0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d10b      	bne.n	8013630 <xQueueGenericSendFromISR+0x60>
 8013618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361c:	b672      	cpsid	i
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	b662      	cpsie	i
 801362c:	623b      	str	r3, [r7, #32]
 801362e:	e7fe      	b.n	801362e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b02      	cmp	r3, #2
 8013634:	d103      	bne.n	801363e <xQueueGenericSendFromISR+0x6e>
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801363a:	2b01      	cmp	r3, #1
 801363c:	d101      	bne.n	8013642 <xQueueGenericSendFromISR+0x72>
 801363e:	2301      	movs	r3, #1
 8013640:	e000      	b.n	8013644 <xQueueGenericSendFromISR+0x74>
 8013642:	2300      	movs	r3, #0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10b      	bne.n	8013660 <xQueueGenericSendFromISR+0x90>
 8013648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364c:	b672      	cpsid	i
 801364e:	f383 8811 	msr	BASEPRI, r3
 8013652:	f3bf 8f6f 	isb	sy
 8013656:	f3bf 8f4f 	dsb	sy
 801365a:	b662      	cpsie	i
 801365c:	61fb      	str	r3, [r7, #28]
 801365e:	e7fe      	b.n	801365e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013660:	f002 f84a 	bl	80156f8 <vPortValidateInterruptPriority>
	__asm volatile
 8013664:	f3ef 8211 	mrs	r2, BASEPRI
 8013668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366c:	b672      	cpsid	i
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	b662      	cpsie	i
 801367c:	61ba      	str	r2, [r7, #24]
 801367e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013680:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013682:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801368c:	429a      	cmp	r2, r3
 801368e:	d302      	bcc.n	8013696 <xQueueGenericSendFromISR+0xc6>
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d134      	bne.n	8013700 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801369c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80136a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136a8:	4619      	mov	r1, r3
 80136aa:	4610      	mov	r0, r2
 80136ac:	f7ed fbfa 	bl	8000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80136b0:	683a      	ldr	r2, [r7, #0]
 80136b2:	68b9      	ldr	r1, [r7, #8]
 80136b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136b6:	f000 f9a4 	bl	8013a02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80136ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80136be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c2:	d112      	bne.n	80136ea <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d016      	beq.n	80136fa <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ce:	3324      	adds	r3, #36	; 0x24
 80136d0:	4618      	mov	r0, r3
 80136d2:	f001 f831 	bl	8014738 <xTaskRemoveFromEventList>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d00e      	beq.n	80136fa <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d00b      	beq.n	80136fa <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2201      	movs	r2, #1
 80136e6:	601a      	str	r2, [r3, #0]
 80136e8:	e007      	b.n	80136fa <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80136ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80136ee:	3301      	adds	r3, #1
 80136f0:	b2db      	uxtb	r3, r3
 80136f2:	b25a      	sxtb	r2, r3
 80136f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80136fa:	2301      	movs	r3, #1
 80136fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80136fe:	e001      	b.n	8013704 <xQueueGenericSendFromISR+0x134>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013700:	2300      	movs	r3, #0
 8013702:	637b      	str	r3, [r7, #52]	; 0x34
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013710:	4618      	mov	r0, r3
 8013712:	3738      	adds	r7, #56	; 0x38
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b08c      	sub	sp, #48	; 0x30
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013724:	2300      	movs	r3, #0
 8013726:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372e:	2b00      	cmp	r3, #0
 8013730:	d10b      	bne.n	801374a <xQueueReceive+0x32>
	__asm volatile
 8013732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013736:	b672      	cpsid	i
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	b662      	cpsie	i
 8013746:	623b      	str	r3, [r7, #32]
 8013748:	e7fe      	b.n	8013748 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d103      	bne.n	8013758 <xQueueReceive+0x40>
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013754:	2b00      	cmp	r3, #0
 8013756:	d101      	bne.n	801375c <xQueueReceive+0x44>
 8013758:	2301      	movs	r3, #1
 801375a:	e000      	b.n	801375e <xQueueReceive+0x46>
 801375c:	2300      	movs	r3, #0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d10b      	bne.n	801377a <xQueueReceive+0x62>
 8013762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013766:	b672      	cpsid	i
 8013768:	f383 8811 	msr	BASEPRI, r3
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	f3bf 8f4f 	dsb	sy
 8013774:	b662      	cpsie	i
 8013776:	61fb      	str	r3, [r7, #28]
 8013778:	e7fe      	b.n	8013778 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801377a:	f001 f99d 	bl	8014ab8 <xTaskGetSchedulerState>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d102      	bne.n	801378a <xQueueReceive+0x72>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d101      	bne.n	801378e <xQueueReceive+0x76>
 801378a:	2301      	movs	r3, #1
 801378c:	e000      	b.n	8013790 <xQueueReceive+0x78>
 801378e:	2300      	movs	r3, #0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d10b      	bne.n	80137ac <xQueueReceive+0x94>
 8013794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013798:	b672      	cpsid	i
 801379a:	f383 8811 	msr	BASEPRI, r3
 801379e:	f3bf 8f6f 	isb	sy
 80137a2:	f3bf 8f4f 	dsb	sy
 80137a6:	b662      	cpsie	i
 80137a8:	61bb      	str	r3, [r7, #24]
 80137aa:	e7fe      	b.n	80137aa <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137ac:	f001 fec4 	bl	8015538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80137b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d027      	beq.n	801380c <xQueueReceive+0xf4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80137bc:	68b9      	ldr	r1, [r7, #8]
 80137be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137c0:	f000 f989 	bl	8013ad6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80137c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f7ed fbaa 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d6:	1e5a      	subs	r2, r3, #1
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137de:	691b      	ldr	r3, [r3, #16]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00f      	beq.n	8013804 <xQueueReceive+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	3310      	adds	r3, #16
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 ffa5 	bl	8014738 <xTaskRemoveFromEventList>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d007      	beq.n	8013804 <xQueueReceive+0xec>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137f4:	4b3c      	ldr	r3, [pc, #240]	; (80138e8 <xQueueReceive+0x1d0>)
 80137f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013804:	f001 feca 	bl	801559c <vPortExitCritical>
				return pdPASS;
 8013808:	2301      	movs	r3, #1
 801380a:	e069      	b.n	80138e0 <xQueueReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d103      	bne.n	801381a <xQueueReceive+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013812:	f001 fec3 	bl	801559c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013816:	2300      	movs	r3, #0
 8013818:	e062      	b.n	80138e0 <xQueueReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381c:	2b00      	cmp	r3, #0
 801381e:	d106      	bne.n	801382e <xQueueReceive+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013820:	f107 0310 	add.w	r3, r7, #16
 8013824:	4618      	mov	r0, r3
 8013826:	f000 ffeb 	bl	8014800 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801382a:	2301      	movs	r3, #1
 801382c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801382e:	f001 feb5 	bl	801559c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013832:	f000 fd29 	bl	8014288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013836:	f001 fe7f 	bl	8015538 <vPortEnterCritical>
 801383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013840:	b25b      	sxtb	r3, r3
 8013842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013846:	d103      	bne.n	8013850 <xQueueReceive+0x138>
 8013848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384a:	2200      	movs	r2, #0
 801384c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013856:	b25b      	sxtb	r3, r3
 8013858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801385c:	d103      	bne.n	8013866 <xQueueReceive+0x14e>
 801385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013860:	2200      	movs	r2, #0
 8013862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013866:	f001 fe99 	bl	801559c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801386a:	1d3a      	adds	r2, r7, #4
 801386c:	f107 0310 	add.w	r3, r7, #16
 8013870:	4611      	mov	r1, r2
 8013872:	4618      	mov	r0, r3
 8013874:	f000 ffda 	bl	801482c <xTaskCheckForTimeOut>
 8013878:	4603      	mov	r3, r0
 801387a:	2b00      	cmp	r3, #0
 801387c:	d123      	bne.n	80138c6 <xQueueReceive+0x1ae>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801387e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013880:	f000 f9a1 	bl	8013bc6 <prvIsQueueEmpty>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d017      	beq.n	80138ba <xQueueReceive+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388c:	3324      	adds	r3, #36	; 0x24
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	4611      	mov	r1, r2
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fefe 	bl	8014694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801389a:	f000 f942 	bl	8013b22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801389e:	f000 fd01 	bl	80142a4 <xTaskResumeAll>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d181      	bne.n	80137ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80138a8:	4b0f      	ldr	r3, [pc, #60]	; (80138e8 <xQueueReceive+0x1d0>)
 80138aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	f3bf 8f6f 	isb	sy
 80138b8:	e778      	b.n	80137ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80138ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138bc:	f000 f931 	bl	8013b22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80138c0:	f000 fcf0 	bl	80142a4 <xTaskResumeAll>
 80138c4:	e772      	b.n	80137ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80138c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138c8:	f000 f92b 	bl	8013b22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138cc:	f000 fcea 	bl	80142a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138d2:	f000 f978 	bl	8013bc6 <prvIsQueueEmpty>
 80138d6:	4603      	mov	r3, r0
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f43f af67 	beq.w	80137ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80138de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3730      	adds	r7, #48	; 0x30
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	e000ed04 	.word	0xe000ed04

080138ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b08e      	sub	sp, #56	; 0x38
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d10b      	bne.n	801391a <xQueueReceiveFromISR+0x2e>
 8013902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013906:	b672      	cpsid	i
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	b662      	cpsie	i
 8013916:	623b      	str	r3, [r7, #32]
 8013918:	e7fe      	b.n	8013918 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d103      	bne.n	8013928 <xQueueReceiveFromISR+0x3c>
 8013920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013924:	2b00      	cmp	r3, #0
 8013926:	d101      	bne.n	801392c <xQueueReceiveFromISR+0x40>
 8013928:	2301      	movs	r3, #1
 801392a:	e000      	b.n	801392e <xQueueReceiveFromISR+0x42>
 801392c:	2300      	movs	r3, #0
 801392e:	2b00      	cmp	r3, #0
 8013930:	d10b      	bne.n	801394a <xQueueReceiveFromISR+0x5e>
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	b672      	cpsid	i
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	b662      	cpsie	i
 8013946:	61fb      	str	r3, [r7, #28]
 8013948:	e7fe      	b.n	8013948 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801394a:	f001 fed5 	bl	80156f8 <vPortValidateInterruptPriority>
	__asm volatile
 801394e:	f3ef 8211 	mrs	r2, BASEPRI
 8013952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013956:	b672      	cpsid	i
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	b662      	cpsie	i
 8013966:	61ba      	str	r2, [r7, #24]
 8013968:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801396a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801396c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013972:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	2b00      	cmp	r3, #0
 8013978:	d037      	beq.n	80139ea <xQueueReceiveFromISR+0xfe>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8013984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f7ed fb0c 	bl	8000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013994:	68b9      	ldr	r1, [r7, #8]
 8013996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013998:	f000 f89d 	bl	8013ad6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	1e5a      	subs	r2, r3, #1
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80139a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80139a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ac:	d112      	bne.n	80139d4 <xQueueReceiveFromISR+0xe8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b0:	691b      	ldr	r3, [r3, #16]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d016      	beq.n	80139e4 <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	3310      	adds	r3, #16
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 febc 	bl	8014738 <xTaskRemoveFromEventList>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d00e      	beq.n	80139e4 <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d00b      	beq.n	80139e4 <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2201      	movs	r2, #1
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	e007      	b.n	80139e4 <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80139d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139d8:	3301      	adds	r3, #1
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	b25a      	sxtb	r2, r3
 80139de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80139e4:	2301      	movs	r3, #1
 80139e6:	637b      	str	r3, [r7, #52]	; 0x34
 80139e8:	e001      	b.n	80139ee <xQueueReceiveFromISR+0x102>
		}
		else
		{
			xReturn = pdFAIL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	637b      	str	r3, [r7, #52]	; 0x34
 80139ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3738      	adds	r7, #56	; 0x38
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b086      	sub	sp, #24
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	60f8      	str	r0, [r7, #12]
 8013a0a:	60b9      	str	r1, [r7, #8]
 8013a0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d10d      	bne.n	8013a3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d14d      	bne.n	8013ac4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	689b      	ldr	r3, [r3, #8]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f001 f861 	bl	8014af4 <xTaskPriorityDisinherit>
 8013a32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2200      	movs	r2, #0
 8013a38:	609a      	str	r2, [r3, #8]
 8013a3a:	e043      	b.n	8013ac4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d119      	bne.n	8013a76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6858      	ldr	r0, [r3, #4]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	f002 fba9 	bl	80161a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	685a      	ldr	r2, [r3, #4]
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a5a:	441a      	add	r2, r3
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	685a      	ldr	r2, [r3, #4]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d32b      	bcc.n	8013ac4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	605a      	str	r2, [r3, #4]
 8013a74:	e026      	b.n	8013ac4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	68d8      	ldr	r0, [r3, #12]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a7e:	461a      	mov	r2, r3
 8013a80:	68b9      	ldr	r1, [r7, #8]
 8013a82:	f002 fb8f 	bl	80161a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	68da      	ldr	r2, [r3, #12]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a8e:	425b      	negs	r3, r3
 8013a90:	441a      	add	r2, r3
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	68da      	ldr	r2, [r3, #12]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d207      	bcs.n	8013ab2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	689a      	ldr	r2, [r3, #8]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aaa:	425b      	negs	r3, r3
 8013aac:	441a      	add	r2, r3
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2b02      	cmp	r3, #2
 8013ab6:	d105      	bne.n	8013ac4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	1c5a      	adds	r2, r3, #1
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013acc:	697b      	ldr	r3, [r7, #20]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3718      	adds	r7, #24
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}

08013ad6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013ad6:	b580      	push	{r7, lr}
 8013ad8:	b082      	sub	sp, #8
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
 8013ade:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d018      	beq.n	8013b1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	68da      	ldr	r2, [r3, #12]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af0:	441a      	add	r2, r3
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	68da      	ldr	r2, [r3, #12]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d303      	bcc.n	8013b0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	68d9      	ldr	r1, [r3, #12]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b12:	461a      	mov	r2, r3
 8013b14:	6838      	ldr	r0, [r7, #0]
 8013b16:	f002 fb45 	bl	80161a4 <memcpy>
	}
}
 8013b1a:	bf00      	nop
 8013b1c:	3708      	adds	r7, #8
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b084      	sub	sp, #16
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013b2a:	f001 fd05 	bl	8015538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b36:	e011      	b.n	8013b5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d012      	beq.n	8013b66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	3324      	adds	r3, #36	; 0x24
 8013b44:	4618      	mov	r0, r3
 8013b46:	f000 fdf7 	bl	8014738 <xTaskRemoveFromEventList>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d001      	beq.n	8013b54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013b50:	f000 fed0 	bl	80148f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013b54:	7bfb      	ldrb	r3, [r7, #15]
 8013b56:	3b01      	subs	r3, #1
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	dce9      	bgt.n	8013b38 <prvUnlockQueue+0x16>
 8013b64:	e000      	b.n	8013b68 <prvUnlockQueue+0x46>
					break;
 8013b66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	22ff      	movs	r2, #255	; 0xff
 8013b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013b70:	f001 fd14 	bl	801559c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013b74:	f001 fce0 	bl	8015538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b80:	e011      	b.n	8013ba6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d012      	beq.n	8013bb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	3310      	adds	r3, #16
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f000 fdd2 	bl	8014738 <xTaskRemoveFromEventList>
 8013b94:	4603      	mov	r3, r0
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d001      	beq.n	8013b9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013b9a:	f000 feab 	bl	80148f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013b9e:	7bbb      	ldrb	r3, [r7, #14]
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	dce9      	bgt.n	8013b82 <prvUnlockQueue+0x60>
 8013bae:	e000      	b.n	8013bb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013bb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	22ff      	movs	r2, #255	; 0xff
 8013bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013bba:	f001 fcef 	bl	801559c <vPortExitCritical>
}
 8013bbe:	bf00      	nop
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b084      	sub	sp, #16
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013bce:	f001 fcb3 	bl	8015538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d102      	bne.n	8013be0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	60fb      	str	r3, [r7, #12]
 8013bde:	e001      	b.n	8013be4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013be0:	2300      	movs	r3, #0
 8013be2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013be4:	f001 fcda 	bl	801559c <vPortExitCritical>

	return xReturn;
 8013be8:	68fb      	ldr	r3, [r7, #12]
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b084      	sub	sp, #16
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013bfa:	f001 fc9d 	bl	8015538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d102      	bne.n	8013c10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	60fb      	str	r3, [r7, #12]
 8013c0e:	e001      	b.n	8013c14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013c10:	2300      	movs	r3, #0
 8013c12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c14:	f001 fcc2 	bl	801559c <vPortExitCritical>

	return xReturn;
 8013c18:	68fb      	ldr	r3, [r7, #12]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3710      	adds	r7, #16
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
	...

08013c24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c2e:	2300      	movs	r3, #0
 8013c30:	60fb      	str	r3, [r7, #12]
 8013c32:	e01a      	b.n	8013c6a <vQueueAddToRegistry+0x46>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013c34:	4a10      	ldr	r2, [pc, #64]	; (8013c78 <vQueueAddToRegistry+0x54>)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d111      	bne.n	8013c64 <vQueueAddToRegistry+0x40>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013c40:	490d      	ldr	r1, [pc, #52]	; (8013c78 <vQueueAddToRegistry+0x54>)
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013c4a:	4a0b      	ldr	r2, [pc, #44]	; (8013c78 <vQueueAddToRegistry+0x54>)
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	4413      	add	r3, r2
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c5a:	6839      	ldr	r1, [r7, #0]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7ed f8bf 	bl	8000de0 <Timedoctor_QUEUE_REGISTRY_ADD>
				break;
 8013c62:	e005      	b.n	8013c70 <vQueueAddToRegistry+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	3301      	adds	r3, #1
 8013c68:	60fb      	str	r3, [r7, #12]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2b07      	cmp	r3, #7
 8013c6e:	d9e1      	bls.n	8013c34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c70:	bf00      	nop
 8013c72:	3710      	adds	r7, #16
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	2001b9c8 	.word	0x2001b9c8

08013c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013c8c:	f001 fc54 	bl	8015538 <vPortEnterCritical>
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c96:	b25b      	sxtb	r3, r3
 8013c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c9c:	d103      	bne.n	8013ca6 <vQueueWaitForMessageRestricted+0x2a>
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cac:	b25b      	sxtb	r3, r3
 8013cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb2:	d103      	bne.n	8013cbc <vQueueWaitForMessageRestricted+0x40>
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cbc:	f001 fc6e 	bl	801559c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d106      	bne.n	8013cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	3324      	adds	r3, #36	; 0x24
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	68b9      	ldr	r1, [r7, #8]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f000 fd05 	bl	80146e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013cd6:	6978      	ldr	r0, [r7, #20]
 8013cd8:	f7ff ff23 	bl	8013b22 <prvUnlockQueue>
	}
 8013cdc:	bf00      	nop
 8013cde:	3718      	adds	r7, #24
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b08e      	sub	sp, #56	; 0x38
 8013ce8:	af04      	add	r7, sp, #16
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d10b      	bne.n	8013d10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfc:	b672      	cpsid	i
 8013cfe:	f383 8811 	msr	BASEPRI, r3
 8013d02:	f3bf 8f6f 	isb	sy
 8013d06:	f3bf 8f4f 	dsb	sy
 8013d0a:	b662      	cpsie	i
 8013d0c:	623b      	str	r3, [r7, #32]
 8013d0e:	e7fe      	b.n	8013d0e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d10b      	bne.n	8013d2e <xTaskCreateStatic+0x4a>
 8013d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1a:	b672      	cpsid	i
 8013d1c:	f383 8811 	msr	BASEPRI, r3
 8013d20:	f3bf 8f6f 	isb	sy
 8013d24:	f3bf 8f4f 	dsb	sy
 8013d28:	b662      	cpsie	i
 8013d2a:	61fb      	str	r3, [r7, #28]
 8013d2c:	e7fe      	b.n	8013d2c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013d2e:	2360      	movs	r3, #96	; 0x60
 8013d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	2b60      	cmp	r3, #96	; 0x60
 8013d36:	d00b      	beq.n	8013d50 <xTaskCreateStatic+0x6c>
 8013d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3c:	b672      	cpsid	i
 8013d3e:	f383 8811 	msr	BASEPRI, r3
 8013d42:	f3bf 8f6f 	isb	sy
 8013d46:	f3bf 8f4f 	dsb	sy
 8013d4a:	b662      	cpsie	i
 8013d4c:	61bb      	str	r3, [r7, #24]
 8013d4e:	e7fe      	b.n	8013d4e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013d50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d01e      	beq.n	8013d96 <xTaskCreateStatic+0xb2>
 8013d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d01b      	beq.n	8013d96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	2202      	movs	r2, #2
 8013d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013d70:	2300      	movs	r3, #0
 8013d72:	9303      	str	r3, [sp, #12]
 8013d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d76:	9302      	str	r3, [sp, #8]
 8013d78:	f107 0314 	add.w	r3, r7, #20
 8013d7c:	9301      	str	r3, [sp, #4]
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	9300      	str	r3, [sp, #0]
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	68b9      	ldr	r1, [r7, #8]
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	f000 f850 	bl	8013e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013d8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d90:	f000 f8e0 	bl	8013f54 <prvAddNewTaskToReadyList>
 8013d94:	e001      	b.n	8013d9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013d96:	2300      	movs	r3, #0
 8013d98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013d9a:	697b      	ldr	r3, [r7, #20]
	}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3728      	adds	r7, #40	; 0x28
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b08c      	sub	sp, #48	; 0x30
 8013da8:	af04      	add	r7, sp, #16
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	603b      	str	r3, [r7, #0]
 8013db0:	4613      	mov	r3, r2
 8013db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013db4:	88fb      	ldrh	r3, [r7, #6]
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	4618      	mov	r0, r3
 8013dba:	f001 fcdf 	bl	801577c <pvPortMalloc>
 8013dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00e      	beq.n	8013de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013dc6:	2060      	movs	r0, #96	; 0x60
 8013dc8:	f001 fcd8 	bl	801577c <pvPortMalloc>
 8013dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d003      	beq.n	8013ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	697a      	ldr	r2, [r7, #20]
 8013dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8013dda:	e005      	b.n	8013de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013ddc:	6978      	ldr	r0, [r7, #20]
 8013dde:	f001 fd99 	bl	8015914 <vPortFree>
 8013de2:	e001      	b.n	8013de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013de4:	2300      	movs	r3, #0
 8013de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d017      	beq.n	8013e1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	2200      	movs	r2, #0
 8013df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013df6:	88fa      	ldrh	r2, [r7, #6]
 8013df8:	2300      	movs	r3, #0
 8013dfa:	9303      	str	r3, [sp, #12]
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	9302      	str	r3, [sp, #8]
 8013e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e02:	9301      	str	r3, [sp, #4]
 8013e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e06:	9300      	str	r3, [sp, #0]
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	68b9      	ldr	r1, [r7, #8]
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f000 f80e 	bl	8013e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e12:	69f8      	ldr	r0, [r7, #28]
 8013e14:	f000 f89e 	bl	8013f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013e18:	2301      	movs	r3, #1
 8013e1a:	61bb      	str	r3, [r7, #24]
 8013e1c:	e002      	b.n	8013e24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013e24:	69bb      	ldr	r3, [r7, #24]
	}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3720      	adds	r7, #32
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b088      	sub	sp, #32
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	60f8      	str	r0, [r7, #12]
 8013e36:	60b9      	str	r1, [r7, #8]
 8013e38:	607a      	str	r2, [r7, #4]
 8013e3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	009b      	lsls	r3, r3, #2
 8013e44:	461a      	mov	r2, r3
 8013e46:	21a5      	movs	r1, #165	; 0xa5
 8013e48:	f002 f9b7 	bl	80161ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e50:	6879      	ldr	r1, [r7, #4]
 8013e52:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013e56:	440b      	add	r3, r1
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	4413      	add	r3, r2
 8013e5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e5e:	69bb      	ldr	r3, [r7, #24]
 8013e60:	f023 0307 	bic.w	r3, r3, #7
 8013e64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e66:	69bb      	ldr	r3, [r7, #24]
 8013e68:	f003 0307 	and.w	r3, r3, #7
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d00b      	beq.n	8013e88 <prvInitialiseNewTask+0x5a>
 8013e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e74:	b672      	cpsid	i
 8013e76:	f383 8811 	msr	BASEPRI, r3
 8013e7a:	f3bf 8f6f 	isb	sy
 8013e7e:	f3bf 8f4f 	dsb	sy
 8013e82:	b662      	cpsie	i
 8013e84:	617b      	str	r3, [r7, #20]
 8013e86:	e7fe      	b.n	8013e86 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d01f      	beq.n	8013ece <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e8e:	2300      	movs	r3, #0
 8013e90:	61fb      	str	r3, [r7, #28]
 8013e92:	e012      	b.n	8013eba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013e94:	68ba      	ldr	r2, [r7, #8]
 8013e96:	69fb      	ldr	r3, [r7, #28]
 8013e98:	4413      	add	r3, r2
 8013e9a:	7819      	ldrb	r1, [r3, #0]
 8013e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e9e:	69fb      	ldr	r3, [r7, #28]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	3334      	adds	r3, #52	; 0x34
 8013ea4:	460a      	mov	r2, r1
 8013ea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013ea8:	68ba      	ldr	r2, [r7, #8]
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	4413      	add	r3, r2
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d006      	beq.n	8013ec2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013eb4:	69fb      	ldr	r3, [r7, #28]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	61fb      	str	r3, [r7, #28]
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	2b0f      	cmp	r3, #15
 8013ebe:	d9e9      	bls.n	8013e94 <prvInitialiseNewTask+0x66>
 8013ec0:	e000      	b.n	8013ec4 <prvInitialiseNewTask+0x96>
			{
				break;
 8013ec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ecc:	e003      	b.n	8013ed6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	2b37      	cmp	r3, #55	; 0x37
 8013eda:	d901      	bls.n	8013ee0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013edc:	2337      	movs	r3, #55	; 0x37
 8013ede:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eee:	2200      	movs	r2, #0
 8013ef0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef4:	3304      	adds	r3, #4
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7ff f82e 	bl	8012f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efe:	3318      	adds	r3, #24
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7ff f829 	bl	8012f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1e:	2200      	movs	r2, #0
 8013f20:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	2200      	movs	r2, #0
 8013f26:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f30:	683a      	ldr	r2, [r7, #0]
 8013f32:	68f9      	ldr	r1, [r7, #12]
 8013f34:	69b8      	ldr	r0, [r7, #24]
 8013f36:	f001 f9f5 	bl	8015324 <pxPortInitialiseStack>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d002      	beq.n	8013f4c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f4c:	bf00      	nop
 8013f4e:	3720      	adds	r7, #32
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013f5c:	f001 faec 	bl	8015538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013f60:	4b31      	ldr	r3, [pc, #196]	; (8014028 <prvAddNewTaskToReadyList+0xd4>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3301      	adds	r3, #1
 8013f66:	4a30      	ldr	r2, [pc, #192]	; (8014028 <prvAddNewTaskToReadyList+0xd4>)
 8013f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013f6a:	4b30      	ldr	r3, [pc, #192]	; (801402c <prvAddNewTaskToReadyList+0xd8>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d109      	bne.n	8013f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013f72:	4a2e      	ldr	r2, [pc, #184]	; (801402c <prvAddNewTaskToReadyList+0xd8>)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f78:	4b2b      	ldr	r3, [pc, #172]	; (8014028 <prvAddNewTaskToReadyList+0xd4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b01      	cmp	r3, #1
 8013f7e:	d110      	bne.n	8013fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013f80:	f000 fcde 	bl	8014940 <prvInitialiseTaskLists>
 8013f84:	e00d      	b.n	8013fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013f86:	4b2a      	ldr	r3, [pc, #168]	; (8014030 <prvAddNewTaskToReadyList+0xdc>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d109      	bne.n	8013fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013f8e:	4b27      	ldr	r3, [pc, #156]	; (801402c <prvAddNewTaskToReadyList+0xd8>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d802      	bhi.n	8013fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013f9c:	4a23      	ldr	r2, [pc, #140]	; (801402c <prvAddNewTaskToReadyList+0xd8>)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013fa2:	4b24      	ldr	r3, [pc, #144]	; (8014034 <prvAddNewTaskToReadyList+0xe0>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	4a22      	ldr	r2, [pc, #136]	; (8014034 <prvAddNewTaskToReadyList+0xe0>)
 8013faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013fac:	4b21      	ldr	r3, [pc, #132]	; (8014034 <prvAddNewTaskToReadyList+0xe0>)
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	3334      	adds	r3, #52	; 0x34
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	4610      	mov	r0, r2
 8013fc0:	f7ec fdbc 	bl	8000b3c <TimeDoctor_CREATE>

		prvAddTaskToReadyList( pxNewTCB );
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc8:	4b1b      	ldr	r3, [pc, #108]	; (8014038 <prvAddNewTaskToReadyList+0xe4>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d903      	bls.n	8013fd8 <prvAddNewTaskToReadyList+0x84>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd4:	4a18      	ldr	r2, [pc, #96]	; (8014038 <prvAddNewTaskToReadyList+0xe4>)
 8013fd6:	6013      	str	r3, [r2, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fdc:	4613      	mov	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4413      	add	r3, r2
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4a15      	ldr	r2, [pc, #84]	; (801403c <prvAddNewTaskToReadyList+0xe8>)
 8013fe6:	441a      	add	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	3304      	adds	r3, #4
 8013fec:	4619      	mov	r1, r3
 8013fee:	4610      	mov	r0, r2
 8013ff0:	f7fe ffbf 	bl	8012f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013ff4:	f001 fad2 	bl	801559c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ff8:	4b0d      	ldr	r3, [pc, #52]	; (8014030 <prvAddNewTaskToReadyList+0xdc>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d00e      	beq.n	801401e <prvAddNewTaskToReadyList+0xca>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014000:	4b0a      	ldr	r3, [pc, #40]	; (801402c <prvAddNewTaskToReadyList+0xd8>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400a:	429a      	cmp	r2, r3
 801400c:	d207      	bcs.n	801401e <prvAddNewTaskToReadyList+0xca>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801400e:	4b0c      	ldr	r3, [pc, #48]	; (8014040 <prvAddNewTaskToReadyList+0xec>)
 8014010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	f3bf 8f4f 	dsb	sy
 801401a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801401e:	bf00      	nop
 8014020:	3708      	adds	r7, #8
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	20001ca8 	.word	0x20001ca8
 801402c:	200017d4 	.word	0x200017d4
 8014030:	20001cb4 	.word	0x20001cb4
 8014034:	20001cc4 	.word	0x20001cc4
 8014038:	20001cb0 	.word	0x20001cb0
 801403c:	200017d8 	.word	0x200017d8
 8014040:	e000ed04 	.word	0xe000ed04

08014044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014044:	b580      	push	{r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801404c:	2300      	movs	r3, #0
 801404e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d018      	beq.n	8014088 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014056:	4b14      	ldr	r3, [pc, #80]	; (80140a8 <vTaskDelay+0x64>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00b      	beq.n	8014076 <vTaskDelay+0x32>
 801405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014062:	b672      	cpsid	i
 8014064:	f383 8811 	msr	BASEPRI, r3
 8014068:	f3bf 8f6f 	isb	sy
 801406c:	f3bf 8f4f 	dsb	sy
 8014070:	b662      	cpsie	i
 8014072:	60bb      	str	r3, [r7, #8]
 8014074:	e7fe      	b.n	8014074 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014076:	f000 f907 	bl	8014288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801407a:	2100      	movs	r1, #0
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f000 fda9 	bl	8014bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014082:	f000 f90f 	bl	80142a4 <xTaskResumeAll>
 8014086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d107      	bne.n	801409e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801408e:	4b07      	ldr	r3, [pc, #28]	; (80140ac <vTaskDelay+0x68>)
 8014090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014094:	601a      	str	r2, [r3, #0]
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801409e:	bf00      	nop
 80140a0:	3710      	adds	r7, #16
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	20001cd0 	.word	0x20001cd0
 80140ac:	e000ed04 	.word	0xe000ed04

080140b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80140b8:	f001 fa3e 	bl	8015538 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d102      	bne.n	80140c8 <vTaskSuspend+0x18>
 80140c2:	4b33      	ldr	r3, [pc, #204]	; (8014190 <vTaskSuspend+0xe0>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	e000      	b.n	80140ca <vTaskSuspend+0x1a>
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7ec fdff 	bl	8000cd4 <TimeDoctor_TASK_SUSPEND>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	3304      	adds	r3, #4
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fe ffa6 	bl	801302c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d004      	beq.n	80140f2 <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	3318      	adds	r3, #24
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fe ff9d 	bl	801302c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	3304      	adds	r3, #4
 80140f6:	4619      	mov	r1, r3
 80140f8:	4826      	ldr	r0, [pc, #152]	; (8014194 <vTaskSuspend+0xe4>)
 80140fa:	f7fe ff3a 	bl	8012f72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b01      	cmp	r3, #1
 8014108:	d103      	bne.n	8014112 <vTaskSuspend+0x62>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2200      	movs	r2, #0
 801410e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014112:	f001 fa43 	bl	801559c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014116:	4b20      	ldr	r3, [pc, #128]	; (8014198 <vTaskSuspend+0xe8>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d005      	beq.n	801412a <vTaskSuspend+0x7a>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801411e:	f001 fa0b 	bl	8015538 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014122:	f000 fca9 	bl	8014a78 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014126:	f001 fa39 	bl	801559c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801412a:	4b19      	ldr	r3, [pc, #100]	; (8014190 <vTaskSuspend+0xe0>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	429a      	cmp	r2, r3
 8014132:	d128      	bne.n	8014186 <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
 8014134:	4b18      	ldr	r3, [pc, #96]	; (8014198 <vTaskSuspend+0xe8>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d018      	beq.n	801416e <vTaskSuspend+0xbe>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801413c:	4b17      	ldr	r3, [pc, #92]	; (801419c <vTaskSuspend+0xec>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00b      	beq.n	801415c <vTaskSuspend+0xac>
 8014144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014148:	b672      	cpsid	i
 801414a:	f383 8811 	msr	BASEPRI, r3
 801414e:	f3bf 8f6f 	isb	sy
 8014152:	f3bf 8f4f 	dsb	sy
 8014156:	b662      	cpsie	i
 8014158:	60bb      	str	r3, [r7, #8]
 801415a:	e7fe      	b.n	801415a <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 801415c:	4b10      	ldr	r3, [pc, #64]	; (80141a0 <vTaskSuspend+0xf0>)
 801415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801416c:	e00b      	b.n	8014186 <vTaskSuspend+0xd6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801416e:	4b09      	ldr	r3, [pc, #36]	; (8014194 <vTaskSuspend+0xe4>)
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	4b0c      	ldr	r3, [pc, #48]	; (80141a4 <vTaskSuspend+0xf4>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	429a      	cmp	r2, r3
 8014178:	d103      	bne.n	8014182 <vTaskSuspend+0xd2>
					pxCurrentTCB = NULL;
 801417a:	4b05      	ldr	r3, [pc, #20]	; (8014190 <vTaskSuspend+0xe0>)
 801417c:	2200      	movs	r2, #0
 801417e:	601a      	str	r2, [r3, #0]
	}
 8014180:	e001      	b.n	8014186 <vTaskSuspend+0xd6>
					vTaskSwitchContext();
 8014182:	f000 f9f7 	bl	8014574 <vTaskSwitchContext>
	}
 8014186:	bf00      	nop
 8014188:	3710      	adds	r7, #16
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	200017d4 	.word	0x200017d4
 8014194:	20001c94 	.word	0x20001c94
 8014198:	20001cb4 	.word	0x20001cb4
 801419c:	20001cd0 	.word	0x20001cd0
 80141a0:	e000ed04 	.word	0xe000ed04
 80141a4:	20001ca8 	.word	0x20001ca8

080141a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08a      	sub	sp, #40	; 0x28
 80141ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80141ae:	2300      	movs	r3, #0
 80141b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80141b2:	2300      	movs	r3, #0
 80141b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80141b6:	463a      	mov	r2, r7
 80141b8:	1d39      	adds	r1, r7, #4
 80141ba:	f107 0308 	add.w	r3, r7, #8
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fe fe76 	bl	8012eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80141c4:	6839      	ldr	r1, [r7, #0]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	68ba      	ldr	r2, [r7, #8]
 80141ca:	9202      	str	r2, [sp, #8]
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	2300      	movs	r3, #0
 80141d0:	9300      	str	r3, [sp, #0]
 80141d2:	2300      	movs	r3, #0
 80141d4:	460a      	mov	r2, r1
 80141d6:	4925      	ldr	r1, [pc, #148]	; (801426c <vTaskStartScheduler+0xc4>)
 80141d8:	4825      	ldr	r0, [pc, #148]	; (8014270 <vTaskStartScheduler+0xc8>)
 80141da:	f7ff fd83 	bl	8013ce4 <xTaskCreateStatic>
 80141de:	4602      	mov	r2, r0
 80141e0:	4b24      	ldr	r3, [pc, #144]	; (8014274 <vTaskStartScheduler+0xcc>)
 80141e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80141e4:	4b23      	ldr	r3, [pc, #140]	; (8014274 <vTaskStartScheduler+0xcc>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d002      	beq.n	80141f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80141ec:	2301      	movs	r3, #1
 80141ee:	617b      	str	r3, [r7, #20]
 80141f0:	e001      	b.n	80141f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80141f2:	2300      	movs	r3, #0
 80141f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2b01      	cmp	r3, #1
 80141fa:	d102      	bne.n	8014202 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80141fc:	f000 fd3e 	bl	8014c7c <xTimerCreateTimerTask>
 8014200:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	2b01      	cmp	r3, #1
 8014206:	d11d      	bne.n	8014244 <vTaskStartScheduler+0x9c>
 8014208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420c:	b672      	cpsid	i
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	b662      	cpsie	i
 801421c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801421e:	4b16      	ldr	r3, [pc, #88]	; (8014278 <vTaskStartScheduler+0xd0>)
 8014220:	f04f 32ff 	mov.w	r2, #4294967295
 8014224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014226:	4b15      	ldr	r3, [pc, #84]	; (801427c <vTaskStartScheduler+0xd4>)
 8014228:	2201      	movs	r2, #1
 801422a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801422c:	4b14      	ldr	r3, [pc, #80]	; (8014280 <vTaskStartScheduler+0xd8>)
 801422e:	2200      	movs	r2, #0
 8014230:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8014232:	4b14      	ldr	r3, [pc, #80]	; (8014284 <vTaskStartScheduler+0xdc>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014238:	4618      	mov	r0, r3
 801423a:	f7ec fccf 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801423e:	f001 f8ff 	bl	8015440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014242:	e00f      	b.n	8014264 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801424a:	d10b      	bne.n	8014264 <vTaskStartScheduler+0xbc>
 801424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014250:	b672      	cpsid	i
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	b662      	cpsie	i
 8014260:	60fb      	str	r3, [r7, #12]
 8014262:	e7fe      	b.n	8014262 <vTaskStartScheduler+0xba>
}
 8014264:	bf00      	nop
 8014266:	3718      	adds	r7, #24
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08016f0c 	.word	0x08016f0c
 8014270:	0801490d 	.word	0x0801490d
 8014274:	20001ccc 	.word	0x20001ccc
 8014278:	20001cc8 	.word	0x20001cc8
 801427c:	20001cb4 	.word	0x20001cb4
 8014280:	20001cac 	.word	0x20001cac
 8014284:	200017d4 	.word	0x200017d4

08014288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014288:	b480      	push	{r7}
 801428a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801428c:	4b04      	ldr	r3, [pc, #16]	; (80142a0 <vTaskSuspendAll+0x18>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	3301      	adds	r3, #1
 8014292:	4a03      	ldr	r2, [pc, #12]	; (80142a0 <vTaskSuspendAll+0x18>)
 8014294:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014296:	bf00      	nop
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr
 80142a0:	20001cd0 	.word	0x20001cd0

080142a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80142aa:	2300      	movs	r3, #0
 80142ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80142ae:	2300      	movs	r3, #0
 80142b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80142b2:	4b42      	ldr	r3, [pc, #264]	; (80143bc <xTaskResumeAll+0x118>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d10b      	bne.n	80142d2 <xTaskResumeAll+0x2e>
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	b672      	cpsid	i
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	b662      	cpsie	i
 80142ce:	603b      	str	r3, [r7, #0]
 80142d0:	e7fe      	b.n	80142d0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80142d2:	f001 f931 	bl	8015538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80142d6:	4b39      	ldr	r3, [pc, #228]	; (80143bc <xTaskResumeAll+0x118>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	3b01      	subs	r3, #1
 80142dc:	4a37      	ldr	r2, [pc, #220]	; (80143bc <xTaskResumeAll+0x118>)
 80142de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e0:	4b36      	ldr	r3, [pc, #216]	; (80143bc <xTaskResumeAll+0x118>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d162      	bne.n	80143ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80142e8:	4b35      	ldr	r3, [pc, #212]	; (80143c0 <xTaskResumeAll+0x11c>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d05e      	beq.n	80143ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80142f0:	e02f      	b.n	8014352 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142f2:	4b34      	ldr	r3, [pc, #208]	; (80143c4 <xTaskResumeAll+0x120>)
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	3318      	adds	r3, #24
 80142fe:	4618      	mov	r0, r3
 8014300:	f7fe fe94 	bl	801302c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	3304      	adds	r3, #4
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe fe8f 	bl	801302c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014312:	4b2d      	ldr	r3, [pc, #180]	; (80143c8 <xTaskResumeAll+0x124>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	429a      	cmp	r2, r3
 8014318:	d903      	bls.n	8014322 <xTaskResumeAll+0x7e>
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801431e:	4a2a      	ldr	r2, [pc, #168]	; (80143c8 <xTaskResumeAll+0x124>)
 8014320:	6013      	str	r3, [r2, #0]
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014326:	4613      	mov	r3, r2
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	4413      	add	r3, r2
 801432c:	009b      	lsls	r3, r3, #2
 801432e:	4a27      	ldr	r2, [pc, #156]	; (80143cc <xTaskResumeAll+0x128>)
 8014330:	441a      	add	r2, r3
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	3304      	adds	r3, #4
 8014336:	4619      	mov	r1, r3
 8014338:	4610      	mov	r0, r2
 801433a:	f7fe fe1a 	bl	8012f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014342:	4b23      	ldr	r3, [pc, #140]	; (80143d0 <xTaskResumeAll+0x12c>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014348:	429a      	cmp	r2, r3
 801434a:	d302      	bcc.n	8014352 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801434c:	4b21      	ldr	r3, [pc, #132]	; (80143d4 <xTaskResumeAll+0x130>)
 801434e:	2201      	movs	r2, #1
 8014350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014352:	4b1c      	ldr	r3, [pc, #112]	; (80143c4 <xTaskResumeAll+0x120>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1cb      	bne.n	80142f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d001      	beq.n	8014364 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014360:	f000 fb8a 	bl	8014a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014364:	4b1c      	ldr	r3, [pc, #112]	; (80143d8 <xTaskResumeAll+0x134>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d010      	beq.n	8014392 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014370:	f000 f846 	bl	8014400 <xTaskIncrementTick>
 8014374:	4603      	mov	r3, r0
 8014376:	2b00      	cmp	r3, #0
 8014378:	d002      	beq.n	8014380 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801437a:	4b16      	ldr	r3, [pc, #88]	; (80143d4 <xTaskResumeAll+0x130>)
 801437c:	2201      	movs	r2, #1
 801437e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	3b01      	subs	r3, #1
 8014384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1f1      	bne.n	8014370 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801438c:	4b12      	ldr	r3, [pc, #72]	; (80143d8 <xTaskResumeAll+0x134>)
 801438e:	2200      	movs	r2, #0
 8014390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014392:	4b10      	ldr	r3, [pc, #64]	; (80143d4 <xTaskResumeAll+0x130>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d009      	beq.n	80143ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801439a:	2301      	movs	r3, #1
 801439c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801439e:	4b0f      	ldr	r3, [pc, #60]	; (80143dc <xTaskResumeAll+0x138>)
 80143a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143a4:	601a      	str	r2, [r3, #0]
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80143ae:	f001 f8f5 	bl	801559c <vPortExitCritical>

	return xAlreadyYielded;
 80143b2:	68bb      	ldr	r3, [r7, #8]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	20001cd0 	.word	0x20001cd0
 80143c0:	20001ca8 	.word	0x20001ca8
 80143c4:	20001c68 	.word	0x20001c68
 80143c8:	20001cb0 	.word	0x20001cb0
 80143cc:	200017d8 	.word	0x200017d8
 80143d0:	200017d4 	.word	0x200017d4
 80143d4:	20001cbc 	.word	0x20001cbc
 80143d8:	20001cb8 	.word	0x20001cb8
 80143dc:	e000ed04 	.word	0xe000ed04

080143e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80143e6:	4b05      	ldr	r3, [pc, #20]	; (80143fc <xTaskGetTickCount+0x1c>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80143ec:	687b      	ldr	r3, [r7, #4]
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	370c      	adds	r7, #12
 80143f2:	46bd      	mov	sp, r7
 80143f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop
 80143fc:	20001cac 	.word	0x20001cac

08014400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b086      	sub	sp, #24
 8014404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014406:	2300      	movs	r3, #0
 8014408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801440a:	4b4f      	ldr	r3, [pc, #316]	; (8014548 <xTaskIncrementTick+0x148>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	f040 808a 	bne.w	8014528 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014414:	4b4d      	ldr	r3, [pc, #308]	; (801454c <xTaskIncrementTick+0x14c>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	3301      	adds	r3, #1
 801441a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801441c:	4a4b      	ldr	r2, [pc, #300]	; (801454c <xTaskIncrementTick+0x14c>)
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d121      	bne.n	801446c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014428:	4b49      	ldr	r3, [pc, #292]	; (8014550 <xTaskIncrementTick+0x150>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d00b      	beq.n	801444a <xTaskIncrementTick+0x4a>
 8014432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014436:	b672      	cpsid	i
 8014438:	f383 8811 	msr	BASEPRI, r3
 801443c:	f3bf 8f6f 	isb	sy
 8014440:	f3bf 8f4f 	dsb	sy
 8014444:	b662      	cpsie	i
 8014446:	603b      	str	r3, [r7, #0]
 8014448:	e7fe      	b.n	8014448 <xTaskIncrementTick+0x48>
 801444a:	4b41      	ldr	r3, [pc, #260]	; (8014550 <xTaskIncrementTick+0x150>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	4b40      	ldr	r3, [pc, #256]	; (8014554 <xTaskIncrementTick+0x154>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	4a3e      	ldr	r2, [pc, #248]	; (8014550 <xTaskIncrementTick+0x150>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	4a3e      	ldr	r2, [pc, #248]	; (8014554 <xTaskIncrementTick+0x154>)
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	6013      	str	r3, [r2, #0]
 801445e:	4b3e      	ldr	r3, [pc, #248]	; (8014558 <xTaskIncrementTick+0x158>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	3301      	adds	r3, #1
 8014464:	4a3c      	ldr	r2, [pc, #240]	; (8014558 <xTaskIncrementTick+0x158>)
 8014466:	6013      	str	r3, [r2, #0]
 8014468:	f000 fb06 	bl	8014a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801446c:	4b3b      	ldr	r3, [pc, #236]	; (801455c <xTaskIncrementTick+0x15c>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	429a      	cmp	r2, r3
 8014474:	d349      	bcc.n	801450a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014476:	4b36      	ldr	r3, [pc, #216]	; (8014550 <xTaskIncrementTick+0x150>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d104      	bne.n	801448a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014480:	4b36      	ldr	r3, [pc, #216]	; (801455c <xTaskIncrementTick+0x15c>)
 8014482:	f04f 32ff 	mov.w	r2, #4294967295
 8014486:	601a      	str	r2, [r3, #0]
					break;
 8014488:	e03f      	b.n	801450a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801448a:	4b31      	ldr	r3, [pc, #196]	; (8014550 <xTaskIncrementTick+0x150>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801449a:	693a      	ldr	r2, [r7, #16]
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d203      	bcs.n	80144aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80144a2:	4a2e      	ldr	r2, [pc, #184]	; (801455c <xTaskIncrementTick+0x15c>)
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80144a8:	e02f      	b.n	801450a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	3304      	adds	r3, #4
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fe fdbc 	bl	801302c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d004      	beq.n	80144c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	3318      	adds	r3, #24
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fe fdb3 	bl	801302c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ca:	4b25      	ldr	r3, [pc, #148]	; (8014560 <xTaskIncrementTick+0x160>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d903      	bls.n	80144da <xTaskIncrementTick+0xda>
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d6:	4a22      	ldr	r2, [pc, #136]	; (8014560 <xTaskIncrementTick+0x160>)
 80144d8:	6013      	str	r3, [r2, #0]
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144de:	4613      	mov	r3, r2
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	4413      	add	r3, r2
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4a1f      	ldr	r2, [pc, #124]	; (8014564 <xTaskIncrementTick+0x164>)
 80144e8:	441a      	add	r2, r3
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	3304      	adds	r3, #4
 80144ee:	4619      	mov	r1, r3
 80144f0:	4610      	mov	r0, r2
 80144f2:	f7fe fd3e 	bl	8012f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144fa:	4b1b      	ldr	r3, [pc, #108]	; (8014568 <xTaskIncrementTick+0x168>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014500:	429a      	cmp	r2, r3
 8014502:	d3b8      	bcc.n	8014476 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014504:	2301      	movs	r3, #1
 8014506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014508:	e7b5      	b.n	8014476 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801450a:	4b17      	ldr	r3, [pc, #92]	; (8014568 <xTaskIncrementTick+0x168>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014510:	4914      	ldr	r1, [pc, #80]	; (8014564 <xTaskIncrementTick+0x164>)
 8014512:	4613      	mov	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4413      	add	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	440b      	add	r3, r1
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d907      	bls.n	8014532 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014522:	2301      	movs	r3, #1
 8014524:	617b      	str	r3, [r7, #20]
 8014526:	e004      	b.n	8014532 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014528:	4b10      	ldr	r3, [pc, #64]	; (801456c <xTaskIncrementTick+0x16c>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	3301      	adds	r3, #1
 801452e:	4a0f      	ldr	r2, [pc, #60]	; (801456c <xTaskIncrementTick+0x16c>)
 8014530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014532:	4b0f      	ldr	r3, [pc, #60]	; (8014570 <xTaskIncrementTick+0x170>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801453a:	2301      	movs	r3, #1
 801453c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801453e:	697b      	ldr	r3, [r7, #20]
}
 8014540:	4618      	mov	r0, r3
 8014542:	3718      	adds	r7, #24
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	20001cd0 	.word	0x20001cd0
 801454c:	20001cac 	.word	0x20001cac
 8014550:	20001c60 	.word	0x20001c60
 8014554:	20001c64 	.word	0x20001c64
 8014558:	20001cc0 	.word	0x20001cc0
 801455c:	20001cc8 	.word	0x20001cc8
 8014560:	20001cb0 	.word	0x20001cb0
 8014564:	200017d8 	.word	0x200017d8
 8014568:	200017d4 	.word	0x200017d4
 801456c:	20001cb8 	.word	0x20001cb8
 8014570:	20001cbc 	.word	0x20001cbc

08014574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801457a:	4b41      	ldr	r3, [pc, #260]	; (8014680 <vTaskSwitchContext+0x10c>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d003      	beq.n	801458a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014582:	4b40      	ldr	r3, [pc, #256]	; (8014684 <vTaskSwitchContext+0x110>)
 8014584:	2201      	movs	r2, #1
 8014586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014588:	e075      	b.n	8014676 <vTaskSwitchContext+0x102>
		xYieldPending = pdFALSE;
 801458a:	4b3e      	ldr	r3, [pc, #248]	; (8014684 <vTaskSwitchContext+0x110>)
 801458c:	2200      	movs	r2, #0
 801458e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8014590:	4b3d      	ldr	r3, [pc, #244]	; (8014688 <vTaskSwitchContext+0x114>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014596:	4618      	mov	r0, r3
 8014598:	f7ec fb5e 	bl	8000c58 <TimeDoctor_TASK_SWITCHED_OUT>
		taskCHECK_FOR_STACK_OVERFLOW();
 801459c:	4b3a      	ldr	r3, [pc, #232]	; (8014688 <vTaskSwitchContext+0x114>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145a2:	613b      	str	r3, [r7, #16]
 80145a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80145a8:	60fb      	str	r3, [r7, #12]
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d111      	bne.n	80145d8 <vTaskSwitchContext+0x64>
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	3304      	adds	r3, #4
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d10b      	bne.n	80145d8 <vTaskSwitchContext+0x64>
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	3308      	adds	r3, #8
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	68fa      	ldr	r2, [r7, #12]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d105      	bne.n	80145d8 <vTaskSwitchContext+0x64>
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	330c      	adds	r3, #12
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	68fa      	ldr	r2, [r7, #12]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d008      	beq.n	80145ea <vTaskSwitchContext+0x76>
 80145d8:	4b2b      	ldr	r3, [pc, #172]	; (8014688 <vTaskSwitchContext+0x114>)
 80145da:	681a      	ldr	r2, [r3, #0]
 80145dc:	4b2a      	ldr	r3, [pc, #168]	; (8014688 <vTaskSwitchContext+0x114>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	3334      	adds	r3, #52	; 0x34
 80145e2:	4619      	mov	r1, r3
 80145e4:	4610      	mov	r0, r2
 80145e6:	f7ec fd2a 	bl	800103e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145ea:	4b28      	ldr	r3, [pc, #160]	; (801468c <vTaskSwitchContext+0x118>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	617b      	str	r3, [r7, #20]
 80145f0:	e011      	b.n	8014616 <vTaskSwitchContext+0xa2>
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10b      	bne.n	8014610 <vTaskSwitchContext+0x9c>
 80145f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145fc:	b672      	cpsid	i
 80145fe:	f383 8811 	msr	BASEPRI, r3
 8014602:	f3bf 8f6f 	isb	sy
 8014606:	f3bf 8f4f 	dsb	sy
 801460a:	b662      	cpsie	i
 801460c:	607b      	str	r3, [r7, #4]
 801460e:	e7fe      	b.n	801460e <vTaskSwitchContext+0x9a>
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	3b01      	subs	r3, #1
 8014614:	617b      	str	r3, [r7, #20]
 8014616:	491e      	ldr	r1, [pc, #120]	; (8014690 <vTaskSwitchContext+0x11c>)
 8014618:	697a      	ldr	r2, [r7, #20]
 801461a:	4613      	mov	r3, r2
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4413      	add	r3, r2
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	440b      	add	r3, r1
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d0e3      	beq.n	80145f2 <vTaskSwitchContext+0x7e>
 801462a:	697a      	ldr	r2, [r7, #20]
 801462c:	4613      	mov	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4413      	add	r3, r2
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	4a16      	ldr	r2, [pc, #88]	; (8014690 <vTaskSwitchContext+0x11c>)
 8014636:	4413      	add	r3, r2
 8014638:	60bb      	str	r3, [r7, #8]
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	685a      	ldr	r2, [r3, #4]
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	605a      	str	r2, [r3, #4]
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	685a      	ldr	r2, [r3, #4]
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	3308      	adds	r3, #8
 801464c:	429a      	cmp	r2, r3
 801464e:	d104      	bne.n	801465a <vTaskSwitchContext+0xe6>
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	685a      	ldr	r2, [r3, #4]
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	605a      	str	r2, [r3, #4]
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	4a09      	ldr	r2, [pc, #36]	; (8014688 <vTaskSwitchContext+0x114>)
 8014662:	6013      	str	r3, [r2, #0]
 8014664:	4a09      	ldr	r2, [pc, #36]	; (801468c <vTaskSwitchContext+0x118>)
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801466a:	4b07      	ldr	r3, [pc, #28]	; (8014688 <vTaskSwitchContext+0x114>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014670:	4618      	mov	r0, r3
 8014672:	f7ec fab3 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>
}
 8014676:	bf00      	nop
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	20001cd0 	.word	0x20001cd0
 8014684:	20001cbc 	.word	0x20001cbc
 8014688:	200017d4 	.word	0x200017d4
 801468c:	20001cb0 	.word	0x20001cb0
 8014690:	200017d8 	.word	0x200017d8

08014694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d10b      	bne.n	80146bc <vTaskPlaceOnEventList+0x28>
 80146a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a8:	b672      	cpsid	i
 80146aa:	f383 8811 	msr	BASEPRI, r3
 80146ae:	f3bf 8f6f 	isb	sy
 80146b2:	f3bf 8f4f 	dsb	sy
 80146b6:	b662      	cpsie	i
 80146b8:	60fb      	str	r3, [r7, #12]
 80146ba:	e7fe      	b.n	80146ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80146bc:	4b07      	ldr	r3, [pc, #28]	; (80146dc <vTaskPlaceOnEventList+0x48>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	3318      	adds	r3, #24
 80146c2:	4619      	mov	r1, r3
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7fe fc78 	bl	8012fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80146ca:	2101      	movs	r1, #1
 80146cc:	6838      	ldr	r0, [r7, #0]
 80146ce:	f000 fa81 	bl	8014bd4 <prvAddCurrentTaskToDelayedList>
}
 80146d2:	bf00      	nop
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	200017d4 	.word	0x200017d4

080146e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b086      	sub	sp, #24
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d10b      	bne.n	801470a <vTaskPlaceOnEventListRestricted+0x2a>
 80146f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f6:	b672      	cpsid	i
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	b662      	cpsie	i
 8014706:	617b      	str	r3, [r7, #20]
 8014708:	e7fe      	b.n	8014708 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801470a:	4b0a      	ldr	r3, [pc, #40]	; (8014734 <vTaskPlaceOnEventListRestricted+0x54>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	3318      	adds	r3, #24
 8014710:	4619      	mov	r1, r3
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	f7fe fc2d 	bl	8012f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d002      	beq.n	8014724 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801471e:	f04f 33ff 	mov.w	r3, #4294967295
 8014722:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014724:	6879      	ldr	r1, [r7, #4]
 8014726:	68b8      	ldr	r0, [r7, #8]
 8014728:	f000 fa54 	bl	8014bd4 <prvAddCurrentTaskToDelayedList>
	}
 801472c:	bf00      	nop
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	200017d4 	.word	0x200017d4

08014738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d10b      	bne.n	8014766 <xTaskRemoveFromEventList+0x2e>
 801474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014752:	b672      	cpsid	i
 8014754:	f383 8811 	msr	BASEPRI, r3
 8014758:	f3bf 8f6f 	isb	sy
 801475c:	f3bf 8f4f 	dsb	sy
 8014760:	b662      	cpsie	i
 8014762:	60fb      	str	r3, [r7, #12]
 8014764:	e7fe      	b.n	8014764 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	3318      	adds	r3, #24
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe fc5e 	bl	801302c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014770:	4b1d      	ldr	r3, [pc, #116]	; (80147e8 <xTaskRemoveFromEventList+0xb0>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d11d      	bne.n	80147b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	3304      	adds	r3, #4
 801477c:	4618      	mov	r0, r3
 801477e:	f7fe fc55 	bl	801302c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014786:	4b19      	ldr	r3, [pc, #100]	; (80147ec <xTaskRemoveFromEventList+0xb4>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	429a      	cmp	r2, r3
 801478c:	d903      	bls.n	8014796 <xTaskRemoveFromEventList+0x5e>
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014792:	4a16      	ldr	r2, [pc, #88]	; (80147ec <xTaskRemoveFromEventList+0xb4>)
 8014794:	6013      	str	r3, [r2, #0]
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801479a:	4613      	mov	r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	4413      	add	r3, r2
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	4a13      	ldr	r2, [pc, #76]	; (80147f0 <xTaskRemoveFromEventList+0xb8>)
 80147a4:	441a      	add	r2, r3
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	3304      	adds	r3, #4
 80147aa:	4619      	mov	r1, r3
 80147ac:	4610      	mov	r0, r2
 80147ae:	f7fe fbe0 	bl	8012f72 <vListInsertEnd>
 80147b2:	e005      	b.n	80147c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	3318      	adds	r3, #24
 80147b8:	4619      	mov	r1, r3
 80147ba:	480e      	ldr	r0, [pc, #56]	; (80147f4 <xTaskRemoveFromEventList+0xbc>)
 80147bc:	f7fe fbd9 	bl	8012f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147c4:	4b0c      	ldr	r3, [pc, #48]	; (80147f8 <xTaskRemoveFromEventList+0xc0>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d905      	bls.n	80147da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80147ce:	2301      	movs	r3, #1
 80147d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80147d2:	4b0a      	ldr	r3, [pc, #40]	; (80147fc <xTaskRemoveFromEventList+0xc4>)
 80147d4:	2201      	movs	r2, #1
 80147d6:	601a      	str	r2, [r3, #0]
 80147d8:	e001      	b.n	80147de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80147da:	2300      	movs	r3, #0
 80147dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80147de:	697b      	ldr	r3, [r7, #20]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	20001cd0 	.word	0x20001cd0
 80147ec:	20001cb0 	.word	0x20001cb0
 80147f0:	200017d8 	.word	0x200017d8
 80147f4:	20001c68 	.word	0x20001c68
 80147f8:	200017d4 	.word	0x200017d4
 80147fc:	20001cbc 	.word	0x20001cbc

08014800 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014808:	4b06      	ldr	r3, [pc, #24]	; (8014824 <vTaskInternalSetTimeOutState+0x24>)
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014810:	4b05      	ldr	r3, [pc, #20]	; (8014828 <vTaskInternalSetTimeOutState+0x28>)
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	605a      	str	r2, [r3, #4]
}
 8014818:	bf00      	nop
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr
 8014824:	20001cc0 	.word	0x20001cc0
 8014828:	20001cac 	.word	0x20001cac

0801482c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b088      	sub	sp, #32
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d10b      	bne.n	8014854 <xTaskCheckForTimeOut+0x28>
 801483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014840:	b672      	cpsid	i
 8014842:	f383 8811 	msr	BASEPRI, r3
 8014846:	f3bf 8f6f 	isb	sy
 801484a:	f3bf 8f4f 	dsb	sy
 801484e:	b662      	cpsie	i
 8014850:	613b      	str	r3, [r7, #16]
 8014852:	e7fe      	b.n	8014852 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d10b      	bne.n	8014872 <xTaskCheckForTimeOut+0x46>
 801485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801485e:	b672      	cpsid	i
 8014860:	f383 8811 	msr	BASEPRI, r3
 8014864:	f3bf 8f6f 	isb	sy
 8014868:	f3bf 8f4f 	dsb	sy
 801486c:	b662      	cpsie	i
 801486e:	60fb      	str	r3, [r7, #12]
 8014870:	e7fe      	b.n	8014870 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8014872:	f000 fe61 	bl	8015538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014876:	4b1d      	ldr	r3, [pc, #116]	; (80148ec <xTaskCheckForTimeOut+0xc0>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	69ba      	ldr	r2, [r7, #24]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801488e:	d102      	bne.n	8014896 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014890:	2300      	movs	r3, #0
 8014892:	61fb      	str	r3, [r7, #28]
 8014894:	e023      	b.n	80148de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	4b15      	ldr	r3, [pc, #84]	; (80148f0 <xTaskCheckForTimeOut+0xc4>)
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d007      	beq.n	80148b2 <xTaskCheckForTimeOut+0x86>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	69ba      	ldr	r2, [r7, #24]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d302      	bcc.n	80148b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80148ac:	2301      	movs	r3, #1
 80148ae:	61fb      	str	r3, [r7, #28]
 80148b0:	e015      	b.n	80148de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	697a      	ldr	r2, [r7, #20]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d20b      	bcs.n	80148d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	681a      	ldr	r2, [r3, #0]
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	1ad2      	subs	r2, r2, r3
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7ff ff99 	bl	8014800 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80148ce:	2300      	movs	r3, #0
 80148d0:	61fb      	str	r3, [r7, #28]
 80148d2:	e004      	b.n	80148de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	2200      	movs	r2, #0
 80148d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80148da:	2301      	movs	r3, #1
 80148dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80148de:	f000 fe5d 	bl	801559c <vPortExitCritical>

	return xReturn;
 80148e2:	69fb      	ldr	r3, [r7, #28]
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3720      	adds	r7, #32
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	20001cac 	.word	0x20001cac
 80148f0:	20001cc0 	.word	0x20001cc0

080148f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80148f4:	b480      	push	{r7}
 80148f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80148f8:	4b03      	ldr	r3, [pc, #12]	; (8014908 <vTaskMissedYield+0x14>)
 80148fa:	2201      	movs	r2, #1
 80148fc:	601a      	str	r2, [r3, #0]
}
 80148fe:	bf00      	nop
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr
 8014908:	20001cbc 	.word	0x20001cbc

0801490c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014914:	f000 f854 	bl	80149c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014918:	4b07      	ldr	r3, [pc, #28]	; (8014938 <prvIdleTask+0x2c>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2b01      	cmp	r3, #1
 801491e:	d907      	bls.n	8014930 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014920:	4b06      	ldr	r3, [pc, #24]	; (801493c <prvIdleTask+0x30>)
 8014922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014926:	601a      	str	r2, [r3, #0]
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014930:	f7ec fb7e 	bl	8001030 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014934:	e7ee      	b.n	8014914 <prvIdleTask+0x8>
 8014936:	bf00      	nop
 8014938:	200017d8 	.word	0x200017d8
 801493c:	e000ed04 	.word	0xe000ed04

08014940 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014946:	2300      	movs	r3, #0
 8014948:	607b      	str	r3, [r7, #4]
 801494a:	e00c      	b.n	8014966 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801494c:	687a      	ldr	r2, [r7, #4]
 801494e:	4613      	mov	r3, r2
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	4413      	add	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4a12      	ldr	r2, [pc, #72]	; (80149a0 <prvInitialiseTaskLists+0x60>)
 8014958:	4413      	add	r3, r2
 801495a:	4618      	mov	r0, r3
 801495c:	f7fe fadc 	bl	8012f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	3301      	adds	r3, #1
 8014964:	607b      	str	r3, [r7, #4]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b37      	cmp	r3, #55	; 0x37
 801496a:	d9ef      	bls.n	801494c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801496c:	480d      	ldr	r0, [pc, #52]	; (80149a4 <prvInitialiseTaskLists+0x64>)
 801496e:	f7fe fad3 	bl	8012f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014972:	480d      	ldr	r0, [pc, #52]	; (80149a8 <prvInitialiseTaskLists+0x68>)
 8014974:	f7fe fad0 	bl	8012f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014978:	480c      	ldr	r0, [pc, #48]	; (80149ac <prvInitialiseTaskLists+0x6c>)
 801497a:	f7fe facd 	bl	8012f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801497e:	480c      	ldr	r0, [pc, #48]	; (80149b0 <prvInitialiseTaskLists+0x70>)
 8014980:	f7fe faca 	bl	8012f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014984:	480b      	ldr	r0, [pc, #44]	; (80149b4 <prvInitialiseTaskLists+0x74>)
 8014986:	f7fe fac7 	bl	8012f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801498a:	4b0b      	ldr	r3, [pc, #44]	; (80149b8 <prvInitialiseTaskLists+0x78>)
 801498c:	4a05      	ldr	r2, [pc, #20]	; (80149a4 <prvInitialiseTaskLists+0x64>)
 801498e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014990:	4b0a      	ldr	r3, [pc, #40]	; (80149bc <prvInitialiseTaskLists+0x7c>)
 8014992:	4a05      	ldr	r2, [pc, #20]	; (80149a8 <prvInitialiseTaskLists+0x68>)
 8014994:	601a      	str	r2, [r3, #0]
}
 8014996:	bf00      	nop
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	200017d8 	.word	0x200017d8
 80149a4:	20001c38 	.word	0x20001c38
 80149a8:	20001c4c 	.word	0x20001c4c
 80149ac:	20001c68 	.word	0x20001c68
 80149b0:	20001c7c 	.word	0x20001c7c
 80149b4:	20001c94 	.word	0x20001c94
 80149b8:	20001c60 	.word	0x20001c60
 80149bc:	20001c64 	.word	0x20001c64

080149c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80149c6:	e019      	b.n	80149fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80149c8:	f000 fdb6 	bl	8015538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149cc:	4b0f      	ldr	r3, [pc, #60]	; (8014a0c <prvCheckTasksWaitingTermination+0x4c>)
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	3304      	adds	r3, #4
 80149d8:	4618      	mov	r0, r3
 80149da:	f7fe fb27 	bl	801302c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80149de:	4b0c      	ldr	r3, [pc, #48]	; (8014a10 <prvCheckTasksWaitingTermination+0x50>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	3b01      	subs	r3, #1
 80149e4:	4a0a      	ldr	r2, [pc, #40]	; (8014a10 <prvCheckTasksWaitingTermination+0x50>)
 80149e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80149e8:	4b0a      	ldr	r3, [pc, #40]	; (8014a14 <prvCheckTasksWaitingTermination+0x54>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	3b01      	subs	r3, #1
 80149ee:	4a09      	ldr	r2, [pc, #36]	; (8014a14 <prvCheckTasksWaitingTermination+0x54>)
 80149f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80149f2:	f000 fdd3 	bl	801559c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 f80e 	bl	8014a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80149fc:	4b05      	ldr	r3, [pc, #20]	; (8014a14 <prvCheckTasksWaitingTermination+0x54>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d1e1      	bne.n	80149c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014a04:	bf00      	nop
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	20001c7c 	.word	0x20001c7c
 8014a10:	20001ca8 	.word	0x20001ca8
 8014a14:	20001c90 	.word	0x20001c90

08014a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d108      	bne.n	8014a3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f000 ff70 	bl	8015914 <vPortFree>
				vPortFree( pxTCB );
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 ff6d 	bl	8015914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014a3a:	e019      	b.n	8014a70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d103      	bne.n	8014a4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f000 ff64 	bl	8015914 <vPortFree>
	}
 8014a4c:	e010      	b.n	8014a70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014a54:	2b02      	cmp	r3, #2
 8014a56:	d00b      	beq.n	8014a70 <prvDeleteTCB+0x58>
 8014a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a5c:	b672      	cpsid	i
 8014a5e:	f383 8811 	msr	BASEPRI, r3
 8014a62:	f3bf 8f6f 	isb	sy
 8014a66:	f3bf 8f4f 	dsb	sy
 8014a6a:	b662      	cpsie	i
 8014a6c:	60fb      	str	r3, [r7, #12]
 8014a6e:	e7fe      	b.n	8014a6e <prvDeleteTCB+0x56>
	}
 8014a70:	bf00      	nop
 8014a72:	3710      	adds	r7, #16
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a7e:	4b0c      	ldr	r3, [pc, #48]	; (8014ab0 <prvResetNextTaskUnblockTime+0x38>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d104      	bne.n	8014a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014a88:	4b0a      	ldr	r3, [pc, #40]	; (8014ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8014a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014a90:	e008      	b.n	8014aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a92:	4b07      	ldr	r3, [pc, #28]	; (8014ab0 <prvResetNextTaskUnblockTime+0x38>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	4a04      	ldr	r2, [pc, #16]	; (8014ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8014aa2:	6013      	str	r3, [r2, #0]
}
 8014aa4:	bf00      	nop
 8014aa6:	370c      	adds	r7, #12
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr
 8014ab0:	20001c60 	.word	0x20001c60
 8014ab4:	20001cc8 	.word	0x20001cc8

08014ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014abe:	4b0b      	ldr	r3, [pc, #44]	; (8014aec <xTaskGetSchedulerState+0x34>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d102      	bne.n	8014acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	607b      	str	r3, [r7, #4]
 8014aca:	e008      	b.n	8014ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014acc:	4b08      	ldr	r3, [pc, #32]	; (8014af0 <xTaskGetSchedulerState+0x38>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014ad4:	2302      	movs	r3, #2
 8014ad6:	607b      	str	r3, [r7, #4]
 8014ad8:	e001      	b.n	8014ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014ada:	2300      	movs	r3, #0
 8014adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014ade:	687b      	ldr	r3, [r7, #4]
	}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr
 8014aec:	20001cb4 	.word	0x20001cb4
 8014af0:	20001cd0 	.word	0x20001cd0

08014af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014b00:	2300      	movs	r3, #0
 8014b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d058      	beq.n	8014bbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014b0a:	4b2f      	ldr	r3, [pc, #188]	; (8014bc8 <xTaskPriorityDisinherit+0xd4>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	693a      	ldr	r2, [r7, #16]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d00b      	beq.n	8014b2c <xTaskPriorityDisinherit+0x38>
 8014b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b18:	b672      	cpsid	i
 8014b1a:	f383 8811 	msr	BASEPRI, r3
 8014b1e:	f3bf 8f6f 	isb	sy
 8014b22:	f3bf 8f4f 	dsb	sy
 8014b26:	b662      	cpsie	i
 8014b28:	60fb      	str	r3, [r7, #12]
 8014b2a:	e7fe      	b.n	8014b2a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d10b      	bne.n	8014b4c <xTaskPriorityDisinherit+0x58>
 8014b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b38:	b672      	cpsid	i
 8014b3a:	f383 8811 	msr	BASEPRI, r3
 8014b3e:	f3bf 8f6f 	isb	sy
 8014b42:	f3bf 8f4f 	dsb	sy
 8014b46:	b662      	cpsie	i
 8014b48:	60bb      	str	r3, [r7, #8]
 8014b4a:	e7fe      	b.n	8014b4a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b50:	1e5a      	subs	r2, r3, #1
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d02c      	beq.n	8014bbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d128      	bne.n	8014bbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	3304      	adds	r3, #4
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe fa5c 	bl	801302c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b8c:	4b0f      	ldr	r3, [pc, #60]	; (8014bcc <xTaskPriorityDisinherit+0xd8>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d903      	bls.n	8014b9c <xTaskPriorityDisinherit+0xa8>
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b98:	4a0c      	ldr	r2, [pc, #48]	; (8014bcc <xTaskPriorityDisinherit+0xd8>)
 8014b9a:	6013      	str	r3, [r2, #0]
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	4413      	add	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4a09      	ldr	r2, [pc, #36]	; (8014bd0 <xTaskPriorityDisinherit+0xdc>)
 8014baa:	441a      	add	r2, r3
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	3304      	adds	r3, #4
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	f7fe f9dd 	bl	8012f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014bbc:	697b      	ldr	r3, [r7, #20]
	}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3718      	adds	r7, #24
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	200017d4 	.word	0x200017d4
 8014bcc:	20001cb0 	.word	0x20001cb0
 8014bd0:	200017d8 	.word	0x200017d8

08014bd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b084      	sub	sp, #16
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014bde:	4b21      	ldr	r3, [pc, #132]	; (8014c64 <prvAddCurrentTaskToDelayedList+0x90>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014be4:	4b20      	ldr	r3, [pc, #128]	; (8014c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	3304      	adds	r3, #4
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7fe fa1e 	bl	801302c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bf6:	d10a      	bne.n	8014c0e <prvAddCurrentTaskToDelayedList+0x3a>
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d007      	beq.n	8014c0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bfe:	4b1a      	ldr	r3, [pc, #104]	; (8014c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	3304      	adds	r3, #4
 8014c04:	4619      	mov	r1, r3
 8014c06:	4819      	ldr	r0, [pc, #100]	; (8014c6c <prvAddCurrentTaskToDelayedList+0x98>)
 8014c08:	f7fe f9b3 	bl	8012f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c0c:	e026      	b.n	8014c5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4413      	add	r3, r2
 8014c14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c16:	4b14      	ldr	r3, [pc, #80]	; (8014c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	68ba      	ldr	r2, [r7, #8]
 8014c1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c1e:	68ba      	ldr	r2, [r7, #8]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d209      	bcs.n	8014c3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c26:	4b12      	ldr	r3, [pc, #72]	; (8014c70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	4b0f      	ldr	r3, [pc, #60]	; (8014c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	3304      	adds	r3, #4
 8014c30:	4619      	mov	r1, r3
 8014c32:	4610      	mov	r0, r2
 8014c34:	f7fe f9c1 	bl	8012fba <vListInsert>
}
 8014c38:	e010      	b.n	8014c5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c3a:	4b0e      	ldr	r3, [pc, #56]	; (8014c74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	4b0a      	ldr	r3, [pc, #40]	; (8014c68 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	3304      	adds	r3, #4
 8014c44:	4619      	mov	r1, r3
 8014c46:	4610      	mov	r0, r2
 8014c48:	f7fe f9b7 	bl	8012fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014c4c:	4b0a      	ldr	r3, [pc, #40]	; (8014c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	68ba      	ldr	r2, [r7, #8]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d202      	bcs.n	8014c5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014c56:	4a08      	ldr	r2, [pc, #32]	; (8014c78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	6013      	str	r3, [r2, #0]
}
 8014c5c:	bf00      	nop
 8014c5e:	3710      	adds	r7, #16
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	20001cac 	.word	0x20001cac
 8014c68:	200017d4 	.word	0x200017d4
 8014c6c:	20001c94 	.word	0x20001c94
 8014c70:	20001c64 	.word	0x20001c64
 8014c74:	20001c60 	.word	0x20001c60
 8014c78:	20001cc8 	.word	0x20001cc8

08014c7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08a      	sub	sp, #40	; 0x28
 8014c80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014c82:	2300      	movs	r3, #0
 8014c84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014c86:	f000 fb0d 	bl	80152a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014c8a:	4b1d      	ldr	r3, [pc, #116]	; (8014d00 <xTimerCreateTimerTask+0x84>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d021      	beq.n	8014cd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014c96:	2300      	movs	r3, #0
 8014c98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014c9a:	1d3a      	adds	r2, r7, #4
 8014c9c:	f107 0108 	add.w	r1, r7, #8
 8014ca0:	f107 030c 	add.w	r3, r7, #12
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7fe f91d 	bl	8012ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014caa:	6879      	ldr	r1, [r7, #4]
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	68fa      	ldr	r2, [r7, #12]
 8014cb0:	9202      	str	r2, [sp, #8]
 8014cb2:	9301      	str	r3, [sp, #4]
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	9300      	str	r3, [sp, #0]
 8014cb8:	2300      	movs	r3, #0
 8014cba:	460a      	mov	r2, r1
 8014cbc:	4911      	ldr	r1, [pc, #68]	; (8014d04 <xTimerCreateTimerTask+0x88>)
 8014cbe:	4812      	ldr	r0, [pc, #72]	; (8014d08 <xTimerCreateTimerTask+0x8c>)
 8014cc0:	f7ff f810 	bl	8013ce4 <xTaskCreateStatic>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	4b11      	ldr	r3, [pc, #68]	; (8014d0c <xTimerCreateTimerTask+0x90>)
 8014cc8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014cca:	4b10      	ldr	r3, [pc, #64]	; (8014d0c <xTimerCreateTimerTask+0x90>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d001      	beq.n	8014cd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10b      	bne.n	8014cf4 <xTimerCreateTimerTask+0x78>
 8014cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce0:	b672      	cpsid	i
 8014ce2:	f383 8811 	msr	BASEPRI, r3
 8014ce6:	f3bf 8f6f 	isb	sy
 8014cea:	f3bf 8f4f 	dsb	sy
 8014cee:	b662      	cpsie	i
 8014cf0:	613b      	str	r3, [r7, #16]
 8014cf2:	e7fe      	b.n	8014cf2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014cf4:	697b      	ldr	r3, [r7, #20]
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3718      	adds	r7, #24
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	20001d04 	.word	0x20001d04
 8014d04:	08016f14 	.word	0x08016f14
 8014d08:	08014e49 	.word	0x08014e49
 8014d0c:	20001d08 	.word	0x20001d08

08014d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b08a      	sub	sp, #40	; 0x28
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d10b      	bne.n	8014d40 <xTimerGenericCommand+0x30>
 8014d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2c:	b672      	cpsid	i
 8014d2e:	f383 8811 	msr	BASEPRI, r3
 8014d32:	f3bf 8f6f 	isb	sy
 8014d36:	f3bf 8f4f 	dsb	sy
 8014d3a:	b662      	cpsie	i
 8014d3c:	623b      	str	r3, [r7, #32]
 8014d3e:	e7fe      	b.n	8014d3e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014d40:	4b19      	ldr	r3, [pc, #100]	; (8014da8 <xTimerGenericCommand+0x98>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d02a      	beq.n	8014d9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	2b05      	cmp	r3, #5
 8014d58:	dc18      	bgt.n	8014d8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014d5a:	f7ff fead 	bl	8014ab8 <xTaskGetSchedulerState>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b02      	cmp	r3, #2
 8014d62:	d109      	bne.n	8014d78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014d64:	4b10      	ldr	r3, [pc, #64]	; (8014da8 <xTimerGenericCommand+0x98>)
 8014d66:	6818      	ldr	r0, [r3, #0]
 8014d68:	f107 0110 	add.w	r1, r7, #16
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d70:	f7fe fb24 	bl	80133bc <xQueueGenericSend>
 8014d74:	6278      	str	r0, [r7, #36]	; 0x24
 8014d76:	e012      	b.n	8014d9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014d78:	4b0b      	ldr	r3, [pc, #44]	; (8014da8 <xTimerGenericCommand+0x98>)
 8014d7a:	6818      	ldr	r0, [r3, #0]
 8014d7c:	f107 0110 	add.w	r1, r7, #16
 8014d80:	2300      	movs	r3, #0
 8014d82:	2200      	movs	r2, #0
 8014d84:	f7fe fb1a 	bl	80133bc <xQueueGenericSend>
 8014d88:	6278      	str	r0, [r7, #36]	; 0x24
 8014d8a:	e008      	b.n	8014d9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014d8c:	4b06      	ldr	r3, [pc, #24]	; (8014da8 <xTimerGenericCommand+0x98>)
 8014d8e:	6818      	ldr	r0, [r3, #0]
 8014d90:	f107 0110 	add.w	r1, r7, #16
 8014d94:	2300      	movs	r3, #0
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	f7fe fc1a 	bl	80135d0 <xQueueGenericSendFromISR>
 8014d9c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3728      	adds	r7, #40	; 0x28
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	20001d04 	.word	0x20001d04

08014dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b088      	sub	sp, #32
 8014db0:	af02      	add	r7, sp, #8
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014db6:	4b23      	ldr	r3, [pc, #140]	; (8014e44 <prvProcessExpiredTimer+0x98>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	3304      	adds	r3, #4
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7fe f931 	bl	801302c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dd0:	f003 0304 	and.w	r3, r3, #4
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d023      	beq.n	8014e20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	699a      	ldr	r2, [r3, #24]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	18d1      	adds	r1, r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	6978      	ldr	r0, [r7, #20]
 8014de6:	f000 f8d3 	bl	8014f90 <prvInsertTimerInActiveList>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d020      	beq.n	8014e32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014df0:	2300      	movs	r3, #0
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	2300      	movs	r3, #0
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	2100      	movs	r1, #0
 8014dfa:	6978      	ldr	r0, [r7, #20]
 8014dfc:	f7ff ff88 	bl	8014d10 <xTimerGenericCommand>
 8014e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d114      	bne.n	8014e32 <prvProcessExpiredTimer+0x86>
 8014e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0c:	b672      	cpsid	i
 8014e0e:	f383 8811 	msr	BASEPRI, r3
 8014e12:	f3bf 8f6f 	isb	sy
 8014e16:	f3bf 8f4f 	dsb	sy
 8014e1a:	b662      	cpsie	i
 8014e1c:	60fb      	str	r3, [r7, #12]
 8014e1e:	e7fe      	b.n	8014e1e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e26:	f023 0301 	bic.w	r3, r3, #1
 8014e2a:	b2da      	uxtb	r2, r3
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	6a1b      	ldr	r3, [r3, #32]
 8014e36:	6978      	ldr	r0, [r7, #20]
 8014e38:	4798      	blx	r3
}
 8014e3a:	bf00      	nop
 8014e3c:	3718      	adds	r7, #24
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	20001cfc 	.word	0x20001cfc

08014e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e50:	f107 0308 	add.w	r3, r7, #8
 8014e54:	4618      	mov	r0, r3
 8014e56:	f000 f857 	bl	8014f08 <prvGetNextExpireTime>
 8014e5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f000 f803 	bl	8014e6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014e66:	f000 f8d5 	bl	8015014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014e6a:	e7f1      	b.n	8014e50 <prvTimerTask+0x8>

08014e6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014e76:	f7ff fa07 	bl	8014288 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014e7a:	f107 0308 	add.w	r3, r7, #8
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f000 f866 	bl	8014f50 <prvSampleTimeNow>
 8014e84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d130      	bne.n	8014eee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d10a      	bne.n	8014ea8 <prvProcessTimerOrBlockTask+0x3c>
 8014e92:	687a      	ldr	r2, [r7, #4]
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d806      	bhi.n	8014ea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014e9a:	f7ff fa03 	bl	80142a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014e9e:	68f9      	ldr	r1, [r7, #12]
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f7ff ff83 	bl	8014dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014ea6:	e024      	b.n	8014ef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d008      	beq.n	8014ec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014eae:	4b13      	ldr	r3, [pc, #76]	; (8014efc <prvProcessTimerOrBlockTask+0x90>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d101      	bne.n	8014ebc <prvProcessTimerOrBlockTask+0x50>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	e000      	b.n	8014ebe <prvProcessTimerOrBlockTask+0x52>
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014ec0:	4b0f      	ldr	r3, [pc, #60]	; (8014f00 <prvProcessTimerOrBlockTask+0x94>)
 8014ec2:	6818      	ldr	r0, [r3, #0]
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	683a      	ldr	r2, [r7, #0]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	f7fe fed5 	bl	8013c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014ed2:	f7ff f9e7 	bl	80142a4 <xTaskResumeAll>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10a      	bne.n	8014ef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014edc:	4b09      	ldr	r3, [pc, #36]	; (8014f04 <prvProcessTimerOrBlockTask+0x98>)
 8014ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ee2:	601a      	str	r2, [r3, #0]
 8014ee4:	f3bf 8f4f 	dsb	sy
 8014ee8:	f3bf 8f6f 	isb	sy
}
 8014eec:	e001      	b.n	8014ef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014eee:	f7ff f9d9 	bl	80142a4 <xTaskResumeAll>
}
 8014ef2:	bf00      	nop
 8014ef4:	3710      	adds	r7, #16
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
 8014efa:	bf00      	nop
 8014efc:	20001d00 	.word	0x20001d00
 8014f00:	20001d04 	.word	0x20001d04
 8014f04:	e000ed04 	.word	0xe000ed04

08014f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014f10:	4b0e      	ldr	r3, [pc, #56]	; (8014f4c <prvGetNextExpireTime+0x44>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d101      	bne.n	8014f1e <prvGetNextExpireTime+0x16>
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	e000      	b.n	8014f20 <prvGetNextExpireTime+0x18>
 8014f1e:	2200      	movs	r2, #0
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d105      	bne.n	8014f38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014f2c:	4b07      	ldr	r3, [pc, #28]	; (8014f4c <prvGetNextExpireTime+0x44>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	68db      	ldr	r3, [r3, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	60fb      	str	r3, [r7, #12]
 8014f36:	e001      	b.n	8014f3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3714      	adds	r7, #20
 8014f42:	46bd      	mov	sp, r7
 8014f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	20001cfc 	.word	0x20001cfc

08014f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b084      	sub	sp, #16
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014f58:	f7ff fa42 	bl	80143e0 <xTaskGetTickCount>
 8014f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014f5e:	4b0b      	ldr	r3, [pc, #44]	; (8014f8c <prvSampleTimeNow+0x3c>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	68fa      	ldr	r2, [r7, #12]
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d205      	bcs.n	8014f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014f68:	f000 f936 	bl	80151d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2201      	movs	r2, #1
 8014f70:	601a      	str	r2, [r3, #0]
 8014f72:	e002      	b.n	8014f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2200      	movs	r2, #0
 8014f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014f7a:	4a04      	ldr	r2, [pc, #16]	; (8014f8c <prvSampleTimeNow+0x3c>)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014f80:	68fb      	ldr	r3, [r7, #12]
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20001d0c 	.word	0x20001d0c

08014f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b086      	sub	sp, #24
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
 8014f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	68ba      	ldr	r2, [r7, #8]
 8014fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d812      	bhi.n	8014fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fb6:	687a      	ldr	r2, [r7, #4]
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	1ad2      	subs	r2, r2, r3
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	699b      	ldr	r3, [r3, #24]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d302      	bcc.n	8014fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	e01b      	b.n	8015002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014fca:	4b10      	ldr	r3, [pc, #64]	; (801500c <prvInsertTimerInActiveList+0x7c>)
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	3304      	adds	r3, #4
 8014fd2:	4619      	mov	r1, r3
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	f7fd fff0 	bl	8012fba <vListInsert>
 8014fda:	e012      	b.n	8015002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d206      	bcs.n	8014ff2 <prvInsertTimerInActiveList+0x62>
 8014fe4:	68ba      	ldr	r2, [r7, #8]
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d302      	bcc.n	8014ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014fec:	2301      	movs	r3, #1
 8014fee:	617b      	str	r3, [r7, #20]
 8014ff0:	e007      	b.n	8015002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014ff2:	4b07      	ldr	r3, [pc, #28]	; (8015010 <prvInsertTimerInActiveList+0x80>)
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4610      	mov	r0, r2
 8014ffe:	f7fd ffdc 	bl	8012fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015002:	697b      	ldr	r3, [r7, #20]
}
 8015004:	4618      	mov	r0, r3
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	20001d00 	.word	0x20001d00
 8015010:	20001cfc 	.word	0x20001cfc

08015014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b08e      	sub	sp, #56	; 0x38
 8015018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801501a:	e0cc      	b.n	80151b6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	da19      	bge.n	8015056 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015022:	1d3b      	adds	r3, r7, #4
 8015024:	3304      	adds	r3, #4
 8015026:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502a:	2b00      	cmp	r3, #0
 801502c:	d10b      	bne.n	8015046 <prvProcessReceivedCommands+0x32>
 801502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015032:	b672      	cpsid	i
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	b662      	cpsie	i
 8015042:	61fb      	str	r3, [r7, #28]
 8015044:	e7fe      	b.n	8015044 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801504c:	6850      	ldr	r0, [r2, #4]
 801504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015050:	6892      	ldr	r2, [r2, #8]
 8015052:	4611      	mov	r1, r2
 8015054:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	f2c0 80ab 	blt.w	80151b4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015064:	695b      	ldr	r3, [r3, #20]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d004      	beq.n	8015074 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506c:	3304      	adds	r3, #4
 801506e:	4618      	mov	r0, r3
 8015070:	f7fd ffdc 	bl	801302c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015074:	463b      	mov	r3, r7
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff ff6a 	bl	8014f50 <prvSampleTimeNow>
 801507c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2b09      	cmp	r3, #9
 8015082:	f200 8098 	bhi.w	80151b6 <prvProcessReceivedCommands+0x1a2>
 8015086:	a201      	add	r2, pc, #4	; (adr r2, 801508c <prvProcessReceivedCommands+0x78>)
 8015088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801508c:	080150b5 	.word	0x080150b5
 8015090:	080150b5 	.word	0x080150b5
 8015094:	080150b5 	.word	0x080150b5
 8015098:	0801512b 	.word	0x0801512b
 801509c:	0801513f 	.word	0x0801513f
 80150a0:	0801518b 	.word	0x0801518b
 80150a4:	080150b5 	.word	0x080150b5
 80150a8:	080150b5 	.word	0x080150b5
 80150ac:	0801512b 	.word	0x0801512b
 80150b0:	0801513f 	.word	0x0801513f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80150b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150ba:	f043 0301 	orr.w	r3, r3, #1
 80150be:	b2da      	uxtb	r2, r3
 80150c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ca:	699b      	ldr	r3, [r3, #24]
 80150cc:	18d1      	adds	r1, r2, r3
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150d4:	f7ff ff5c 	bl	8014f90 <prvInsertTimerInActiveList>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d06b      	beq.n	80151b6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80150de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e0:	6a1b      	ldr	r3, [r3, #32]
 80150e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80150e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150ec:	f003 0304 	and.w	r3, r3, #4
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d060      	beq.n	80151b6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80150f4:	68ba      	ldr	r2, [r7, #8]
 80150f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f8:	699b      	ldr	r3, [r3, #24]
 80150fa:	441a      	add	r2, r3
 80150fc:	2300      	movs	r3, #0
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	2300      	movs	r3, #0
 8015102:	2100      	movs	r1, #0
 8015104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015106:	f7ff fe03 	bl	8014d10 <xTimerGenericCommand>
 801510a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801510c:	6a3b      	ldr	r3, [r7, #32]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d151      	bne.n	80151b6 <prvProcessReceivedCommands+0x1a2>
 8015112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015116:	b672      	cpsid	i
 8015118:	f383 8811 	msr	BASEPRI, r3
 801511c:	f3bf 8f6f 	isb	sy
 8015120:	f3bf 8f4f 	dsb	sy
 8015124:	b662      	cpsie	i
 8015126:	61bb      	str	r3, [r7, #24]
 8015128:	e7fe      	b.n	8015128 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015130:	f023 0301 	bic.w	r3, r3, #1
 8015134:	b2da      	uxtb	r2, r3
 8015136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015138:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801513c:	e03b      	b.n	80151b6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015144:	f043 0301 	orr.w	r3, r3, #1
 8015148:	b2da      	uxtb	r2, r3
 801514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015150:	68ba      	ldr	r2, [r7, #8]
 8015152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015154:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015158:	699b      	ldr	r3, [r3, #24]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d10b      	bne.n	8015176 <prvProcessReceivedCommands+0x162>
 801515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015162:	b672      	cpsid	i
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	b662      	cpsie	i
 8015172:	617b      	str	r3, [r7, #20]
 8015174:	e7fe      	b.n	8015174 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015178:	699a      	ldr	r2, [r3, #24]
 801517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517c:	18d1      	adds	r1, r2, r3
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015184:	f7ff ff04 	bl	8014f90 <prvInsertTimerInActiveList>
					break;
 8015188:	e015      	b.n	80151b6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801518c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015190:	f003 0302 	and.w	r3, r3, #2
 8015194:	2b00      	cmp	r3, #0
 8015196:	d103      	bne.n	80151a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801519a:	f000 fbbb 	bl	8015914 <vPortFree>
 801519e:	e00a      	b.n	80151b6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151a6:	f023 0301 	bic.w	r3, r3, #1
 80151aa:	b2da      	uxtb	r2, r3
 80151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80151b2:	e000      	b.n	80151b6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80151b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151b6:	4b07      	ldr	r3, [pc, #28]	; (80151d4 <prvProcessReceivedCommands+0x1c0>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	1d39      	adds	r1, r7, #4
 80151bc:	2200      	movs	r2, #0
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fe faaa 	bl	8013718 <xQueueReceive>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	f47f af28 	bne.w	801501c <prvProcessReceivedCommands+0x8>
	}
}
 80151cc:	bf00      	nop
 80151ce:	3730      	adds	r7, #48	; 0x30
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	20001d04 	.word	0x20001d04

080151d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b088      	sub	sp, #32
 80151dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80151de:	e049      	b.n	8015274 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80151e0:	4b2e      	ldr	r3, [pc, #184]	; (801529c <prvSwitchTimerLists+0xc4>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151ea:	4b2c      	ldr	r3, [pc, #176]	; (801529c <prvSwitchTimerLists+0xc4>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	3304      	adds	r3, #4
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7fd ff17 	bl	801302c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	6a1b      	ldr	r3, [r3, #32]
 8015202:	68f8      	ldr	r0, [r7, #12]
 8015204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801520c:	f003 0304 	and.w	r3, r3, #4
 8015210:	2b00      	cmp	r3, #0
 8015212:	d02f      	beq.n	8015274 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	699b      	ldr	r3, [r3, #24]
 8015218:	693a      	ldr	r2, [r7, #16]
 801521a:	4413      	add	r3, r2
 801521c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	429a      	cmp	r2, r3
 8015224:	d90e      	bls.n	8015244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	68fa      	ldr	r2, [r7, #12]
 8015230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015232:	4b1a      	ldr	r3, [pc, #104]	; (801529c <prvSwitchTimerLists+0xc4>)
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	3304      	adds	r3, #4
 801523a:	4619      	mov	r1, r3
 801523c:	4610      	mov	r0, r2
 801523e:	f7fd febc 	bl	8012fba <vListInsert>
 8015242:	e017      	b.n	8015274 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015244:	2300      	movs	r3, #0
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	2300      	movs	r3, #0
 801524a:	693a      	ldr	r2, [r7, #16]
 801524c:	2100      	movs	r1, #0
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f7ff fd5e 	bl	8014d10 <xTimerGenericCommand>
 8015254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10b      	bne.n	8015274 <prvSwitchTimerLists+0x9c>
 801525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015260:	b672      	cpsid	i
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	b662      	cpsie	i
 8015270:	603b      	str	r3, [r7, #0]
 8015272:	e7fe      	b.n	8015272 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015274:	4b09      	ldr	r3, [pc, #36]	; (801529c <prvSwitchTimerLists+0xc4>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d1b0      	bne.n	80151e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801527e:	4b07      	ldr	r3, [pc, #28]	; (801529c <prvSwitchTimerLists+0xc4>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015284:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <prvSwitchTimerLists+0xc8>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4a04      	ldr	r2, [pc, #16]	; (801529c <prvSwitchTimerLists+0xc4>)
 801528a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801528c:	4a04      	ldr	r2, [pc, #16]	; (80152a0 <prvSwitchTimerLists+0xc8>)
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	6013      	str	r3, [r2, #0]
}
 8015292:	bf00      	nop
 8015294:	3718      	adds	r7, #24
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	20001cfc 	.word	0x20001cfc
 80152a0:	20001d00 	.word	0x20001d00

080152a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80152aa:	f000 f945 	bl	8015538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80152ae:	4b15      	ldr	r3, [pc, #84]	; (8015304 <prvCheckForValidListAndQueue+0x60>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d120      	bne.n	80152f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80152b6:	4814      	ldr	r0, [pc, #80]	; (8015308 <prvCheckForValidListAndQueue+0x64>)
 80152b8:	f7fd fe2e 	bl	8012f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80152bc:	4813      	ldr	r0, [pc, #76]	; (801530c <prvCheckForValidListAndQueue+0x68>)
 80152be:	f7fd fe2b 	bl	8012f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80152c2:	4b13      	ldr	r3, [pc, #76]	; (8015310 <prvCheckForValidListAndQueue+0x6c>)
 80152c4:	4a10      	ldr	r2, [pc, #64]	; (8015308 <prvCheckForValidListAndQueue+0x64>)
 80152c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80152c8:	4b12      	ldr	r3, [pc, #72]	; (8015314 <prvCheckForValidListAndQueue+0x70>)
 80152ca:	4a10      	ldr	r2, [pc, #64]	; (801530c <prvCheckForValidListAndQueue+0x68>)
 80152cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80152ce:	2300      	movs	r3, #0
 80152d0:	9300      	str	r3, [sp, #0]
 80152d2:	4b11      	ldr	r3, [pc, #68]	; (8015318 <prvCheckForValidListAndQueue+0x74>)
 80152d4:	4a11      	ldr	r2, [pc, #68]	; (801531c <prvCheckForValidListAndQueue+0x78>)
 80152d6:	2110      	movs	r1, #16
 80152d8:	200a      	movs	r0, #10
 80152da:	f7fd ff3b 	bl	8013154 <xQueueGenericCreateStatic>
 80152de:	4602      	mov	r2, r0
 80152e0:	4b08      	ldr	r3, [pc, #32]	; (8015304 <prvCheckForValidListAndQueue+0x60>)
 80152e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80152e4:	4b07      	ldr	r3, [pc, #28]	; (8015304 <prvCheckForValidListAndQueue+0x60>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d005      	beq.n	80152f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80152ec:	4b05      	ldr	r3, [pc, #20]	; (8015304 <prvCheckForValidListAndQueue+0x60>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	490b      	ldr	r1, [pc, #44]	; (8015320 <prvCheckForValidListAndQueue+0x7c>)
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fe fc96 	bl	8013c24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80152f8:	f000 f950 	bl	801559c <vPortExitCritical>
}
 80152fc:	bf00      	nop
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	20001d04 	.word	0x20001d04
 8015308:	20001cd4 	.word	0x20001cd4
 801530c:	20001ce8 	.word	0x20001ce8
 8015310:	20001cfc 	.word	0x20001cfc
 8015314:	20001d00 	.word	0x20001d00
 8015318:	20001db0 	.word	0x20001db0
 801531c:	20001d10 	.word	0x20001d10
 8015320:	08016f1c 	.word	0x08016f1c

08015324 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015324:	b480      	push	{r7}
 8015326:	b085      	sub	sp, #20
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	3b04      	subs	r3, #4
 8015334:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801533c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	3b04      	subs	r3, #4
 8015342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	f023 0201 	bic.w	r2, r3, #1
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	3b04      	subs	r3, #4
 8015352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015354:	4a0c      	ldr	r2, [pc, #48]	; (8015388 <pxPortInitialiseStack+0x64>)
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	3b14      	subs	r3, #20
 801535e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	3b04      	subs	r3, #4
 801536a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f06f 0202 	mvn.w	r2, #2
 8015372:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	3b20      	subs	r3, #32
 8015378:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801537a:	68fb      	ldr	r3, [r7, #12]
}
 801537c:	4618      	mov	r0, r3
 801537e:	3714      	adds	r7, #20
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr
 8015388:	0801538d 	.word	0x0801538d

0801538c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801538c:	b480      	push	{r7}
 801538e:	b085      	sub	sp, #20
 8015390:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015392:	2300      	movs	r3, #0
 8015394:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015396:	4b13      	ldr	r3, [pc, #76]	; (80153e4 <prvTaskExitError+0x58>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801539e:	d00b      	beq.n	80153b8 <prvTaskExitError+0x2c>
 80153a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a4:	b672      	cpsid	i
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	b662      	cpsie	i
 80153b4:	60fb      	str	r3, [r7, #12]
 80153b6:	e7fe      	b.n	80153b6 <prvTaskExitError+0x2a>
 80153b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153bc:	b672      	cpsid	i
 80153be:	f383 8811 	msr	BASEPRI, r3
 80153c2:	f3bf 8f6f 	isb	sy
 80153c6:	f3bf 8f4f 	dsb	sy
 80153ca:	b662      	cpsie	i
 80153cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80153ce:	bf00      	nop
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0fc      	beq.n	80153d0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80153d6:	bf00      	nop
 80153d8:	3714      	adds	r7, #20
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
 80153e2:	bf00      	nop
 80153e4:	2000006c 	.word	0x2000006c
	...

080153f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80153f0:	4b07      	ldr	r3, [pc, #28]	; (8015410 <pxCurrentTCBConst2>)
 80153f2:	6819      	ldr	r1, [r3, #0]
 80153f4:	6808      	ldr	r0, [r1, #0]
 80153f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fa:	f380 8809 	msr	PSP, r0
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f04f 0000 	mov.w	r0, #0
 8015406:	f380 8811 	msr	BASEPRI, r0
 801540a:	4770      	bx	lr
 801540c:	f3af 8000 	nop.w

08015410 <pxCurrentTCBConst2>:
 8015410:	200017d4 	.word	0x200017d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015414:	bf00      	nop
 8015416:	bf00      	nop

08015418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015418:	4808      	ldr	r0, [pc, #32]	; (801543c <prvPortStartFirstTask+0x24>)
 801541a:	6800      	ldr	r0, [r0, #0]
 801541c:	6800      	ldr	r0, [r0, #0]
 801541e:	f380 8808 	msr	MSP, r0
 8015422:	f04f 0000 	mov.w	r0, #0
 8015426:	f380 8814 	msr	CONTROL, r0
 801542a:	b662      	cpsie	i
 801542c:	b661      	cpsie	f
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	f3bf 8f6f 	isb	sy
 8015436:	df00      	svc	0
 8015438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801543a:	bf00      	nop
 801543c:	e000ed08 	.word	0xe000ed08

08015440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015446:	4b36      	ldr	r3, [pc, #216]	; (8015520 <xPortStartScheduler+0xe0>)
 8015448:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	b2db      	uxtb	r3, r3
 8015450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	22ff      	movs	r2, #255	; 0xff
 8015456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	b2db      	uxtb	r3, r3
 801545e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015460:	78fb      	ldrb	r3, [r7, #3]
 8015462:	b2db      	uxtb	r3, r3
 8015464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015468:	b2da      	uxtb	r2, r3
 801546a:	4b2e      	ldr	r3, [pc, #184]	; (8015524 <xPortStartScheduler+0xe4>)
 801546c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801546e:	4b2e      	ldr	r3, [pc, #184]	; (8015528 <xPortStartScheduler+0xe8>)
 8015470:	2207      	movs	r2, #7
 8015472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015474:	e009      	b.n	801548a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015476:	4b2c      	ldr	r3, [pc, #176]	; (8015528 <xPortStartScheduler+0xe8>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	3b01      	subs	r3, #1
 801547c:	4a2a      	ldr	r2, [pc, #168]	; (8015528 <xPortStartScheduler+0xe8>)
 801547e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015480:	78fb      	ldrb	r3, [r7, #3]
 8015482:	b2db      	uxtb	r3, r3
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	b2db      	uxtb	r3, r3
 8015488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801548a:	78fb      	ldrb	r3, [r7, #3]
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015492:	2b80      	cmp	r3, #128	; 0x80
 8015494:	d0ef      	beq.n	8015476 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015496:	4b24      	ldr	r3, [pc, #144]	; (8015528 <xPortStartScheduler+0xe8>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	f1c3 0307 	rsb	r3, r3, #7
 801549e:	2b04      	cmp	r3, #4
 80154a0:	d00b      	beq.n	80154ba <xPortStartScheduler+0x7a>
 80154a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a6:	b672      	cpsid	i
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	b662      	cpsie	i
 80154b6:	60bb      	str	r3, [r7, #8]
 80154b8:	e7fe      	b.n	80154b8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80154ba:	4b1b      	ldr	r3, [pc, #108]	; (8015528 <xPortStartScheduler+0xe8>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	021b      	lsls	r3, r3, #8
 80154c0:	4a19      	ldr	r2, [pc, #100]	; (8015528 <xPortStartScheduler+0xe8>)
 80154c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80154c4:	4b18      	ldr	r3, [pc, #96]	; (8015528 <xPortStartScheduler+0xe8>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80154cc:	4a16      	ldr	r2, [pc, #88]	; (8015528 <xPortStartScheduler+0xe8>)
 80154ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	b2da      	uxtb	r2, r3
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80154d8:	4b14      	ldr	r3, [pc, #80]	; (801552c <xPortStartScheduler+0xec>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4a13      	ldr	r2, [pc, #76]	; (801552c <xPortStartScheduler+0xec>)
 80154de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80154e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80154e4:	4b11      	ldr	r3, [pc, #68]	; (801552c <xPortStartScheduler+0xec>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	4a10      	ldr	r2, [pc, #64]	; (801552c <xPortStartScheduler+0xec>)
 80154ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80154ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80154f0:	f000 f8d4 	bl	801569c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80154f4:	4b0e      	ldr	r3, [pc, #56]	; (8015530 <xPortStartScheduler+0xf0>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80154fa:	f000 f8f3 	bl	80156e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80154fe:	4b0d      	ldr	r3, [pc, #52]	; (8015534 <xPortStartScheduler+0xf4>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	4a0c      	ldr	r2, [pc, #48]	; (8015534 <xPortStartScheduler+0xf4>)
 8015504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801550a:	f7ff ff85 	bl	8015418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801550e:	f7ff f831 	bl	8014574 <vTaskSwitchContext>
	prvTaskExitError();
 8015512:	f7ff ff3b 	bl	801538c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	e000e400 	.word	0xe000e400
 8015524:	20001e00 	.word	0x20001e00
 8015528:	20001e04 	.word	0x20001e04
 801552c:	e000ed20 	.word	0xe000ed20
 8015530:	2000006c 	.word	0x2000006c
 8015534:	e000ef34 	.word	0xe000ef34

08015538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015538:	b480      	push	{r7}
 801553a:	b083      	sub	sp, #12
 801553c:	af00      	add	r7, sp, #0
 801553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015542:	b672      	cpsid	i
 8015544:	f383 8811 	msr	BASEPRI, r3
 8015548:	f3bf 8f6f 	isb	sy
 801554c:	f3bf 8f4f 	dsb	sy
 8015550:	b662      	cpsie	i
 8015552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015554:	4b0f      	ldr	r3, [pc, #60]	; (8015594 <vPortEnterCritical+0x5c>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	3301      	adds	r3, #1
 801555a:	4a0e      	ldr	r2, [pc, #56]	; (8015594 <vPortEnterCritical+0x5c>)
 801555c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801555e:	4b0d      	ldr	r3, [pc, #52]	; (8015594 <vPortEnterCritical+0x5c>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b01      	cmp	r3, #1
 8015564:	d110      	bne.n	8015588 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015566:	4b0c      	ldr	r3, [pc, #48]	; (8015598 <vPortEnterCritical+0x60>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	b2db      	uxtb	r3, r3
 801556c:	2b00      	cmp	r3, #0
 801556e:	d00b      	beq.n	8015588 <vPortEnterCritical+0x50>
 8015570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015574:	b672      	cpsid	i
 8015576:	f383 8811 	msr	BASEPRI, r3
 801557a:	f3bf 8f6f 	isb	sy
 801557e:	f3bf 8f4f 	dsb	sy
 8015582:	b662      	cpsie	i
 8015584:	603b      	str	r3, [r7, #0]
 8015586:	e7fe      	b.n	8015586 <vPortEnterCritical+0x4e>
	}
}
 8015588:	bf00      	nop
 801558a:	370c      	adds	r7, #12
 801558c:	46bd      	mov	sp, r7
 801558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015592:	4770      	bx	lr
 8015594:	2000006c 	.word	0x2000006c
 8015598:	e000ed04 	.word	0xe000ed04

0801559c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80155a2:	4b12      	ldr	r3, [pc, #72]	; (80155ec <vPortExitCritical+0x50>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d10b      	bne.n	80155c2 <vPortExitCritical+0x26>
 80155aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ae:	b672      	cpsid	i
 80155b0:	f383 8811 	msr	BASEPRI, r3
 80155b4:	f3bf 8f6f 	isb	sy
 80155b8:	f3bf 8f4f 	dsb	sy
 80155bc:	b662      	cpsie	i
 80155be:	607b      	str	r3, [r7, #4]
 80155c0:	e7fe      	b.n	80155c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80155c2:	4b0a      	ldr	r3, [pc, #40]	; (80155ec <vPortExitCritical+0x50>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	3b01      	subs	r3, #1
 80155c8:	4a08      	ldr	r2, [pc, #32]	; (80155ec <vPortExitCritical+0x50>)
 80155ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80155cc:	4b07      	ldr	r3, [pc, #28]	; (80155ec <vPortExitCritical+0x50>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d104      	bne.n	80155de <vPortExitCritical+0x42>
 80155d4:	2300      	movs	r3, #0
 80155d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80155de:	bf00      	nop
 80155e0:	370c      	adds	r7, #12
 80155e2:	46bd      	mov	sp, r7
 80155e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e8:	4770      	bx	lr
 80155ea:	bf00      	nop
 80155ec:	2000006c 	.word	0x2000006c

080155f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80155f0:	f3ef 8009 	mrs	r0, PSP
 80155f4:	f3bf 8f6f 	isb	sy
 80155f8:	4b15      	ldr	r3, [pc, #84]	; (8015650 <pxCurrentTCBConst>)
 80155fa:	681a      	ldr	r2, [r3, #0]
 80155fc:	f01e 0f10 	tst.w	lr, #16
 8015600:	bf08      	it	eq
 8015602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801560a:	6010      	str	r0, [r2, #0]
 801560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015614:	b672      	cpsid	i
 8015616:	f380 8811 	msr	BASEPRI, r0
 801561a:	f3bf 8f4f 	dsb	sy
 801561e:	f3bf 8f6f 	isb	sy
 8015622:	b662      	cpsie	i
 8015624:	f7fe ffa6 	bl	8014574 <vTaskSwitchContext>
 8015628:	f04f 0000 	mov.w	r0, #0
 801562c:	f380 8811 	msr	BASEPRI, r0
 8015630:	bc09      	pop	{r0, r3}
 8015632:	6819      	ldr	r1, [r3, #0]
 8015634:	6808      	ldr	r0, [r1, #0]
 8015636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563a:	f01e 0f10 	tst.w	lr, #16
 801563e:	bf08      	it	eq
 8015640:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015644:	f380 8809 	msr	PSP, r0
 8015648:	f3bf 8f6f 	isb	sy
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop

08015650 <pxCurrentTCBConst>:
 8015650:	200017d4 	.word	0x200017d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015654:	bf00      	nop
 8015656:	bf00      	nop

08015658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b082      	sub	sp, #8
 801565c:	af00      	add	r7, sp, #0
	__asm volatile
 801565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015662:	b672      	cpsid	i
 8015664:	f383 8811 	msr	BASEPRI, r3
 8015668:	f3bf 8f6f 	isb	sy
 801566c:	f3bf 8f4f 	dsb	sy
 8015670:	b662      	cpsie	i
 8015672:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015674:	f7fe fec4 	bl	8014400 <xTaskIncrementTick>
 8015678:	4603      	mov	r3, r0
 801567a:	2b00      	cmp	r3, #0
 801567c:	d003      	beq.n	8015686 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801567e:	4b06      	ldr	r3, [pc, #24]	; (8015698 <SysTick_Handler+0x40>)
 8015680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015684:	601a      	str	r2, [r3, #0]
 8015686:	2300      	movs	r3, #0
 8015688:	603b      	str	r3, [r7, #0]
	__asm volatile
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015690:	bf00      	nop
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	e000ed04 	.word	0xe000ed04

0801569c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801569c:	b480      	push	{r7}
 801569e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80156a0:	4b0b      	ldr	r3, [pc, #44]	; (80156d0 <vPortSetupTimerInterrupt+0x34>)
 80156a2:	2200      	movs	r2, #0
 80156a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80156a6:	4b0b      	ldr	r3, [pc, #44]	; (80156d4 <vPortSetupTimerInterrupt+0x38>)
 80156a8:	2200      	movs	r2, #0
 80156aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80156ac:	4b0a      	ldr	r3, [pc, #40]	; (80156d8 <vPortSetupTimerInterrupt+0x3c>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4a0a      	ldr	r2, [pc, #40]	; (80156dc <vPortSetupTimerInterrupt+0x40>)
 80156b2:	fba2 2303 	umull	r2, r3, r2, r3
 80156b6:	099b      	lsrs	r3, r3, #6
 80156b8:	4a09      	ldr	r2, [pc, #36]	; (80156e0 <vPortSetupTimerInterrupt+0x44>)
 80156ba:	3b01      	subs	r3, #1
 80156bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80156be:	4b04      	ldr	r3, [pc, #16]	; (80156d0 <vPortSetupTimerInterrupt+0x34>)
 80156c0:	2207      	movs	r2, #7
 80156c2:	601a      	str	r2, [r3, #0]
}
 80156c4:	bf00      	nop
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	e000e010 	.word	0xe000e010
 80156d4:	e000e018 	.word	0xe000e018
 80156d8:	20000000 	.word	0x20000000
 80156dc:	10624dd3 	.word	0x10624dd3
 80156e0:	e000e014 	.word	0xe000e014

080156e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80156e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80156f4 <vPortEnableVFP+0x10>
 80156e8:	6801      	ldr	r1, [r0, #0]
 80156ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80156ee:	6001      	str	r1, [r0, #0]
 80156f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80156f2:	bf00      	nop
 80156f4:	e000ed88 	.word	0xe000ed88

080156f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80156f8:	b480      	push	{r7}
 80156fa:	b085      	sub	sp, #20
 80156fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80156fe:	f3ef 8305 	mrs	r3, IPSR
 8015702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2b0f      	cmp	r3, #15
 8015708:	d915      	bls.n	8015736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801570a:	4a18      	ldr	r2, [pc, #96]	; (801576c <vPortValidateInterruptPriority+0x74>)
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	4413      	add	r3, r2
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015714:	4b16      	ldr	r3, [pc, #88]	; (8015770 <vPortValidateInterruptPriority+0x78>)
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	7afa      	ldrb	r2, [r7, #11]
 801571a:	429a      	cmp	r2, r3
 801571c:	d20b      	bcs.n	8015736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015722:	b672      	cpsid	i
 8015724:	f383 8811 	msr	BASEPRI, r3
 8015728:	f3bf 8f6f 	isb	sy
 801572c:	f3bf 8f4f 	dsb	sy
 8015730:	b662      	cpsie	i
 8015732:	607b      	str	r3, [r7, #4]
 8015734:	e7fe      	b.n	8015734 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015736:	4b0f      	ldr	r3, [pc, #60]	; (8015774 <vPortValidateInterruptPriority+0x7c>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801573e:	4b0e      	ldr	r3, [pc, #56]	; (8015778 <vPortValidateInterruptPriority+0x80>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	429a      	cmp	r2, r3
 8015744:	d90b      	bls.n	801575e <vPortValidateInterruptPriority+0x66>
 8015746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574a:	b672      	cpsid	i
 801574c:	f383 8811 	msr	BASEPRI, r3
 8015750:	f3bf 8f6f 	isb	sy
 8015754:	f3bf 8f4f 	dsb	sy
 8015758:	b662      	cpsie	i
 801575a:	603b      	str	r3, [r7, #0]
 801575c:	e7fe      	b.n	801575c <vPortValidateInterruptPriority+0x64>
	}
 801575e:	bf00      	nop
 8015760:	3714      	adds	r7, #20
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	e000e3f0 	.word	0xe000e3f0
 8015770:	20001e00 	.word	0x20001e00
 8015774:	e000ed0c 	.word	0xe000ed0c
 8015778:	20001e04 	.word	0x20001e04

0801577c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b08a      	sub	sp, #40	; 0x28
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015784:	2300      	movs	r3, #0
 8015786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015788:	f7fe fd7e 	bl	8014288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801578c:	4b5c      	ldr	r3, [pc, #368]	; (8015900 <pvPortMalloc+0x184>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d101      	bne.n	8015798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015794:	f000 f91a 	bl	80159cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015798:	4b5a      	ldr	r3, [pc, #360]	; (8015904 <pvPortMalloc+0x188>)
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	4013      	ands	r3, r2
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f040 8090 	bne.w	80158c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d01e      	beq.n	80157ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80157ac:	2208      	movs	r2, #8
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	4413      	add	r3, r2
 80157b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f003 0307 	and.w	r3, r3, #7
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d015      	beq.n	80157ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f023 0307 	bic.w	r3, r3, #7
 80157c4:	3308      	adds	r3, #8
 80157c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f003 0307 	and.w	r3, r3, #7
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d00b      	beq.n	80157ea <pvPortMalloc+0x6e>
 80157d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d6:	b672      	cpsid	i
 80157d8:	f383 8811 	msr	BASEPRI, r3
 80157dc:	f3bf 8f6f 	isb	sy
 80157e0:	f3bf 8f4f 	dsb	sy
 80157e4:	b662      	cpsie	i
 80157e6:	617b      	str	r3, [r7, #20]
 80157e8:	e7fe      	b.n	80157e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d06a      	beq.n	80158c6 <pvPortMalloc+0x14a>
 80157f0:	4b45      	ldr	r3, [pc, #276]	; (8015908 <pvPortMalloc+0x18c>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d865      	bhi.n	80158c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80157fa:	4b44      	ldr	r3, [pc, #272]	; (801590c <pvPortMalloc+0x190>)
 80157fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80157fe:	4b43      	ldr	r3, [pc, #268]	; (801590c <pvPortMalloc+0x190>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015804:	e004      	b.n	8015810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	429a      	cmp	r2, r3
 8015818:	d903      	bls.n	8015822 <pvPortMalloc+0xa6>
 801581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d1f1      	bne.n	8015806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015822:	4b37      	ldr	r3, [pc, #220]	; (8015900 <pvPortMalloc+0x184>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015828:	429a      	cmp	r2, r3
 801582a:	d04c      	beq.n	80158c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801582c:	6a3b      	ldr	r3, [r7, #32]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	2208      	movs	r2, #8
 8015832:	4413      	add	r3, r2
 8015834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	6a3b      	ldr	r3, [r7, #32]
 801583c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	685a      	ldr	r2, [r3, #4]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	1ad2      	subs	r2, r2, r3
 8015846:	2308      	movs	r3, #8
 8015848:	005b      	lsls	r3, r3, #1
 801584a:	429a      	cmp	r2, r3
 801584c:	d920      	bls.n	8015890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	4413      	add	r3, r2
 8015854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	f003 0307 	and.w	r3, r3, #7
 801585c:	2b00      	cmp	r3, #0
 801585e:	d00b      	beq.n	8015878 <pvPortMalloc+0xfc>
 8015860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015864:	b672      	cpsid	i
 8015866:	f383 8811 	msr	BASEPRI, r3
 801586a:	f3bf 8f6f 	isb	sy
 801586e:	f3bf 8f4f 	dsb	sy
 8015872:	b662      	cpsie	i
 8015874:	613b      	str	r3, [r7, #16]
 8015876:	e7fe      	b.n	8015876 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587a:	685a      	ldr	r2, [r3, #4]
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	1ad2      	subs	r2, r2, r3
 8015880:	69bb      	ldr	r3, [r7, #24]
 8015882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801588a:	69b8      	ldr	r0, [r7, #24]
 801588c:	f000 f900 	bl	8015a90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015890:	4b1d      	ldr	r3, [pc, #116]	; (8015908 <pvPortMalloc+0x18c>)
 8015892:	681a      	ldr	r2, [r3, #0]
 8015894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	1ad3      	subs	r3, r2, r3
 801589a:	4a1b      	ldr	r2, [pc, #108]	; (8015908 <pvPortMalloc+0x18c>)
 801589c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801589e:	4b1a      	ldr	r3, [pc, #104]	; (8015908 <pvPortMalloc+0x18c>)
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	4b1b      	ldr	r3, [pc, #108]	; (8015910 <pvPortMalloc+0x194>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d203      	bcs.n	80158b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80158aa:	4b17      	ldr	r3, [pc, #92]	; (8015908 <pvPortMalloc+0x18c>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4a18      	ldr	r2, [pc, #96]	; (8015910 <pvPortMalloc+0x194>)
 80158b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80158b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b4:	685a      	ldr	r2, [r3, #4]
 80158b6:	4b13      	ldr	r3, [pc, #76]	; (8015904 <pvPortMalloc+0x188>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	431a      	orrs	r2, r3
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80158c6:	f7fe fced 	bl	80142a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d101      	bne.n	80158d4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80158d0:	f7eb fbc0 	bl	8001054 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	f003 0307 	and.w	r3, r3, #7
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00b      	beq.n	80158f6 <pvPortMalloc+0x17a>
 80158de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e2:	b672      	cpsid	i
 80158e4:	f383 8811 	msr	BASEPRI, r3
 80158e8:	f3bf 8f6f 	isb	sy
 80158ec:	f3bf 8f4f 	dsb	sy
 80158f0:	b662      	cpsie	i
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	e7fe      	b.n	80158f4 <pvPortMalloc+0x178>
	return pvReturn;
 80158f6:	69fb      	ldr	r3, [r7, #28]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3728      	adds	r7, #40	; 0x28
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	20009e10 	.word	0x20009e10
 8015904:	20009e1c 	.word	0x20009e1c
 8015908:	20009e14 	.word	0x20009e14
 801590c:	20009e08 	.word	0x20009e08
 8015910:	20009e18 	.word	0x20009e18

08015914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b086      	sub	sp, #24
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d04a      	beq.n	80159bc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015926:	2308      	movs	r3, #8
 8015928:	425b      	negs	r3, r3
 801592a:	697a      	ldr	r2, [r7, #20]
 801592c:	4413      	add	r3, r2
 801592e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	685a      	ldr	r2, [r3, #4]
 8015938:	4b22      	ldr	r3, [pc, #136]	; (80159c4 <vPortFree+0xb0>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	4013      	ands	r3, r2
 801593e:	2b00      	cmp	r3, #0
 8015940:	d10b      	bne.n	801595a <vPortFree+0x46>
 8015942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015946:	b672      	cpsid	i
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	b662      	cpsie	i
 8015956:	60fb      	str	r3, [r7, #12]
 8015958:	e7fe      	b.n	8015958 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00b      	beq.n	801597a <vPortFree+0x66>
 8015962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015966:	b672      	cpsid	i
 8015968:	f383 8811 	msr	BASEPRI, r3
 801596c:	f3bf 8f6f 	isb	sy
 8015970:	f3bf 8f4f 	dsb	sy
 8015974:	b662      	cpsie	i
 8015976:	60bb      	str	r3, [r7, #8]
 8015978:	e7fe      	b.n	8015978 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	685a      	ldr	r2, [r3, #4]
 801597e:	4b11      	ldr	r3, [pc, #68]	; (80159c4 <vPortFree+0xb0>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	4013      	ands	r3, r2
 8015984:	2b00      	cmp	r3, #0
 8015986:	d019      	beq.n	80159bc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d115      	bne.n	80159bc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	685a      	ldr	r2, [r3, #4]
 8015994:	4b0b      	ldr	r3, [pc, #44]	; (80159c4 <vPortFree+0xb0>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	43db      	mvns	r3, r3
 801599a:	401a      	ands	r2, r3
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80159a0:	f7fe fc72 	bl	8014288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	685a      	ldr	r2, [r3, #4]
 80159a8:	4b07      	ldr	r3, [pc, #28]	; (80159c8 <vPortFree+0xb4>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4413      	add	r3, r2
 80159ae:	4a06      	ldr	r2, [pc, #24]	; (80159c8 <vPortFree+0xb4>)
 80159b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80159b2:	6938      	ldr	r0, [r7, #16]
 80159b4:	f000 f86c 	bl	8015a90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80159b8:	f7fe fc74 	bl	80142a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80159bc:	bf00      	nop
 80159be:	3718      	adds	r7, #24
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	20009e1c 	.word	0x20009e1c
 80159c8:	20009e14 	.word	0x20009e14

080159cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80159cc:	b480      	push	{r7}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80159d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80159d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80159d8:	4b27      	ldr	r3, [pc, #156]	; (8015a78 <prvHeapInit+0xac>)
 80159da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	f003 0307 	and.w	r3, r3, #7
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00c      	beq.n	8015a00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	3307      	adds	r3, #7
 80159ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f023 0307 	bic.w	r3, r3, #7
 80159f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80159f4:	68ba      	ldr	r2, [r7, #8]
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	1ad3      	subs	r3, r2, r3
 80159fa:	4a1f      	ldr	r2, [pc, #124]	; (8015a78 <prvHeapInit+0xac>)
 80159fc:	4413      	add	r3, r2
 80159fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015a04:	4a1d      	ldr	r2, [pc, #116]	; (8015a7c <prvHeapInit+0xb0>)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015a0a:	4b1c      	ldr	r3, [pc, #112]	; (8015a7c <prvHeapInit+0xb0>)
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	68ba      	ldr	r2, [r7, #8]
 8015a14:	4413      	add	r3, r2
 8015a16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015a18:	2208      	movs	r2, #8
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	1a9b      	subs	r3, r3, r2
 8015a1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f023 0307 	bic.w	r3, r3, #7
 8015a26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	4a15      	ldr	r2, [pc, #84]	; (8015a80 <prvHeapInit+0xb4>)
 8015a2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015a2e:	4b14      	ldr	r3, [pc, #80]	; (8015a80 <prvHeapInit+0xb4>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2200      	movs	r2, #0
 8015a34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015a36:	4b12      	ldr	r3, [pc, #72]	; (8015a80 <prvHeapInit+0xb4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	68fa      	ldr	r2, [r7, #12]
 8015a46:	1ad2      	subs	r2, r2, r3
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015a4c:	4b0c      	ldr	r3, [pc, #48]	; (8015a80 <prvHeapInit+0xb4>)
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	4a0a      	ldr	r2, [pc, #40]	; (8015a84 <prvHeapInit+0xb8>)
 8015a5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	4a09      	ldr	r2, [pc, #36]	; (8015a88 <prvHeapInit+0xbc>)
 8015a62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015a64:	4b09      	ldr	r3, [pc, #36]	; (8015a8c <prvHeapInit+0xc0>)
 8015a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015a6a:	601a      	str	r2, [r3, #0]
}
 8015a6c:	bf00      	nop
 8015a6e:	3714      	adds	r7, #20
 8015a70:	46bd      	mov	sp, r7
 8015a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a76:	4770      	bx	lr
 8015a78:	20001e08 	.word	0x20001e08
 8015a7c:	20009e08 	.word	0x20009e08
 8015a80:	20009e10 	.word	0x20009e10
 8015a84:	20009e18 	.word	0x20009e18
 8015a88:	20009e14 	.word	0x20009e14
 8015a8c:	20009e1c 	.word	0x20009e1c

08015a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015a90:	b480      	push	{r7}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015a98:	4b28      	ldr	r3, [pc, #160]	; (8015b3c <prvInsertBlockIntoFreeList+0xac>)
 8015a9a:	60fb      	str	r3, [r7, #12]
 8015a9c:	e002      	b.n	8015aa4 <prvInsertBlockIntoFreeList+0x14>
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	60fb      	str	r3, [r7, #12]
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d8f7      	bhi.n	8015a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	4413      	add	r3, r2
 8015aba:	687a      	ldr	r2, [r7, #4]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d108      	bne.n	8015ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	441a      	add	r2, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	68ba      	ldr	r2, [r7, #8]
 8015adc:	441a      	add	r2, r3
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d118      	bne.n	8015b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	4b15      	ldr	r3, [pc, #84]	; (8015b40 <prvInsertBlockIntoFreeList+0xb0>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d00d      	beq.n	8015b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	685a      	ldr	r2, [r3, #4]
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	441a      	add	r2, r3
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	681a      	ldr	r2, [r3, #0]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	601a      	str	r2, [r3, #0]
 8015b0c:	e008      	b.n	8015b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015b0e:	4b0c      	ldr	r3, [pc, #48]	; (8015b40 <prvInsertBlockIntoFreeList+0xb0>)
 8015b10:	681a      	ldr	r2, [r3, #0]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	601a      	str	r2, [r3, #0]
 8015b16:	e003      	b.n	8015b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015b20:	68fa      	ldr	r2, [r7, #12]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d002      	beq.n	8015b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	687a      	ldr	r2, [r7, #4]
 8015b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b2e:	bf00      	nop
 8015b30:	3714      	adds	r7, #20
 8015b32:	46bd      	mov	sp, r7
 8015b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop
 8015b3c:	20009e08 	.word	0x20009e08
 8015b40:	20009e10 	.word	0x20009e10

08015b44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015b48:	2201      	movs	r2, #1
 8015b4a:	490e      	ldr	r1, [pc, #56]	; (8015b84 <MX_USB_HOST_Init+0x40>)
 8015b4c:	480e      	ldr	r0, [pc, #56]	; (8015b88 <MX_USB_HOST_Init+0x44>)
 8015b4e:	f7fb f8a5 	bl	8010c9c <USBH_Init>
 8015b52:	4603      	mov	r3, r0
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015b58:	f7ec fec4 	bl	80028e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015b5c:	490b      	ldr	r1, [pc, #44]	; (8015b8c <MX_USB_HOST_Init+0x48>)
 8015b5e:	480a      	ldr	r0, [pc, #40]	; (8015b88 <MX_USB_HOST_Init+0x44>)
 8015b60:	f7fb f94c 	bl	8010dfc <USBH_RegisterClass>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d001      	beq.n	8015b6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015b6a:	f7ec febb 	bl	80028e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015b6e:	4806      	ldr	r0, [pc, #24]	; (8015b88 <MX_USB_HOST_Init+0x44>)
 8015b70:	f7fb f9d0 	bl	8010f14 <USBH_Start>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d001      	beq.n	8015b7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015b7a:	f7ec feb3 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015b7e:	bf00      	nop
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	08015b91 	.word	0x08015b91
 8015b88:	2001ba08 	.word	0x2001ba08
 8015b8c:	2000004c 	.word	0x2000004c

08015b90 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015b90:	b480      	push	{r7}
 8015b92:	b083      	sub	sp, #12
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
 8015b98:	460b      	mov	r3, r1
 8015b9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015b9c:	78fb      	ldrb	r3, [r7, #3]
 8015b9e:	3b01      	subs	r3, #1
 8015ba0:	2b04      	cmp	r3, #4
 8015ba2:	d819      	bhi.n	8015bd8 <USBH_UserProcess+0x48>
 8015ba4:	a201      	add	r2, pc, #4	; (adr r2, 8015bac <USBH_UserProcess+0x1c>)
 8015ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015baa:	bf00      	nop
 8015bac:	08015bd9 	.word	0x08015bd9
 8015bb0:	08015bc9 	.word	0x08015bc9
 8015bb4:	08015bd9 	.word	0x08015bd9
 8015bb8:	08015bd1 	.word	0x08015bd1
 8015bbc:	08015bc1 	.word	0x08015bc1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015bc0:	4b09      	ldr	r3, [pc, #36]	; (8015be8 <USBH_UserProcess+0x58>)
 8015bc2:	2203      	movs	r2, #3
 8015bc4:	701a      	strb	r2, [r3, #0]
  break;
 8015bc6:	e008      	b.n	8015bda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015bc8:	4b07      	ldr	r3, [pc, #28]	; (8015be8 <USBH_UserProcess+0x58>)
 8015bca:	2202      	movs	r2, #2
 8015bcc:	701a      	strb	r2, [r3, #0]
  break;
 8015bce:	e004      	b.n	8015bda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015bd0:	4b05      	ldr	r3, [pc, #20]	; (8015be8 <USBH_UserProcess+0x58>)
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	701a      	strb	r2, [r3, #0]
  break;
 8015bd6:	e000      	b.n	8015bda <USBH_UserProcess+0x4a>

  default:
  break;
 8015bd8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015bda:	bf00      	nop
 8015bdc:	370c      	adds	r7, #12
 8015bde:	46bd      	mov	sp, r7
 8015be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be4:	4770      	bx	lr
 8015be6:	bf00      	nop
 8015be8:	20009e20 	.word	0x20009e20

08015bec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b08a      	sub	sp, #40	; 0x28
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015bf4:	f107 0314 	add.w	r3, r7, #20
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	601a      	str	r2, [r3, #0]
 8015bfc:	605a      	str	r2, [r3, #4]
 8015bfe:	609a      	str	r2, [r3, #8]
 8015c00:	60da      	str	r2, [r3, #12]
 8015c02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015c0c:	d13c      	bne.n	8015c88 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c0e:	4b20      	ldr	r3, [pc, #128]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c12:	4a1f      	ldr	r2, [pc, #124]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c14:	f043 0301 	orr.w	r3, r3, #1
 8015c18:	6313      	str	r3, [r2, #48]	; 0x30
 8015c1a:	4b1d      	ldr	r3, [pc, #116]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1e:	f003 0301 	and.w	r3, r3, #1
 8015c22:	613b      	str	r3, [r7, #16]
 8015c24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8015c26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c30:	2300      	movs	r3, #0
 8015c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c34:	2303      	movs	r3, #3
 8015c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015c38:	230a      	movs	r3, #10
 8015c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c3c:	f107 0314 	add.w	r3, r7, #20
 8015c40:	4619      	mov	r1, r3
 8015c42:	4814      	ldr	r0, [pc, #80]	; (8015c94 <HAL_HCD_MspInit+0xa8>)
 8015c44:	f7f2 fa1e 	bl	8008084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c48:	4b11      	ldr	r3, [pc, #68]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c4c:	4a10      	ldr	r2, [pc, #64]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c52:	6353      	str	r3, [r2, #52]	; 0x34
 8015c54:	4b0e      	ldr	r3, [pc, #56]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c5c:	60fb      	str	r3, [r7, #12]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	4b0b      	ldr	r3, [pc, #44]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c64:	4a0a      	ldr	r2, [pc, #40]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8015c6c:	4b08      	ldr	r3, [pc, #32]	; (8015c90 <HAL_HCD_MspInit+0xa4>)
 8015c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015c74:	60bb      	str	r3, [r7, #8]
 8015c76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015c78:	2200      	movs	r2, #0
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	2043      	movs	r0, #67	; 0x43
 8015c7e:	f7f1 f903 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015c82:	2043      	movs	r0, #67	; 0x43
 8015c84:	f7f1 f91c 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015c88:	bf00      	nop
 8015c8a:	3728      	adds	r7, #40	; 0x28
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	40023800 	.word	0x40023800
 8015c94:	40020000 	.word	0x40020000

08015c98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7fb fde1 	bl	801186e <USBH_LL_IncTimer>
}
 8015cac:	bf00      	nop
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b082      	sub	sp, #8
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fb fe25 	bl	8011912 <USBH_LL_Connect>
}
 8015cc8:	bf00      	nop
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7fb fe3a 	bl	8011958 <USBH_LL_Disconnect>
}
 8015ce4:	bf00      	nop
 8015ce6:	3708      	adds	r7, #8
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	70fb      	strb	r3, [r7, #3]
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7fb fe71 	bl	80119ea <USBH_LL_NotifyURBChange>
#endif
}
 8015d08:	bf00      	nop
 8015d0a:	3708      	adds	r7, #8
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7fb fdcf 	bl	80118c2 <USBH_LL_PortEnabled>
}
 8015d24:	bf00      	nop
 8015d26:	3708      	adds	r7, #8
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fb fddb 	bl	80118f6 <USBH_LL_PortDisabled>
}
 8015d40:	bf00      	nop
 8015d42:	3708      	adds	r7, #8
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}

08015d48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	d12a      	bne.n	8015db0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015d5a:	4a18      	ldr	r2, [pc, #96]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4a15      	ldr	r2, [pc, #84]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015d6a:	4b14      	ldr	r3, [pc, #80]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015d70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015d72:	4b12      	ldr	r3, [pc, #72]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d74:	2208      	movs	r2, #8
 8015d76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015d78:	4b10      	ldr	r3, [pc, #64]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d7a:	2201      	movs	r2, #1
 8015d7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015d7e:	4b0f      	ldr	r3, [pc, #60]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015d84:	4b0d      	ldr	r3, [pc, #52]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d86:	2202      	movs	r2, #2
 8015d88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d8a:	4b0c      	ldr	r3, [pc, #48]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015d90:	480a      	ldr	r0, [pc, #40]	; (8015dbc <USBH_LL_Init+0x74>)
 8015d92:	f7f2 fc5d 	bl	8008650 <HAL_HCD_Init>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d001      	beq.n	8015da0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015d9c:	f7ec fda2 	bl	80028e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015da0:	4806      	ldr	r0, [pc, #24]	; (8015dbc <USBH_LL_Init+0x74>)
 8015da2:	f7f3 f861 	bl	8008e68 <HAL_HCD_GetCurrentFrame>
 8015da6:	4603      	mov	r3, r0
 8015da8:	4619      	mov	r1, r3
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f7fb fd50 	bl	8011850 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3708      	adds	r7, #8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	2001bdec 	.word	0x2001bdec

08015dc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7f2 ffce 	bl	8008d78 <HAL_HCD_Start>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015de0:	7bfb      	ldrb	r3, [r7, #15]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f000 f95c 	bl	80160a0 <USBH_Get_USB_Status>
 8015de8:	4603      	mov	r3, r0
 8015dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3710      	adds	r7, #16
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b084      	sub	sp, #16
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e02:	2300      	movs	r3, #0
 8015e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f2 ffd6 	bl	8008dbe <HAL_HCD_Stop>
 8015e12:	4603      	mov	r3, r0
 8015e14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015e16:	7bfb      	ldrb	r3, [r7, #15]
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f000 f941 	bl	80160a0 <USBH_Get_USB_Status>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3710      	adds	r7, #16
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}

08015e2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015e34:	2301      	movs	r3, #1
 8015e36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7f3 f820 	bl	8008e84 <HAL_HCD_GetCurrentSpeed>
 8015e44:	4603      	mov	r3, r0
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d007      	beq.n	8015e5a <USBH_LL_GetSpeed+0x2e>
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d302      	bcc.n	8015e54 <USBH_LL_GetSpeed+0x28>
 8015e4e:	2b02      	cmp	r3, #2
 8015e50:	d006      	beq.n	8015e60 <USBH_LL_GetSpeed+0x34>
 8015e52:	e008      	b.n	8015e66 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015e54:	2300      	movs	r3, #0
 8015e56:	73fb      	strb	r3, [r7, #15]
    break;
 8015e58:	e008      	b.n	8015e6c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8015e5e:	e005      	b.n	8015e6c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015e60:	2302      	movs	r3, #2
 8015e62:	73fb      	strb	r3, [r7, #15]
    break;
 8015e64:	e002      	b.n	8015e6c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8015e66:	2301      	movs	r3, #1
 8015e68:	73fb      	strb	r3, [r7, #15]
    break;
 8015e6a:	bf00      	nop
  }
  return  speed;
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3710      	adds	r7, #16
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}

08015e76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015e76:	b580      	push	{r7, lr}
 8015e78:	b084      	sub	sp, #16
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e7e:	2300      	movs	r3, #0
 8015e80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015e82:	2300      	movs	r3, #0
 8015e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7f2 ffb3 	bl	8008df8 <HAL_HCD_ResetPort>
 8015e92:	4603      	mov	r3, r0
 8015e94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015e96:	7bfb      	ldrb	r3, [r7, #15]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f000 f901 	bl	80160a0 <USBH_Get_USB_Status>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	460b      	mov	r3, r1
 8015eb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015ebe:	78fa      	ldrb	r2, [r7, #3]
 8015ec0:	4611      	mov	r1, r2
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7f2 ffbb 	bl	8008e3e <HAL_HCD_HC_GetXferCount>
 8015ec8:	4603      	mov	r3, r0
}
 8015eca:	4618      	mov	r0, r3
 8015ecc:	3708      	adds	r7, #8
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}

08015ed2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015ed2:	b590      	push	{r4, r7, lr}
 8015ed4:	b089      	sub	sp, #36	; 0x24
 8015ed6:	af04      	add	r7, sp, #16
 8015ed8:	6078      	str	r0, [r7, #4]
 8015eda:	4608      	mov	r0, r1
 8015edc:	4611      	mov	r1, r2
 8015ede:	461a      	mov	r2, r3
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	70fb      	strb	r3, [r7, #3]
 8015ee4:	460b      	mov	r3, r1
 8015ee6:	70bb      	strb	r3, [r7, #2]
 8015ee8:	4613      	mov	r3, r2
 8015eea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eec:	2300      	movs	r3, #0
 8015eee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015efa:	787c      	ldrb	r4, [r7, #1]
 8015efc:	78ba      	ldrb	r2, [r7, #2]
 8015efe:	78f9      	ldrb	r1, [r7, #3]
 8015f00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015f02:	9302      	str	r3, [sp, #8]
 8015f04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f08:	9301      	str	r3, [sp, #4]
 8015f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015f0e:	9300      	str	r3, [sp, #0]
 8015f10:	4623      	mov	r3, r4
 8015f12:	f7f2 fbff 	bl	8008714 <HAL_HCD_HC_Init>
 8015f16:	4603      	mov	r3, r0
 8015f18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f1a:	7bfb      	ldrb	r3, [r7, #15]
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f000 f8bf 	bl	80160a0 <USBH_Get_USB_Status>
 8015f22:	4603      	mov	r3, r0
 8015f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd90      	pop	{r4, r7, pc}

08015f30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	460b      	mov	r3, r1
 8015f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f40:	2300      	movs	r3, #0
 8015f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015f4a:	78fa      	ldrb	r2, [r7, #3]
 8015f4c:	4611      	mov	r1, r2
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f2 fc78 	bl	8008844 <HAL_HCD_HC_Halt>
 8015f54:	4603      	mov	r3, r0
 8015f56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015f58:	7bfb      	ldrb	r3, [r7, #15]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 f8a0 	bl	80160a0 <USBH_Get_USB_Status>
 8015f60:	4603      	mov	r3, r0
 8015f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015f6e:	b590      	push	{r4, r7, lr}
 8015f70:	b089      	sub	sp, #36	; 0x24
 8015f72:	af04      	add	r7, sp, #16
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	4608      	mov	r0, r1
 8015f78:	4611      	mov	r1, r2
 8015f7a:	461a      	mov	r2, r3
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	70fb      	strb	r3, [r7, #3]
 8015f80:	460b      	mov	r3, r1
 8015f82:	70bb      	strb	r3, [r7, #2]
 8015f84:	4613      	mov	r3, r2
 8015f86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015f96:	787c      	ldrb	r4, [r7, #1]
 8015f98:	78ba      	ldrb	r2, [r7, #2]
 8015f9a:	78f9      	ldrb	r1, [r7, #3]
 8015f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015fa0:	9303      	str	r3, [sp, #12]
 8015fa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015fa4:	9302      	str	r3, [sp, #8]
 8015fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa8:	9301      	str	r3, [sp, #4]
 8015faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	4623      	mov	r3, r4
 8015fb2:	f7f2 fc6b 	bl	800888c <HAL_HCD_HC_SubmitRequest>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015fba:	7bfb      	ldrb	r3, [r7, #15]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f000 f86f 	bl	80160a0 <USBH_Get_USB_Status>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3714      	adds	r7, #20
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd90      	pop	{r4, r7, pc}

08015fd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	460b      	mov	r3, r1
 8015fda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015fe2:	78fa      	ldrb	r2, [r7, #3]
 8015fe4:	4611      	mov	r1, r2
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7f2 ff14 	bl	8008e14 <HAL_HCD_HC_GetURBState>
 8015fec:	4603      	mov	r3, r0
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3708      	adds	r7, #8
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}

08015ff6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015ff6:	b580      	push	{r7, lr}
 8015ff8:	b082      	sub	sp, #8
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
 8015ffe:	460b      	mov	r3, r1
 8016000:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8016008:	2b01      	cmp	r3, #1
 801600a:	d103      	bne.n	8016014 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801600c:	78fb      	ldrb	r3, [r7, #3]
 801600e:	4618      	mov	r0, r3
 8016010:	f000 f872 	bl	80160f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016014:	20c8      	movs	r0, #200	; 0xc8
 8016016:	f7f0 fbd5 	bl	80067c4 <HAL_Delay>
  return USBH_OK;
 801601a:	2300      	movs	r3, #0
}
 801601c:	4618      	mov	r0, r3
 801601e:	3708      	adds	r7, #8
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}

08016024 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016024:	b480      	push	{r7}
 8016026:	b085      	sub	sp, #20
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	460b      	mov	r3, r1
 801602e:	70fb      	strb	r3, [r7, #3]
 8016030:	4613      	mov	r3, r2
 8016032:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801603a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801603c:	78fa      	ldrb	r2, [r7, #3]
 801603e:	68f9      	ldr	r1, [r7, #12]
 8016040:	4613      	mov	r3, r2
 8016042:	009b      	lsls	r3, r3, #2
 8016044:	4413      	add	r3, r2
 8016046:	00db      	lsls	r3, r3, #3
 8016048:	440b      	add	r3, r1
 801604a:	333b      	adds	r3, #59	; 0x3b
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d00a      	beq.n	8016068 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016052:	78fa      	ldrb	r2, [r7, #3]
 8016054:	68f9      	ldr	r1, [r7, #12]
 8016056:	4613      	mov	r3, r2
 8016058:	009b      	lsls	r3, r3, #2
 801605a:	4413      	add	r3, r2
 801605c:	00db      	lsls	r3, r3, #3
 801605e:	440b      	add	r3, r1
 8016060:	3350      	adds	r3, #80	; 0x50
 8016062:	78ba      	ldrb	r2, [r7, #2]
 8016064:	701a      	strb	r2, [r3, #0]
 8016066:	e009      	b.n	801607c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016068:	78fa      	ldrb	r2, [r7, #3]
 801606a:	68f9      	ldr	r1, [r7, #12]
 801606c:	4613      	mov	r3, r2
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	440b      	add	r3, r1
 8016076:	3351      	adds	r3, #81	; 0x51
 8016078:	78ba      	ldrb	r2, [r7, #2]
 801607a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801607c:	2300      	movs	r3, #0
}
 801607e:	4618      	mov	r0, r3
 8016080:	3714      	adds	r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr

0801608a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801608a:	b580      	push	{r7, lr}
 801608c:	b082      	sub	sp, #8
 801608e:	af00      	add	r7, sp, #0
 8016090:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7f0 fb96 	bl	80067c4 <HAL_Delay>
}
 8016098:	bf00      	nop
 801609a:	3708      	adds	r7, #8
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80160a0:	b480      	push	{r7}
 80160a2:	b085      	sub	sp, #20
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	4603      	mov	r3, r0
 80160a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80160aa:	2300      	movs	r3, #0
 80160ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80160ae:	79fb      	ldrb	r3, [r7, #7]
 80160b0:	2b03      	cmp	r3, #3
 80160b2:	d817      	bhi.n	80160e4 <USBH_Get_USB_Status+0x44>
 80160b4:	a201      	add	r2, pc, #4	; (adr r2, 80160bc <USBH_Get_USB_Status+0x1c>)
 80160b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ba:	bf00      	nop
 80160bc:	080160cd 	.word	0x080160cd
 80160c0:	080160d3 	.word	0x080160d3
 80160c4:	080160d9 	.word	0x080160d9
 80160c8:	080160df 	.word	0x080160df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80160cc:	2300      	movs	r3, #0
 80160ce:	73fb      	strb	r3, [r7, #15]
    break;
 80160d0:	e00b      	b.n	80160ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80160d2:	2302      	movs	r3, #2
 80160d4:	73fb      	strb	r3, [r7, #15]
    break;
 80160d6:	e008      	b.n	80160ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80160d8:	2301      	movs	r3, #1
 80160da:	73fb      	strb	r3, [r7, #15]
    break;
 80160dc:	e005      	b.n	80160ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80160de:	2302      	movs	r3, #2
 80160e0:	73fb      	strb	r3, [r7, #15]
    break;
 80160e2:	e002      	b.n	80160ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80160e4:	2302      	movs	r3, #2
 80160e6:	73fb      	strb	r3, [r7, #15]
    break;
 80160e8:	bf00      	nop
  }
  return usb_status;
 80160ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	3714      	adds	r7, #20
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr

080160f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8016102:	79fb      	ldrb	r3, [r7, #7]
 8016104:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016106:	79fb      	ldrb	r3, [r7, #7]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d102      	bne.n	8016112 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801610c:	2301      	movs	r3, #1
 801610e:	73fb      	strb	r3, [r7, #15]
 8016110:	e001      	b.n	8016116 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8016112:	2300      	movs	r3, #0
 8016114:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8016116:	7bfb      	ldrb	r3, [r7, #15]
 8016118:	461a      	mov	r2, r3
 801611a:	2120      	movs	r1, #32
 801611c:	4803      	ldr	r0, [pc, #12]	; (801612c <MX_DriverVbusFS+0x34>)
 801611e:	f7f2 fa65 	bl	80085ec <HAL_GPIO_WritePin>
}
 8016122:	bf00      	nop
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	40020c00 	.word	0x40020c00

08016130 <__errno>:
 8016130:	4b01      	ldr	r3, [pc, #4]	; (8016138 <__errno+0x8>)
 8016132:	6818      	ldr	r0, [r3, #0]
 8016134:	4770      	bx	lr
 8016136:	bf00      	nop
 8016138:	20000070 	.word	0x20000070

0801613c <__libc_init_array>:
 801613c:	b570      	push	{r4, r5, r6, lr}
 801613e:	4e0d      	ldr	r6, [pc, #52]	; (8016174 <__libc_init_array+0x38>)
 8016140:	4c0d      	ldr	r4, [pc, #52]	; (8016178 <__libc_init_array+0x3c>)
 8016142:	1ba4      	subs	r4, r4, r6
 8016144:	10a4      	asrs	r4, r4, #2
 8016146:	2500      	movs	r5, #0
 8016148:	42a5      	cmp	r5, r4
 801614a:	d109      	bne.n	8016160 <__libc_init_array+0x24>
 801614c:	4e0b      	ldr	r6, [pc, #44]	; (801617c <__libc_init_array+0x40>)
 801614e:	4c0c      	ldr	r4, [pc, #48]	; (8016180 <__libc_init_array+0x44>)
 8016150:	f000 fdfc 	bl	8016d4c <_init>
 8016154:	1ba4      	subs	r4, r4, r6
 8016156:	10a4      	asrs	r4, r4, #2
 8016158:	2500      	movs	r5, #0
 801615a:	42a5      	cmp	r5, r4
 801615c:	d105      	bne.n	801616a <__libc_init_array+0x2e>
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016164:	4798      	blx	r3
 8016166:	3501      	adds	r5, #1
 8016168:	e7ee      	b.n	8016148 <__libc_init_array+0xc>
 801616a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801616e:	4798      	blx	r3
 8016170:	3501      	adds	r5, #1
 8016172:	e7f2      	b.n	801615a <__libc_init_array+0x1e>
 8016174:	08018ad4 	.word	0x08018ad4
 8016178:	08018ad4 	.word	0x08018ad4
 801617c:	08018ad4 	.word	0x08018ad4
 8016180:	08018ad8 	.word	0x08018ad8

08016184 <malloc>:
 8016184:	4b02      	ldr	r3, [pc, #8]	; (8016190 <malloc+0xc>)
 8016186:	4601      	mov	r1, r0
 8016188:	6818      	ldr	r0, [r3, #0]
 801618a:	f000 b86d 	b.w	8016268 <_malloc_r>
 801618e:	bf00      	nop
 8016190:	20000070 	.word	0x20000070

08016194 <free>:
 8016194:	4b02      	ldr	r3, [pc, #8]	; (80161a0 <free+0xc>)
 8016196:	4601      	mov	r1, r0
 8016198:	6818      	ldr	r0, [r3, #0]
 801619a:	f000 b817 	b.w	80161cc <_free_r>
 801619e:	bf00      	nop
 80161a0:	20000070 	.word	0x20000070

080161a4 <memcpy>:
 80161a4:	b510      	push	{r4, lr}
 80161a6:	1e43      	subs	r3, r0, #1
 80161a8:	440a      	add	r2, r1
 80161aa:	4291      	cmp	r1, r2
 80161ac:	d100      	bne.n	80161b0 <memcpy+0xc>
 80161ae:	bd10      	pop	{r4, pc}
 80161b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161b8:	e7f7      	b.n	80161aa <memcpy+0x6>

080161ba <memset>:
 80161ba:	4402      	add	r2, r0
 80161bc:	4603      	mov	r3, r0
 80161be:	4293      	cmp	r3, r2
 80161c0:	d100      	bne.n	80161c4 <memset+0xa>
 80161c2:	4770      	bx	lr
 80161c4:	f803 1b01 	strb.w	r1, [r3], #1
 80161c8:	e7f9      	b.n	80161be <memset+0x4>
	...

080161cc <_free_r>:
 80161cc:	b538      	push	{r3, r4, r5, lr}
 80161ce:	4605      	mov	r5, r0
 80161d0:	2900      	cmp	r1, #0
 80161d2:	d045      	beq.n	8016260 <_free_r+0x94>
 80161d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161d8:	1f0c      	subs	r4, r1, #4
 80161da:	2b00      	cmp	r3, #0
 80161dc:	bfb8      	it	lt
 80161de:	18e4      	addlt	r4, r4, r3
 80161e0:	f000 f8cc 	bl	801637c <__malloc_lock>
 80161e4:	4a1f      	ldr	r2, [pc, #124]	; (8016264 <_free_r+0x98>)
 80161e6:	6813      	ldr	r3, [r2, #0]
 80161e8:	4610      	mov	r0, r2
 80161ea:	b933      	cbnz	r3, 80161fa <_free_r+0x2e>
 80161ec:	6063      	str	r3, [r4, #4]
 80161ee:	6014      	str	r4, [r2, #0]
 80161f0:	4628      	mov	r0, r5
 80161f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161f6:	f000 b8c2 	b.w	801637e <__malloc_unlock>
 80161fa:	42a3      	cmp	r3, r4
 80161fc:	d90c      	bls.n	8016218 <_free_r+0x4c>
 80161fe:	6821      	ldr	r1, [r4, #0]
 8016200:	1862      	adds	r2, r4, r1
 8016202:	4293      	cmp	r3, r2
 8016204:	bf04      	itt	eq
 8016206:	681a      	ldreq	r2, [r3, #0]
 8016208:	685b      	ldreq	r3, [r3, #4]
 801620a:	6063      	str	r3, [r4, #4]
 801620c:	bf04      	itt	eq
 801620e:	1852      	addeq	r2, r2, r1
 8016210:	6022      	streq	r2, [r4, #0]
 8016212:	6004      	str	r4, [r0, #0]
 8016214:	e7ec      	b.n	80161f0 <_free_r+0x24>
 8016216:	4613      	mov	r3, r2
 8016218:	685a      	ldr	r2, [r3, #4]
 801621a:	b10a      	cbz	r2, 8016220 <_free_r+0x54>
 801621c:	42a2      	cmp	r2, r4
 801621e:	d9fa      	bls.n	8016216 <_free_r+0x4a>
 8016220:	6819      	ldr	r1, [r3, #0]
 8016222:	1858      	adds	r0, r3, r1
 8016224:	42a0      	cmp	r0, r4
 8016226:	d10b      	bne.n	8016240 <_free_r+0x74>
 8016228:	6820      	ldr	r0, [r4, #0]
 801622a:	4401      	add	r1, r0
 801622c:	1858      	adds	r0, r3, r1
 801622e:	4282      	cmp	r2, r0
 8016230:	6019      	str	r1, [r3, #0]
 8016232:	d1dd      	bne.n	80161f0 <_free_r+0x24>
 8016234:	6810      	ldr	r0, [r2, #0]
 8016236:	6852      	ldr	r2, [r2, #4]
 8016238:	605a      	str	r2, [r3, #4]
 801623a:	4401      	add	r1, r0
 801623c:	6019      	str	r1, [r3, #0]
 801623e:	e7d7      	b.n	80161f0 <_free_r+0x24>
 8016240:	d902      	bls.n	8016248 <_free_r+0x7c>
 8016242:	230c      	movs	r3, #12
 8016244:	602b      	str	r3, [r5, #0]
 8016246:	e7d3      	b.n	80161f0 <_free_r+0x24>
 8016248:	6820      	ldr	r0, [r4, #0]
 801624a:	1821      	adds	r1, r4, r0
 801624c:	428a      	cmp	r2, r1
 801624e:	bf04      	itt	eq
 8016250:	6811      	ldreq	r1, [r2, #0]
 8016252:	6852      	ldreq	r2, [r2, #4]
 8016254:	6062      	str	r2, [r4, #4]
 8016256:	bf04      	itt	eq
 8016258:	1809      	addeq	r1, r1, r0
 801625a:	6021      	streq	r1, [r4, #0]
 801625c:	605c      	str	r4, [r3, #4]
 801625e:	e7c7      	b.n	80161f0 <_free_r+0x24>
 8016260:	bd38      	pop	{r3, r4, r5, pc}
 8016262:	bf00      	nop
 8016264:	20009e24 	.word	0x20009e24

08016268 <_malloc_r>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	1ccd      	adds	r5, r1, #3
 801626c:	f025 0503 	bic.w	r5, r5, #3
 8016270:	3508      	adds	r5, #8
 8016272:	2d0c      	cmp	r5, #12
 8016274:	bf38      	it	cc
 8016276:	250c      	movcc	r5, #12
 8016278:	2d00      	cmp	r5, #0
 801627a:	4606      	mov	r6, r0
 801627c:	db01      	blt.n	8016282 <_malloc_r+0x1a>
 801627e:	42a9      	cmp	r1, r5
 8016280:	d903      	bls.n	801628a <_malloc_r+0x22>
 8016282:	230c      	movs	r3, #12
 8016284:	6033      	str	r3, [r6, #0]
 8016286:	2000      	movs	r0, #0
 8016288:	bd70      	pop	{r4, r5, r6, pc}
 801628a:	f000 f877 	bl	801637c <__malloc_lock>
 801628e:	4a21      	ldr	r2, [pc, #132]	; (8016314 <_malloc_r+0xac>)
 8016290:	6814      	ldr	r4, [r2, #0]
 8016292:	4621      	mov	r1, r4
 8016294:	b991      	cbnz	r1, 80162bc <_malloc_r+0x54>
 8016296:	4c20      	ldr	r4, [pc, #128]	; (8016318 <_malloc_r+0xb0>)
 8016298:	6823      	ldr	r3, [r4, #0]
 801629a:	b91b      	cbnz	r3, 80162a4 <_malloc_r+0x3c>
 801629c:	4630      	mov	r0, r6
 801629e:	f000 f83d 	bl	801631c <_sbrk_r>
 80162a2:	6020      	str	r0, [r4, #0]
 80162a4:	4629      	mov	r1, r5
 80162a6:	4630      	mov	r0, r6
 80162a8:	f000 f838 	bl	801631c <_sbrk_r>
 80162ac:	1c43      	adds	r3, r0, #1
 80162ae:	d124      	bne.n	80162fa <_malloc_r+0x92>
 80162b0:	230c      	movs	r3, #12
 80162b2:	6033      	str	r3, [r6, #0]
 80162b4:	4630      	mov	r0, r6
 80162b6:	f000 f862 	bl	801637e <__malloc_unlock>
 80162ba:	e7e4      	b.n	8016286 <_malloc_r+0x1e>
 80162bc:	680b      	ldr	r3, [r1, #0]
 80162be:	1b5b      	subs	r3, r3, r5
 80162c0:	d418      	bmi.n	80162f4 <_malloc_r+0x8c>
 80162c2:	2b0b      	cmp	r3, #11
 80162c4:	d90f      	bls.n	80162e6 <_malloc_r+0x7e>
 80162c6:	600b      	str	r3, [r1, #0]
 80162c8:	50cd      	str	r5, [r1, r3]
 80162ca:	18cc      	adds	r4, r1, r3
 80162cc:	4630      	mov	r0, r6
 80162ce:	f000 f856 	bl	801637e <__malloc_unlock>
 80162d2:	f104 000b 	add.w	r0, r4, #11
 80162d6:	1d23      	adds	r3, r4, #4
 80162d8:	f020 0007 	bic.w	r0, r0, #7
 80162dc:	1ac3      	subs	r3, r0, r3
 80162de:	d0d3      	beq.n	8016288 <_malloc_r+0x20>
 80162e0:	425a      	negs	r2, r3
 80162e2:	50e2      	str	r2, [r4, r3]
 80162e4:	e7d0      	b.n	8016288 <_malloc_r+0x20>
 80162e6:	428c      	cmp	r4, r1
 80162e8:	684b      	ldr	r3, [r1, #4]
 80162ea:	bf16      	itet	ne
 80162ec:	6063      	strne	r3, [r4, #4]
 80162ee:	6013      	streq	r3, [r2, #0]
 80162f0:	460c      	movne	r4, r1
 80162f2:	e7eb      	b.n	80162cc <_malloc_r+0x64>
 80162f4:	460c      	mov	r4, r1
 80162f6:	6849      	ldr	r1, [r1, #4]
 80162f8:	e7cc      	b.n	8016294 <_malloc_r+0x2c>
 80162fa:	1cc4      	adds	r4, r0, #3
 80162fc:	f024 0403 	bic.w	r4, r4, #3
 8016300:	42a0      	cmp	r0, r4
 8016302:	d005      	beq.n	8016310 <_malloc_r+0xa8>
 8016304:	1a21      	subs	r1, r4, r0
 8016306:	4630      	mov	r0, r6
 8016308:	f000 f808 	bl	801631c <_sbrk_r>
 801630c:	3001      	adds	r0, #1
 801630e:	d0cf      	beq.n	80162b0 <_malloc_r+0x48>
 8016310:	6025      	str	r5, [r4, #0]
 8016312:	e7db      	b.n	80162cc <_malloc_r+0x64>
 8016314:	20009e24 	.word	0x20009e24
 8016318:	20009e28 	.word	0x20009e28

0801631c <_sbrk_r>:
 801631c:	b538      	push	{r3, r4, r5, lr}
 801631e:	4c06      	ldr	r4, [pc, #24]	; (8016338 <_sbrk_r+0x1c>)
 8016320:	2300      	movs	r3, #0
 8016322:	4605      	mov	r5, r0
 8016324:	4608      	mov	r0, r1
 8016326:	6023      	str	r3, [r4, #0]
 8016328:	f7ed fab6 	bl	8003898 <_sbrk>
 801632c:	1c43      	adds	r3, r0, #1
 801632e:	d102      	bne.n	8016336 <_sbrk_r+0x1a>
 8016330:	6823      	ldr	r3, [r4, #0]
 8016332:	b103      	cbz	r3, 8016336 <_sbrk_r+0x1a>
 8016334:	602b      	str	r3, [r5, #0]
 8016336:	bd38      	pop	{r3, r4, r5, pc}
 8016338:	2001c0b0 	.word	0x2001c0b0

0801633c <siprintf>:
 801633c:	b40e      	push	{r1, r2, r3}
 801633e:	b500      	push	{lr}
 8016340:	b09c      	sub	sp, #112	; 0x70
 8016342:	ab1d      	add	r3, sp, #116	; 0x74
 8016344:	9002      	str	r0, [sp, #8]
 8016346:	9006      	str	r0, [sp, #24]
 8016348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801634c:	4809      	ldr	r0, [pc, #36]	; (8016374 <siprintf+0x38>)
 801634e:	9107      	str	r1, [sp, #28]
 8016350:	9104      	str	r1, [sp, #16]
 8016352:	4909      	ldr	r1, [pc, #36]	; (8016378 <siprintf+0x3c>)
 8016354:	f853 2b04 	ldr.w	r2, [r3], #4
 8016358:	9105      	str	r1, [sp, #20]
 801635a:	6800      	ldr	r0, [r0, #0]
 801635c:	9301      	str	r3, [sp, #4]
 801635e:	a902      	add	r1, sp, #8
 8016360:	f000 f868 	bl	8016434 <_svfiprintf_r>
 8016364:	9b02      	ldr	r3, [sp, #8]
 8016366:	2200      	movs	r2, #0
 8016368:	701a      	strb	r2, [r3, #0]
 801636a:	b01c      	add	sp, #112	; 0x70
 801636c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016370:	b003      	add	sp, #12
 8016372:	4770      	bx	lr
 8016374:	20000070 	.word	0x20000070
 8016378:	ffff0208 	.word	0xffff0208

0801637c <__malloc_lock>:
 801637c:	4770      	bx	lr

0801637e <__malloc_unlock>:
 801637e:	4770      	bx	lr

08016380 <__ssputs_r>:
 8016380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016384:	688e      	ldr	r6, [r1, #8]
 8016386:	429e      	cmp	r6, r3
 8016388:	4682      	mov	sl, r0
 801638a:	460c      	mov	r4, r1
 801638c:	4690      	mov	r8, r2
 801638e:	4699      	mov	r9, r3
 8016390:	d837      	bhi.n	8016402 <__ssputs_r+0x82>
 8016392:	898a      	ldrh	r2, [r1, #12]
 8016394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016398:	d031      	beq.n	80163fe <__ssputs_r+0x7e>
 801639a:	6825      	ldr	r5, [r4, #0]
 801639c:	6909      	ldr	r1, [r1, #16]
 801639e:	1a6f      	subs	r7, r5, r1
 80163a0:	6965      	ldr	r5, [r4, #20]
 80163a2:	2302      	movs	r3, #2
 80163a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80163ac:	f109 0301 	add.w	r3, r9, #1
 80163b0:	443b      	add	r3, r7
 80163b2:	429d      	cmp	r5, r3
 80163b4:	bf38      	it	cc
 80163b6:	461d      	movcc	r5, r3
 80163b8:	0553      	lsls	r3, r2, #21
 80163ba:	d530      	bpl.n	801641e <__ssputs_r+0x9e>
 80163bc:	4629      	mov	r1, r5
 80163be:	f7ff ff53 	bl	8016268 <_malloc_r>
 80163c2:	4606      	mov	r6, r0
 80163c4:	b950      	cbnz	r0, 80163dc <__ssputs_r+0x5c>
 80163c6:	230c      	movs	r3, #12
 80163c8:	f8ca 3000 	str.w	r3, [sl]
 80163cc:	89a3      	ldrh	r3, [r4, #12]
 80163ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163d2:	81a3      	strh	r3, [r4, #12]
 80163d4:	f04f 30ff 	mov.w	r0, #4294967295
 80163d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163dc:	463a      	mov	r2, r7
 80163de:	6921      	ldr	r1, [r4, #16]
 80163e0:	f7ff fee0 	bl	80161a4 <memcpy>
 80163e4:	89a3      	ldrh	r3, [r4, #12]
 80163e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80163ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163ee:	81a3      	strh	r3, [r4, #12]
 80163f0:	6126      	str	r6, [r4, #16]
 80163f2:	6165      	str	r5, [r4, #20]
 80163f4:	443e      	add	r6, r7
 80163f6:	1bed      	subs	r5, r5, r7
 80163f8:	6026      	str	r6, [r4, #0]
 80163fa:	60a5      	str	r5, [r4, #8]
 80163fc:	464e      	mov	r6, r9
 80163fe:	454e      	cmp	r6, r9
 8016400:	d900      	bls.n	8016404 <__ssputs_r+0x84>
 8016402:	464e      	mov	r6, r9
 8016404:	4632      	mov	r2, r6
 8016406:	4641      	mov	r1, r8
 8016408:	6820      	ldr	r0, [r4, #0]
 801640a:	f000 fa93 	bl	8016934 <memmove>
 801640e:	68a3      	ldr	r3, [r4, #8]
 8016410:	1b9b      	subs	r3, r3, r6
 8016412:	60a3      	str	r3, [r4, #8]
 8016414:	6823      	ldr	r3, [r4, #0]
 8016416:	441e      	add	r6, r3
 8016418:	6026      	str	r6, [r4, #0]
 801641a:	2000      	movs	r0, #0
 801641c:	e7dc      	b.n	80163d8 <__ssputs_r+0x58>
 801641e:	462a      	mov	r2, r5
 8016420:	f000 faa1 	bl	8016966 <_realloc_r>
 8016424:	4606      	mov	r6, r0
 8016426:	2800      	cmp	r0, #0
 8016428:	d1e2      	bne.n	80163f0 <__ssputs_r+0x70>
 801642a:	6921      	ldr	r1, [r4, #16]
 801642c:	4650      	mov	r0, sl
 801642e:	f7ff fecd 	bl	80161cc <_free_r>
 8016432:	e7c8      	b.n	80163c6 <__ssputs_r+0x46>

08016434 <_svfiprintf_r>:
 8016434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016438:	461d      	mov	r5, r3
 801643a:	898b      	ldrh	r3, [r1, #12]
 801643c:	061f      	lsls	r7, r3, #24
 801643e:	b09d      	sub	sp, #116	; 0x74
 8016440:	4680      	mov	r8, r0
 8016442:	460c      	mov	r4, r1
 8016444:	4616      	mov	r6, r2
 8016446:	d50f      	bpl.n	8016468 <_svfiprintf_r+0x34>
 8016448:	690b      	ldr	r3, [r1, #16]
 801644a:	b96b      	cbnz	r3, 8016468 <_svfiprintf_r+0x34>
 801644c:	2140      	movs	r1, #64	; 0x40
 801644e:	f7ff ff0b 	bl	8016268 <_malloc_r>
 8016452:	6020      	str	r0, [r4, #0]
 8016454:	6120      	str	r0, [r4, #16]
 8016456:	b928      	cbnz	r0, 8016464 <_svfiprintf_r+0x30>
 8016458:	230c      	movs	r3, #12
 801645a:	f8c8 3000 	str.w	r3, [r8]
 801645e:	f04f 30ff 	mov.w	r0, #4294967295
 8016462:	e0c8      	b.n	80165f6 <_svfiprintf_r+0x1c2>
 8016464:	2340      	movs	r3, #64	; 0x40
 8016466:	6163      	str	r3, [r4, #20]
 8016468:	2300      	movs	r3, #0
 801646a:	9309      	str	r3, [sp, #36]	; 0x24
 801646c:	2320      	movs	r3, #32
 801646e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016472:	2330      	movs	r3, #48	; 0x30
 8016474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016478:	9503      	str	r5, [sp, #12]
 801647a:	f04f 0b01 	mov.w	fp, #1
 801647e:	4637      	mov	r7, r6
 8016480:	463d      	mov	r5, r7
 8016482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016486:	b10b      	cbz	r3, 801648c <_svfiprintf_r+0x58>
 8016488:	2b25      	cmp	r3, #37	; 0x25
 801648a:	d13e      	bne.n	801650a <_svfiprintf_r+0xd6>
 801648c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016490:	d00b      	beq.n	80164aa <_svfiprintf_r+0x76>
 8016492:	4653      	mov	r3, sl
 8016494:	4632      	mov	r2, r6
 8016496:	4621      	mov	r1, r4
 8016498:	4640      	mov	r0, r8
 801649a:	f7ff ff71 	bl	8016380 <__ssputs_r>
 801649e:	3001      	adds	r0, #1
 80164a0:	f000 80a4 	beq.w	80165ec <_svfiprintf_r+0x1b8>
 80164a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164a6:	4453      	add	r3, sl
 80164a8:	9309      	str	r3, [sp, #36]	; 0x24
 80164aa:	783b      	ldrb	r3, [r7, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	f000 809d 	beq.w	80165ec <_svfiprintf_r+0x1b8>
 80164b2:	2300      	movs	r3, #0
 80164b4:	f04f 32ff 	mov.w	r2, #4294967295
 80164b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164bc:	9304      	str	r3, [sp, #16]
 80164be:	9307      	str	r3, [sp, #28]
 80164c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164c4:	931a      	str	r3, [sp, #104]	; 0x68
 80164c6:	462f      	mov	r7, r5
 80164c8:	2205      	movs	r2, #5
 80164ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80164ce:	4850      	ldr	r0, [pc, #320]	; (8016610 <_svfiprintf_r+0x1dc>)
 80164d0:	f7e9 fe9e 	bl	8000210 <memchr>
 80164d4:	9b04      	ldr	r3, [sp, #16]
 80164d6:	b9d0      	cbnz	r0, 801650e <_svfiprintf_r+0xda>
 80164d8:	06d9      	lsls	r1, r3, #27
 80164da:	bf44      	itt	mi
 80164dc:	2220      	movmi	r2, #32
 80164de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164e2:	071a      	lsls	r2, r3, #28
 80164e4:	bf44      	itt	mi
 80164e6:	222b      	movmi	r2, #43	; 0x2b
 80164e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164ec:	782a      	ldrb	r2, [r5, #0]
 80164ee:	2a2a      	cmp	r2, #42	; 0x2a
 80164f0:	d015      	beq.n	801651e <_svfiprintf_r+0xea>
 80164f2:	9a07      	ldr	r2, [sp, #28]
 80164f4:	462f      	mov	r7, r5
 80164f6:	2000      	movs	r0, #0
 80164f8:	250a      	movs	r5, #10
 80164fa:	4639      	mov	r1, r7
 80164fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016500:	3b30      	subs	r3, #48	; 0x30
 8016502:	2b09      	cmp	r3, #9
 8016504:	d94d      	bls.n	80165a2 <_svfiprintf_r+0x16e>
 8016506:	b1b8      	cbz	r0, 8016538 <_svfiprintf_r+0x104>
 8016508:	e00f      	b.n	801652a <_svfiprintf_r+0xf6>
 801650a:	462f      	mov	r7, r5
 801650c:	e7b8      	b.n	8016480 <_svfiprintf_r+0x4c>
 801650e:	4a40      	ldr	r2, [pc, #256]	; (8016610 <_svfiprintf_r+0x1dc>)
 8016510:	1a80      	subs	r0, r0, r2
 8016512:	fa0b f000 	lsl.w	r0, fp, r0
 8016516:	4318      	orrs	r0, r3
 8016518:	9004      	str	r0, [sp, #16]
 801651a:	463d      	mov	r5, r7
 801651c:	e7d3      	b.n	80164c6 <_svfiprintf_r+0x92>
 801651e:	9a03      	ldr	r2, [sp, #12]
 8016520:	1d11      	adds	r1, r2, #4
 8016522:	6812      	ldr	r2, [r2, #0]
 8016524:	9103      	str	r1, [sp, #12]
 8016526:	2a00      	cmp	r2, #0
 8016528:	db01      	blt.n	801652e <_svfiprintf_r+0xfa>
 801652a:	9207      	str	r2, [sp, #28]
 801652c:	e004      	b.n	8016538 <_svfiprintf_r+0x104>
 801652e:	4252      	negs	r2, r2
 8016530:	f043 0302 	orr.w	r3, r3, #2
 8016534:	9207      	str	r2, [sp, #28]
 8016536:	9304      	str	r3, [sp, #16]
 8016538:	783b      	ldrb	r3, [r7, #0]
 801653a:	2b2e      	cmp	r3, #46	; 0x2e
 801653c:	d10c      	bne.n	8016558 <_svfiprintf_r+0x124>
 801653e:	787b      	ldrb	r3, [r7, #1]
 8016540:	2b2a      	cmp	r3, #42	; 0x2a
 8016542:	d133      	bne.n	80165ac <_svfiprintf_r+0x178>
 8016544:	9b03      	ldr	r3, [sp, #12]
 8016546:	1d1a      	adds	r2, r3, #4
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	9203      	str	r2, [sp, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	bfb8      	it	lt
 8016550:	f04f 33ff 	movlt.w	r3, #4294967295
 8016554:	3702      	adds	r7, #2
 8016556:	9305      	str	r3, [sp, #20]
 8016558:	4d2e      	ldr	r5, [pc, #184]	; (8016614 <_svfiprintf_r+0x1e0>)
 801655a:	7839      	ldrb	r1, [r7, #0]
 801655c:	2203      	movs	r2, #3
 801655e:	4628      	mov	r0, r5
 8016560:	f7e9 fe56 	bl	8000210 <memchr>
 8016564:	b138      	cbz	r0, 8016576 <_svfiprintf_r+0x142>
 8016566:	2340      	movs	r3, #64	; 0x40
 8016568:	1b40      	subs	r0, r0, r5
 801656a:	fa03 f000 	lsl.w	r0, r3, r0
 801656e:	9b04      	ldr	r3, [sp, #16]
 8016570:	4303      	orrs	r3, r0
 8016572:	3701      	adds	r7, #1
 8016574:	9304      	str	r3, [sp, #16]
 8016576:	7839      	ldrb	r1, [r7, #0]
 8016578:	4827      	ldr	r0, [pc, #156]	; (8016618 <_svfiprintf_r+0x1e4>)
 801657a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801657e:	2206      	movs	r2, #6
 8016580:	1c7e      	adds	r6, r7, #1
 8016582:	f7e9 fe45 	bl	8000210 <memchr>
 8016586:	2800      	cmp	r0, #0
 8016588:	d038      	beq.n	80165fc <_svfiprintf_r+0x1c8>
 801658a:	4b24      	ldr	r3, [pc, #144]	; (801661c <_svfiprintf_r+0x1e8>)
 801658c:	bb13      	cbnz	r3, 80165d4 <_svfiprintf_r+0x1a0>
 801658e:	9b03      	ldr	r3, [sp, #12]
 8016590:	3307      	adds	r3, #7
 8016592:	f023 0307 	bic.w	r3, r3, #7
 8016596:	3308      	adds	r3, #8
 8016598:	9303      	str	r3, [sp, #12]
 801659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801659c:	444b      	add	r3, r9
 801659e:	9309      	str	r3, [sp, #36]	; 0x24
 80165a0:	e76d      	b.n	801647e <_svfiprintf_r+0x4a>
 80165a2:	fb05 3202 	mla	r2, r5, r2, r3
 80165a6:	2001      	movs	r0, #1
 80165a8:	460f      	mov	r7, r1
 80165aa:	e7a6      	b.n	80164fa <_svfiprintf_r+0xc6>
 80165ac:	2300      	movs	r3, #0
 80165ae:	3701      	adds	r7, #1
 80165b0:	9305      	str	r3, [sp, #20]
 80165b2:	4619      	mov	r1, r3
 80165b4:	250a      	movs	r5, #10
 80165b6:	4638      	mov	r0, r7
 80165b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165bc:	3a30      	subs	r2, #48	; 0x30
 80165be:	2a09      	cmp	r2, #9
 80165c0:	d903      	bls.n	80165ca <_svfiprintf_r+0x196>
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d0c8      	beq.n	8016558 <_svfiprintf_r+0x124>
 80165c6:	9105      	str	r1, [sp, #20]
 80165c8:	e7c6      	b.n	8016558 <_svfiprintf_r+0x124>
 80165ca:	fb05 2101 	mla	r1, r5, r1, r2
 80165ce:	2301      	movs	r3, #1
 80165d0:	4607      	mov	r7, r0
 80165d2:	e7f0      	b.n	80165b6 <_svfiprintf_r+0x182>
 80165d4:	ab03      	add	r3, sp, #12
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	4622      	mov	r2, r4
 80165da:	4b11      	ldr	r3, [pc, #68]	; (8016620 <_svfiprintf_r+0x1ec>)
 80165dc:	a904      	add	r1, sp, #16
 80165de:	4640      	mov	r0, r8
 80165e0:	f3af 8000 	nop.w
 80165e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80165e8:	4681      	mov	r9, r0
 80165ea:	d1d6      	bne.n	801659a <_svfiprintf_r+0x166>
 80165ec:	89a3      	ldrh	r3, [r4, #12]
 80165ee:	065b      	lsls	r3, r3, #25
 80165f0:	f53f af35 	bmi.w	801645e <_svfiprintf_r+0x2a>
 80165f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165f6:	b01d      	add	sp, #116	; 0x74
 80165f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165fc:	ab03      	add	r3, sp, #12
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	4622      	mov	r2, r4
 8016602:	4b07      	ldr	r3, [pc, #28]	; (8016620 <_svfiprintf_r+0x1ec>)
 8016604:	a904      	add	r1, sp, #16
 8016606:	4640      	mov	r0, r8
 8016608:	f000 f882 	bl	8016710 <_printf_i>
 801660c:	e7ea      	b.n	80165e4 <_svfiprintf_r+0x1b0>
 801660e:	bf00      	nop
 8016610:	08018a90 	.word	0x08018a90
 8016614:	08018a96 	.word	0x08018a96
 8016618:	08018a9a 	.word	0x08018a9a
 801661c:	00000000 	.word	0x00000000
 8016620:	08016381 	.word	0x08016381

08016624 <_printf_common>:
 8016624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016628:	4691      	mov	r9, r2
 801662a:	461f      	mov	r7, r3
 801662c:	688a      	ldr	r2, [r1, #8]
 801662e:	690b      	ldr	r3, [r1, #16]
 8016630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016634:	4293      	cmp	r3, r2
 8016636:	bfb8      	it	lt
 8016638:	4613      	movlt	r3, r2
 801663a:	f8c9 3000 	str.w	r3, [r9]
 801663e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016642:	4606      	mov	r6, r0
 8016644:	460c      	mov	r4, r1
 8016646:	b112      	cbz	r2, 801664e <_printf_common+0x2a>
 8016648:	3301      	adds	r3, #1
 801664a:	f8c9 3000 	str.w	r3, [r9]
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	0699      	lsls	r1, r3, #26
 8016652:	bf42      	ittt	mi
 8016654:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016658:	3302      	addmi	r3, #2
 801665a:	f8c9 3000 	strmi.w	r3, [r9]
 801665e:	6825      	ldr	r5, [r4, #0]
 8016660:	f015 0506 	ands.w	r5, r5, #6
 8016664:	d107      	bne.n	8016676 <_printf_common+0x52>
 8016666:	f104 0a19 	add.w	sl, r4, #25
 801666a:	68e3      	ldr	r3, [r4, #12]
 801666c:	f8d9 2000 	ldr.w	r2, [r9]
 8016670:	1a9b      	subs	r3, r3, r2
 8016672:	42ab      	cmp	r3, r5
 8016674:	dc28      	bgt.n	80166c8 <_printf_common+0xa4>
 8016676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801667a:	6822      	ldr	r2, [r4, #0]
 801667c:	3300      	adds	r3, #0
 801667e:	bf18      	it	ne
 8016680:	2301      	movne	r3, #1
 8016682:	0692      	lsls	r2, r2, #26
 8016684:	d42d      	bmi.n	80166e2 <_printf_common+0xbe>
 8016686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801668a:	4639      	mov	r1, r7
 801668c:	4630      	mov	r0, r6
 801668e:	47c0      	blx	r8
 8016690:	3001      	adds	r0, #1
 8016692:	d020      	beq.n	80166d6 <_printf_common+0xb2>
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	68e5      	ldr	r5, [r4, #12]
 8016698:	f8d9 2000 	ldr.w	r2, [r9]
 801669c:	f003 0306 	and.w	r3, r3, #6
 80166a0:	2b04      	cmp	r3, #4
 80166a2:	bf08      	it	eq
 80166a4:	1aad      	subeq	r5, r5, r2
 80166a6:	68a3      	ldr	r3, [r4, #8]
 80166a8:	6922      	ldr	r2, [r4, #16]
 80166aa:	bf0c      	ite	eq
 80166ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166b0:	2500      	movne	r5, #0
 80166b2:	4293      	cmp	r3, r2
 80166b4:	bfc4      	itt	gt
 80166b6:	1a9b      	subgt	r3, r3, r2
 80166b8:	18ed      	addgt	r5, r5, r3
 80166ba:	f04f 0900 	mov.w	r9, #0
 80166be:	341a      	adds	r4, #26
 80166c0:	454d      	cmp	r5, r9
 80166c2:	d11a      	bne.n	80166fa <_printf_common+0xd6>
 80166c4:	2000      	movs	r0, #0
 80166c6:	e008      	b.n	80166da <_printf_common+0xb6>
 80166c8:	2301      	movs	r3, #1
 80166ca:	4652      	mov	r2, sl
 80166cc:	4639      	mov	r1, r7
 80166ce:	4630      	mov	r0, r6
 80166d0:	47c0      	blx	r8
 80166d2:	3001      	adds	r0, #1
 80166d4:	d103      	bne.n	80166de <_printf_common+0xba>
 80166d6:	f04f 30ff 	mov.w	r0, #4294967295
 80166da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166de:	3501      	adds	r5, #1
 80166e0:	e7c3      	b.n	801666a <_printf_common+0x46>
 80166e2:	18e1      	adds	r1, r4, r3
 80166e4:	1c5a      	adds	r2, r3, #1
 80166e6:	2030      	movs	r0, #48	; 0x30
 80166e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166ec:	4422      	add	r2, r4
 80166ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166f6:	3302      	adds	r3, #2
 80166f8:	e7c5      	b.n	8016686 <_printf_common+0x62>
 80166fa:	2301      	movs	r3, #1
 80166fc:	4622      	mov	r2, r4
 80166fe:	4639      	mov	r1, r7
 8016700:	4630      	mov	r0, r6
 8016702:	47c0      	blx	r8
 8016704:	3001      	adds	r0, #1
 8016706:	d0e6      	beq.n	80166d6 <_printf_common+0xb2>
 8016708:	f109 0901 	add.w	r9, r9, #1
 801670c:	e7d8      	b.n	80166c0 <_printf_common+0x9c>
	...

08016710 <_printf_i>:
 8016710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016714:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016718:	460c      	mov	r4, r1
 801671a:	7e09      	ldrb	r1, [r1, #24]
 801671c:	b085      	sub	sp, #20
 801671e:	296e      	cmp	r1, #110	; 0x6e
 8016720:	4617      	mov	r7, r2
 8016722:	4606      	mov	r6, r0
 8016724:	4698      	mov	r8, r3
 8016726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016728:	f000 80b3 	beq.w	8016892 <_printf_i+0x182>
 801672c:	d822      	bhi.n	8016774 <_printf_i+0x64>
 801672e:	2963      	cmp	r1, #99	; 0x63
 8016730:	d036      	beq.n	80167a0 <_printf_i+0x90>
 8016732:	d80a      	bhi.n	801674a <_printf_i+0x3a>
 8016734:	2900      	cmp	r1, #0
 8016736:	f000 80b9 	beq.w	80168ac <_printf_i+0x19c>
 801673a:	2958      	cmp	r1, #88	; 0x58
 801673c:	f000 8083 	beq.w	8016846 <_printf_i+0x136>
 8016740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016744:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016748:	e032      	b.n	80167b0 <_printf_i+0xa0>
 801674a:	2964      	cmp	r1, #100	; 0x64
 801674c:	d001      	beq.n	8016752 <_printf_i+0x42>
 801674e:	2969      	cmp	r1, #105	; 0x69
 8016750:	d1f6      	bne.n	8016740 <_printf_i+0x30>
 8016752:	6820      	ldr	r0, [r4, #0]
 8016754:	6813      	ldr	r3, [r2, #0]
 8016756:	0605      	lsls	r5, r0, #24
 8016758:	f103 0104 	add.w	r1, r3, #4
 801675c:	d52a      	bpl.n	80167b4 <_printf_i+0xa4>
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	6011      	str	r1, [r2, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	da03      	bge.n	801676e <_printf_i+0x5e>
 8016766:	222d      	movs	r2, #45	; 0x2d
 8016768:	425b      	negs	r3, r3
 801676a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801676e:	486f      	ldr	r0, [pc, #444]	; (801692c <_printf_i+0x21c>)
 8016770:	220a      	movs	r2, #10
 8016772:	e039      	b.n	80167e8 <_printf_i+0xd8>
 8016774:	2973      	cmp	r1, #115	; 0x73
 8016776:	f000 809d 	beq.w	80168b4 <_printf_i+0x1a4>
 801677a:	d808      	bhi.n	801678e <_printf_i+0x7e>
 801677c:	296f      	cmp	r1, #111	; 0x6f
 801677e:	d020      	beq.n	80167c2 <_printf_i+0xb2>
 8016780:	2970      	cmp	r1, #112	; 0x70
 8016782:	d1dd      	bne.n	8016740 <_printf_i+0x30>
 8016784:	6823      	ldr	r3, [r4, #0]
 8016786:	f043 0320 	orr.w	r3, r3, #32
 801678a:	6023      	str	r3, [r4, #0]
 801678c:	e003      	b.n	8016796 <_printf_i+0x86>
 801678e:	2975      	cmp	r1, #117	; 0x75
 8016790:	d017      	beq.n	80167c2 <_printf_i+0xb2>
 8016792:	2978      	cmp	r1, #120	; 0x78
 8016794:	d1d4      	bne.n	8016740 <_printf_i+0x30>
 8016796:	2378      	movs	r3, #120	; 0x78
 8016798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801679c:	4864      	ldr	r0, [pc, #400]	; (8016930 <_printf_i+0x220>)
 801679e:	e055      	b.n	801684c <_printf_i+0x13c>
 80167a0:	6813      	ldr	r3, [r2, #0]
 80167a2:	1d19      	adds	r1, r3, #4
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	6011      	str	r1, [r2, #0]
 80167a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167b0:	2301      	movs	r3, #1
 80167b2:	e08c      	b.n	80168ce <_printf_i+0x1be>
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	6011      	str	r1, [r2, #0]
 80167b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167bc:	bf18      	it	ne
 80167be:	b21b      	sxthne	r3, r3
 80167c0:	e7cf      	b.n	8016762 <_printf_i+0x52>
 80167c2:	6813      	ldr	r3, [r2, #0]
 80167c4:	6825      	ldr	r5, [r4, #0]
 80167c6:	1d18      	adds	r0, r3, #4
 80167c8:	6010      	str	r0, [r2, #0]
 80167ca:	0628      	lsls	r0, r5, #24
 80167cc:	d501      	bpl.n	80167d2 <_printf_i+0xc2>
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	e002      	b.n	80167d8 <_printf_i+0xc8>
 80167d2:	0668      	lsls	r0, r5, #25
 80167d4:	d5fb      	bpl.n	80167ce <_printf_i+0xbe>
 80167d6:	881b      	ldrh	r3, [r3, #0]
 80167d8:	4854      	ldr	r0, [pc, #336]	; (801692c <_printf_i+0x21c>)
 80167da:	296f      	cmp	r1, #111	; 0x6f
 80167dc:	bf14      	ite	ne
 80167de:	220a      	movne	r2, #10
 80167e0:	2208      	moveq	r2, #8
 80167e2:	2100      	movs	r1, #0
 80167e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167e8:	6865      	ldr	r5, [r4, #4]
 80167ea:	60a5      	str	r5, [r4, #8]
 80167ec:	2d00      	cmp	r5, #0
 80167ee:	f2c0 8095 	blt.w	801691c <_printf_i+0x20c>
 80167f2:	6821      	ldr	r1, [r4, #0]
 80167f4:	f021 0104 	bic.w	r1, r1, #4
 80167f8:	6021      	str	r1, [r4, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d13d      	bne.n	801687a <_printf_i+0x16a>
 80167fe:	2d00      	cmp	r5, #0
 8016800:	f040 808e 	bne.w	8016920 <_printf_i+0x210>
 8016804:	4665      	mov	r5, ip
 8016806:	2a08      	cmp	r2, #8
 8016808:	d10b      	bne.n	8016822 <_printf_i+0x112>
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	07db      	lsls	r3, r3, #31
 801680e:	d508      	bpl.n	8016822 <_printf_i+0x112>
 8016810:	6923      	ldr	r3, [r4, #16]
 8016812:	6862      	ldr	r2, [r4, #4]
 8016814:	429a      	cmp	r2, r3
 8016816:	bfde      	ittt	le
 8016818:	2330      	movle	r3, #48	; 0x30
 801681a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801681e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016822:	ebac 0305 	sub.w	r3, ip, r5
 8016826:	6123      	str	r3, [r4, #16]
 8016828:	f8cd 8000 	str.w	r8, [sp]
 801682c:	463b      	mov	r3, r7
 801682e:	aa03      	add	r2, sp, #12
 8016830:	4621      	mov	r1, r4
 8016832:	4630      	mov	r0, r6
 8016834:	f7ff fef6 	bl	8016624 <_printf_common>
 8016838:	3001      	adds	r0, #1
 801683a:	d14d      	bne.n	80168d8 <_printf_i+0x1c8>
 801683c:	f04f 30ff 	mov.w	r0, #4294967295
 8016840:	b005      	add	sp, #20
 8016842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016846:	4839      	ldr	r0, [pc, #228]	; (801692c <_printf_i+0x21c>)
 8016848:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801684c:	6813      	ldr	r3, [r2, #0]
 801684e:	6821      	ldr	r1, [r4, #0]
 8016850:	1d1d      	adds	r5, r3, #4
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	6015      	str	r5, [r2, #0]
 8016856:	060a      	lsls	r2, r1, #24
 8016858:	d50b      	bpl.n	8016872 <_printf_i+0x162>
 801685a:	07ca      	lsls	r2, r1, #31
 801685c:	bf44      	itt	mi
 801685e:	f041 0120 	orrmi.w	r1, r1, #32
 8016862:	6021      	strmi	r1, [r4, #0]
 8016864:	b91b      	cbnz	r3, 801686e <_printf_i+0x15e>
 8016866:	6822      	ldr	r2, [r4, #0]
 8016868:	f022 0220 	bic.w	r2, r2, #32
 801686c:	6022      	str	r2, [r4, #0]
 801686e:	2210      	movs	r2, #16
 8016870:	e7b7      	b.n	80167e2 <_printf_i+0xd2>
 8016872:	064d      	lsls	r5, r1, #25
 8016874:	bf48      	it	mi
 8016876:	b29b      	uxthmi	r3, r3
 8016878:	e7ef      	b.n	801685a <_printf_i+0x14a>
 801687a:	4665      	mov	r5, ip
 801687c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016880:	fb02 3311 	mls	r3, r2, r1, r3
 8016884:	5cc3      	ldrb	r3, [r0, r3]
 8016886:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801688a:	460b      	mov	r3, r1
 801688c:	2900      	cmp	r1, #0
 801688e:	d1f5      	bne.n	801687c <_printf_i+0x16c>
 8016890:	e7b9      	b.n	8016806 <_printf_i+0xf6>
 8016892:	6813      	ldr	r3, [r2, #0]
 8016894:	6825      	ldr	r5, [r4, #0]
 8016896:	6961      	ldr	r1, [r4, #20]
 8016898:	1d18      	adds	r0, r3, #4
 801689a:	6010      	str	r0, [r2, #0]
 801689c:	0628      	lsls	r0, r5, #24
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	d501      	bpl.n	80168a6 <_printf_i+0x196>
 80168a2:	6019      	str	r1, [r3, #0]
 80168a4:	e002      	b.n	80168ac <_printf_i+0x19c>
 80168a6:	066a      	lsls	r2, r5, #25
 80168a8:	d5fb      	bpl.n	80168a2 <_printf_i+0x192>
 80168aa:	8019      	strh	r1, [r3, #0]
 80168ac:	2300      	movs	r3, #0
 80168ae:	6123      	str	r3, [r4, #16]
 80168b0:	4665      	mov	r5, ip
 80168b2:	e7b9      	b.n	8016828 <_printf_i+0x118>
 80168b4:	6813      	ldr	r3, [r2, #0]
 80168b6:	1d19      	adds	r1, r3, #4
 80168b8:	6011      	str	r1, [r2, #0]
 80168ba:	681d      	ldr	r5, [r3, #0]
 80168bc:	6862      	ldr	r2, [r4, #4]
 80168be:	2100      	movs	r1, #0
 80168c0:	4628      	mov	r0, r5
 80168c2:	f7e9 fca5 	bl	8000210 <memchr>
 80168c6:	b108      	cbz	r0, 80168cc <_printf_i+0x1bc>
 80168c8:	1b40      	subs	r0, r0, r5
 80168ca:	6060      	str	r0, [r4, #4]
 80168cc:	6863      	ldr	r3, [r4, #4]
 80168ce:	6123      	str	r3, [r4, #16]
 80168d0:	2300      	movs	r3, #0
 80168d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168d6:	e7a7      	b.n	8016828 <_printf_i+0x118>
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	462a      	mov	r2, r5
 80168dc:	4639      	mov	r1, r7
 80168de:	4630      	mov	r0, r6
 80168e0:	47c0      	blx	r8
 80168e2:	3001      	adds	r0, #1
 80168e4:	d0aa      	beq.n	801683c <_printf_i+0x12c>
 80168e6:	6823      	ldr	r3, [r4, #0]
 80168e8:	079b      	lsls	r3, r3, #30
 80168ea:	d413      	bmi.n	8016914 <_printf_i+0x204>
 80168ec:	68e0      	ldr	r0, [r4, #12]
 80168ee:	9b03      	ldr	r3, [sp, #12]
 80168f0:	4298      	cmp	r0, r3
 80168f2:	bfb8      	it	lt
 80168f4:	4618      	movlt	r0, r3
 80168f6:	e7a3      	b.n	8016840 <_printf_i+0x130>
 80168f8:	2301      	movs	r3, #1
 80168fa:	464a      	mov	r2, r9
 80168fc:	4639      	mov	r1, r7
 80168fe:	4630      	mov	r0, r6
 8016900:	47c0      	blx	r8
 8016902:	3001      	adds	r0, #1
 8016904:	d09a      	beq.n	801683c <_printf_i+0x12c>
 8016906:	3501      	adds	r5, #1
 8016908:	68e3      	ldr	r3, [r4, #12]
 801690a:	9a03      	ldr	r2, [sp, #12]
 801690c:	1a9b      	subs	r3, r3, r2
 801690e:	42ab      	cmp	r3, r5
 8016910:	dcf2      	bgt.n	80168f8 <_printf_i+0x1e8>
 8016912:	e7eb      	b.n	80168ec <_printf_i+0x1dc>
 8016914:	2500      	movs	r5, #0
 8016916:	f104 0919 	add.w	r9, r4, #25
 801691a:	e7f5      	b.n	8016908 <_printf_i+0x1f8>
 801691c:	2b00      	cmp	r3, #0
 801691e:	d1ac      	bne.n	801687a <_printf_i+0x16a>
 8016920:	7803      	ldrb	r3, [r0, #0]
 8016922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801692a:	e76c      	b.n	8016806 <_printf_i+0xf6>
 801692c:	08018aa1 	.word	0x08018aa1
 8016930:	08018ab2 	.word	0x08018ab2

08016934 <memmove>:
 8016934:	4288      	cmp	r0, r1
 8016936:	b510      	push	{r4, lr}
 8016938:	eb01 0302 	add.w	r3, r1, r2
 801693c:	d807      	bhi.n	801694e <memmove+0x1a>
 801693e:	1e42      	subs	r2, r0, #1
 8016940:	4299      	cmp	r1, r3
 8016942:	d00a      	beq.n	801695a <memmove+0x26>
 8016944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016948:	f802 4f01 	strb.w	r4, [r2, #1]!
 801694c:	e7f8      	b.n	8016940 <memmove+0xc>
 801694e:	4283      	cmp	r3, r0
 8016950:	d9f5      	bls.n	801693e <memmove+0xa>
 8016952:	1881      	adds	r1, r0, r2
 8016954:	1ad2      	subs	r2, r2, r3
 8016956:	42d3      	cmn	r3, r2
 8016958:	d100      	bne.n	801695c <memmove+0x28>
 801695a:	bd10      	pop	{r4, pc}
 801695c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016960:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016964:	e7f7      	b.n	8016956 <memmove+0x22>

08016966 <_realloc_r>:
 8016966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016968:	4607      	mov	r7, r0
 801696a:	4614      	mov	r4, r2
 801696c:	460e      	mov	r6, r1
 801696e:	b921      	cbnz	r1, 801697a <_realloc_r+0x14>
 8016970:	4611      	mov	r1, r2
 8016972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016976:	f7ff bc77 	b.w	8016268 <_malloc_r>
 801697a:	b922      	cbnz	r2, 8016986 <_realloc_r+0x20>
 801697c:	f7ff fc26 	bl	80161cc <_free_r>
 8016980:	4625      	mov	r5, r4
 8016982:	4628      	mov	r0, r5
 8016984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016986:	f000 f814 	bl	80169b2 <_malloc_usable_size_r>
 801698a:	42a0      	cmp	r0, r4
 801698c:	d20f      	bcs.n	80169ae <_realloc_r+0x48>
 801698e:	4621      	mov	r1, r4
 8016990:	4638      	mov	r0, r7
 8016992:	f7ff fc69 	bl	8016268 <_malloc_r>
 8016996:	4605      	mov	r5, r0
 8016998:	2800      	cmp	r0, #0
 801699a:	d0f2      	beq.n	8016982 <_realloc_r+0x1c>
 801699c:	4631      	mov	r1, r6
 801699e:	4622      	mov	r2, r4
 80169a0:	f7ff fc00 	bl	80161a4 <memcpy>
 80169a4:	4631      	mov	r1, r6
 80169a6:	4638      	mov	r0, r7
 80169a8:	f7ff fc10 	bl	80161cc <_free_r>
 80169ac:	e7e9      	b.n	8016982 <_realloc_r+0x1c>
 80169ae:	4635      	mov	r5, r6
 80169b0:	e7e7      	b.n	8016982 <_realloc_r+0x1c>

080169b2 <_malloc_usable_size_r>:
 80169b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b6:	1f18      	subs	r0, r3, #4
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	bfbc      	itt	lt
 80169bc:	580b      	ldrlt	r3, [r1, r0]
 80169be:	18c0      	addlt	r0, r0, r3
 80169c0:	4770      	bx	lr
	...

080169c4 <log10f>:
 80169c4:	b510      	push	{r4, lr}
 80169c6:	ed2d 8b02 	vpush	{d8}
 80169ca:	b08a      	sub	sp, #40	; 0x28
 80169cc:	eeb0 8a40 	vmov.f32	s16, s0
 80169d0:	f000 f86e 	bl	8016ab0 <__ieee754_log10f>
 80169d4:	4b31      	ldr	r3, [pc, #196]	; (8016a9c <log10f+0xd8>)
 80169d6:	f993 4000 	ldrsb.w	r4, [r3]
 80169da:	1c63      	adds	r3, r4, #1
 80169dc:	d059      	beq.n	8016a92 <log10f+0xce>
 80169de:	eeb4 8a48 	vcmp.f32	s16, s16
 80169e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e6:	d654      	bvs.n	8016a92 <log10f+0xce>
 80169e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80169ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f0:	d84f      	bhi.n	8016a92 <log10f+0xce>
 80169f2:	4b2b      	ldr	r3, [pc, #172]	; (8016aa0 <log10f+0xdc>)
 80169f4:	9301      	str	r3, [sp, #4]
 80169f6:	ee18 0a10 	vmov	r0, s16
 80169fa:	2300      	movs	r3, #0
 80169fc:	9308      	str	r3, [sp, #32]
 80169fe:	f7e9 fdbb 	bl	8000578 <__aeabi_f2d>
 8016a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a0a:	b994      	cbnz	r4, 8016a32 <log10f+0x6e>
 8016a0c:	4b25      	ldr	r3, [pc, #148]	; (8016aa4 <log10f+0xe0>)
 8016a0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016a1e:	d025      	beq.n	8016a6c <log10f+0xa8>
 8016a20:	2301      	movs	r3, #1
 8016a22:	2c02      	cmp	r4, #2
 8016a24:	9300      	str	r3, [sp, #0]
 8016a26:	d116      	bne.n	8016a56 <log10f+0x92>
 8016a28:	f7ff fb82 	bl	8016130 <__errno>
 8016a2c:	2321      	movs	r3, #33	; 0x21
 8016a2e:	6003      	str	r3, [r0, #0]
 8016a30:	e016      	b.n	8016a60 <log10f+0x9c>
 8016a32:	4b1d      	ldr	r3, [pc, #116]	; (8016aa8 <log10f+0xe4>)
 8016a34:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a38:	2200      	movs	r2, #0
 8016a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016a42:	d1ed      	bne.n	8016a20 <log10f+0x5c>
 8016a44:	2302      	movs	r3, #2
 8016a46:	429c      	cmp	r4, r3
 8016a48:	9300      	str	r3, [sp, #0]
 8016a4a:	d111      	bne.n	8016a70 <log10f+0xac>
 8016a4c:	f7ff fb70 	bl	8016130 <__errno>
 8016a50:	2322      	movs	r3, #34	; 0x22
 8016a52:	6003      	str	r3, [r0, #0]
 8016a54:	e011      	b.n	8016a7a <log10f+0xb6>
 8016a56:	4668      	mov	r0, sp
 8016a58:	f000 f880 	bl	8016b5c <matherr>
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d0e3      	beq.n	8016a28 <log10f+0x64>
 8016a60:	4812      	ldr	r0, [pc, #72]	; (8016aac <log10f+0xe8>)
 8016a62:	f000 f87d 	bl	8016b60 <nan>
 8016a66:	ed8d 0b06 	vstr	d0, [sp, #24]
 8016a6a:	e006      	b.n	8016a7a <log10f+0xb6>
 8016a6c:	2302      	movs	r3, #2
 8016a6e:	9300      	str	r3, [sp, #0]
 8016a70:	4668      	mov	r0, sp
 8016a72:	f000 f873 	bl	8016b5c <matherr>
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d0e8      	beq.n	8016a4c <log10f+0x88>
 8016a7a:	9b08      	ldr	r3, [sp, #32]
 8016a7c:	b11b      	cbz	r3, 8016a86 <log10f+0xc2>
 8016a7e:	f7ff fb57 	bl	8016130 <__errno>
 8016a82:	9b08      	ldr	r3, [sp, #32]
 8016a84:	6003      	str	r3, [r0, #0]
 8016a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a8a:	f7e9 fdcd 	bl	8000628 <__aeabi_d2f>
 8016a8e:	ee00 0a10 	vmov	s0, r0
 8016a92:	b00a      	add	sp, #40	; 0x28
 8016a94:	ecbd 8b02 	vpop	{d8}
 8016a98:	bd10      	pop	{r4, pc}
 8016a9a:	bf00      	nop
 8016a9c:	200000d4 	.word	0x200000d4
 8016aa0:	08018ac3 	.word	0x08018ac3
 8016aa4:	c7efffff 	.word	0xc7efffff
 8016aa8:	fff00000 	.word	0xfff00000
 8016aac:	08018a95 	.word	0x08018a95

08016ab0 <__ieee754_log10f>:
 8016ab0:	b508      	push	{r3, lr}
 8016ab2:	ee10 2a10 	vmov	r2, s0
 8016ab6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016aba:	ed2d 8b02 	vpush	{d8}
 8016abe:	d108      	bne.n	8016ad2 <__ieee754_log10f+0x22>
 8016ac0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016b44 <__ieee754_log10f+0x94>
 8016ac4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016b48 <__ieee754_log10f+0x98>
 8016ac8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016acc:	ecbd 8b02 	vpop	{d8}
 8016ad0:	bd08      	pop	{r3, pc}
 8016ad2:	2a00      	cmp	r2, #0
 8016ad4:	da02      	bge.n	8016adc <__ieee754_log10f+0x2c>
 8016ad6:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016ada:	e7f3      	b.n	8016ac4 <__ieee754_log10f+0x14>
 8016adc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016ae0:	db02      	blt.n	8016ae8 <__ieee754_log10f+0x38>
 8016ae2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016ae6:	e7f1      	b.n	8016acc <__ieee754_log10f+0x1c>
 8016ae8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016aec:	bfbf      	itttt	lt
 8016aee:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8016b4c <__ieee754_log10f+0x9c>
 8016af2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016af6:	f06f 0118 	mvnlt.w	r1, #24
 8016afa:	ee17 2a90 	vmovlt	r2, s15
 8016afe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016b02:	bfa8      	it	ge
 8016b04:	2100      	movge	r1, #0
 8016b06:	3b7f      	subs	r3, #127	; 0x7f
 8016b08:	440b      	add	r3, r1
 8016b0a:	0fd9      	lsrs	r1, r3, #31
 8016b0c:	440b      	add	r3, r1
 8016b0e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016b12:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8016b16:	ee07 3a90 	vmov	s15, r3
 8016b1a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8016b1e:	ee00 3a10 	vmov	s0, r3
 8016b22:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016b26:	f000 f823 	bl	8016b70 <__ieee754_logf>
 8016b2a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016b50 <__ieee754_log10f+0xa0>
 8016b2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b32:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016b54 <__ieee754_log10f+0xa4>
 8016b36:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016b3a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016b58 <__ieee754_log10f+0xa8>
 8016b3e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016b42:	e7c3      	b.n	8016acc <__ieee754_log10f+0x1c>
 8016b44:	cc000000 	.word	0xcc000000
 8016b48:	00000000 	.word	0x00000000
 8016b4c:	4c000000 	.word	0x4c000000
 8016b50:	3ede5bd9 	.word	0x3ede5bd9
 8016b54:	355427db 	.word	0x355427db
 8016b58:	3e9a2080 	.word	0x3e9a2080

08016b5c <matherr>:
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	4770      	bx	lr

08016b60 <nan>:
 8016b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016b68 <nan+0x8>
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	00000000 	.word	0x00000000
 8016b6c:	7ff80000 	.word	0x7ff80000

08016b70 <__ieee754_logf>:
 8016b70:	ee10 3a10 	vmov	r3, s0
 8016b74:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016b78:	d106      	bne.n	8016b88 <__ieee754_logf+0x18>
 8016b7a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016d10 <__ieee754_logf+0x1a0>
 8016b7e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016d14 <__ieee754_logf+0x1a4>
 8016b82:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016b86:	4770      	bx	lr
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	da02      	bge.n	8016b92 <__ieee754_logf+0x22>
 8016b8c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016b90:	e7f5      	b.n	8016b7e <__ieee754_logf+0xe>
 8016b92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016b96:	db02      	blt.n	8016b9e <__ieee754_logf+0x2e>
 8016b98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016b9c:	4770      	bx	lr
 8016b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016ba2:	bfbf      	itttt	lt
 8016ba4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016d18 <__ieee754_logf+0x1a8>
 8016ba8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016bac:	f06f 0118 	mvnlt.w	r1, #24
 8016bb0:	ee17 3a90 	vmovlt	r3, s15
 8016bb4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016bb8:	bfa8      	it	ge
 8016bba:	2100      	movge	r1, #0
 8016bbc:	3a7f      	subs	r2, #127	; 0x7f
 8016bbe:	440a      	add	r2, r1
 8016bc0:	4956      	ldr	r1, [pc, #344]	; (8016d1c <__ieee754_logf+0x1ac>)
 8016bc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016bc6:	4419      	add	r1, r3
 8016bc8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8016bcc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8016bd0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016bd4:	4319      	orrs	r1, r3
 8016bd6:	ee07 1a90 	vmov	s15, r1
 8016bda:	f103 010f 	add.w	r1, r3, #15
 8016bde:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8016be2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016be6:	290f      	cmp	r1, #15
 8016be8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016bec:	dc31      	bgt.n	8016c52 <__ieee754_logf+0xe2>
 8016bee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf6:	d10f      	bne.n	8016c18 <__ieee754_logf+0xa8>
 8016bf8:	2a00      	cmp	r2, #0
 8016bfa:	f000 8085 	beq.w	8016d08 <__ieee754_logf+0x198>
 8016bfe:	ee07 2a90 	vmov	s15, r2
 8016c02:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8016d20 <__ieee754_logf+0x1b0>
 8016c06:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016d24 <__ieee754_logf+0x1b4>
 8016c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016c12:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016c16:	4770      	bx	lr
 8016c18:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016d28 <__ieee754_logf+0x1b8>
 8016c1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016c20:	eea0 7a67 	vfms.f32	s14, s0, s15
 8016c24:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016c2c:	b912      	cbnz	r2, 8016c34 <__ieee754_logf+0xc4>
 8016c2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016c32:	4770      	bx	lr
 8016c34:	ee07 2a90 	vmov	s15, r2
 8016c38:	eddf 6a39 	vldr	s13, [pc, #228]	; 8016d20 <__ieee754_logf+0x1b0>
 8016c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c40:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016c44:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016c48:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016d24 <__ieee754_logf+0x1b4>
 8016c4c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016c50:	4770      	bx	lr
 8016c52:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016c56:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016c5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016d2c <__ieee754_logf+0x1bc>
 8016c5e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8016d30 <__ieee754_logf+0x1c0>
 8016c62:	4934      	ldr	r1, [pc, #208]	; (8016d34 <__ieee754_logf+0x1c4>)
 8016c64:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016c68:	4419      	add	r1, r3
 8016c6a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016c6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016c72:	430b      	orrs	r3, r1
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	ee07 2a90 	vmov	s15, r2
 8016c7a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016c7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016c82:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016c86:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016d38 <__ieee754_logf+0x1c8>
 8016c8a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016c8e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016d3c <__ieee754_logf+0x1cc>
 8016c92:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016c96:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016d40 <__ieee754_logf+0x1d0>
 8016c9a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016c9e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8016d44 <__ieee754_logf+0x1d4>
 8016ca2:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016ca6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016d48 <__ieee754_logf+0x1d8>
 8016caa:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016cae:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016cb2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016cb6:	dd1c      	ble.n	8016cf2 <__ieee754_logf+0x182>
 8016cb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016cbc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016cc0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016cc8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ccc:	b922      	cbnz	r2, 8016cd8 <__ieee754_logf+0x168>
 8016cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016cd6:	4770      	bx	lr
 8016cd8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8016d20 <__ieee754_logf+0x1b0>
 8016cdc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ce4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016ce8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016d24 <__ieee754_logf+0x1b4>
 8016cec:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016cf0:	4770      	bx	lr
 8016cf2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016cf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cfa:	2a00      	cmp	r2, #0
 8016cfc:	d0e9      	beq.n	8016cd2 <__ieee754_logf+0x162>
 8016cfe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016d20 <__ieee754_logf+0x1b0>
 8016d02:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016d06:	e7ed      	b.n	8016ce4 <__ieee754_logf+0x174>
 8016d08:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016d14 <__ieee754_logf+0x1a4>
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	cc000000 	.word	0xcc000000
 8016d14:	00000000 	.word	0x00000000
 8016d18:	4c000000 	.word	0x4c000000
 8016d1c:	004afb20 	.word	0x004afb20
 8016d20:	3717f7d1 	.word	0x3717f7d1
 8016d24:	3f317180 	.word	0x3f317180
 8016d28:	3eaaaaab 	.word	0x3eaaaaab
 8016d2c:	3e1cd04f 	.word	0x3e1cd04f
 8016d30:	3e178897 	.word	0x3e178897
 8016d34:	ffcf5c30 	.word	0xffcf5c30
 8016d38:	3e638e29 	.word	0x3e638e29
 8016d3c:	3ecccccd 	.word	0x3ecccccd
 8016d40:	3e3a3325 	.word	0x3e3a3325
 8016d44:	3e924925 	.word	0x3e924925
 8016d48:	3f2aaaab 	.word	0x3f2aaaab

08016d4c <_init>:
 8016d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4e:	bf00      	nop
 8016d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d52:	bc08      	pop	{r3}
 8016d54:	469e      	mov	lr, r3
 8016d56:	4770      	bx	lr

08016d58 <_fini>:
 8016d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d5a:	bf00      	nop
 8016d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d5e:	bc08      	pop	{r3}
 8016d60:	469e      	mov	lr, r3
 8016d62:	4770      	bx	lr
